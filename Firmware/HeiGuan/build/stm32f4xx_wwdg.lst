ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_wwdg.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.WWDG_DeInit,"ax",%progbits
  20              		.align	1
  21              		.global	WWDG_DeInit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	WWDG_DeInit:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_wwdg.c"
   1:./Library/stm32f4xx_wwdg.c **** /**
   2:./Library/stm32f4xx_wwdg.c ****   ******************************************************************************
   3:./Library/stm32f4xx_wwdg.c ****   * @file    stm32f4xx_wwdg.c
   4:./Library/stm32f4xx_wwdg.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_wwdg.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_wwdg.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_wwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_wwdg.c ****   *          functionalities of the Window watchdog (WWDG) peripheral:           
   9:./Library/stm32f4xx_wwdg.c ****   *           + Prescaler, Refresh window and Counter configuration
  10:./Library/stm32f4xx_wwdg.c ****   *           + WWDG activation
  11:./Library/stm32f4xx_wwdg.c ****   *           + Interrupts and flags management
  12:./Library/stm32f4xx_wwdg.c ****   *             
  13:./Library/stm32f4xx_wwdg.c ****  @verbatim    
  14:./Library/stm32f4xx_wwdg.c ****  ===============================================================================
  15:./Library/stm32f4xx_wwdg.c ****                            ##### WWDG features #####
  16:./Library/stm32f4xx_wwdg.c ****  ===============================================================================
  17:./Library/stm32f4xx_wwdg.c ****     [..]                                      
  18:./Library/stm32f4xx_wwdg.c ****         Once enabled the WWDG generates a system reset on expiry of a programmed
  19:./Library/stm32f4xx_wwdg.c ****         time period, unless the program refreshes the counter (downcounter) 
  20:./Library/stm32f4xx_wwdg.c ****         before to reach 0x3F value (i.e. a reset is generated when the counter
  21:./Library/stm32f4xx_wwdg.c ****         value rolls over from 0x40 to 0x3F). 
  22:./Library/stm32f4xx_wwdg.c ****         An MCU reset is also generated if the counter value is refreshed
  23:./Library/stm32f4xx_wwdg.c ****         before the counter has reached the refresh window value. This 
  24:./Library/stm32f4xx_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  25:./Library/stm32f4xx_wwdg.c ****               
  26:./Library/stm32f4xx_wwdg.c ****         Once enabled the WWDG cannot be disabled except by a system reset.
  27:./Library/stm32f4xx_wwdg.c ****           
  28:./Library/stm32f4xx_wwdg.c ****         WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  29:./Library/stm32f4xx_wwdg.c ****         reset occurs.
  30:./Library/stm32f4xx_wwdg.c ****              
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 2


  31:./Library/stm32f4xx_wwdg.c ****         The WWDG counter input clock is derived from the APB clock divided 
  32:./Library/stm32f4xx_wwdg.c ****         by a programmable prescaler.
  33:./Library/stm32f4xx_wwdg.c ****                 
  34:./Library/stm32f4xx_wwdg.c ****         WWDG counter clock = PCLK1 / Prescaler
  35:./Library/stm32f4xx_wwdg.c ****         WWDG timeout = (WWDG counter clock) * (counter value)
  36:./Library/stm32f4xx_wwdg.c ****                        
  37:./Library/stm32f4xx_wwdg.c ****         Min-max timeout value @42 MHz(PCLK1): ~97.5 us / ~49.9 ms
  38:./Library/stm32f4xx_wwdg.c ****                              
  39:./Library/stm32f4xx_wwdg.c ****                       ##### How to use this driver #####
  40:./Library/stm32f4xx_wwdg.c ****  ===============================================================================
  41:./Library/stm32f4xx_wwdg.c ****     [..]
  42:./Library/stm32f4xx_wwdg.c ****       (#) Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) function
  43:./Library/stm32f4xx_wwdg.c ****               
  44:./Library/stm32f4xx_wwdg.c ****       (#) Configure the WWDG prescaler using WWDG_SetPrescaler() function
  45:./Library/stm32f4xx_wwdg.c ****                              
  46:./Library/stm32f4xx_wwdg.c ****       (#) Configure the WWDG refresh window using WWDG_SetWindowValue() function
  47:./Library/stm32f4xx_wwdg.c ****               
  48:./Library/stm32f4xx_wwdg.c ****       (#) Set the WWDG counter value and start it using WWDG_Enable() function.
  49:./Library/stm32f4xx_wwdg.c ****           When the WWDG is enabled the counter value should be configured to 
  50:./Library/stm32f4xx_wwdg.c ****           a value greater than 0x40 to prevent generating an immediate reset.     
  51:./Library/stm32f4xx_wwdg.c ****               
  52:./Library/stm32f4xx_wwdg.c ****       (#) Optionally you can enable the Early wakeup interrupt which is 
  53:./Library/stm32f4xx_wwdg.c ****           generated when the counter reach 0x40.
  54:./Library/stm32f4xx_wwdg.c ****           Once enabled this interrupt cannot be disabled except by a system reset.
  55:./Library/stm32f4xx_wwdg.c ****                   
  56:./Library/stm32f4xx_wwdg.c ****       (#) Then the application program must refresh the WWDG counter at regular
  57:./Library/stm32f4xx_wwdg.c ****           intervals during normal operation to prevent an MCU reset, using
  58:./Library/stm32f4xx_wwdg.c ****           WWDG_SetCounter() function. This operation must occur only when
  59:./Library/stm32f4xx_wwdg.c ****           the counter value is lower than the refresh window value, 
  60:./Library/stm32f4xx_wwdg.c ****           programmed using WWDG_SetWindowValue().         
  61:./Library/stm32f4xx_wwdg.c ****   
  62:./Library/stm32f4xx_wwdg.c ****     @endverbatim
  63:./Library/stm32f4xx_wwdg.c ****   ******************************************************************************
  64:./Library/stm32f4xx_wwdg.c ****   * @attention
  65:./Library/stm32f4xx_wwdg.c ****   *
  66:./Library/stm32f4xx_wwdg.c ****   * Copyright (c) 2016 STMicroelectronics.
  67:./Library/stm32f4xx_wwdg.c ****   * All rights reserved.
  68:./Library/stm32f4xx_wwdg.c ****   *
  69:./Library/stm32f4xx_wwdg.c ****   * This software is licensed under terms that can be found in the LICENSE file
  70:./Library/stm32f4xx_wwdg.c ****   * in the root directory of this software component.
  71:./Library/stm32f4xx_wwdg.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  72:./Library/stm32f4xx_wwdg.c ****   *
  73:./Library/stm32f4xx_wwdg.c ****   ******************************************************************************
  74:./Library/stm32f4xx_wwdg.c ****   */
  75:./Library/stm32f4xx_wwdg.c **** 
  76:./Library/stm32f4xx_wwdg.c **** /* Includes ------------------------------------------------------------------*/
  77:./Library/stm32f4xx_wwdg.c **** #include "stm32f4xx_wwdg.h"
  78:./Library/stm32f4xx_wwdg.c **** #include "stm32f4xx_rcc.h"
  79:./Library/stm32f4xx_wwdg.c **** 
  80:./Library/stm32f4xx_wwdg.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  81:./Library/stm32f4xx_wwdg.c ****   * @{
  82:./Library/stm32f4xx_wwdg.c ****   */
  83:./Library/stm32f4xx_wwdg.c **** 
  84:./Library/stm32f4xx_wwdg.c **** /** @defgroup WWDG 
  85:./Library/stm32f4xx_wwdg.c ****   * @brief WWDG driver modules
  86:./Library/stm32f4xx_wwdg.c ****   * @{
  87:./Library/stm32f4xx_wwdg.c ****   */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 3


  88:./Library/stm32f4xx_wwdg.c **** 
  89:./Library/stm32f4xx_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
  90:./Library/stm32f4xx_wwdg.c **** /* Private define ------------------------------------------------------------*/
  91:./Library/stm32f4xx_wwdg.c **** 
  92:./Library/stm32f4xx_wwdg.c **** /* ----------- WWDG registers bit address in the alias region ----------- */
  93:./Library/stm32f4xx_wwdg.c **** #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
  94:./Library/stm32f4xx_wwdg.c **** /* Alias word address of EWI bit */
  95:./Library/stm32f4xx_wwdg.c **** #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
  96:./Library/stm32f4xx_wwdg.c **** #define EWI_BitNumber     0x09
  97:./Library/stm32f4xx_wwdg.c **** #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
  98:./Library/stm32f4xx_wwdg.c **** 
  99:./Library/stm32f4xx_wwdg.c **** /* --------------------- WWDG registers bit mask ------------------------ */
 100:./Library/stm32f4xx_wwdg.c **** /* CFR register bit mask */
 101:./Library/stm32f4xx_wwdg.c **** #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
 102:./Library/stm32f4xx_wwdg.c **** #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
 103:./Library/stm32f4xx_wwdg.c **** #define BIT_MASK          ((uint8_t)0x7F)
 104:./Library/stm32f4xx_wwdg.c **** 
 105:./Library/stm32f4xx_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 106:./Library/stm32f4xx_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 107:./Library/stm32f4xx_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 108:./Library/stm32f4xx_wwdg.c **** /* Private functions ---------------------------------------------------------*/
 109:./Library/stm32f4xx_wwdg.c **** 
 110:./Library/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Private_Functions
 111:./Library/stm32f4xx_wwdg.c ****   * @{
 112:./Library/stm32f4xx_wwdg.c ****   */
 113:./Library/stm32f4xx_wwdg.c **** 
 114:./Library/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
 115:./Library/stm32f4xx_wwdg.c ****  *  @brief   Prescaler, Refresh window and Counter configuration functions 
 116:./Library/stm32f4xx_wwdg.c ****  *
 117:./Library/stm32f4xx_wwdg.c **** @verbatim   
 118:./Library/stm32f4xx_wwdg.c ****  ===============================================================================
 119:./Library/stm32f4xx_wwdg.c ****     ##### Prescaler, Refresh window and Counter configuration functions #####
 120:./Library/stm32f4xx_wwdg.c ****  ===============================================================================  
 121:./Library/stm32f4xx_wwdg.c **** 
 122:./Library/stm32f4xx_wwdg.c **** @endverbatim
 123:./Library/stm32f4xx_wwdg.c ****   * @{
 124:./Library/stm32f4xx_wwdg.c ****   */
 125:./Library/stm32f4xx_wwdg.c **** 
 126:./Library/stm32f4xx_wwdg.c **** /**
 127:./Library/stm32f4xx_wwdg.c ****   * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
 128:./Library/stm32f4xx_wwdg.c ****   * @param  None
 129:./Library/stm32f4xx_wwdg.c ****   * @retval None
 130:./Library/stm32f4xx_wwdg.c ****   */
 131:./Library/stm32f4xx_wwdg.c **** void WWDG_DeInit(void)
 132:./Library/stm32f4xx_wwdg.c **** {
  29              		.loc 1 132 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 4


 133:./Library/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  41              		.loc 1 133 3
  42 0004 0121     		movs	r1, #1
  43 0006 4FF40060 		mov	r0, #2048
  44 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 134:./Library/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  45              		.loc 1 134 3
  46 000e 0021     		movs	r1, #0
  47 0010 4FF40060 		mov	r0, #2048
  48 0014 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 135:./Library/stm32f4xx_wwdg.c **** }
  49              		.loc 1 135 1
  50 0018 00BF     		nop
  51 001a 80BD     		pop	{r7, pc}
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.section	.text.WWDG_SetPrescaler,"ax",%progbits
  56              		.align	1
  57              		.global	WWDG_SetPrescaler
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  62              	WWDG_SetPrescaler:
  63              	.LFB124:
 136:./Library/stm32f4xx_wwdg.c **** 
 137:./Library/stm32f4xx_wwdg.c **** /**
 138:./Library/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG Prescaler.
 139:./Library/stm32f4xx_wwdg.c ****   * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
 140:./Library/stm32f4xx_wwdg.c ****   *   This parameter can be one of the following values:
 141:./Library/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
 142:./Library/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
 143:./Library/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
 144:./Library/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
 145:./Library/stm32f4xx_wwdg.c ****   * @retval None
 146:./Library/stm32f4xx_wwdg.c ****   */
 147:./Library/stm32f4xx_wwdg.c **** void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
 148:./Library/stm32f4xx_wwdg.c **** {
  64              		.loc 1 148 1
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 16
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69 0000 80B4     		push	{r7}
  70              	.LCFI2:
  71              		.cfi_def_cfa_offset 4
  72              		.cfi_offset 7, -4
  73 0002 85B0     		sub	sp, sp, #20
  74              	.LCFI3:
  75              		.cfi_def_cfa_offset 24
  76 0004 00AF     		add	r7, sp, #0
  77              	.LCFI4:
  78              		.cfi_def_cfa_register 7
  79 0006 7860     		str	r0, [r7, #4]
 149:./Library/stm32f4xx_wwdg.c ****   uint32_t tmpreg = 0;
  80              		.loc 1 149 12
  81 0008 0023     		movs	r3, #0
  82 000a FB60     		str	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 5


 150:./Library/stm32f4xx_wwdg.c ****   /* Check the parameters */
 151:./Library/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
 152:./Library/stm32f4xx_wwdg.c ****   /* Clear WDGTB[1:0] bits */
 153:./Library/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
  83              		.loc 1 153 16
  84 000c 084B     		ldr	r3, .L3
  85 000e 5B68     		ldr	r3, [r3, #4]
  86              		.loc 1 153 10
  87 0010 23F4C073 		bic	r3, r3, #384
  88 0014 FB60     		str	r3, [r7, #12]
 154:./Library/stm32f4xx_wwdg.c ****   /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
 155:./Library/stm32f4xx_wwdg.c ****   tmpreg |= WWDG_Prescaler;
  89              		.loc 1 155 10
  90 0016 FA68     		ldr	r2, [r7, #12]
  91 0018 7B68     		ldr	r3, [r7, #4]
  92 001a 1343     		orrs	r3, r3, r2
  93 001c FB60     		str	r3, [r7, #12]
 156:./Library/stm32f4xx_wwdg.c ****   /* Store the new value */
 157:./Library/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
  94              		.loc 1 157 7
  95 001e 044A     		ldr	r2, .L3
  96              		.loc 1 157 13
  97 0020 FB68     		ldr	r3, [r7, #12]
  98 0022 5360     		str	r3, [r2, #4]
 158:./Library/stm32f4xx_wwdg.c **** }
  99              		.loc 1 158 1
 100 0024 00BF     		nop
 101 0026 1437     		adds	r7, r7, #20
 102              	.LCFI5:
 103              		.cfi_def_cfa_offset 4
 104 0028 BD46     		mov	sp, r7
 105              	.LCFI6:
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 002a 5DF8047B 		ldr	r7, [sp], #4
 109              	.LCFI7:
 110              		.cfi_restore 7
 111              		.cfi_def_cfa_offset 0
 112 002e 7047     		bx	lr
 113              	.L4:
 114              		.align	2
 115              	.L3:
 116 0030 002C0040 		.word	1073753088
 117              		.cfi_endproc
 118              	.LFE124:
 120              		.section	.text.WWDG_SetWindowValue,"ax",%progbits
 121              		.align	1
 122              		.global	WWDG_SetWindowValue
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 127              	WWDG_SetWindowValue:
 128              	.LFB125:
 159:./Library/stm32f4xx_wwdg.c **** 
 160:./Library/stm32f4xx_wwdg.c **** /**
 161:./Library/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG window value.
 162:./Library/stm32f4xx_wwdg.c ****   * @param  WindowValue: specifies the window value to be compared to the downcounter.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 6


 163:./Library/stm32f4xx_wwdg.c ****   *   This parameter value must be lower than 0x80.
 164:./Library/stm32f4xx_wwdg.c ****   * @retval None
 165:./Library/stm32f4xx_wwdg.c ****   */
 166:./Library/stm32f4xx_wwdg.c **** void WWDG_SetWindowValue(uint8_t WindowValue)
 167:./Library/stm32f4xx_wwdg.c **** {
 129              		.loc 1 167 1
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 16
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 80B4     		push	{r7}
 135              	.LCFI8:
 136              		.cfi_def_cfa_offset 4
 137              		.cfi_offset 7, -4
 138 0002 85B0     		sub	sp, sp, #20
 139              	.LCFI9:
 140              		.cfi_def_cfa_offset 24
 141 0004 00AF     		add	r7, sp, #0
 142              	.LCFI10:
 143              		.cfi_def_cfa_register 7
 144 0006 0346     		mov	r3, r0
 145 0008 FB71     		strb	r3, [r7, #7]
 168:./Library/stm32f4xx_wwdg.c ****   __IO uint32_t tmpreg = 0;
 146              		.loc 1 168 17
 147 000a 0023     		movs	r3, #0
 148 000c FB60     		str	r3, [r7, #12]
 169:./Library/stm32f4xx_wwdg.c **** 
 170:./Library/stm32f4xx_wwdg.c ****   /* Check the parameters */
 171:./Library/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
 172:./Library/stm32f4xx_wwdg.c ****   /* Clear W[6:0] bits */
 173:./Library/stm32f4xx_wwdg.c **** 
 174:./Library/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_W_MASK;
 149              		.loc 1 174 16
 150 000e 0A4B     		ldr	r3, .L6
 151 0010 5B68     		ldr	r3, [r3, #4]
 152              		.loc 1 174 22
 153 0012 23F07F03 		bic	r3, r3, #127
 154              		.loc 1 174 10
 155 0016 FB60     		str	r3, [r7, #12]
 175:./Library/stm32f4xx_wwdg.c **** 
 176:./Library/stm32f4xx_wwdg.c ****   /* Set W[6:0] bits according to WindowValue value */
 177:./Library/stm32f4xx_wwdg.c ****   tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 156              		.loc 1 177 25
 157 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 158 001a 03F07F02 		and	r2, r3, #127
 159              		.loc 1 177 10
 160 001e FB68     		ldr	r3, [r7, #12]
 161 0020 1343     		orrs	r3, r3, r2
 162 0022 FB60     		str	r3, [r7, #12]
 178:./Library/stm32f4xx_wwdg.c **** 
 179:./Library/stm32f4xx_wwdg.c ****   /* Store the new value */
 180:./Library/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
 163              		.loc 1 180 7
 164 0024 044A     		ldr	r2, .L6
 165              		.loc 1 180 13
 166 0026 FB68     		ldr	r3, [r7, #12]
 167 0028 5360     		str	r3, [r2, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 7


 181:./Library/stm32f4xx_wwdg.c **** }
 168              		.loc 1 181 1
 169 002a 00BF     		nop
 170 002c 1437     		adds	r7, r7, #20
 171              	.LCFI11:
 172              		.cfi_def_cfa_offset 4
 173 002e BD46     		mov	sp, r7
 174              	.LCFI12:
 175              		.cfi_def_cfa_register 13
 176              		@ sp needed
 177 0030 5DF8047B 		ldr	r7, [sp], #4
 178              	.LCFI13:
 179              		.cfi_restore 7
 180              		.cfi_def_cfa_offset 0
 181 0034 7047     		bx	lr
 182              	.L7:
 183 0036 00BF     		.align	2
 184              	.L6:
 185 0038 002C0040 		.word	1073753088
 186              		.cfi_endproc
 187              	.LFE125:
 189              		.section	.text.WWDG_EnableIT,"ax",%progbits
 190              		.align	1
 191              		.global	WWDG_EnableIT
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 196              	WWDG_EnableIT:
 197              	.LFB126:
 182:./Library/stm32f4xx_wwdg.c **** 
 183:./Library/stm32f4xx_wwdg.c **** /**
 184:./Library/stm32f4xx_wwdg.c ****   * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
 185:./Library/stm32f4xx_wwdg.c ****   * @note   Once enabled this interrupt cannot be disabled except by a system reset.
 186:./Library/stm32f4xx_wwdg.c ****   * @param  None
 187:./Library/stm32f4xx_wwdg.c ****   * @retval None
 188:./Library/stm32f4xx_wwdg.c ****   */
 189:./Library/stm32f4xx_wwdg.c **** void WWDG_EnableIT(void)
 190:./Library/stm32f4xx_wwdg.c **** {
 198              		.loc 1 190 1
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 203 0000 80B4     		push	{r7}
 204              	.LCFI14:
 205              		.cfi_def_cfa_offset 4
 206              		.cfi_offset 7, -4
 207 0002 00AF     		add	r7, sp, #0
 208              	.LCFI15:
 209              		.cfi_def_cfa_register 7
 191:./Library/stm32f4xx_wwdg.c ****   *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 210              		.loc 1 191 3
 211 0004 034B     		ldr	r3, .L9
 212              		.loc 1 191 33
 213 0006 0122     		movs	r2, #1
 214 0008 1A60     		str	r2, [r3]
 192:./Library/stm32f4xx_wwdg.c **** }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 8


 215              		.loc 1 192 1
 216 000a 00BF     		nop
 217 000c BD46     		mov	sp, r7
 218              	.LCFI16:
 219              		.cfi_def_cfa_register 13
 220              		@ sp needed
 221 000e 5DF8047B 		ldr	r7, [sp], #4
 222              	.LCFI17:
 223              		.cfi_restore 7
 224              		.cfi_def_cfa_offset 0
 225 0012 7047     		bx	lr
 226              	.L10:
 227              		.align	2
 228              	.L9:
 229 0014 A4800542 		.word	1107656868
 230              		.cfi_endproc
 231              	.LFE126:
 233              		.section	.text.WWDG_SetCounter,"ax",%progbits
 234              		.align	1
 235              		.global	WWDG_SetCounter
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 240              	WWDG_SetCounter:
 241              	.LFB127:
 193:./Library/stm32f4xx_wwdg.c **** 
 194:./Library/stm32f4xx_wwdg.c **** /**
 195:./Library/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG counter value.
 196:./Library/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 197:./Library/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 198:./Library/stm32f4xx_wwdg.c ****   *   an immediate reset) 
 199:./Library/stm32f4xx_wwdg.c ****   * @retval None
 200:./Library/stm32f4xx_wwdg.c ****   */
 201:./Library/stm32f4xx_wwdg.c **** void WWDG_SetCounter(uint8_t Counter)
 202:./Library/stm32f4xx_wwdg.c **** {
 242              		.loc 1 202 1
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 8
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 247 0000 80B4     		push	{r7}
 248              	.LCFI18:
 249              		.cfi_def_cfa_offset 4
 250              		.cfi_offset 7, -4
 251 0002 83B0     		sub	sp, sp, #12
 252              	.LCFI19:
 253              		.cfi_def_cfa_offset 16
 254 0004 00AF     		add	r7, sp, #0
 255              	.LCFI20:
 256              		.cfi_def_cfa_register 7
 257 0006 0346     		mov	r3, r0
 258 0008 FB71     		strb	r3, [r7, #7]
 203:./Library/stm32f4xx_wwdg.c ****   /* Check the parameters */
 204:./Library/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 205:./Library/stm32f4xx_wwdg.c ****   /* Write to T[6:0] bits to configure the counter value, no need to do
 206:./Library/stm32f4xx_wwdg.c ****      a read-modify-write; writing a 0 to WDGA bit does nothing */
 207:./Library/stm32f4xx_wwdg.c ****   WWDG->CR = Counter & BIT_MASK;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 9


 259              		.loc 1 207 22
 260 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 261              		.loc 1 207 7
 262 000c 044A     		ldr	r2, .L12
 263              		.loc 1 207 22
 264 000e 03F07F03 		and	r3, r3, #127
 265              		.loc 1 207 12
 266 0012 1360     		str	r3, [r2]
 208:./Library/stm32f4xx_wwdg.c **** }
 267              		.loc 1 208 1
 268 0014 00BF     		nop
 269 0016 0C37     		adds	r7, r7, #12
 270              	.LCFI21:
 271              		.cfi_def_cfa_offset 4
 272 0018 BD46     		mov	sp, r7
 273              	.LCFI22:
 274              		.cfi_def_cfa_register 13
 275              		@ sp needed
 276 001a 5DF8047B 		ldr	r7, [sp], #4
 277              	.LCFI23:
 278              		.cfi_restore 7
 279              		.cfi_def_cfa_offset 0
 280 001e 7047     		bx	lr
 281              	.L13:
 282              		.align	2
 283              	.L12:
 284 0020 002C0040 		.word	1073753088
 285              		.cfi_endproc
 286              	.LFE127:
 288              		.section	.text.WWDG_Enable,"ax",%progbits
 289              		.align	1
 290              		.global	WWDG_Enable
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 295              	WWDG_Enable:
 296              	.LFB128:
 209:./Library/stm32f4xx_wwdg.c **** /**
 210:./Library/stm32f4xx_wwdg.c ****   * @}
 211:./Library/stm32f4xx_wwdg.c ****   */
 212:./Library/stm32f4xx_wwdg.c **** 
 213:./Library/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group2 WWDG activation functions
 214:./Library/stm32f4xx_wwdg.c ****  *  @brief   WWDG activation functions 
 215:./Library/stm32f4xx_wwdg.c ****  *
 216:./Library/stm32f4xx_wwdg.c **** @verbatim   
 217:./Library/stm32f4xx_wwdg.c ****  ===============================================================================
 218:./Library/stm32f4xx_wwdg.c ****                     ##### WWDG activation function #####
 219:./Library/stm32f4xx_wwdg.c ****  ===============================================================================  
 220:./Library/stm32f4xx_wwdg.c **** 
 221:./Library/stm32f4xx_wwdg.c **** @endverbatim
 222:./Library/stm32f4xx_wwdg.c ****   * @{
 223:./Library/stm32f4xx_wwdg.c ****   */
 224:./Library/stm32f4xx_wwdg.c **** 
 225:./Library/stm32f4xx_wwdg.c **** /**
 226:./Library/stm32f4xx_wwdg.c ****   * @brief  Enables WWDG and load the counter value.                  
 227:./Library/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 228:./Library/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 10


 229:./Library/stm32f4xx_wwdg.c ****   *   an immediate reset)
 230:./Library/stm32f4xx_wwdg.c ****   * @retval None
 231:./Library/stm32f4xx_wwdg.c ****   */
 232:./Library/stm32f4xx_wwdg.c **** void WWDG_Enable(uint8_t Counter)
 233:./Library/stm32f4xx_wwdg.c **** {
 297              		.loc 1 233 1
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 0000 80B4     		push	{r7}
 303              	.LCFI24:
 304              		.cfi_def_cfa_offset 4
 305              		.cfi_offset 7, -4
 306 0002 83B0     		sub	sp, sp, #12
 307              	.LCFI25:
 308              		.cfi_def_cfa_offset 16
 309 0004 00AF     		add	r7, sp, #0
 310              	.LCFI26:
 311              		.cfi_def_cfa_register 7
 312 0006 0346     		mov	r3, r0
 313 0008 FB71     		strb	r3, [r7, #7]
 234:./Library/stm32f4xx_wwdg.c ****   /* Check the parameters */
 235:./Library/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 236:./Library/stm32f4xx_wwdg.c ****   WWDG->CR = WWDG_CR_WDGA | Counter;
 314              		.loc 1 236 27
 315 000a FB79     		ldrb	r3, [r7, #7]
 316 000c 63F07F03 		orn	r3, r3, #127
 317 0010 DAB2     		uxtb	r2, r3
 318              		.loc 1 236 7
 319 0012 044B     		ldr	r3, .L15
 320              		.loc 1 236 12
 321 0014 1A60     		str	r2, [r3]
 237:./Library/stm32f4xx_wwdg.c **** }
 322              		.loc 1 237 1
 323 0016 00BF     		nop
 324 0018 0C37     		adds	r7, r7, #12
 325              	.LCFI27:
 326              		.cfi_def_cfa_offset 4
 327 001a BD46     		mov	sp, r7
 328              	.LCFI28:
 329              		.cfi_def_cfa_register 13
 330              		@ sp needed
 331 001c 5DF8047B 		ldr	r7, [sp], #4
 332              	.LCFI29:
 333              		.cfi_restore 7
 334              		.cfi_def_cfa_offset 0
 335 0020 7047     		bx	lr
 336              	.L16:
 337 0022 00BF     		.align	2
 338              	.L15:
 339 0024 002C0040 		.word	1073753088
 340              		.cfi_endproc
 341              	.LFE128:
 343              		.section	.text.WWDG_GetFlagStatus,"ax",%progbits
 344              		.align	1
 345              		.global	WWDG_GetFlagStatus
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 11


 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 350              	WWDG_GetFlagStatus:
 351              	.LFB129:
 238:./Library/stm32f4xx_wwdg.c **** /**
 239:./Library/stm32f4xx_wwdg.c ****   * @}
 240:./Library/stm32f4xx_wwdg.c ****   */
 241:./Library/stm32f4xx_wwdg.c **** 
 242:./Library/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group3 Interrupts and flags management functions
 243:./Library/stm32f4xx_wwdg.c ****  *  @brief   Interrupts and flags management functions 
 244:./Library/stm32f4xx_wwdg.c ****  *
 245:./Library/stm32f4xx_wwdg.c **** @verbatim   
 246:./Library/stm32f4xx_wwdg.c ****  ===============================================================================
 247:./Library/stm32f4xx_wwdg.c ****             ##### Interrupts and flags management functions #####
 248:./Library/stm32f4xx_wwdg.c ****  ===============================================================================  
 249:./Library/stm32f4xx_wwdg.c **** 
 250:./Library/stm32f4xx_wwdg.c **** @endverbatim
 251:./Library/stm32f4xx_wwdg.c ****   * @{
 252:./Library/stm32f4xx_wwdg.c ****   */
 253:./Library/stm32f4xx_wwdg.c **** 
 254:./Library/stm32f4xx_wwdg.c **** /**
 255:./Library/stm32f4xx_wwdg.c ****   * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
 256:./Library/stm32f4xx_wwdg.c ****   * @param  None
 257:./Library/stm32f4xx_wwdg.c ****   * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
 258:./Library/stm32f4xx_wwdg.c ****   */
 259:./Library/stm32f4xx_wwdg.c **** FlagStatus WWDG_GetFlagStatus(void)
 260:./Library/stm32f4xx_wwdg.c **** {
 352              		.loc 1 260 1
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 8
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 357 0000 80B4     		push	{r7}
 358              	.LCFI30:
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 7, -4
 361 0002 83B0     		sub	sp, sp, #12
 362              	.LCFI31:
 363              		.cfi_def_cfa_offset 16
 364 0004 00AF     		add	r7, sp, #0
 365              	.LCFI32:
 366              		.cfi_def_cfa_register 7
 261:./Library/stm32f4xx_wwdg.c ****   FlagStatus bitstatus = RESET;
 367              		.loc 1 261 14
 368 0006 0023     		movs	r3, #0
 369 0008 FB71     		strb	r3, [r7, #7]
 262:./Library/stm32f4xx_wwdg.c ****     
 263:./Library/stm32f4xx_wwdg.c ****   if ((WWDG->SR) != (uint32_t)RESET)
 370              		.loc 1 263 12
 371 000a 084B     		ldr	r3, .L21
 372 000c 9B68     		ldr	r3, [r3, #8]
 373              		.loc 1 263 6
 374 000e 002B     		cmp	r3, #0
 375 0010 02D0     		beq	.L18
 264:./Library/stm32f4xx_wwdg.c ****   {
 265:./Library/stm32f4xx_wwdg.c ****     bitstatus = SET;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 12


 376              		.loc 1 265 15
 377 0012 0123     		movs	r3, #1
 378 0014 FB71     		strb	r3, [r7, #7]
 379 0016 01E0     		b	.L19
 380              	.L18:
 266:./Library/stm32f4xx_wwdg.c ****   }
 267:./Library/stm32f4xx_wwdg.c ****   else
 268:./Library/stm32f4xx_wwdg.c ****   {
 269:./Library/stm32f4xx_wwdg.c ****     bitstatus = RESET;
 381              		.loc 1 269 15
 382 0018 0023     		movs	r3, #0
 383 001a FB71     		strb	r3, [r7, #7]
 384              	.L19:
 270:./Library/stm32f4xx_wwdg.c ****   }
 271:./Library/stm32f4xx_wwdg.c ****   return bitstatus;
 385              		.loc 1 271 10
 386 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 272:./Library/stm32f4xx_wwdg.c **** }
 387              		.loc 1 272 1
 388 001e 1846     		mov	r0, r3
 389 0020 0C37     		adds	r7, r7, #12
 390              	.LCFI33:
 391              		.cfi_def_cfa_offset 4
 392 0022 BD46     		mov	sp, r7
 393              	.LCFI34:
 394              		.cfi_def_cfa_register 13
 395              		@ sp needed
 396 0024 5DF8047B 		ldr	r7, [sp], #4
 397              	.LCFI35:
 398              		.cfi_restore 7
 399              		.cfi_def_cfa_offset 0
 400 0028 7047     		bx	lr
 401              	.L22:
 402 002a 00BF     		.align	2
 403              	.L21:
 404 002c 002C0040 		.word	1073753088
 405              		.cfi_endproc
 406              	.LFE129:
 408              		.section	.text.WWDG_ClearFlag,"ax",%progbits
 409              		.align	1
 410              		.global	WWDG_ClearFlag
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 415              	WWDG_ClearFlag:
 416              	.LFB130:
 273:./Library/stm32f4xx_wwdg.c **** 
 274:./Library/stm32f4xx_wwdg.c **** /**
 275:./Library/stm32f4xx_wwdg.c ****   * @brief  Clears Early Wakeup interrupt flag.
 276:./Library/stm32f4xx_wwdg.c ****   * @param  None
 277:./Library/stm32f4xx_wwdg.c ****   * @retval None
 278:./Library/stm32f4xx_wwdg.c ****   */
 279:./Library/stm32f4xx_wwdg.c **** void WWDG_ClearFlag(void)
 280:./Library/stm32f4xx_wwdg.c **** {
 417              		.loc 1 280 1
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 13


 420              		@ frame_needed = 1, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422 0000 80B4     		push	{r7}
 423              	.LCFI36:
 424              		.cfi_def_cfa_offset 4
 425              		.cfi_offset 7, -4
 426 0002 00AF     		add	r7, sp, #0
 427              	.LCFI37:
 428              		.cfi_def_cfa_register 7
 281:./Library/stm32f4xx_wwdg.c ****   WWDG->SR = (uint32_t)RESET;
 429              		.loc 1 281 7
 430 0004 034B     		ldr	r3, .L24
 431              		.loc 1 281 12
 432 0006 0022     		movs	r2, #0
 433 0008 9A60     		str	r2, [r3, #8]
 282:./Library/stm32f4xx_wwdg.c **** }
 434              		.loc 1 282 1
 435 000a 00BF     		nop
 436 000c BD46     		mov	sp, r7
 437              	.LCFI38:
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 000e 5DF8047B 		ldr	r7, [sp], #4
 441              	.LCFI39:
 442              		.cfi_restore 7
 443              		.cfi_def_cfa_offset 0
 444 0012 7047     		bx	lr
 445              	.L25:
 446              		.align	2
 447              	.L24:
 448 0014 002C0040 		.word	1073753088
 449              		.cfi_endproc
 450              	.LFE130:
 452              		.text
 453              	.Letext0:
 454              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 455              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 456              		.file 4 "./CORE/stm32f4xx.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_wwdg.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:20     .text.WWDG_DeInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:26     .text.WWDG_DeInit:0000000000000000 WWDG_DeInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:56     .text.WWDG_SetPrescaler:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:62     .text.WWDG_SetPrescaler:0000000000000000 WWDG_SetPrescaler
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:116    .text.WWDG_SetPrescaler:0000000000000030 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:121    .text.WWDG_SetWindowValue:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:127    .text.WWDG_SetWindowValue:0000000000000000 WWDG_SetWindowValue
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:185    .text.WWDG_SetWindowValue:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:190    .text.WWDG_EnableIT:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:196    .text.WWDG_EnableIT:0000000000000000 WWDG_EnableIT
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:229    .text.WWDG_EnableIT:0000000000000014 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:234    .text.WWDG_SetCounter:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:240    .text.WWDG_SetCounter:0000000000000000 WWDG_SetCounter
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:284    .text.WWDG_SetCounter:0000000000000020 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:289    .text.WWDG_Enable:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:295    .text.WWDG_Enable:0000000000000000 WWDG_Enable
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:339    .text.WWDG_Enable:0000000000000024 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:344    .text.WWDG_GetFlagStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:350    .text.WWDG_GetFlagStatus:0000000000000000 WWDG_GetFlagStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:404    .text.WWDG_GetFlagStatus:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:409    .text.WWDG_ClearFlag:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:415    .text.WWDG_ClearFlag:0000000000000000 WWDG_ClearFlag
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccecpgki.s:448    .text.WWDG_ClearFlag:0000000000000014 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
