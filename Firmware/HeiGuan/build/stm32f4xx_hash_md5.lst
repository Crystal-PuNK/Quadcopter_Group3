ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_hash_md5.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HASH_MD5,"ax",%progbits
  20              		.align	1
  21              		.global	HASH_MD5
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	HASH_MD5:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_hash_md5.c"
   1:./Library/stm32f4xx_hash_md5.c **** /**
   2:./Library/stm32f4xx_hash_md5.c ****   ******************************************************************************
   3:./Library/stm32f4xx_hash_md5.c ****   * @file    stm32f4xx_hash_md5.c
   4:./Library/stm32f4xx_hash_md5.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_hash_md5.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_hash_md5.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_hash_md5.c ****   * @brief   This file provides high level functions to compute the HASH MD5 and
   8:./Library/stm32f4xx_hash_md5.c ****   *          HMAC MD5 Digest of an input message.
   9:./Library/stm32f4xx_hash_md5.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:./Library/stm32f4xx_hash_md5.c ****   *          peripheral.
  11:./Library/stm32f4xx_hash_md5.c ****   *
  12:./Library/stm32f4xx_hash_md5.c **** @verbatim
  13:./Library/stm32f4xx_hash_md5.c ****  ===================================================================
  14:./Library/stm32f4xx_hash_md5.c ****                   ##### How to use this driver #####
  15:./Library/stm32f4xx_hash_md5.c ****  ===================================================================
  16:./Library/stm32f4xx_hash_md5.c ****  [..]
  17:./Library/stm32f4xx_hash_md5.c ****    (#) Enable The HASH controller clock using 
  18:./Library/stm32f4xx_hash_md5.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:./Library/stm32f4xx_hash_md5.c ****   
  20:./Library/stm32f4xx_hash_md5.c ****    (#) Calculate the HASH MD5 Digest using HASH_MD5() function.
  21:./Library/stm32f4xx_hash_md5.c ****   
  22:./Library/stm32f4xx_hash_md5.c ****    (#) Calculate the HMAC MD5 Digest using HMAC_MD5() function.
  23:./Library/stm32f4xx_hash_md5.c ****   
  24:./Library/stm32f4xx_hash_md5.c **** @endverbatim
  25:./Library/stm32f4xx_hash_md5.c ****   *
  26:./Library/stm32f4xx_hash_md5.c ****   ******************************************************************************
  27:./Library/stm32f4xx_hash_md5.c ****   * @attention
  28:./Library/stm32f4xx_hash_md5.c ****   *
  29:./Library/stm32f4xx_hash_md5.c ****   * Copyright (c) 2016 STMicroelectronics.
  30:./Library/stm32f4xx_hash_md5.c ****   * All rights reserved.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 2


  31:./Library/stm32f4xx_hash_md5.c ****   *
  32:./Library/stm32f4xx_hash_md5.c ****   * This software is licensed under terms that can be found in the LICENSE file
  33:./Library/stm32f4xx_hash_md5.c ****   * in the root directory of this software component.
  34:./Library/stm32f4xx_hash_md5.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  35:./Library/stm32f4xx_hash_md5.c ****   *
  36:./Library/stm32f4xx_hash_md5.c ****   ******************************************************************************
  37:./Library/stm32f4xx_hash_md5.c ****   */
  38:./Library/stm32f4xx_hash_md5.c **** 
  39:./Library/stm32f4xx_hash_md5.c **** /* Includes ------------------------------------------------------------------*/
  40:./Library/stm32f4xx_hash_md5.c **** #include "stm32f4xx_hash.h"
  41:./Library/stm32f4xx_hash_md5.c **** 
  42:./Library/stm32f4xx_hash_md5.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  43:./Library/stm32f4xx_hash_md5.c ****   * @{
  44:./Library/stm32f4xx_hash_md5.c ****   */
  45:./Library/stm32f4xx_hash_md5.c **** 
  46:./Library/stm32f4xx_hash_md5.c **** /** @defgroup HASH 
  47:./Library/stm32f4xx_hash_md5.c ****   * @brief HASH driver modules
  48:./Library/stm32f4xx_hash_md5.c ****   * @{
  49:./Library/stm32f4xx_hash_md5.c ****   */
  50:./Library/stm32f4xx_hash_md5.c **** 
  51:./Library/stm32f4xx_hash_md5.c **** /* Private typedef -----------------------------------------------------------*/
  52:./Library/stm32f4xx_hash_md5.c **** /* Private define ------------------------------------------------------------*/
  53:./Library/stm32f4xx_hash_md5.c **** #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  54:./Library/stm32f4xx_hash_md5.c **** 
  55:./Library/stm32f4xx_hash_md5.c **** /* Private macro -------------------------------------------------------------*/
  56:./Library/stm32f4xx_hash_md5.c **** /* Private variables ---------------------------------------------------------*/
  57:./Library/stm32f4xx_hash_md5.c **** /* Private function prototypes -----------------------------------------------*/
  58:./Library/stm32f4xx_hash_md5.c **** /* Private functions ---------------------------------------------------------*/
  59:./Library/stm32f4xx_hash_md5.c **** 
  60:./Library/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Private_Functions
  61:./Library/stm32f4xx_hash_md5.c ****   * @{
  62:./Library/stm32f4xx_hash_md5.c ****   */ 
  63:./Library/stm32f4xx_hash_md5.c **** 
  64:./Library/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Group7 High Level MD5 functions
  65:./Library/stm32f4xx_hash_md5.c ****  *  @brief   High Level MD5 Hash and HMAC functions 
  66:./Library/stm32f4xx_hash_md5.c ****  *
  67:./Library/stm32f4xx_hash_md5.c **** @verbatim   
  68:./Library/stm32f4xx_hash_md5.c ****  ===============================================================================
  69:./Library/stm32f4xx_hash_md5.c ****               ##### High Level MD5 Hash and HMAC functions #####
  70:./Library/stm32f4xx_hash_md5.c ****  ===============================================================================
  71:./Library/stm32f4xx_hash_md5.c **** 
  72:./Library/stm32f4xx_hash_md5.c **** 
  73:./Library/stm32f4xx_hash_md5.c **** @endverbatim
  74:./Library/stm32f4xx_hash_md5.c ****   * @{
  75:./Library/stm32f4xx_hash_md5.c ****   */
  76:./Library/stm32f4xx_hash_md5.c **** 
  77:./Library/stm32f4xx_hash_md5.c **** /**
  78:./Library/stm32f4xx_hash_md5.c ****   * @brief  Compute the HASH MD5 digest.
  79:./Library/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
  80:./Library/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
  81:./Library/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest
  82:./Library/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
  83:./Library/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
  84:./Library/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
  85:./Library/stm32f4xx_hash_md5.c ****   */
  86:./Library/stm32f4xx_hash_md5.c **** ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
  87:./Library/stm32f4xx_hash_md5.c **** {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 3


  29              		.loc 1 87 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 112
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 9CB0     		sub	sp, sp, #112
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 120
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
  88:./Library/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
  89:./Library/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
  90:./Library/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
  47              		.loc 1 90 17
  48 000c 0023     		movs	r3, #0
  49 000e 7B83     		strh	r3, [r7, #26]	@ movhi
  91:./Library/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
  50              		.loc 1 91 12
  51 0010 0023     		movs	r3, #0
  52 0012 FB66     		str	r3, [r7, #108]
  92:./Library/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
  53              		.loc 1 92 17
  54 0014 0023     		movs	r3, #0
  55 0016 7B61     		str	r3, [r7, #20]
  93:./Library/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
  56              		.loc 1 93 12
  57 0018 0023     		movs	r3, #0
  58 001a 3B66     		str	r3, [r7, #96]
  94:./Library/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
  59              		.loc 1 94 15
  60 001c 0123     		movs	r3, #1
  61 001e 87F86B30 		strb	r3, [r7, #107]
  95:./Library/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 95 12
  63 0022 FB68     		ldr	r3, [r7, #12]
  64 0024 7B66     		str	r3, [r7, #100]
  96:./Library/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
  65              		.loc 1 96 12
  66 0026 7B68     		ldr	r3, [r7, #4]
  67 0028 FB65     		str	r3, [r7, #92]
  97:./Library/stm32f4xx_hash_md5.c **** 
  98:./Library/stm32f4xx_hash_md5.c **** 
  99:./Library/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 100:./Library/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  68              		.loc 1 100 19
  69 002a BB68     		ldr	r3, [r7, #8]
  70 002c 9BB2     		uxth	r3, r3
  71 002e 03F00303 		and	r3, r3, #3
  72 0032 9BB2     		uxth	r3, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 4


  73 0034 DB00     		lsls	r3, r3, #3
  74 0036 9BB2     		uxth	r3, r3
  75 0038 7B83     		strh	r3, [r7, #26]	@ movhi
 101:./Library/stm32f4xx_hash_md5.c **** 
 102:./Library/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 103:./Library/stm32f4xx_hash_md5.c ****   HASH_DeInit();
  76              		.loc 1 103 3
  77 003a FFF7FEFF 		bl	HASH_DeInit
 104:./Library/stm32f4xx_hash_md5.c **** 
 105:./Library/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 106:./Library/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  78              		.loc 1 106 45
  79 003e 8023     		movs	r3, #128
  80 0040 FB63     		str	r3, [r7, #60]
 107:./Library/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  81              		.loc 1 107 40
  82 0042 0023     		movs	r3, #0
  83 0044 3B64     		str	r3, [r7, #64]
 108:./Library/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  84              		.loc 1 108 40
  85 0046 2023     		movs	r3, #32
  86 0048 7B64     		str	r3, [r7, #68]
 109:./Library/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
  87              		.loc 1 109 3
  88 004a 07F13C03 		add	r3, r7, #60
  89 004e 1846     		mov	r0, r3
  90 0050 FFF7FEFF 		bl	HASH_Init
 110:./Library/stm32f4xx_hash_md5.c **** 
 111:./Library/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the data */
 112:./Library/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  91              		.loc 1 112 3
  92 0054 7B8B     		ldrh	r3, [r7, #26]	@ movhi
  93 0056 9BB2     		uxth	r3, r3
  94 0058 1846     		mov	r0, r3
  95 005a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 113:./Library/stm32f4xx_hash_md5.c **** 
 114:./Library/stm32f4xx_hash_md5.c ****   /* Write the Input block in the IN FIFO */
 115:./Library/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
  96              		.loc 1 115 8
  97 005e 0023     		movs	r3, #0
  98 0060 FB66     		str	r3, [r7, #108]
  99              		.loc 1 115 3
 100 0062 0AE0     		b	.L2
 101              	.L3:
 116:./Library/stm32f4xx_hash_md5.c ****   {
 117:./Library/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
 102              		.loc 1 117 18 discriminator 3
 103 0064 7B6E     		ldr	r3, [r7, #100]
 104              		.loc 1 117 5 discriminator 3
 105 0066 1B68     		ldr	r3, [r3]
 106 0068 1846     		mov	r0, r3
 107 006a FFF7FEFF 		bl	HASH_DataIn
 118:./Library/stm32f4xx_hash_md5.c ****     inputaddr+=4;
 108              		.loc 1 118 14 discriminator 3
 109 006e 7B6E     		ldr	r3, [r7, #100]
 110 0070 0433     		adds	r3, r3, #4
 111 0072 7B66     		str	r3, [r7, #100]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 5


 115:./Library/stm32f4xx_hash_md5.c ****   {
 112              		.loc 1 115 21 discriminator 3
 113 0074 FB6E     		ldr	r3, [r7, #108]
 114 0076 0433     		adds	r3, r3, #4
 115 0078 FB66     		str	r3, [r7, #108]
 116              	.L2:
 115:./Library/stm32f4xx_hash_md5.c ****   {
 117              		.loc 1 115 3 discriminator 1
 118 007a FA6E     		ldr	r2, [r7, #108]
 119 007c BB68     		ldr	r3, [r7, #8]
 120 007e 9A42     		cmp	r2, r3
 121 0080 F0D3     		bcc	.L3
 119:./Library/stm32f4xx_hash_md5.c ****   }
 120:./Library/stm32f4xx_hash_md5.c **** 
 121:./Library/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 122:./Library/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 122              		.loc 1 122 3
 123 0082 FFF7FEFF 		bl	HASH_StartDigest
 124              	.L5:
 123:./Library/stm32f4xx_hash_md5.c **** 
 124:./Library/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 125:./Library/stm32f4xx_hash_md5.c ****   do
 126:./Library/stm32f4xx_hash_md5.c ****   {
 127:./Library/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 125              		.loc 1 127 18 discriminator 2
 126 0086 0820     		movs	r0, #8
 127 0088 FFF7FEFF 		bl	HASH_GetFlagStatus
 128 008c 0346     		mov	r3, r0
 129              		.loc 1 127 16 discriminator 2
 130 008e 3B66     		str	r3, [r7, #96]
 128:./Library/stm32f4xx_hash_md5.c ****     counter++;
 131              		.loc 1 128 12 discriminator 2
 132 0090 7B69     		ldr	r3, [r7, #20]
 133 0092 0133     		adds	r3, r3, #1
 134 0094 7B61     		str	r3, [r7, #20]
 129:./Library/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 135              		.loc 1 129 20 discriminator 2
 136 0096 7B69     		ldr	r3, [r7, #20]
 137              		.loc 1 129 3 discriminator 2
 138 0098 B3F5803F 		cmp	r3, #65536
 139 009c 02D0     		beq	.L4
 140              		.loc 1 129 40 discriminator 1
 141 009e 3B6E     		ldr	r3, [r7, #96]
 142 00a0 002B     		cmp	r3, #0
 143 00a2 F0D1     		bne	.L5
 144              	.L4:
 130:./Library/stm32f4xx_hash_md5.c **** 
 131:./Library/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 145              		.loc 1 131 6
 146 00a4 3B6E     		ldr	r3, [r7, #96]
 147 00a6 002B     		cmp	r3, #0
 148 00a8 03D0     		beq	.L6
 132:./Library/stm32f4xx_hash_md5.c ****   {
 133:./Library/stm32f4xx_hash_md5.c ****      status = ERROR;
 149              		.loc 1 133 13
 150 00aa 0023     		movs	r3, #0
 151 00ac 87F86B30 		strb	r3, [r7, #107]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 6


 152 00b0 25E0     		b	.L7
 153              	.L6:
 134:./Library/stm32f4xx_hash_md5.c ****   }
 135:./Library/stm32f4xx_hash_md5.c ****   else
 136:./Library/stm32f4xx_hash_md5.c ****   {
 137:./Library/stm32f4xx_hash_md5.c ****     /* Read the message digest */
 138:./Library/stm32f4xx_hash_md5.c ****     HASH_GetDigest(&MD5_MessageDigest);
 154              		.loc 1 138 5
 155 00b2 07F11C03 		add	r3, r7, #28
 156 00b6 1846     		mov	r0, r3
 157 00b8 FFF7FEFF 		bl	HASH_GetDigest
 139:./Library/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 158              		.loc 1 139 33
 159 00bc FA69     		ldr	r2, [r7, #28]
 160              		.loc 1 139 6
 161 00be FB6D     		ldr	r3, [r7, #92]
 162 00c0 FA64     		str	r2, [r7, #76]
 163              	.LBB18:
 164              	.LBB19:
 165              		.file 2 "./CORE/core_cmInstr.h"
   1:./CORE/core_cmInstr.h **** /**************************************************************************//**
   2:./CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./CORE/core_cmInstr.h ****  * @version  V4.10
   5:./CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:./CORE/core_cmInstr.h ****  *
   7:./CORE/core_cmInstr.h ****  * @note
   8:./CORE/core_cmInstr.h ****  *
   9:./CORE/core_cmInstr.h ****  ******************************************************************************/
  10:./CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./CORE/core_cmInstr.h **** 
  12:./CORE/core_cmInstr.h ****    All rights reserved.
  13:./CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./CORE/core_cmInstr.h ****      specific prior written permission.
  23:./CORE/core_cmInstr.h ****    *
  24:./CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./CORE/core_cmInstr.h **** 
  37:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 7


  38:./CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./CORE/core_cmInstr.h **** 
  41:./CORE/core_cmInstr.h **** 
  42:./CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:./CORE/core_cmInstr.h ****   @{
  46:./CORE/core_cmInstr.h **** */
  47:./CORE/core_cmInstr.h **** 
  48:./CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./CORE/core_cmInstr.h **** 
  51:./CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./CORE/core_cmInstr.h **** #endif
  54:./CORE/core_cmInstr.h **** 
  55:./CORE/core_cmInstr.h **** 
  56:./CORE/core_cmInstr.h **** /** \brief  No Operation
  57:./CORE/core_cmInstr.h **** 
  58:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./CORE/core_cmInstr.h ****  */
  60:./CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:./CORE/core_cmInstr.h **** 
  62:./CORE/core_cmInstr.h **** 
  63:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./CORE/core_cmInstr.h **** 
  65:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:./CORE/core_cmInstr.h ****  */
  68:./CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:./CORE/core_cmInstr.h **** 
  70:./CORE/core_cmInstr.h **** 
  71:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:./CORE/core_cmInstr.h **** 
  73:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./CORE/core_cmInstr.h ****  */
  76:./CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:./CORE/core_cmInstr.h **** 
  78:./CORE/core_cmInstr.h **** 
  79:./CORE/core_cmInstr.h **** /** \brief  Send Event
  80:./CORE/core_cmInstr.h **** 
  81:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./CORE/core_cmInstr.h ****  */
  83:./CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:./CORE/core_cmInstr.h **** 
  85:./CORE/core_cmInstr.h **** 
  86:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./CORE/core_cmInstr.h **** 
  88:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./CORE/core_cmInstr.h ****  */
  92:./CORE/core_cmInstr.h **** #define __ISB() do {\
  93:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:./CORE/core_cmInstr.h ****                    __isb(0xF);\
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 8


  95:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:./CORE/core_cmInstr.h ****                 } while (0)
  97:./CORE/core_cmInstr.h **** 
  98:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:./CORE/core_cmInstr.h **** 
 100:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./CORE/core_cmInstr.h ****  */
 103:./CORE/core_cmInstr.h **** #define __DSB() do {\
 104:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:./CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:./CORE/core_cmInstr.h ****                 } while (0)
 108:./CORE/core_cmInstr.h **** 
 109:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./CORE/core_cmInstr.h **** 
 111:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./CORE/core_cmInstr.h ****  */
 114:./CORE/core_cmInstr.h **** #define __DMB() do {\
 115:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:./CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:./CORE/core_cmInstr.h ****                 } while (0)
 119:./CORE/core_cmInstr.h **** 
 120:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./CORE/core_cmInstr.h **** 
 122:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./CORE/core_cmInstr.h **** 
 124:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./CORE/core_cmInstr.h ****     \return               Reversed value
 126:./CORE/core_cmInstr.h ****  */
 127:./CORE/core_cmInstr.h **** #define __REV                             __rev
 128:./CORE/core_cmInstr.h **** 
 129:./CORE/core_cmInstr.h **** 
 130:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./CORE/core_cmInstr.h **** 
 132:./CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./CORE/core_cmInstr.h **** 
 134:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./CORE/core_cmInstr.h ****     \return               Reversed value
 136:./CORE/core_cmInstr.h ****  */
 137:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./CORE/core_cmInstr.h **** {
 140:./CORE/core_cmInstr.h ****   rev16 r0, r0
 141:./CORE/core_cmInstr.h ****   bx lr
 142:./CORE/core_cmInstr.h **** }
 143:./CORE/core_cmInstr.h **** #endif
 144:./CORE/core_cmInstr.h **** 
 145:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./CORE/core_cmInstr.h **** 
 147:./CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./CORE/core_cmInstr.h **** 
 149:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./CORE/core_cmInstr.h ****     \return               Reversed value
 151:./CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 9


 152:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:./CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./CORE/core_cmInstr.h **** {
 155:./CORE/core_cmInstr.h ****   revsh r0, r0
 156:./CORE/core_cmInstr.h ****   bx lr
 157:./CORE/core_cmInstr.h **** }
 158:./CORE/core_cmInstr.h **** #endif
 159:./CORE/core_cmInstr.h **** 
 160:./CORE/core_cmInstr.h **** 
 161:./CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./CORE/core_cmInstr.h **** 
 163:./CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./CORE/core_cmInstr.h **** 
 165:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./CORE/core_cmInstr.h ****     \return               Rotated value
 168:./CORE/core_cmInstr.h ****  */
 169:./CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:./CORE/core_cmInstr.h **** 
 171:./CORE/core_cmInstr.h **** 
 172:./CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:./CORE/core_cmInstr.h **** 
 174:./CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:./CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:./CORE/core_cmInstr.h **** 
 177:./CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./CORE/core_cmInstr.h ****  */
 180:./CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./CORE/core_cmInstr.h **** 
 182:./CORE/core_cmInstr.h **** 
 183:./CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./CORE/core_cmInstr.h **** 
 185:./CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./CORE/core_cmInstr.h **** 
 187:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./CORE/core_cmInstr.h ****     \return               Reversed value
 189:./CORE/core_cmInstr.h ****  */
 190:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./CORE/core_cmInstr.h **** #else
 193:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./CORE/core_cmInstr.h **** {
 195:./CORE/core_cmInstr.h ****   uint32_t result;
 196:./CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./CORE/core_cmInstr.h **** 
 198:./CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./CORE/core_cmInstr.h ****   {
 201:./CORE/core_cmInstr.h ****     result <<= 1;
 202:./CORE/core_cmInstr.h ****     result |= value & 1;
 203:./CORE/core_cmInstr.h ****     s--;
 204:./CORE/core_cmInstr.h ****   }
 205:./CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./CORE/core_cmInstr.h ****   return(result);
 207:./CORE/core_cmInstr.h **** }
 208:./CORE/core_cmInstr.h **** #endif
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 10


 209:./CORE/core_cmInstr.h **** 
 210:./CORE/core_cmInstr.h **** 
 211:./CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:./CORE/core_cmInstr.h **** 
 213:./CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./CORE/core_cmInstr.h **** 
 215:./CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./CORE/core_cmInstr.h ****  */
 218:./CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:./CORE/core_cmInstr.h **** 
 220:./CORE/core_cmInstr.h **** 
 221:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./CORE/core_cmInstr.h **** 
 223:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./CORE/core_cmInstr.h **** 
 225:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./CORE/core_cmInstr.h **** 
 227:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:./CORE/core_cmInstr.h ****  */
 230:./CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./CORE/core_cmInstr.h **** 
 232:./CORE/core_cmInstr.h **** 
 233:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./CORE/core_cmInstr.h **** 
 235:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./CORE/core_cmInstr.h **** 
 237:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./CORE/core_cmInstr.h ****  */
 240:./CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./CORE/core_cmInstr.h **** 
 242:./CORE/core_cmInstr.h **** 
 243:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./CORE/core_cmInstr.h **** 
 245:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./CORE/core_cmInstr.h **** 
 247:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./CORE/core_cmInstr.h ****  */
 250:./CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./CORE/core_cmInstr.h **** 
 252:./CORE/core_cmInstr.h **** 
 253:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./CORE/core_cmInstr.h **** 
 255:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./CORE/core_cmInstr.h **** 
 257:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:./CORE/core_cmInstr.h ****     \return          1  Function failed
 261:./CORE/core_cmInstr.h ****  */
 262:./CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./CORE/core_cmInstr.h **** 
 264:./CORE/core_cmInstr.h **** 
 265:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 11


 266:./CORE/core_cmInstr.h **** 
 267:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./CORE/core_cmInstr.h **** 
 269:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:./CORE/core_cmInstr.h ****     \return          1  Function failed
 273:./CORE/core_cmInstr.h ****  */
 274:./CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./CORE/core_cmInstr.h **** 
 276:./CORE/core_cmInstr.h **** 
 277:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./CORE/core_cmInstr.h **** 
 279:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./CORE/core_cmInstr.h **** 
 281:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:./CORE/core_cmInstr.h ****     \return          1  Function failed
 285:./CORE/core_cmInstr.h ****  */
 286:./CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:./CORE/core_cmInstr.h **** 
 288:./CORE/core_cmInstr.h **** 
 289:./CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:./CORE/core_cmInstr.h **** 
 291:./CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./CORE/core_cmInstr.h **** 
 293:./CORE/core_cmInstr.h ****  */
 294:./CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./CORE/core_cmInstr.h **** 
 296:./CORE/core_cmInstr.h **** 
 297:./CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./CORE/core_cmInstr.h **** 
 299:./CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:./CORE/core_cmInstr.h **** 
 301:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./CORE/core_cmInstr.h ****     \return             Saturated value
 304:./CORE/core_cmInstr.h ****  */
 305:./CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./CORE/core_cmInstr.h **** 
 307:./CORE/core_cmInstr.h **** 
 308:./CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./CORE/core_cmInstr.h **** 
 310:./CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./CORE/core_cmInstr.h **** 
 312:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./CORE/core_cmInstr.h ****     \return             Saturated value
 315:./CORE/core_cmInstr.h ****  */
 316:./CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:./CORE/core_cmInstr.h **** 
 318:./CORE/core_cmInstr.h **** 
 319:./CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./CORE/core_cmInstr.h **** 
 321:./CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 12


 323:./CORE/core_cmInstr.h **** 
 324:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./CORE/core_cmInstr.h ****     \return               Rotated value
 326:./CORE/core_cmInstr.h ****  */
 327:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./CORE/core_cmInstr.h **** {
 330:./CORE/core_cmInstr.h ****   rrx r0, r0
 331:./CORE/core_cmInstr.h ****   bx lr
 332:./CORE/core_cmInstr.h **** }
 333:./CORE/core_cmInstr.h **** #endif
 334:./CORE/core_cmInstr.h **** 
 335:./CORE/core_cmInstr.h **** 
 336:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./CORE/core_cmInstr.h **** 
 338:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./CORE/core_cmInstr.h **** 
 340:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./CORE/core_cmInstr.h ****  */
 343:./CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:./CORE/core_cmInstr.h **** 
 345:./CORE/core_cmInstr.h **** 
 346:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:./CORE/core_cmInstr.h **** 
 348:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./CORE/core_cmInstr.h **** 
 350:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./CORE/core_cmInstr.h ****  */
 353:./CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./CORE/core_cmInstr.h **** 
 355:./CORE/core_cmInstr.h **** 
 356:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./CORE/core_cmInstr.h **** 
 358:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./CORE/core_cmInstr.h **** 
 360:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./CORE/core_cmInstr.h ****  */
 363:./CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./CORE/core_cmInstr.h **** 
 365:./CORE/core_cmInstr.h **** 
 366:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./CORE/core_cmInstr.h **** 
 368:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./CORE/core_cmInstr.h **** 
 370:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./CORE/core_cmInstr.h ****  */
 373:./CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./CORE/core_cmInstr.h **** 
 375:./CORE/core_cmInstr.h **** 
 376:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./CORE/core_cmInstr.h **** 
 378:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 13


 380:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./CORE/core_cmInstr.h ****  */
 383:./CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:./CORE/core_cmInstr.h **** 
 385:./CORE/core_cmInstr.h **** 
 386:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./CORE/core_cmInstr.h **** 
 388:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./CORE/core_cmInstr.h **** 
 390:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./CORE/core_cmInstr.h ****  */
 393:./CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./CORE/core_cmInstr.h **** 
 395:./CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./CORE/core_cmInstr.h **** 
 397:./CORE/core_cmInstr.h **** 
 398:./CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:./CORE/core_cmInstr.h **** 
 401:./CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:./CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:./CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./CORE/core_cmInstr.h **** #else
 408:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./CORE/core_cmInstr.h **** #endif
 411:./CORE/core_cmInstr.h **** 
 412:./CORE/core_cmInstr.h **** /** \brief  No Operation
 413:./CORE/core_cmInstr.h **** 
 414:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./CORE/core_cmInstr.h ****  */
 416:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./CORE/core_cmInstr.h **** {
 418:./CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./CORE/core_cmInstr.h **** }
 420:./CORE/core_cmInstr.h **** 
 421:./CORE/core_cmInstr.h **** 
 422:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./CORE/core_cmInstr.h **** 
 424:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:./CORE/core_cmInstr.h ****  */
 427:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./CORE/core_cmInstr.h **** {
 429:./CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./CORE/core_cmInstr.h **** }
 431:./CORE/core_cmInstr.h **** 
 432:./CORE/core_cmInstr.h **** 
 433:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:./CORE/core_cmInstr.h **** 
 435:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 14


 437:./CORE/core_cmInstr.h ****  */
 438:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./CORE/core_cmInstr.h **** {
 440:./CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:./CORE/core_cmInstr.h **** }
 442:./CORE/core_cmInstr.h **** 
 443:./CORE/core_cmInstr.h **** 
 444:./CORE/core_cmInstr.h **** /** \brief  Send Event
 445:./CORE/core_cmInstr.h **** 
 446:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./CORE/core_cmInstr.h ****  */
 448:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./CORE/core_cmInstr.h **** {
 450:./CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./CORE/core_cmInstr.h **** }
 452:./CORE/core_cmInstr.h **** 
 453:./CORE/core_cmInstr.h **** 
 454:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./CORE/core_cmInstr.h **** 
 456:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./CORE/core_cmInstr.h ****  */
 460:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:./CORE/core_cmInstr.h **** {
 462:./CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./CORE/core_cmInstr.h **** }
 464:./CORE/core_cmInstr.h **** 
 465:./CORE/core_cmInstr.h **** 
 466:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./CORE/core_cmInstr.h **** 
 468:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./CORE/core_cmInstr.h ****  */
 471:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./CORE/core_cmInstr.h **** {
 473:./CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./CORE/core_cmInstr.h **** }
 475:./CORE/core_cmInstr.h **** 
 476:./CORE/core_cmInstr.h **** 
 477:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./CORE/core_cmInstr.h **** 
 479:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./CORE/core_cmInstr.h ****  */
 482:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./CORE/core_cmInstr.h **** {
 484:./CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./CORE/core_cmInstr.h **** }
 486:./CORE/core_cmInstr.h **** 
 487:./CORE/core_cmInstr.h **** 
 488:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./CORE/core_cmInstr.h **** 
 490:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./CORE/core_cmInstr.h **** 
 492:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./CORE/core_cmInstr.h ****     \return               Reversed value
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 15


 494:./CORE/core_cmInstr.h ****  */
 495:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./CORE/core_cmInstr.h **** {
 497:./CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:./CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 166              		.loc 2 498 10
 167 00c2 FA6C     		ldr	r2, [r7, #76]
 168 00c4 12BA     		rev	r2, r2
 169              	.LBE19:
 170              	.LBE18:
 171              		.loc 1 139 31
 172 00c6 1A60     		str	r2, [r3]
 140:./Library/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 173              		.loc 1 140 15
 174 00c8 FB6D     		ldr	r3, [r7, #92]
 175 00ca 0433     		adds	r3, r3, #4
 176 00cc FB65     		str	r3, [r7, #92]
 141:./Library/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 177              		.loc 1 141 33
 178 00ce 3A6A     		ldr	r2, [r7, #32]
 179              		.loc 1 141 6
 180 00d0 FB6D     		ldr	r3, [r7, #92]
 181 00d2 3A65     		str	r2, [r7, #80]
 182              	.LBB20:
 183              	.LBB21:
 184              		.loc 2 498 10
 185 00d4 3A6D     		ldr	r2, [r7, #80]
 186 00d6 12BA     		rev	r2, r2
 187              	.LBE21:
 188              	.LBE20:
 189              		.loc 1 141 31
 190 00d8 1A60     		str	r2, [r3]
 142:./Library/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 191              		.loc 1 142 15
 192 00da FB6D     		ldr	r3, [r7, #92]
 193 00dc 0433     		adds	r3, r3, #4
 194 00de FB65     		str	r3, [r7, #92]
 143:./Library/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 195              		.loc 1 143 33
 196 00e0 7A6A     		ldr	r2, [r7, #36]
 197              		.loc 1 143 6
 198 00e2 FB6D     		ldr	r3, [r7, #92]
 199 00e4 7A65     		str	r2, [r7, #84]
 200              	.LBB22:
 201              	.LBB23:
 202              		.loc 2 498 10
 203 00e6 7A6D     		ldr	r2, [r7, #84]
 204 00e8 12BA     		rev	r2, r2
 205              	.LBE23:
 206              	.LBE22:
 207              		.loc 1 143 31
 208 00ea 1A60     		str	r2, [r3]
 144:./Library/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 209              		.loc 1 144 15
 210 00ec FB6D     		ldr	r3, [r7, #92]
 211 00ee 0433     		adds	r3, r3, #4
 212 00f0 FB65     		str	r3, [r7, #92]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 16


 145:./Library/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 213              		.loc 1 145 33
 214 00f2 BA6A     		ldr	r2, [r7, #40]
 215              		.loc 1 145 6
 216 00f4 FB6D     		ldr	r3, [r7, #92]
 217 00f6 BA65     		str	r2, [r7, #88]
 218              	.LBB24:
 219              	.LBB25:
 220              		.loc 2 498 10
 221 00f8 BA6D     		ldr	r2, [r7, #88]
 222 00fa 12BA     		rev	r2, r2
 223              	.LBE25:
 224              	.LBE24:
 225              		.loc 1 145 31
 226 00fc 1A60     		str	r2, [r3]
 227              	.L7:
 146:./Library/stm32f4xx_hash_md5.c ****   }
 147:./Library/stm32f4xx_hash_md5.c ****   return status; 
 228              		.loc 1 147 10
 229 00fe 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 148:./Library/stm32f4xx_hash_md5.c **** }
 230              		.loc 1 148 1
 231 0102 1846     		mov	r0, r3
 232 0104 7037     		adds	r7, r7, #112
 233              	.LCFI3:
 234              		.cfi_def_cfa_offset 8
 235 0106 BD46     		mov	sp, r7
 236              	.LCFI4:
 237              		.cfi_def_cfa_register 13
 238              		@ sp needed
 239 0108 80BD     		pop	{r7, pc}
 240              		.cfi_endproc
 241              	.LFE123:
 243              		.section	.text.HMAC_MD5,"ax",%progbits
 244              		.align	1
 245              		.global	HMAC_MD5
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 250              	HMAC_MD5:
 251              	.LFB124:
 149:./Library/stm32f4xx_hash_md5.c **** 
 150:./Library/stm32f4xx_hash_md5.c **** /**
 151:./Library/stm32f4xx_hash_md5.c ****   * @brief  Compute the HMAC MD5 digest.
 152:./Library/stm32f4xx_hash_md5.c ****   * @param  Key: pointer to the Key used for HMAC.
 153:./Library/stm32f4xx_hash_md5.c ****   * @param  Keylen: length of the Key used for HMAC.
 154:./Library/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
 155:./Library/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
 156:./Library/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest  
 157:./Library/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
 158:./Library/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
 159:./Library/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
 160:./Library/stm32f4xx_hash_md5.c ****   */
 161:./Library/stm32f4xx_hash_md5.c **** ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
 162:./Library/stm32f4xx_hash_md5.c ****                      uint32_t Ilen, uint8_t Output[16])
 163:./Library/stm32f4xx_hash_md5.c **** {
 252              		.loc 1 163 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 17


 253              		.cfi_startproc
 254              		@ args = 4, pretend = 0, frame = 112
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256 0000 80B5     		push	{r7, lr}
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 9CB0     		sub	sp, sp, #112
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 120
 264 0004 00AF     		add	r7, sp, #0
 265              	.LCFI7:
 266              		.cfi_def_cfa_register 7
 267 0006 F860     		str	r0, [r7, #12]
 268 0008 B960     		str	r1, [r7, #8]
 269 000a 7A60     		str	r2, [r7, #4]
 270 000c 3B60     		str	r3, [r7]
 164:./Library/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
 165:./Library/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
 166:./Library/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
 271              		.loc 1 166 17
 272 000e 0023     		movs	r3, #0
 273 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 167:./Library/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitskey = 0;
 274              		.loc 1 167 17
 275 0012 0023     		movs	r3, #0
 276 0014 BB82     		strh	r3, [r7, #20]	@ movhi
 168:./Library/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
 277              		.loc 1 168 12
 278 0016 0023     		movs	r3, #0
 279 0018 FB66     		str	r3, [r7, #108]
 169:./Library/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
 280              		.loc 1 169 17
 281 001a 0023     		movs	r3, #0
 282 001c 3B61     		str	r3, [r7, #16]
 170:./Library/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
 283              		.loc 1 170 12
 284 001e 0023     		movs	r3, #0
 285 0020 FB65     		str	r3, [r7, #92]
 171:./Library/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
 286              		.loc 1 171 15
 287 0022 0123     		movs	r3, #1
 288 0024 87F86B30 		strb	r3, [r7, #107]
 172:./Library/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 289              		.loc 1 172 12
 290 0028 FB68     		ldr	r3, [r7, #12]
 291 002a 7B66     		str	r3, [r7, #100]
 173:./Library/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 292              		.loc 1 173 12
 293 002c 7B68     		ldr	r3, [r7, #4]
 294 002e 3B66     		str	r3, [r7, #96]
 174:./Library/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
 295              		.loc 1 174 12
 296 0030 BB6F     		ldr	r3, [r7, #120]
 297 0032 BB65     		str	r3, [r7, #88]
 175:./Library/stm32f4xx_hash_md5.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 18


 176:./Library/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 177:./Library/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 298              		.loc 1 177 19
 299 0034 3B68     		ldr	r3, [r7]
 300 0036 9BB2     		uxth	r3, r3
 301 0038 03F00303 		and	r3, r3, #3
 302 003c 9BB2     		uxth	r3, r3
 303 003e DB00     		lsls	r3, r3, #3
 304 0040 9BB2     		uxth	r3, r3
 305 0042 FB82     		strh	r3, [r7, #22]	@ movhi
 178:./Library/stm32f4xx_hash_md5.c **** 
 179:./Library/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Key */
 180:./Library/stm32f4xx_hash_md5.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 306              		.loc 1 180 18
 307 0044 BB68     		ldr	r3, [r7, #8]
 308 0046 9BB2     		uxth	r3, r3
 309 0048 03F00303 		and	r3, r3, #3
 310 004c 9BB2     		uxth	r3, r3
 311 004e DB00     		lsls	r3, r3, #3
 312 0050 9BB2     		uxth	r3, r3
 313 0052 BB82     		strh	r3, [r7, #20]	@ movhi
 181:./Library/stm32f4xx_hash_md5.c ****    
 182:./Library/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 183:./Library/stm32f4xx_hash_md5.c ****   HASH_DeInit();
 314              		.loc 1 183 3
 315 0054 FFF7FEFF 		bl	HASH_DeInit
 184:./Library/stm32f4xx_hash_md5.c **** 
 185:./Library/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 186:./Library/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 316              		.loc 1 186 45
 317 0058 8023     		movs	r3, #128
 318 005a BB63     		str	r3, [r7, #56]
 187:./Library/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 319              		.loc 1 187 40
 320 005c 4023     		movs	r3, #64
 321 005e FB63     		str	r3, [r7, #60]
 188:./Library/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 322              		.loc 1 188 40
 323 0060 2023     		movs	r3, #32
 324 0062 3B64     		str	r3, [r7, #64]
 189:./Library/stm32f4xx_hash_md5.c ****   if(Keylen > 64)
 325              		.loc 1 189 5
 326 0064 BB68     		ldr	r3, [r7, #8]
 327 0066 402B     		cmp	r3, #64
 328 0068 03D9     		bls	.L14
 190:./Library/stm32f4xx_hash_md5.c ****   {
 191:./Library/stm32f4xx_hash_md5.c ****     /* HMAC long Key */
 192:./Library/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 329              		.loc 1 192 45
 330 006a 4FF48033 		mov	r3, #65536
 331 006e 7B64     		str	r3, [r7, #68]
 332 0070 01E0     		b	.L15
 333              	.L14:
 193:./Library/stm32f4xx_hash_md5.c ****   }
 194:./Library/stm32f4xx_hash_md5.c ****   else
 195:./Library/stm32f4xx_hash_md5.c ****   {
 196:./Library/stm32f4xx_hash_md5.c ****     /* HMAC short Key */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 19


 197:./Library/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 334              		.loc 1 197 45
 335 0072 0023     		movs	r3, #0
 336 0074 7B64     		str	r3, [r7, #68]
 337              	.L15:
 198:./Library/stm32f4xx_hash_md5.c ****   }
 199:./Library/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
 338              		.loc 1 199 3
 339 0076 07F13803 		add	r3, r7, #56
 340 007a 1846     		mov	r0, r3
 341 007c FFF7FEFF 		bl	HASH_Init
 200:./Library/stm32f4xx_hash_md5.c **** 
 201:./Library/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the Key */
 202:./Library/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 342              		.loc 1 202 3
 343 0080 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 344 0082 9BB2     		uxth	r3, r3
 345 0084 1846     		mov	r0, r3
 346 0086 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 203:./Library/stm32f4xx_hash_md5.c **** 
 204:./Library/stm32f4xx_hash_md5.c ****   /* Write the Key */
 205:./Library/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 347              		.loc 1 205 8
 348 008a 0023     		movs	r3, #0
 349 008c FB66     		str	r3, [r7, #108]
 350              		.loc 1 205 3
 351 008e 0AE0     		b	.L16
 352              	.L17:
 206:./Library/stm32f4xx_hash_md5.c ****   {
 207:./Library/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 353              		.loc 1 207 18 discriminator 3
 354 0090 7B6E     		ldr	r3, [r7, #100]
 355              		.loc 1 207 5 discriminator 3
 356 0092 1B68     		ldr	r3, [r3]
 357 0094 1846     		mov	r0, r3
 358 0096 FFF7FEFF 		bl	HASH_DataIn
 208:./Library/stm32f4xx_hash_md5.c ****     keyaddr+=4;
 359              		.loc 1 208 12 discriminator 3
 360 009a 7B6E     		ldr	r3, [r7, #100]
 361 009c 0433     		adds	r3, r3, #4
 362 009e 7B66     		str	r3, [r7, #100]
 205:./Library/stm32f4xx_hash_md5.c ****   {
 363              		.loc 1 205 23 discriminator 3
 364 00a0 FB6E     		ldr	r3, [r7, #108]
 365 00a2 0433     		adds	r3, r3, #4
 366 00a4 FB66     		str	r3, [r7, #108]
 367              	.L16:
 205:./Library/stm32f4xx_hash_md5.c ****   {
 368              		.loc 1 205 3 discriminator 1
 369 00a6 FA6E     		ldr	r2, [r7, #108]
 370 00a8 BB68     		ldr	r3, [r7, #8]
 371 00aa 9A42     		cmp	r2, r3
 372 00ac F0D3     		bcc	.L17
 209:./Library/stm32f4xx_hash_md5.c ****   }
 210:./Library/stm32f4xx_hash_md5.c ****   
 211:./Library/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 212:./Library/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 20


 373              		.loc 1 212 3
 374 00ae FFF7FEFF 		bl	HASH_StartDigest
 375              	.L19:
 213:./Library/stm32f4xx_hash_md5.c **** 
 214:./Library/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 215:./Library/stm32f4xx_hash_md5.c ****   do
 216:./Library/stm32f4xx_hash_md5.c ****   {
 217:./Library/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 376              		.loc 1 217 18 discriminator 2
 377 00b2 0820     		movs	r0, #8
 378 00b4 FFF7FEFF 		bl	HASH_GetFlagStatus
 379 00b8 0346     		mov	r3, r0
 380              		.loc 1 217 16 discriminator 2
 381 00ba FB65     		str	r3, [r7, #92]
 218:./Library/stm32f4xx_hash_md5.c ****     counter++;
 382              		.loc 1 218 12 discriminator 2
 383 00bc 3B69     		ldr	r3, [r7, #16]
 384 00be 0133     		adds	r3, r3, #1
 385 00c0 3B61     		str	r3, [r7, #16]
 219:./Library/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 386              		.loc 1 219 20 discriminator 2
 387 00c2 3B69     		ldr	r3, [r7, #16]
 388              		.loc 1 219 3 discriminator 2
 389 00c4 B3F5803F 		cmp	r3, #65536
 390 00c8 02D0     		beq	.L18
 391              		.loc 1 219 40 discriminator 1
 392 00ca FB6D     		ldr	r3, [r7, #92]
 393 00cc 002B     		cmp	r3, #0
 394 00ce F0D1     		bne	.L19
 395              	.L18:
 220:./Library/stm32f4xx_hash_md5.c **** 
 221:./Library/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 396              		.loc 1 221 6
 397 00d0 FB6D     		ldr	r3, [r7, #92]
 398 00d2 002B     		cmp	r3, #0
 399 00d4 03D0     		beq	.L20
 222:./Library/stm32f4xx_hash_md5.c ****   {
 223:./Library/stm32f4xx_hash_md5.c ****      status = ERROR;
 400              		.loc 1 223 13
 401 00d6 0023     		movs	r3, #0
 402 00d8 87F86B30 		strb	r3, [r7, #107]
 403 00dc 89E0     		b	.L21
 404              	.L20:
 224:./Library/stm32f4xx_hash_md5.c ****   }
 225:./Library/stm32f4xx_hash_md5.c ****   else
 226:./Library/stm32f4xx_hash_md5.c ****   {
 227:./Library/stm32f4xx_hash_md5.c ****     /* Configure the number of valid bits in last word of the Input data */
 228:./Library/stm32f4xx_hash_md5.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 405              		.loc 1 228 5
 406 00de FB8A     		ldrh	r3, [r7, #22]	@ movhi
 407 00e0 9BB2     		uxth	r3, r3
 408 00e2 1846     		mov	r0, r3
 409 00e4 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 229:./Library/stm32f4xx_hash_md5.c **** 
 230:./Library/stm32f4xx_hash_md5.c ****     /* Write the Input block in the IN FIFO */
 231:./Library/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 410              		.loc 1 231 10
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 21


 411 00e8 0023     		movs	r3, #0
 412 00ea FB66     		str	r3, [r7, #108]
 413              		.loc 1 231 5
 414 00ec 0AE0     		b	.L22
 415              	.L23:
 232:./Library/stm32f4xx_hash_md5.c ****     {
 233:./Library/stm32f4xx_hash_md5.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 416              		.loc 1 233 20 discriminator 3
 417 00ee 3B6E     		ldr	r3, [r7, #96]
 418              		.loc 1 233 7 discriminator 3
 419 00f0 1B68     		ldr	r3, [r3]
 420 00f2 1846     		mov	r0, r3
 421 00f4 FFF7FEFF 		bl	HASH_DataIn
 234:./Library/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 422              		.loc 1 234 16 discriminator 3
 423 00f8 3B6E     		ldr	r3, [r7, #96]
 424 00fa 0433     		adds	r3, r3, #4
 425 00fc 3B66     		str	r3, [r7, #96]
 231:./Library/stm32f4xx_hash_md5.c ****     {
 426              		.loc 1 231 23 discriminator 3
 427 00fe FB6E     		ldr	r3, [r7, #108]
 428 0100 0433     		adds	r3, r3, #4
 429 0102 FB66     		str	r3, [r7, #108]
 430              	.L22:
 231:./Library/stm32f4xx_hash_md5.c ****     {
 431              		.loc 1 231 5 discriminator 1
 432 0104 FA6E     		ldr	r2, [r7, #108]
 433 0106 3B68     		ldr	r3, [r7]
 434 0108 9A42     		cmp	r2, r3
 435 010a F0D3     		bcc	.L23
 235:./Library/stm32f4xx_hash_md5.c ****     }
 236:./Library/stm32f4xx_hash_md5.c **** 
 237:./Library/stm32f4xx_hash_md5.c ****     /* Start the HASH processor */
 238:./Library/stm32f4xx_hash_md5.c ****     HASH_StartDigest();
 436              		.loc 1 238 5
 437 010c FFF7FEFF 		bl	HASH_StartDigest
 239:./Library/stm32f4xx_hash_md5.c **** 
 240:./Library/stm32f4xx_hash_md5.c ****     /* wait until the Busy flag is RESET */
 241:./Library/stm32f4xx_hash_md5.c ****     counter =0;
 438              		.loc 1 241 13
 439 0110 0023     		movs	r3, #0
 440 0112 3B61     		str	r3, [r7, #16]
 441              	.L25:
 242:./Library/stm32f4xx_hash_md5.c ****     do
 243:./Library/stm32f4xx_hash_md5.c ****     {
 244:./Library/stm32f4xx_hash_md5.c ****        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 442              		.loc 1 244 21 discriminator 2
 443 0114 0820     		movs	r0, #8
 444 0116 FFF7FEFF 		bl	HASH_GetFlagStatus
 445 011a 0346     		mov	r3, r0
 446              		.loc 1 244 19 discriminator 2
 447 011c FB65     		str	r3, [r7, #92]
 245:./Library/stm32f4xx_hash_md5.c ****        counter++;
 448              		.loc 1 245 15 discriminator 2
 449 011e 3B69     		ldr	r3, [r7, #16]
 450 0120 0133     		adds	r3, r3, #1
 451 0122 3B61     		str	r3, [r7, #16]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 22


 246:./Library/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 452              		.loc 1 246 22 discriminator 2
 453 0124 3B69     		ldr	r3, [r7, #16]
 454              		.loc 1 246 5 discriminator 2
 455 0126 B3F5803F 		cmp	r3, #65536
 456 012a 02D0     		beq	.L24
 457              		.loc 1 246 42 discriminator 1
 458 012c FB6D     		ldr	r3, [r7, #92]
 459 012e 002B     		cmp	r3, #0
 460 0130 F0D1     		bne	.L25
 461              	.L24:
 247:./Library/stm32f4xx_hash_md5.c **** 
 248:./Library/stm32f4xx_hash_md5.c ****     if (busystatus != RESET)
 462              		.loc 1 248 8
 463 0132 FB6D     		ldr	r3, [r7, #92]
 464 0134 002B     		cmp	r3, #0
 465 0136 03D0     		beq	.L26
 249:./Library/stm32f4xx_hash_md5.c ****     {
 250:./Library/stm32f4xx_hash_md5.c ****       status = ERROR;
 466              		.loc 1 250 14
 467 0138 0023     		movs	r3, #0
 468 013a 87F86B30 		strb	r3, [r7, #107]
 469 013e 58E0     		b	.L21
 470              	.L26:
 251:./Library/stm32f4xx_hash_md5.c ****     }
 252:./Library/stm32f4xx_hash_md5.c ****     else
 253:./Library/stm32f4xx_hash_md5.c ****     {  
 254:./Library/stm32f4xx_hash_md5.c ****       /* Configure the number of valid bits in last word of the Key */
 255:./Library/stm32f4xx_hash_md5.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 471              		.loc 1 255 7
 472 0140 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 473 0142 9BB2     		uxth	r3, r3
 474 0144 1846     		mov	r0, r3
 475 0146 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 256:./Library/stm32f4xx_hash_md5.c **** 
 257:./Library/stm32f4xx_hash_md5.c ****       /* Write the Key */
 258:./Library/stm32f4xx_hash_md5.c ****       keyaddr = (uint32_t)Key;
 476              		.loc 1 258 15
 477 014a FB68     		ldr	r3, [r7, #12]
 478 014c 7B66     		str	r3, [r7, #100]
 259:./Library/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 479              		.loc 1 259 12
 480 014e 0023     		movs	r3, #0
 481 0150 FB66     		str	r3, [r7, #108]
 482              		.loc 1 259 7
 483 0152 0AE0     		b	.L27
 484              	.L28:
 260:./Library/stm32f4xx_hash_md5.c ****       {
 261:./Library/stm32f4xx_hash_md5.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 485              		.loc 1 261 22 discriminator 3
 486 0154 7B6E     		ldr	r3, [r7, #100]
 487              		.loc 1 261 9 discriminator 3
 488 0156 1B68     		ldr	r3, [r3]
 489 0158 1846     		mov	r0, r3
 490 015a FFF7FEFF 		bl	HASH_DataIn
 262:./Library/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 491              		.loc 1 262 16 discriminator 3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 23


 492 015e 7B6E     		ldr	r3, [r7, #100]
 493 0160 0433     		adds	r3, r3, #4
 494 0162 7B66     		str	r3, [r7, #100]
 259:./Library/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 495              		.loc 1 259 27 discriminator 3
 496 0164 FB6E     		ldr	r3, [r7, #108]
 497 0166 0433     		adds	r3, r3, #4
 498 0168 FB66     		str	r3, [r7, #108]
 499              	.L27:
 259:./Library/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 500              		.loc 1 259 7 discriminator 1
 501 016a FA6E     		ldr	r2, [r7, #108]
 502 016c BB68     		ldr	r3, [r7, #8]
 503 016e 9A42     		cmp	r2, r3
 504 0170 F0D3     		bcc	.L28
 263:./Library/stm32f4xx_hash_md5.c ****       }
 264:./Library/stm32f4xx_hash_md5.c ****   
 265:./Library/stm32f4xx_hash_md5.c ****        /* Start the HASH processor */
 266:./Library/stm32f4xx_hash_md5.c ****        HASH_StartDigest();
 505              		.loc 1 266 8
 506 0172 FFF7FEFF 		bl	HASH_StartDigest
 267:./Library/stm32f4xx_hash_md5.c **** 
 268:./Library/stm32f4xx_hash_md5.c ****        /* wait until the Busy flag is RESET */
 269:./Library/stm32f4xx_hash_md5.c ****        counter =0;
 507              		.loc 1 269 16
 508 0176 0023     		movs	r3, #0
 509 0178 3B61     		str	r3, [r7, #16]
 510              	.L30:
 270:./Library/stm32f4xx_hash_md5.c ****        do
 271:./Library/stm32f4xx_hash_md5.c ****        {
 272:./Library/stm32f4xx_hash_md5.c ****           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 511              		.loc 1 272 24 discriminator 2
 512 017a 0820     		movs	r0, #8
 513 017c FFF7FEFF 		bl	HASH_GetFlagStatus
 514 0180 0346     		mov	r3, r0
 515              		.loc 1 272 22 discriminator 2
 516 0182 FB65     		str	r3, [r7, #92]
 273:./Library/stm32f4xx_hash_md5.c ****           counter++;
 517              		.loc 1 273 18 discriminator 2
 518 0184 3B69     		ldr	r3, [r7, #16]
 519 0186 0133     		adds	r3, r3, #1
 520 0188 3B61     		str	r3, [r7, #16]
 274:./Library/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 521              		.loc 1 274 24 discriminator 2
 522 018a 3B69     		ldr	r3, [r7, #16]
 523              		.loc 1 274 7 discriminator 2
 524 018c B3F5803F 		cmp	r3, #65536
 525 0190 02D0     		beq	.L29
 526              		.loc 1 274 44 discriminator 1
 527 0192 FB6D     		ldr	r3, [r7, #92]
 528 0194 002B     		cmp	r3, #0
 529 0196 F0D1     		bne	.L30
 530              	.L29:
 275:./Library/stm32f4xx_hash_md5.c **** 
 276:./Library/stm32f4xx_hash_md5.c ****       if (busystatus != RESET)
 531              		.loc 1 276 10
 532 0198 FB6D     		ldr	r3, [r7, #92]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 24


 533 019a 002B     		cmp	r3, #0
 534 019c 03D0     		beq	.L31
 277:./Library/stm32f4xx_hash_md5.c ****       {
 278:./Library/stm32f4xx_hash_md5.c ****          status = ERROR;
 535              		.loc 1 278 17
 536 019e 0023     		movs	r3, #0
 537 01a0 87F86B30 		strb	r3, [r7, #107]
 538 01a4 25E0     		b	.L21
 539              	.L31:
 279:./Library/stm32f4xx_hash_md5.c ****       }
 280:./Library/stm32f4xx_hash_md5.c ****       else
 281:./Library/stm32f4xx_hash_md5.c ****       {
 282:./Library/stm32f4xx_hash_md5.c ****          /* Read the message digest */
 283:./Library/stm32f4xx_hash_md5.c ****          HASH_GetDigest(&MD5_MessageDigest);
 540              		.loc 1 283 10
 541 01a6 07F11803 		add	r3, r7, #24
 542 01aa 1846     		mov	r0, r3
 543 01ac FFF7FEFF 		bl	HASH_GetDigest
 284:./Library/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 544              		.loc 1 284 38
 545 01b0 BA69     		ldr	r2, [r7, #24]
 546              		.loc 1 284 11
 547 01b2 BB6D     		ldr	r3, [r7, #88]
 548 01b4 BA64     		str	r2, [r7, #72]
 549              	.LBB26:
 550              	.LBB27:
 551              		.loc 2 498 10
 552 01b6 BA6C     		ldr	r2, [r7, #72]
 553 01b8 12BA     		rev	r2, r2
 554              	.LBE27:
 555              	.LBE26:
 556              		.loc 1 284 36
 557 01ba 1A60     		str	r2, [r3]
 285:./Library/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 558              		.loc 1 285 20
 559 01bc BB6D     		ldr	r3, [r7, #88]
 560 01be 0433     		adds	r3, r3, #4
 561 01c0 BB65     		str	r3, [r7, #88]
 286:./Library/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 562              		.loc 1 286 38
 563 01c2 FA69     		ldr	r2, [r7, #28]
 564              		.loc 1 286 11
 565 01c4 BB6D     		ldr	r3, [r7, #88]
 566 01c6 FA64     		str	r2, [r7, #76]
 567              	.LBB28:
 568              	.LBB29:
 569              		.loc 2 498 10
 570 01c8 FA6C     		ldr	r2, [r7, #76]
 571 01ca 12BA     		rev	r2, r2
 572              	.LBE29:
 573              	.LBE28:
 574              		.loc 1 286 36
 575 01cc 1A60     		str	r2, [r3]
 287:./Library/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 576              		.loc 1 287 20
 577 01ce BB6D     		ldr	r3, [r7, #88]
 578 01d0 0433     		adds	r3, r3, #4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 25


 579 01d2 BB65     		str	r3, [r7, #88]
 288:./Library/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 580              		.loc 1 288 38
 581 01d4 3A6A     		ldr	r2, [r7, #32]
 582              		.loc 1 288 11
 583 01d6 BB6D     		ldr	r3, [r7, #88]
 584 01d8 3A65     		str	r2, [r7, #80]
 585              	.LBB30:
 586              	.LBB31:
 587              		.loc 2 498 10
 588 01da 3A6D     		ldr	r2, [r7, #80]
 589 01dc 12BA     		rev	r2, r2
 590              	.LBE31:
 591              	.LBE30:
 592              		.loc 1 288 36
 593 01de 1A60     		str	r2, [r3]
 289:./Library/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 594              		.loc 1 289 20
 595 01e0 BB6D     		ldr	r3, [r7, #88]
 596 01e2 0433     		adds	r3, r3, #4
 597 01e4 BB65     		str	r3, [r7, #88]
 290:./Library/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 598              		.loc 1 290 38
 599 01e6 7A6A     		ldr	r2, [r7, #36]
 600              		.loc 1 290 11
 601 01e8 BB6D     		ldr	r3, [r7, #88]
 602 01ea 7A65     		str	r2, [r7, #84]
 603              	.LBB32:
 604              	.LBB33:
 605              		.loc 2 498 10
 606 01ec 7A6D     		ldr	r2, [r7, #84]
 607 01ee 12BA     		rev	r2, r2
 608              	.LBE33:
 609              	.LBE32:
 610              		.loc 1 290 36
 611 01f0 1A60     		str	r2, [r3]
 612              	.L21:
 291:./Library/stm32f4xx_hash_md5.c ****       }
 292:./Library/stm32f4xx_hash_md5.c ****     }
 293:./Library/stm32f4xx_hash_md5.c ****   }
 294:./Library/stm32f4xx_hash_md5.c ****   return status;  
 613              		.loc 1 294 10
 614 01f2 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 295:./Library/stm32f4xx_hash_md5.c **** }
 615              		.loc 1 295 1
 616 01f6 1846     		mov	r0, r3
 617 01f8 7037     		adds	r7, r7, #112
 618              	.LCFI8:
 619              		.cfi_def_cfa_offset 8
 620 01fa BD46     		mov	sp, r7
 621              	.LCFI9:
 622              		.cfi_def_cfa_register 13
 623              		@ sp needed
 624 01fc 80BD     		pop	{r7, pc}
 625              		.cfi_endproc
 626              	.LFE124:
 628              		.text
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 26


 629              	.Letext0:
 630              		.file 3 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 631              		.file 4 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 632              		.file 5 "./CORE/stm32f4xx.h"
 633              		.file 6 "./Library/stm32f4xx_hash.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash_md5.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s:20     .text.HASH_MD5:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s:26     .text.HASH_MD5:0000000000000000 HASH_MD5
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s:244    .text.HMAC_MD5:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRpQner.s:250    .text.HMAC_MD5:0000000000000000 HMAC_MD5

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
