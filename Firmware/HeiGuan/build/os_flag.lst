ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"os_flag.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.OSFlagAccept,"ax",%progbits
  20              		.align	1
  21              		.global	OSFlagAccept
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	OSFlagAccept:
  27              	.LFB3:
  28              		.file 1 "./ucOSII/Core/os_flag.c"
   1:./ucOSII/Core/os_flag.c **** /*
   2:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
   3:./ucOSII/Core/os_flag.c **** *                                              uC/OS-II
   4:./ucOSII/Core/os_flag.c **** *                                        The Real-Time Kernel
   5:./ucOSII/Core/os_flag.c **** *
   6:./ucOSII/Core/os_flag.c **** *                    Copyright 1992-2021 Silicon Laboratories Inc. www.silabs.com
   7:./ucOSII/Core/os_flag.c **** *
   8:./ucOSII/Core/os_flag.c **** *                                 SPDX-License-Identifier: APACHE-2.0
   9:./ucOSII/Core/os_flag.c **** *
  10:./ucOSII/Core/os_flag.c **** *               This software is subject to an open source license and is distributed by
  11:./ucOSII/Core/os_flag.c **** *                Silicon Laboratories Inc. pursuant to the terms of the Apache License,
  12:./ucOSII/Core/os_flag.c **** *                    Version 2.0 available at www.apache.org/licenses/LICENSE-2.0.
  13:./ucOSII/Core/os_flag.c **** *
  14:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
  15:./ucOSII/Core/os_flag.c **** */
  16:./ucOSII/Core/os_flag.c **** 
  17:./ucOSII/Core/os_flag.c **** 
  18:./ucOSII/Core/os_flag.c **** /*
  19:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
  20:./ucOSII/Core/os_flag.c **** *
  21:./ucOSII/Core/os_flag.c **** *                                        EVENT FLAG  MANAGEMENT
  22:./ucOSII/Core/os_flag.c **** *
  23:./ucOSII/Core/os_flag.c **** * Filename : os_flag.c
  24:./ucOSII/Core/os_flag.c **** * Version  : V2.93.01
  25:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
  26:./ucOSII/Core/os_flag.c **** */
  27:./ucOSII/Core/os_flag.c **** 
  28:./ucOSII/Core/os_flag.c **** #ifndef  OS_FLAG_C
  29:./ucOSII/Core/os_flag.c **** #define  OS_FLAG_C
  30:./ucOSII/Core/os_flag.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 2


  31:./ucOSII/Core/os_flag.c **** #define  MICRIUM_SOURCE
  32:./ucOSII/Core/os_flag.c **** 
  33:./ucOSII/Core/os_flag.c **** #ifndef  OS_MASTER_FILE
  34:./ucOSII/Core/os_flag.c **** #include <ucos_ii.h>
  35:./ucOSII/Core/os_flag.c **** #endif
  36:./ucOSII/Core/os_flag.c **** 
  37:./ucOSII/Core/os_flag.c **** #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
  38:./ucOSII/Core/os_flag.c **** /*
  39:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
  40:./ucOSII/Core/os_flag.c **** *                                          LOCAL PROTOTYPES
  41:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
  42:./ucOSII/Core/os_flag.c **** */
  43:./ucOSII/Core/os_flag.c **** 
  44:./ucOSII/Core/os_flag.c **** static  void     OS_FlagBlock(OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_ty
  45:./ucOSII/Core/os_flag.c **** static  BOOLEAN  OS_FlagTaskRdy(OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy, INT8U pend_stat);
  46:./ucOSII/Core/os_flag.c **** 
  47:./ucOSII/Core/os_flag.c **** 
  48:./ucOSII/Core/os_flag.c **** /*
  49:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
  50:./ucOSII/Core/os_flag.c **** *                          CHECK THE STATUS OF FLAGS IN AN EVENT FLAG GROUP
  51:./ucOSII/Core/os_flag.c **** *
  52:./ucOSII/Core/os_flag.c **** * Description: This function is called to check the status of a combination of bits to be set or cl
  53:./ucOSII/Core/os_flag.c **** *              in an event flag group.  Your application can check for ANY bit to be set/cleared or
  54:./ucOSII/Core/os_flag.c **** *              bits to be set/cleared.
  55:./ucOSII/Core/os_flag.c **** *
  56:./ucOSII/Core/os_flag.c **** *              This call does not block if the desired flags are not present.
  57:./ucOSII/Core/os_flag.c **** *
  58:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
  59:./ucOSII/Core/os_flag.c **** *
  60:./ucOSII/Core/os_flag.c **** *              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to chec
  61:./ucOSII/Core/os_flag.c **** *                            The bits you want are specified by setting the corresponding bits in
  62:./ucOSII/Core/os_flag.c **** *                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
  63:./ucOSII/Core/os_flag.c **** *                            'flags' would contain 0x03.
  64:./ucOSII/Core/os_flag.c **** *
  65:./ucOSII/Core/os_flag.c **** *              wait_type     specifies whether you want ALL bits to be set/cleared or ANY of the bi
  66:./ucOSII/Core/os_flag.c **** *                            to be set/cleared.
  67:./ucOSII/Core/os_flag.c **** *                            You can specify the following argument:
  68:./ucOSII/Core/os_flag.c **** *
  69:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ALL   You will check ALL bits in 'flags' to be clear 
  70:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ANY   You will check ANY bit  in 'flags' to be clear 
  71:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_SET_ALL   You will check ALL bits in 'flags' to be set   
  72:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_SET_ANY   You will check ANY bit  in 'flags' to be set   
  73:./ucOSII/Core/os_flag.c **** *
  74:./ucOSII/Core/os_flag.c **** *                            NOTE: Add OS_FLAG_CONSUME if you want the event flag to be 'consumed' 
  75:./ucOSII/Core/os_flag.c **** *                                  the call.  Example, to wait for any flag in a group AND then cle
  76:./ucOSII/Core/os_flag.c **** *                                  the flags that are present, set 'wait_type' to:
  77:./ucOSII/Core/os_flag.c **** *
  78:./ucOSII/Core/os_flag.c **** *                                  OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME
  79:./ucOSII/Core/os_flag.c **** *
  80:./ucOSII/Core/os_flag.c **** *              perr          is a pointer to an error code and can be:
  81:./ucOSII/Core/os_flag.c **** *                            OS_ERR_NONE               No error
  82:./ucOSII/Core/os_flag.c **** *                            OS_ERR_EVENT_TYPE         You are not pointing to an event flag group
  83:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_WAIT_TYPE     You didn't specify a proper 'wait_type' argu
  84:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP  You passed a NULL pointer instead of the eve
  85:./ucOSII/Core/os_flag.c **** *                                                      group handle.
  86:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_NOT_RDY       The desired flags you are waiting for are no
  87:./ucOSII/Core/os_flag.c **** *                                                      available.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 3


  88:./ucOSII/Core/os_flag.c **** *
  89:./ucOSII/Core/os_flag.c **** * Returns    : The flags in the event flag group that made the task ready or, 0 if a timeout or an 
  90:./ucOSII/Core/os_flag.c **** *              occurred.
  91:./ucOSII/Core/os_flag.c **** *
  92:./ucOSII/Core/os_flag.c **** * Called from: Task or ISR
  93:./ucOSII/Core/os_flag.c **** *
  94:./ucOSII/Core/os_flag.c **** * Note(s)    : 1) IMPORTANT, the behavior of this function has changed from PREVIOUS versions.  The
  95:./ucOSII/Core/os_flag.c **** *                 function NOW returns the flags that were ready INSTEAD of the current state of th
  96:./ucOSII/Core/os_flag.c **** *                 event flags.
  97:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
  98:./ucOSII/Core/os_flag.c **** */
  99:./ucOSII/Core/os_flag.c **** 
 100:./ucOSII/Core/os_flag.c **** #if OS_FLAG_ACCEPT_EN > 0u
 101:./ucOSII/Core/os_flag.c **** OS_FLAGS  OSFlagAccept (OS_FLAG_GRP  *pgrp,
 102:./ucOSII/Core/os_flag.c ****                         OS_FLAGS      flags,
 103:./ucOSII/Core/os_flag.c ****                         INT8U         wait_type,
 104:./ucOSII/Core/os_flag.c ****                         INT8U        *perr)
 105:./ucOSII/Core/os_flag.c **** {
  29              		.loc 1 105 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 40
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 7B60     		str	r3, [r7, #4]
  46 000a 0B46     		mov	r3, r1	@ movhi
  47 000c 7B81     		strh	r3, [r7, #10]	@ movhi
  48 000e 1346     		mov	r3, r2
  49 0010 7B72     		strb	r3, [r7, #9]
 106:./ucOSII/Core/os_flag.c ****     OS_FLAGS      flags_rdy;
 107:./ucOSII/Core/os_flag.c ****     INT8U         result;
 108:./ucOSII/Core/os_flag.c ****     BOOLEAN       consume;
 109:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 110:./ucOSII/Core/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
  50              		.loc 1 110 19
  51 0012 0023     		movs	r3, #0
  52 0014 BB61     		str	r3, [r7, #24]
 111:./ucOSII/Core/os_flag.c **** #endif
 112:./ucOSII/Core/os_flag.c **** 
 113:./ucOSII/Core/os_flag.c **** 
 114:./ucOSII/Core/os_flag.c **** 
 115:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 116:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
 117:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 118:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 119:./ucOSII/Core/os_flag.c ****     }
 120:./ucOSII/Core/os_flag.c **** #endif
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 4


 121:./ucOSII/Core/os_flag.c **** 
 122:./ucOSII/Core/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 123:./ucOSII/Core/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                      
  53              		.loc 1 123 8
  54 0016 FB68     		ldr	r3, [r7, #12]
  55 0018 002B     		cmp	r3, #0
  56 001a 04D1     		bne	.L2
 124:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
  57              		.loc 1 124 15
  58 001c 7B68     		ldr	r3, [r7, #4]
  59 001e 6E22     		movs	r2, #110
  60 0020 1A70     		strb	r2, [r3]
 125:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
  61              		.loc 1 125 16
  62 0022 0023     		movs	r3, #0
  63 0024 AAE0     		b	.L3
  64              	.L2:
 126:./ucOSII/Core/os_flag.c ****     }
 127:./ucOSII/Core/os_flag.c **** #endif
 128:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type            
  65              		.loc 1 128 13
  66 0026 FB68     		ldr	r3, [r7, #12]
  67 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  68              		.loc 1 128 8
  69 002a 052B     		cmp	r3, #5
  70 002c 04D0     		beq	.L4
 129:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
  71              		.loc 1 129 15
  72 002e 7B68     		ldr	r3, [r7, #4]
  73 0030 0122     		movs	r2, #1
  74 0032 1A70     		strb	r2, [r3]
 130:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
  75              		.loc 1 130 16
  76 0034 0023     		movs	r3, #0
  77 0036 A1E0     		b	.L3
  78              	.L4:
 131:./ucOSII/Core/os_flag.c ****     }
 132:./ucOSII/Core/os_flag.c ****     result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  79              		.loc 1 132 12
  80 0038 7B7A     		ldrb	r3, [r7, #9]
  81 003a 23F07F03 		bic	r3, r3, #127
  82 003e FB75     		strb	r3, [r7, #23]
 133:./ucOSII/Core/os_flag.c ****     if (result != (INT8U)0) {                              /* See if we need to consume the flags  
  83              		.loc 1 133 8
  84 0040 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  85 0042 002B     		cmp	r3, #0
  86 0044 06D0     		beq	.L5
 134:./ucOSII/Core/os_flag.c ****         wait_type &= ~OS_FLAG_CONSUME;
  87              		.loc 1 134 19
  88 0046 7B7A     		ldrb	r3, [r7, #9]
  89 0048 03F07F03 		and	r3, r3, #127
  90 004c 7B72     		strb	r3, [r7, #9]
 135:./ucOSII/Core/os_flag.c ****         consume    = OS_TRUE;
  91              		.loc 1 135 20
  92 004e 0123     		movs	r3, #1
  93 0050 7B77     		strb	r3, [r7, #29]
  94 0052 01E0     		b	.L6
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 5


  95              	.L5:
 136:./ucOSII/Core/os_flag.c ****     } else {
 137:./ucOSII/Core/os_flag.c ****         consume    = OS_FALSE;
  96              		.loc 1 137 20
  97 0054 0023     		movs	r3, #0
  98 0056 7B77     		strb	r3, [r7, #29]
  99              	.L6:
 138:./ucOSII/Core/os_flag.c ****     }
 139:./ucOSII/Core/os_flag.c **** 
 140:./ucOSII/Core/os_flag.c ****     *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwis
 100              		.loc 1 140 11
 101 0058 7B68     		ldr	r3, [r7, #4]
 102 005a 0022     		movs	r2, #0
 103 005c 1A70     		strb	r2, [r3]
 141:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 104              		.loc 1 141 5
 105 005e 4020     		movs	r0, #64
 106 0060 FFF7FEFF 		bl	OS_CPU_SR_Save
 107 0064 B861     		str	r0, [r7, #24]
 142:./ucOSII/Core/os_flag.c ****     switch (wait_type) {
 108              		.loc 1 142 5
 109 0066 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 110 0068 032B     		cmp	r3, #3
 111 006a 7DD8     		bhi	.L7
 112 006c 01A2     		adr	r2, .L9
 113 006e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 114 0072 00BF     		.p2align 2
 115              	.L9:
 116 0074 F7000000 		.word	.L12+1
 117 0078 31010000 		.word	.L11+1
 118 007c 85000000 		.word	.L10+1
 119 0080 BF000000 		.word	.L8+1
 120              		.p2align 1
 121              	.L10:
 143:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set    
 144:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we wan
 122              		.loc 1 144 41
 123 0084 FB68     		ldr	r3, [r7, #12]
 124 0086 1A89     		ldrh	r2, [r3, #8]
 125              		.loc 1 144 24
 126 0088 7B89     		ldrh	r3, [r7, #10]	@ movhi
 127 008a 1340     		ands	r3, r3, r2
 128 008c FB83     		strh	r3, [r7, #30]	@ movhi
 145:./ucOSII/Core/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 129              		.loc 1 145 17
 130 008e FA8B     		ldrh	r2, [r7, #30]
 131 0090 7B89     		ldrh	r3, [r7, #10]
 132 0092 9A42     		cmp	r2, r3
 133 0094 0CD1     		bne	.L13
 146:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 134              		.loc 1 146 21
 135 0096 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 136 0098 012B     		cmp	r3, #1
 137 009a 0CD1     		bne	.L14
 147:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we want
 138              		.loc 1 147 40
 139 009c FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 6


 140 009e 1A89     		ldrh	r2, [r3, #8]
 141              		.loc 1 147 43
 142 00a0 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 143 00a2 DB43     		mvns	r3, r3
 144 00a4 9BB2     		uxth	r3, r3
 145              		.loc 1 147 40
 146 00a6 1340     		ands	r3, r3, r2
 147 00a8 9AB2     		uxth	r2, r3
 148 00aa FB68     		ldr	r3, [r7, #12]
 149 00ac 1A81     		strh	r2, [r3, #8]	@ movhi
 150 00ae 02E0     		b	.L14
 151              	.L13:
 148:./ucOSII/Core/os_flag.c ****                  }
 149:./ucOSII/Core/os_flag.c ****              } else {
 150:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
 152              		.loc 1 150 24
 153 00b0 7B68     		ldr	r3, [r7, #4]
 154 00b2 7022     		movs	r2, #112
 155 00b4 1A70     		strb	r2, [r3]
 156              	.L14:
 151:./ucOSII/Core/os_flag.c ****              }
 152:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 157              		.loc 1 152 14
 158 00b6 B869     		ldr	r0, [r7, #24]
 159 00b8 FFF7FEFF 		bl	OS_CPU_SR_Restore
 153:./ucOSII/Core/os_flag.c ****              break;
 160              		.loc 1 153 14
 161 00bc 5DE0     		b	.L15
 162              	.L8:
 154:./ucOSII/Core/os_flag.c **** 
 155:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_SET_ANY:
 156:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we wan
 163              		.loc 1 156 41
 164 00be FB68     		ldr	r3, [r7, #12]
 165 00c0 1A89     		ldrh	r2, [r3, #8]
 166              		.loc 1 156 24
 167 00c2 7B89     		ldrh	r3, [r7, #10]	@ movhi
 168 00c4 1340     		ands	r3, r3, r2
 169 00c6 FB83     		strh	r3, [r7, #30]	@ movhi
 157:./ucOSII/Core/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 170              		.loc 1 157 17
 171 00c8 FB8B     		ldrh	r3, [r7, #30]
 172 00ca 002B     		cmp	r3, #0
 173 00cc 0CD0     		beq	.L16
 158:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 174              		.loc 1 158 21
 175 00ce 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 176 00d0 012B     		cmp	r3, #1
 177 00d2 0CD1     		bne	.L17
 159:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got 
 178              		.loc 1 159 40
 179 00d4 FB68     		ldr	r3, [r7, #12]
 180 00d6 1A89     		ldrh	r2, [r3, #8]
 181              		.loc 1 159 43
 182 00d8 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 183 00da DB43     		mvns	r3, r3
 184 00dc 9BB2     		uxth	r3, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 7


 185              		.loc 1 159 40
 186 00de 1340     		ands	r3, r3, r2
 187 00e0 9AB2     		uxth	r2, r3
 188 00e2 FB68     		ldr	r3, [r7, #12]
 189 00e4 1A81     		strh	r2, [r3, #8]	@ movhi
 190 00e6 02E0     		b	.L17
 191              	.L16:
 160:./ucOSII/Core/os_flag.c ****                  }
 161:./ucOSII/Core/os_flag.c ****              } else {
 162:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
 192              		.loc 1 162 24
 193 00e8 7B68     		ldr	r3, [r7, #4]
 194 00ea 7022     		movs	r2, #112
 195 00ec 1A70     		strb	r2, [r3]
 196              	.L17:
 163:./ucOSII/Core/os_flag.c ****              }
 164:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 197              		.loc 1 164 14
 198 00ee B869     		ldr	r0, [r7, #24]
 199 00f0 FFF7FEFF 		bl	OS_CPU_SR_Restore
 165:./ucOSII/Core/os_flag.c ****              break;
 200              		.loc 1 165 14
 201 00f4 41E0     		b	.L15
 202              	.L12:
 166:./ucOSII/Core/os_flag.c **** 
 167:./ucOSII/Core/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 168:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared
 169:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want 
 203              		.loc 1 169 41
 204 00f6 FB68     		ldr	r3, [r7, #12]
 205 00f8 1B89     		ldrh	r3, [r3, #8]
 206              		.loc 1 169 26
 207 00fa DB43     		mvns	r3, r3
 208 00fc 9AB2     		uxth	r2, r3
 209              		.loc 1 169 24
 210 00fe 7B89     		ldrh	r3, [r7, #10]	@ movhi
 211 0100 1340     		ands	r3, r3, r2
 212 0102 FB83     		strh	r3, [r7, #30]	@ movhi
 170:./ucOSII/Core/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 213              		.loc 1 170 17
 214 0104 FA8B     		ldrh	r2, [r7, #30]
 215 0106 7B89     		ldrh	r3, [r7, #10]
 216 0108 9A42     		cmp	r2, r3
 217 010a 0AD1     		bne	.L18
 171:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 218              		.loc 1 171 21
 219 010c 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 220 010e 012B     		cmp	r3, #1
 221 0110 0AD1     		bne	.L19
 172:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 222              		.loc 1 172 40
 223 0112 FB68     		ldr	r3, [r7, #12]
 224 0114 1A89     		ldrh	r2, [r3, #8]
 225 0116 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 226 0118 1343     		orrs	r3, r3, r2
 227 011a 9AB2     		uxth	r2, r3
 228 011c FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 8


 229 011e 1A81     		strh	r2, [r3, #8]	@ movhi
 230 0120 02E0     		b	.L19
 231              	.L18:
 173:./ucOSII/Core/os_flag.c ****                  }
 174:./ucOSII/Core/os_flag.c ****              } else {
 175:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
 232              		.loc 1 175 24
 233 0122 7B68     		ldr	r3, [r7, #4]
 234 0124 7022     		movs	r2, #112
 235 0126 1A70     		strb	r2, [r3]
 236              	.L19:
 176:./ucOSII/Core/os_flag.c ****              }
 177:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 237              		.loc 1 177 14
 238 0128 B869     		ldr	r0, [r7, #24]
 239 012a FFF7FEFF 		bl	OS_CPU_SR_Restore
 178:./ucOSII/Core/os_flag.c ****              break;
 240              		.loc 1 178 14
 241 012e 24E0     		b	.L15
 242              	.L11:
 179:./ucOSII/Core/os_flag.c **** 
 180:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_CLR_ANY:
 181:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want  
 243              		.loc 1 181 41
 244 0130 FB68     		ldr	r3, [r7, #12]
 245 0132 1B89     		ldrh	r3, [r3, #8]
 246              		.loc 1 181 26
 247 0134 DB43     		mvns	r3, r3
 248 0136 9AB2     		uxth	r2, r3
 249              		.loc 1 181 24
 250 0138 7B89     		ldrh	r3, [r7, #10]	@ movhi
 251 013a 1340     		ands	r3, r3, r2
 252 013c FB83     		strh	r3, [r7, #30]	@ movhi
 182:./ucOSII/Core/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
 253              		.loc 1 182 17
 254 013e FB8B     		ldrh	r3, [r7, #30]
 255 0140 002B     		cmp	r3, #0
 256 0142 0AD0     		beq	.L20
 183:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 257              		.loc 1 183 21
 258 0144 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 259 0146 012B     		cmp	r3, #1
 260 0148 0AD1     		bne	.L21
 184:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 261              		.loc 1 184 40
 262 014a FB68     		ldr	r3, [r7, #12]
 263 014c 1A89     		ldrh	r2, [r3, #8]
 264 014e FB8B     		ldrh	r3, [r7, #30]	@ movhi
 265 0150 1343     		orrs	r3, r3, r2
 266 0152 9AB2     		uxth	r2, r3
 267 0154 FB68     		ldr	r3, [r7, #12]
 268 0156 1A81     		strh	r2, [r3, #8]	@ movhi
 269 0158 02E0     		b	.L21
 270              	.L20:
 185:./ucOSII/Core/os_flag.c ****                  }
 186:./ucOSII/Core/os_flag.c ****              } else {
 187:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 9


 271              		.loc 1 187 24
 272 015a 7B68     		ldr	r3, [r7, #4]
 273 015c 7022     		movs	r2, #112
 274 015e 1A70     		strb	r2, [r3]
 275              	.L21:
 188:./ucOSII/Core/os_flag.c ****              }
 189:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 276              		.loc 1 189 14
 277 0160 B869     		ldr	r0, [r7, #24]
 278 0162 FFF7FEFF 		bl	OS_CPU_SR_Restore
 190:./ucOSII/Core/os_flag.c ****              break;
 279              		.loc 1 190 14
 280 0166 08E0     		b	.L15
 281              	.L7:
 191:./ucOSII/Core/os_flag.c **** #endif
 192:./ucOSII/Core/os_flag.c **** 
 193:./ucOSII/Core/os_flag.c ****         default:
 194:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 282              		.loc 1 194 14
 283 0168 B869     		ldr	r0, [r7, #24]
 284 016a FFF7FEFF 		bl	OS_CPU_SR_Restore
 195:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 285              		.loc 1 195 24
 286 016e 0023     		movs	r3, #0
 287 0170 FB83     		strh	r3, [r7, #30]	@ movhi
 196:./ucOSII/Core/os_flag.c ****              *perr     = OS_ERR_FLAG_WAIT_TYPE;
 288              		.loc 1 196 24
 289 0172 7B68     		ldr	r3, [r7, #4]
 290 0174 6F22     		movs	r2, #111
 291 0176 1A70     		strb	r2, [r3]
 197:./ucOSII/Core/os_flag.c ****              break;
 292              		.loc 1 197 14
 293 0178 00BF     		nop
 294              	.L15:
 198:./ucOSII/Core/os_flag.c ****     }
 199:./ucOSII/Core/os_flag.c ****     return (flags_rdy);
 295              		.loc 1 199 12
 296 017a FB8B     		ldrh	r3, [r7, #30]
 297              	.L3:
 200:./ucOSII/Core/os_flag.c **** }
 298              		.loc 1 200 1
 299 017c 1846     		mov	r0, r3
 300 017e 2037     		adds	r7, r7, #32
 301              	.LCFI3:
 302              		.cfi_def_cfa_offset 8
 303 0180 BD46     		mov	sp, r7
 304              	.LCFI4:
 305              		.cfi_def_cfa_register 13
 306              		@ sp needed
 307 0182 80BD     		pop	{r7, pc}
 308              		.cfi_endproc
 309              	.LFE3:
 311              		.section	.rodata
 312              		.align	2
 313              	.LC0:
 314 0000 3F00     		.ascii	"?\000"
 315              		.section	.text.OSFlagCreate,"ax",%progbits
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 10


 316              		.align	1
 317              		.global	OSFlagCreate
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 322              	OSFlagCreate:
 323              	.LFB4:
 201:./ucOSII/Core/os_flag.c **** #endif
 202:./ucOSII/Core/os_flag.c **** 
 203:./ucOSII/Core/os_flag.c **** 
 204:./ucOSII/Core/os_flag.c **** /*
 205:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 206:./ucOSII/Core/os_flag.c **** *                                        CREATE AN EVENT FLAG
 207:./ucOSII/Core/os_flag.c **** *
 208:./ucOSII/Core/os_flag.c **** * Description: This function is called to create an event flag group.
 209:./ucOSII/Core/os_flag.c **** *
 210:./ucOSII/Core/os_flag.c **** * Arguments  : flags         Contains the initial value to store in the event flag group.
 211:./ucOSII/Core/os_flag.c **** *
 212:./ucOSII/Core/os_flag.c **** *              perr          is a pointer to an error code which will be returned to your applicati
 213:./ucOSII/Core/os_flag.c **** *                               OS_ERR_NONE                     if the call was successful.
 214:./ucOSII/Core/os_flag.c **** *                               OS_ERR_CREATE_ISR               if you attempted to create an Event
 215:./ucOSII/Core/os_flag.c **** *                                                               ISR.
 216:./ucOSII/Core/os_flag.c **** *                               OS_ERR_FLAG_GRP_DEPLETED        if there are no more event flag gro
 217:./ucOSII/Core/os_flag.c **** *                               OS_ERR_ILLEGAL_CREATE_RUN_TIME  if you tried to create an event fla
 218:./ucOSII/Core/os_flag.c **** *                                                               safety critical operation started.
 219:./ucOSII/Core/os_flag.c **** *
 220:./ucOSII/Core/os_flag.c **** * Returns    : A pointer to an event flag group or a NULL pointer if no more groups are available.
 221:./ucOSII/Core/os_flag.c **** *
 222:./ucOSII/Core/os_flag.c **** * Called from: Task ONLY
 223:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 224:./ucOSII/Core/os_flag.c **** */
 225:./ucOSII/Core/os_flag.c **** 
 226:./ucOSII/Core/os_flag.c **** OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
 227:./ucOSII/Core/os_flag.c ****                             INT8U    *perr)
 228:./ucOSII/Core/os_flag.c **** {
 324              		.loc 1 228 1
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 16
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328 0000 80B5     		push	{r7, lr}
 329              	.LCFI5:
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 84B0     		sub	sp, sp, #16
 334              	.LCFI6:
 335              		.cfi_def_cfa_offset 24
 336 0004 00AF     		add	r7, sp, #0
 337              	.LCFI7:
 338              		.cfi_def_cfa_register 7
 339 0006 0346     		mov	r3, r0
 340 0008 3960     		str	r1, [r7]
 341 000a FB80     		strh	r3, [r7, #6]	@ movhi
 229:./ucOSII/Core/os_flag.c ****     OS_FLAG_GRP *pgrp;
 230:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register    
 231:./ucOSII/Core/os_flag.c ****     OS_CPU_SR    cpu_sr = 0u;
 342              		.loc 1 231 18
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 11


 343 000c 0023     		movs	r3, #0
 344 000e FB60     		str	r3, [r7, #12]
 232:./ucOSII/Core/os_flag.c **** #endif
 233:./ucOSII/Core/os_flag.c **** 
 234:./ucOSII/Core/os_flag.c **** 
 235:./ucOSII/Core/os_flag.c **** 
 236:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 237:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
 238:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 239:./ucOSII/Core/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 240:./ucOSII/Core/os_flag.c ****     }
 241:./ucOSII/Core/os_flag.c **** #endif
 242:./ucOSII/Core/os_flag.c **** 
 243:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL_IEC61508
 244:./ucOSII/Core/os_flag.c ****     if (OSSafetyCriticalStartFlag == OS_TRUE) {
 245:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 246:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
 247:./ucOSII/Core/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 248:./ucOSII/Core/os_flag.c ****     }
 249:./ucOSII/Core/os_flag.c **** #endif
 250:./ucOSII/Core/os_flag.c **** 
 251:./ucOSII/Core/os_flag.c ****     if (OSIntNesting > 0u) {                        /* See if called from ISR ...                  
 345              		.loc 1 251 22
 346 0010 1A4B     		ldr	r3, .L27
 347 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 348              		.loc 1 251 8
 349 0014 002B     		cmp	r3, #0
 350 0016 04D0     		beq	.L23
 252:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                
 351              		.loc 1 252 15
 352 0018 3B68     		ldr	r3, [r7]
 353 001a 1022     		movs	r2, #16
 354 001c 1A70     		strb	r2, [r3]
 253:./ucOSII/Core/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 355              		.loc 1 253 16
 356 001e 0023     		movs	r3, #0
 357 0020 28E0     		b	.L24
 358              	.L23:
 254:./ucOSII/Core/os_flag.c ****     }
 255:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 359              		.loc 1 255 5
 360 0022 4020     		movs	r0, #64
 361 0024 FFF7FEFF 		bl	OS_CPU_SR_Save
 362 0028 F860     		str	r0, [r7, #12]
 256:./ucOSII/Core/os_flag.c ****     pgrp = OSFlagFreeList;                          /* Get next free event flag                    
 363              		.loc 1 256 10
 364 002a 154B     		ldr	r3, .L27+4
 365 002c 1B68     		ldr	r3, [r3]
 366 002e BB60     		str	r3, [r7, #8]
 257:./ucOSII/Core/os_flag.c ****     if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available  
 367              		.loc 1 257 8
 368 0030 BB68     		ldr	r3, [r7, #8]
 369 0032 002B     		cmp	r3, #0
 370 0034 17D0     		beq	.L25
 258:./ucOSII/Core/os_flag.c ****                                                     /* Adjust free list                            
 259:./ucOSII/Core/os_flag.c ****         OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 371              		.loc 1 259 61
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 12


 372 0036 124B     		ldr	r3, .L27+4
 373 0038 1B68     		ldr	r3, [r3]
 374 003a 5B68     		ldr	r3, [r3, #4]
 375              		.loc 1 259 30
 376 003c 104A     		ldr	r2, .L27+4
 377 003e 1360     		str	r3, [r2]
 260:./ucOSII/Core/os_flag.c ****         pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                
 378              		.loc 1 260 30
 379 0040 BB68     		ldr	r3, [r7, #8]
 380 0042 0522     		movs	r2, #5
 381 0044 1A70     		strb	r2, [r3]
 261:./ucOSII/Core/os_flag.c ****         pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                
 382              		.loc 1 261 30
 383 0046 BB68     		ldr	r3, [r7, #8]
 384 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 385 004a 1A81     		strh	r2, [r3, #8]	@ movhi
 262:./ucOSII/Core/os_flag.c ****         pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags        
 386              		.loc 1 262 30
 387 004c BB68     		ldr	r3, [r7, #8]
 388 004e 0022     		movs	r2, #0
 389 0050 5A60     		str	r2, [r3, #4]
 263:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 264:./ucOSII/Core/os_flag.c ****         pgrp->OSFlagName     = (INT8U *)(void *)"?";
 390              		.loc 1 264 30
 391 0052 BB68     		ldr	r3, [r7, #8]
 392 0054 0B4A     		ldr	r2, .L27+8
 393 0056 DA60     		str	r2, [r3, #12]
 265:./ucOSII/Core/os_flag.c **** #endif
 266:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_CREATE(pgrp, pgrp->OSFlagName);
 267:./ucOSII/Core/os_flag.c ****         OS_EXIT_CRITICAL();
 394              		.loc 1 267 9
 395 0058 F868     		ldr	r0, [r7, #12]
 396 005a FFF7FEFF 		bl	OS_CPU_SR_Restore
 268:./ucOSII/Core/os_flag.c ****         *perr                = OS_ERR_NONE;
 397              		.loc 1 268 30
 398 005e 3B68     		ldr	r3, [r7]
 399 0060 0022     		movs	r2, #0
 400 0062 1A70     		strb	r2, [r3]
 401 0064 05E0     		b	.L26
 402              	.L25:
 269:./ucOSII/Core/os_flag.c ****     } else {
 270:./ucOSII/Core/os_flag.c ****         OS_EXIT_CRITICAL();
 403              		.loc 1 270 9
 404 0066 F868     		ldr	r0, [r7, #12]
 405 0068 FFF7FEFF 		bl	OS_CPU_SR_Restore
 271:./ucOSII/Core/os_flag.c ****         *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 406              		.loc 1 271 30
 407 006c 3B68     		ldr	r3, [r7]
 408 006e 7222     		movs	r2, #114
 409 0070 1A70     		strb	r2, [r3]
 410              	.L26:
 272:./ucOSII/Core/os_flag.c ****     }
 273:./ucOSII/Core/os_flag.c ****     return (pgrp);                                  /* Return pointer to event flag group          
 411              		.loc 1 273 12
 412 0072 BB68     		ldr	r3, [r7, #8]
 413              	.L24:
 274:./ucOSII/Core/os_flag.c **** }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 13


 414              		.loc 1 274 1
 415 0074 1846     		mov	r0, r3
 416 0076 1037     		adds	r7, r7, #16
 417              	.LCFI8:
 418              		.cfi_def_cfa_offset 8
 419 0078 BD46     		mov	sp, r7
 420              	.LCFI9:
 421              		.cfi_def_cfa_register 13
 422              		@ sp needed
 423 007a 80BD     		pop	{r7, pc}
 424              	.L28:
 425              		.align	2
 426              	.L27:
 427 007c 00000000 		.word	OSIntNesting
 428 0080 00000000 		.word	OSFlagFreeList
 429 0084 00000000 		.word	.LC0
 430              		.cfi_endproc
 431              	.LFE4:
 433              		.section	.text.OSFlagDel,"ax",%progbits
 434              		.align	1
 435              		.global	OSFlagDel
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 440              	OSFlagDel:
 441              	.LFB5:
 275:./ucOSII/Core/os_flag.c **** 
 276:./ucOSII/Core/os_flag.c **** 
 277:./ucOSII/Core/os_flag.c **** /*
 278:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 279:./ucOSII/Core/os_flag.c **** *                                     DELETE AN EVENT FLAG GROUP
 280:./ucOSII/Core/os_flag.c **** *
 281:./ucOSII/Core/os_flag.c **** * Description: This function deletes an event flag group and readies all tasks pending on the event
 282:./ucOSII/Core/os_flag.c **** *              group.
 283:./ucOSII/Core/os_flag.c **** *
 284:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
 285:./ucOSII/Core/os_flag.c **** *
 286:./ucOSII/Core/os_flag.c **** *              opt           determines delete options as follows:
 287:./ucOSII/Core/os_flag.c **** *                            opt == OS_DEL_NO_PEND   Deletes the event flag group ONLY if no task p
 288:./ucOSII/Core/os_flag.c **** *                            opt == OS_DEL_ALWAYS    Deletes the event flag group even if tasks are
 289:./ucOSII/Core/os_flag.c **** *                                                    waiting.  In this case, all the tasks pending 
 290:./ucOSII/Core/os_flag.c **** *                                                    readied.
 291:./ucOSII/Core/os_flag.c **** *
 292:./ucOSII/Core/os_flag.c **** *              perr          is a pointer to an error code that can contain one of the following va
 293:./ucOSII/Core/os_flag.c **** *                            OS_ERR_NONE                  The call was successful and the event fla
 294:./ucOSII/Core/os_flag.c **** *                                                         deleted
 295:./ucOSII/Core/os_flag.c **** *                            OS_ERR_DEL_ISR               If you attempted to delete the event flag
 296:./ucOSII/Core/os_flag.c **** *                                                         an ISR
 297:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP     If 'pgrp' is a NULL pointer.
 298:./ucOSII/Core/os_flag.c **** *                            OS_ERR_EVENT_TYPE            If you didn't pass a pointer to an event 
 299:./ucOSII/Core/os_flag.c **** *                            OS_ERR_ILLEGAL_DEL_RUN_TIME  If you tried to delete an event flag afte
 300:./ucOSII/Core/os_flag.c **** *                                                         safety critical operation started.
 301:./ucOSII/Core/os_flag.c **** *                            OS_ERR_INVALID_OPT           An invalid option was specified
 302:./ucOSII/Core/os_flag.c **** *                            OS_ERR_TASK_WAITING          One or more tasks were waiting on the eve
 303:./ucOSII/Core/os_flag.c **** *                                                         group.
 304:./ucOSII/Core/os_flag.c **** *
 305:./ucOSII/Core/os_flag.c **** * Returns    : pgrp          upon error
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 14


 306:./ucOSII/Core/os_flag.c **** *              (OS_EVENT *)0 if the event flag group was successfully deleted.
 307:./ucOSII/Core/os_flag.c **** *
 308:./ucOSII/Core/os_flag.c **** * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the prese
 309:./ucOSII/Core/os_flag.c **** *                 the event flag group MUST check the return code of OSFlagAccept() and OSFlagPend(
 310:./ucOSII/Core/os_flag.c **** *              2) This call can potentially disable interrupts for a long time.  The interrupt disa
 311:./ucOSII/Core/os_flag.c **** *                 time is directly proportional to the number of tasks waiting on the event flag gr
 312:./ucOSII/Core/os_flag.c **** *              3) All tasks that were waiting for the event flag will be readied and returned an
 313:./ucOSII/Core/os_flag.c **** *                 OS_ERR_PEND_ABORT if OSFlagDel() was called with OS_DEL_ALWAYS
 314:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 315:./ucOSII/Core/os_flag.c **** */
 316:./ucOSII/Core/os_flag.c **** 
 317:./ucOSII/Core/os_flag.c **** #if OS_FLAG_DEL_EN > 0u
 318:./ucOSII/Core/os_flag.c **** OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP  *pgrp,
 319:./ucOSII/Core/os_flag.c ****                          INT8U         opt,
 320:./ucOSII/Core/os_flag.c ****                          INT8U        *perr)
 321:./ucOSII/Core/os_flag.c **** {
 442              		.loc 1 321 1
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 32
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446 0000 80B5     		push	{r7, lr}
 447              	.LCFI10:
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 88B0     		sub	sp, sp, #32
 452              	.LCFI11:
 453              		.cfi_def_cfa_offset 40
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI12:
 456              		.cfi_def_cfa_register 7
 457 0006 F860     		str	r0, [r7, #12]
 458 0008 0B46     		mov	r3, r1
 459 000a 7A60     		str	r2, [r7, #4]
 460 000c FB72     		strb	r3, [r7, #11]
 322:./ucOSII/Core/os_flag.c ****     BOOLEAN       tasks_waiting;
 323:./ucOSII/Core/os_flag.c ****     OS_FLAG_NODE *pnode;
 324:./ucOSII/Core/os_flag.c ****     OS_FLAG_GRP  *pgrp_return;
 325:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 326:./ucOSII/Core/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 461              		.loc 1 326 19
 462 000e 0023     		movs	r3, #0
 463 0010 3B61     		str	r3, [r7, #16]
 327:./ucOSII/Core/os_flag.c **** #endif
 328:./ucOSII/Core/os_flag.c **** 
 329:./ucOSII/Core/os_flag.c **** 
 330:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 331:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
 332:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 333:./ucOSII/Core/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 334:./ucOSII/Core/os_flag.c ****     }
 335:./ucOSII/Core/os_flag.c **** #endif
 336:./ucOSII/Core/os_flag.c **** 
 337:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL_IEC61508
 338:./ucOSII/Core/os_flag.c ****     if (OSSafetyCriticalStartFlag == OS_TRUE) {
 339:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 340:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_ILLEGAL_DEL_RUN_TIME;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 15


 341:./ucOSII/Core/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 342:./ucOSII/Core/os_flag.c ****     }
 343:./ucOSII/Core/os_flag.c **** #endif
 344:./ucOSII/Core/os_flag.c **** 
 345:./ucOSII/Core/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 346:./ucOSII/Core/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                      
 464              		.loc 1 346 8
 465 0012 FB68     		ldr	r3, [r7, #12]
 466 0014 002B     		cmp	r3, #0
 467 0016 04D1     		bne	.L30
 347:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 468              		.loc 1 347 15
 469 0018 7B68     		ldr	r3, [r7, #4]
 470 001a 6E22     		movs	r2, #110
 471 001c 1A70     		strb	r2, [r3]
 348:./ucOSII/Core/os_flag.c ****         return (pgrp);
 472              		.loc 1 348 16
 473 001e FB68     		ldr	r3, [r7, #12]
 474 0020 80E0     		b	.L31
 475              	.L30:
 349:./ucOSII/Core/os_flag.c ****     }
 350:./ucOSII/Core/os_flag.c **** #endif
 351:./ucOSII/Core/os_flag.c **** 
 352:./ucOSII/Core/os_flag.c ****     OS_TRACE_FLAG_DEL_ENTER(pgrp, opt);
 353:./ucOSII/Core/os_flag.c **** 
 354:./ucOSII/Core/os_flag.c ****     if (OSIntNesting > 0u) {                               /* See if called from ISR ...           
 476              		.loc 1 354 22
 477 0022 424B     		ldr	r3, .L46
 478 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 479              		.loc 1 354 8
 480 0026 002B     		cmp	r3, #0
 481 0028 04D0     		beq	.L32
 355:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR         
 482              		.loc 1 355 15
 483 002a 7B68     		ldr	r3, [r7, #4]
 484 002c 0F22     		movs	r2, #15
 485 002e 1A70     		strb	r2, [r3]
 356:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_DEL_EXIT(*perr);
 357:./ucOSII/Core/os_flag.c ****         return (pgrp);
 486              		.loc 1 357 16
 487 0030 FB68     		ldr	r3, [r7, #12]
 488 0032 77E0     		b	.L31
 489              	.L32:
 358:./ucOSII/Core/os_flag.c ****     }
 359:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type            
 490              		.loc 1 359 13
 491 0034 FB68     		ldr	r3, [r7, #12]
 492 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 493              		.loc 1 359 8
 494 0038 052B     		cmp	r3, #5
 495 003a 04D0     		beq	.L33
 360:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 496              		.loc 1 360 15
 497 003c 7B68     		ldr	r3, [r7, #4]
 498 003e 0122     		movs	r2, #1
 499 0040 1A70     		strb	r2, [r3]
 361:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_DEL_EXIT(*perr);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 16


 362:./ucOSII/Core/os_flag.c ****         return (pgrp);
 500              		.loc 1 362 16
 501 0042 FB68     		ldr	r3, [r7, #12]
 502 0044 6EE0     		b	.L31
 503              	.L33:
 363:./ucOSII/Core/os_flag.c ****     }
 364:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 504              		.loc 1 364 5
 505 0046 4020     		movs	r0, #64
 506 0048 FFF7FEFF 		bl	OS_CPU_SR_Save
 507 004c 3861     		str	r0, [r7, #16]
 365:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event fla
 508              		.loc 1 365 13
 509 004e FB68     		ldr	r3, [r7, #12]
 510 0050 5B68     		ldr	r3, [r3, #4]
 511              		.loc 1 365 8
 512 0052 002B     		cmp	r3, #0
 513 0054 02D0     		beq	.L34
 366:./ucOSII/Core/os_flag.c ****         tasks_waiting = OS_TRUE;                           /* Yes                                  
 514              		.loc 1 366 23
 515 0056 0123     		movs	r3, #1
 516 0058 FB77     		strb	r3, [r7, #31]
 517 005a 01E0     		b	.L35
 518              	.L34:
 367:./ucOSII/Core/os_flag.c ****     } else {
 368:./ucOSII/Core/os_flag.c ****         tasks_waiting = OS_FALSE;                          /* No                                   
 519              		.loc 1 368 23
 520 005c 0023     		movs	r3, #0
 521 005e FB77     		strb	r3, [r7, #31]
 522              	.L35:
 369:./ucOSII/Core/os_flag.c ****     }
 370:./ucOSII/Core/os_flag.c ****     switch (opt) {
 523              		.loc 1 370 5
 524 0060 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 525 0062 002B     		cmp	r3, #0
 526 0064 02D0     		beq	.L36
 527 0066 012B     		cmp	r3, #1
 528 0068 25D0     		beq	.L37
 529 006a 51E0     		b	.L45
 530              	.L36:
 371:./ucOSII/Core/os_flag.c ****         case OS_DEL_NO_PEND:                               /* Delete group if no task waiting      
 372:./ucOSII/Core/os_flag.c ****              if (tasks_waiting == OS_FALSE) {
 531              		.loc 1 372 17
 532 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 533 006e 002B     		cmp	r3, #0
 534 0070 18D1     		bne	.L39
 373:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 374:./ucOSII/Core/os_flag.c ****                  pgrp->OSFlagName     = (INT8U *)(void *)"?";
 535              		.loc 1 374 39
 536 0072 FB68     		ldr	r3, [r7, #12]
 537 0074 2E4A     		ldr	r2, .L46+4
 538 0076 DA60     		str	r2, [r3, #12]
 375:./ucOSII/Core/os_flag.c **** #endif
 376:./ucOSII/Core/os_flag.c ****                  pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 539              		.loc 1 376 39
 540 0078 FB68     		ldr	r3, [r7, #12]
 541 007a 0022     		movs	r2, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 17


 542 007c 1A70     		strb	r2, [r3]
 377:./ucOSII/Core/os_flag.c ****                  pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list       
 543              		.loc 1 377 39
 544 007e 2D4B     		ldr	r3, .L46+8
 545 0080 1A68     		ldr	r2, [r3]
 546 0082 FB68     		ldr	r3, [r7, #12]
 547 0084 5A60     		str	r2, [r3, #4]
 378:./ucOSII/Core/os_flag.c ****                  pgrp->OSFlagFlags    = (OS_FLAGS)0;
 548              		.loc 1 378 39
 549 0086 FB68     		ldr	r3, [r7, #12]
 550 0088 0022     		movs	r2, #0
 551 008a 1A81     		strh	r2, [r3, #8]	@ movhi
 379:./ucOSII/Core/os_flag.c ****                  OSFlagFreeList       = pgrp;
 552              		.loc 1 379 39
 553 008c 294A     		ldr	r2, .L46+8
 554 008e FB68     		ldr	r3, [r7, #12]
 555 0090 1360     		str	r3, [r2]
 380:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 556              		.loc 1 380 18
 557 0092 3869     		ldr	r0, [r7, #16]
 558 0094 FFF7FEFF 		bl	OS_CPU_SR_Restore
 381:./ucOSII/Core/os_flag.c ****                  *perr                = OS_ERR_NONE;
 559              		.loc 1 381 39
 560 0098 7B68     		ldr	r3, [r7, #4]
 561 009a 0022     		movs	r2, #0
 562 009c 1A70     		strb	r2, [r3]
 382:./ucOSII/Core/os_flag.c ****                  pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted    
 563              		.loc 1 382 39
 564 009e 0023     		movs	r3, #0
 565 00a0 7B61     		str	r3, [r7, #20]
 383:./ucOSII/Core/os_flag.c ****              } else {
 384:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 385:./ucOSII/Core/os_flag.c ****                  *perr                = OS_ERR_TASK_WAITING;
 386:./ucOSII/Core/os_flag.c ****                  pgrp_return          = pgrp;
 387:./ucOSII/Core/os_flag.c ****              }
 388:./ucOSII/Core/os_flag.c ****              break;
 566              		.loc 1 388 14
 567 00a2 3EE0     		b	.L41
 568              	.L39:
 384:./ucOSII/Core/os_flag.c ****                  *perr                = OS_ERR_TASK_WAITING;
 569              		.loc 1 384 18
 570 00a4 3869     		ldr	r0, [r7, #16]
 571 00a6 FFF7FEFF 		bl	OS_CPU_SR_Restore
 385:./ucOSII/Core/os_flag.c ****                  pgrp_return          = pgrp;
 572              		.loc 1 385 39
 573 00aa 7B68     		ldr	r3, [r7, #4]
 574 00ac 4922     		movs	r2, #73
 575 00ae 1A70     		strb	r2, [r3]
 386:./ucOSII/Core/os_flag.c ****              }
 576              		.loc 1 386 39
 577 00b0 FB68     		ldr	r3, [r7, #12]
 578 00b2 7B61     		str	r3, [r7, #20]
 579              		.loc 1 388 14
 580 00b4 35E0     		b	.L41
 581              	.L37:
 389:./ucOSII/Core/os_flag.c **** 
 390:./ucOSII/Core/os_flag.c ****         case OS_DEL_ALWAYS:                                /* Always delete the event flag group   
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 18


 391:./ucOSII/Core/os_flag.c ****              pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 582              		.loc 1 391 20
 583 00b6 FB68     		ldr	r3, [r7, #12]
 584 00b8 5B68     		ldr	r3, [r3, #4]
 585 00ba BB61     		str	r3, [r7, #24]
 392:./ucOSII/Core/os_flag.c ****              while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags    
 586              		.loc 1 392 20
 587 00bc 07E0     		b	.L42
 588              	.L43:
 393:./ucOSII/Core/os_flag.c ****                  (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0, OS_STAT_PEND_ABORT);
 589              		.loc 1 393 24
 590 00be 0222     		movs	r2, #2
 591 00c0 0021     		movs	r1, #0
 592 00c2 B869     		ldr	r0, [r7, #24]
 593 00c4 FFF7FEFF 		bl	OS_FlagTaskRdy
 394:./ucOSII/Core/os_flag.c ****                  pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 594              		.loc 1 394 24
 595 00c8 BB69     		ldr	r3, [r7, #24]
 596 00ca 1B68     		ldr	r3, [r3]
 597 00cc BB61     		str	r3, [r7, #24]
 598              	.L42:
 392:./ucOSII/Core/os_flag.c ****              while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags    
 599              		.loc 1 392 20
 600 00ce BB69     		ldr	r3, [r7, #24]
 601 00d0 002B     		cmp	r3, #0
 602 00d2 F4D1     		bne	.L43
 395:./ucOSII/Core/os_flag.c ****              }
 396:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 397:./ucOSII/Core/os_flag.c ****              pgrp->OSFlagName     = (INT8U *)(void *)"?";
 603              		.loc 1 397 35
 604 00d4 FB68     		ldr	r3, [r7, #12]
 605 00d6 164A     		ldr	r2, .L46+4
 606 00d8 DA60     		str	r2, [r3, #12]
 398:./ucOSII/Core/os_flag.c **** #endif
 399:./ucOSII/Core/os_flag.c ****              pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 607              		.loc 1 399 35
 608 00da FB68     		ldr	r3, [r7, #12]
 609 00dc 0022     		movs	r2, #0
 610 00de 1A70     		strb	r2, [r3]
 400:./ucOSII/Core/os_flag.c ****              pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list            
 611              		.loc 1 400 35
 612 00e0 144B     		ldr	r3, .L46+8
 613 00e2 1A68     		ldr	r2, [r3]
 614 00e4 FB68     		ldr	r3, [r7, #12]
 615 00e6 5A60     		str	r2, [r3, #4]
 401:./ucOSII/Core/os_flag.c ****              pgrp->OSFlagFlags    = (OS_FLAGS)0;
 616              		.loc 1 401 35
 617 00e8 FB68     		ldr	r3, [r7, #12]
 618 00ea 0022     		movs	r2, #0
 619 00ec 1A81     		strh	r2, [r3, #8]	@ movhi
 402:./ucOSII/Core/os_flag.c ****              OSFlagFreeList       = pgrp;
 620              		.loc 1 402 35
 621 00ee 114A     		ldr	r2, .L46+8
 622 00f0 FB68     		ldr	r3, [r7, #12]
 623 00f2 1360     		str	r3, [r2]
 403:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 624              		.loc 1 403 14
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 19


 625 00f4 3869     		ldr	r0, [r7, #16]
 626 00f6 FFF7FEFF 		bl	OS_CPU_SR_Restore
 404:./ucOSII/Core/os_flag.c ****              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiti
 627              		.loc 1 404 17
 628 00fa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 629 00fc 012B     		cmp	r3, #1
 630 00fe 01D1     		bne	.L44
 405:./ucOSII/Core/os_flag.c ****                  OS_Sched();                               /* Find highest priority task ready to r
 631              		.loc 1 405 18
 632 0100 FFF7FEFF 		bl	OS_Sched
 633              	.L44:
 406:./ucOSII/Core/os_flag.c ****              }
 407:./ucOSII/Core/os_flag.c ****              *perr = OS_ERR_NONE;
 634              		.loc 1 407 20
 635 0104 7B68     		ldr	r3, [r7, #4]
 636 0106 0022     		movs	r2, #0
 637 0108 1A70     		strb	r2, [r3]
 408:./ucOSII/Core/os_flag.c ****              pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted    
 638              		.loc 1 408 35
 639 010a 0023     		movs	r3, #0
 640 010c 7B61     		str	r3, [r7, #20]
 409:./ucOSII/Core/os_flag.c ****              break;
 641              		.loc 1 409 14
 642 010e 08E0     		b	.L41
 643              	.L45:
 410:./ucOSII/Core/os_flag.c **** 
 411:./ucOSII/Core/os_flag.c ****         default:
 412:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 644              		.loc 1 412 14
 645 0110 3869     		ldr	r0, [r7, #16]
 646 0112 FFF7FEFF 		bl	OS_CPU_SR_Restore
 413:./ucOSII/Core/os_flag.c ****              *perr                = OS_ERR_INVALID_OPT;
 647              		.loc 1 413 35
 648 0116 7B68     		ldr	r3, [r7, #4]
 649 0118 0722     		movs	r2, #7
 650 011a 1A70     		strb	r2, [r3]
 414:./ucOSII/Core/os_flag.c ****              pgrp_return          = pgrp;
 651              		.loc 1 414 35
 652 011c FB68     		ldr	r3, [r7, #12]
 653 011e 7B61     		str	r3, [r7, #20]
 415:./ucOSII/Core/os_flag.c ****              break;
 654              		.loc 1 415 14
 655 0120 00BF     		nop
 656              	.L41:
 416:./ucOSII/Core/os_flag.c ****     }
 417:./ucOSII/Core/os_flag.c **** 
 418:./ucOSII/Core/os_flag.c ****     OS_TRACE_FLAG_DEL_EXIT(*perr);
 419:./ucOSII/Core/os_flag.c **** 
 420:./ucOSII/Core/os_flag.c ****     return (pgrp_return);
 657              		.loc 1 420 12
 658 0122 7B69     		ldr	r3, [r7, #20]
 659              	.L31:
 421:./ucOSII/Core/os_flag.c **** }
 660              		.loc 1 421 1
 661 0124 1846     		mov	r0, r3
 662 0126 2037     		adds	r7, r7, #32
 663              	.LCFI13:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 20


 664              		.cfi_def_cfa_offset 8
 665 0128 BD46     		mov	sp, r7
 666              	.LCFI14:
 667              		.cfi_def_cfa_register 13
 668              		@ sp needed
 669 012a 80BD     		pop	{r7, pc}
 670              	.L47:
 671              		.align	2
 672              	.L46:
 673 012c 00000000 		.word	OSIntNesting
 674 0130 00000000 		.word	.LC0
 675 0134 00000000 		.word	OSFlagFreeList
 676              		.cfi_endproc
 677              	.LFE5:
 679              		.section	.text.OSFlagNameGet,"ax",%progbits
 680              		.align	1
 681              		.global	OSFlagNameGet
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 686              	OSFlagNameGet:
 687              	.LFB6:
 422:./ucOSII/Core/os_flag.c **** #endif
 423:./ucOSII/Core/os_flag.c **** 
 424:./ucOSII/Core/os_flag.c **** 
 425:./ucOSII/Core/os_flag.c **** /*
 426:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 427:./ucOSII/Core/os_flag.c **** *                                 GET THE NAME OF AN EVENT FLAG GROUP
 428:./ucOSII/Core/os_flag.c **** *
 429:./ucOSII/Core/os_flag.c **** * Description: This function is used to obtain the name assigned to an event flag group
 430:./ucOSII/Core/os_flag.c **** *
 431:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp      is a pointer to the event flag group.
 432:./ucOSII/Core/os_flag.c **** *
 433:./ucOSII/Core/os_flag.c **** *              pname     is pointer to a pointer to an ASCII string that will receive the name of t
 434:./ucOSII/Core/os_flag.c **** *                        group.
 435:./ucOSII/Core/os_flag.c **** *
 436:./ucOSII/Core/os_flag.c **** *              perr      is a pointer to an error code that can contain one of the following values
 437:./ucOSII/Core/os_flag.c **** *
 438:./ucOSII/Core/os_flag.c **** *                        OS_ERR_NONE                if the requested task is resumed
 439:./ucOSII/Core/os_flag.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to an event flag gr
 440:./ucOSII/Core/os_flag.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 441:./ucOSII/Core/os_flag.c **** *                        OS_ERR_FLAG_INVALID_PGRP   if you passed a NULL pointer for 'pgrp'
 442:./ucOSII/Core/os_flag.c **** *                        OS_ERR_NAME_GET_ISR        if you called this function from an ISR
 443:./ucOSII/Core/os_flag.c **** *
 444:./ucOSII/Core/os_flag.c **** * Returns    : The length of the string or 0 if the 'pgrp' is a NULL pointer.
 445:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 446:./ucOSII/Core/os_flag.c **** */
 447:./ucOSII/Core/os_flag.c **** 
 448:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 449:./ucOSII/Core/os_flag.c **** INT8U  OSFlagNameGet (OS_FLAG_GRP   *pgrp,
 450:./ucOSII/Core/os_flag.c ****                       INT8U        **pname,
 451:./ucOSII/Core/os_flag.c ****                       INT8U         *perr)
 452:./ucOSII/Core/os_flag.c **** {
 688              		.loc 1 452 1
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 24
 691              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 21


 692 0000 80B5     		push	{r7, lr}
 693              	.LCFI15:
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 86B0     		sub	sp, sp, #24
 698              	.LCFI16:
 699              		.cfi_def_cfa_offset 32
 700 0004 00AF     		add	r7, sp, #0
 701              	.LCFI17:
 702              		.cfi_def_cfa_register 7
 703 0006 F860     		str	r0, [r7, #12]
 704 0008 B960     		str	r1, [r7, #8]
 705 000a 7A60     		str	r2, [r7, #4]
 453:./ucOSII/Core/os_flag.c ****     INT8U      len;
 454:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register       
 455:./ucOSII/Core/os_flag.c ****     OS_CPU_SR  cpu_sr = 0u;
 706              		.loc 1 455 16
 707 000c 0023     		movs	r3, #0
 708 000e 7B61     		str	r3, [r7, #20]
 456:./ucOSII/Core/os_flag.c **** #endif
 457:./ucOSII/Core/os_flag.c **** 
 458:./ucOSII/Core/os_flag.c **** 
 459:./ucOSII/Core/os_flag.c **** 
 460:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 461:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
 462:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 463:./ucOSII/Core/os_flag.c ****         return (0u);
 464:./ucOSII/Core/os_flag.c ****     }
 465:./ucOSII/Core/os_flag.c **** #endif
 466:./ucOSII/Core/os_flag.c **** 
 467:./ucOSII/Core/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 468:./ucOSII/Core/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                      
 709              		.loc 1 468 8
 710 0010 FB68     		ldr	r3, [r7, #12]
 711 0012 002B     		cmp	r3, #0
 712 0014 04D1     		bne	.L49
 469:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 713              		.loc 1 469 15
 714 0016 7B68     		ldr	r3, [r7, #4]
 715 0018 6E22     		movs	r2, #110
 716 001a 1A70     		strb	r2, [r3]
 470:./ucOSII/Core/os_flag.c ****         return (0u);
 717              		.loc 1 470 16
 718 001c 0023     		movs	r3, #0
 719 001e 32E0     		b	.L50
 720              	.L49:
 471:./ucOSII/Core/os_flag.c ****     }
 472:./ucOSII/Core/os_flag.c ****     if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                    
 721              		.loc 1 472 8
 722 0020 BB68     		ldr	r3, [r7, #8]
 723 0022 002B     		cmp	r3, #0
 724 0024 04D1     		bne	.L51
 473:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_PNAME_NULL;
 725              		.loc 1 473 15
 726 0026 7B68     		ldr	r3, [r7, #4]
 727 0028 0C22     		movs	r2, #12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 22


 728 002a 1A70     		strb	r2, [r3]
 474:./ucOSII/Core/os_flag.c ****         return (0u);
 729              		.loc 1 474 16
 730 002c 0023     		movs	r3, #0
 731 002e 2AE0     		b	.L50
 732              	.L51:
 475:./ucOSII/Core/os_flag.c ****     }
 476:./ucOSII/Core/os_flag.c **** #endif
 477:./ucOSII/Core/os_flag.c ****     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR              
 733              		.loc 1 477 22
 734 0030 174B     		ldr	r3, .L54
 735 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 736              		.loc 1 477 8
 737 0034 002B     		cmp	r3, #0
 738 0036 04D0     		beq	.L52
 478:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_NAME_GET_ISR;
 739              		.loc 1 478 15
 740 0038 7B68     		ldr	r3, [r7, #4]
 741 003a 1122     		movs	r2, #17
 742 003c 1A70     		strb	r2, [r3]
 479:./ucOSII/Core/os_flag.c ****         return (0u);
 743              		.loc 1 479 16
 744 003e 0023     		movs	r3, #0
 745 0040 21E0     		b	.L50
 746              	.L52:
 480:./ucOSII/Core/os_flag.c ****     }
 481:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 747              		.loc 1 481 5
 748 0042 4020     		movs	r0, #64
 749 0044 FFF7FEFF 		bl	OS_CPU_SR_Save
 750 0048 7861     		str	r0, [r7, #20]
 482:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 751              		.loc 1 482 13
 752 004a FB68     		ldr	r3, [r7, #12]
 753 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 754              		.loc 1 482 8
 755 004e 052B     		cmp	r3, #5
 756 0050 07D0     		beq	.L53
 483:./ucOSII/Core/os_flag.c ****         OS_EXIT_CRITICAL();
 757              		.loc 1 483 9
 758 0052 7869     		ldr	r0, [r7, #20]
 759 0054 FFF7FEFF 		bl	OS_CPU_SR_Restore
 484:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 760              		.loc 1 484 15
 761 0058 7B68     		ldr	r3, [r7, #4]
 762 005a 0122     		movs	r2, #1
 763 005c 1A70     		strb	r2, [r3]
 485:./ucOSII/Core/os_flag.c ****         return (0u);
 764              		.loc 1 485 16
 765 005e 0023     		movs	r3, #0
 766 0060 11E0     		b	.L50
 767              	.L53:
 486:./ucOSII/Core/os_flag.c ****     }
 487:./ucOSII/Core/os_flag.c ****     *pname = pgrp->OSFlagName;
 768              		.loc 1 487 18
 769 0062 FB68     		ldr	r3, [r7, #12]
 770 0064 DA68     		ldr	r2, [r3, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 23


 771              		.loc 1 487 12
 772 0066 BB68     		ldr	r3, [r7, #8]
 773 0068 1A60     		str	r2, [r3]
 488:./ucOSII/Core/os_flag.c ****     len    = OS_StrLen(*pname);
 774              		.loc 1 488 14
 775 006a BB68     		ldr	r3, [r7, #8]
 776 006c 1B68     		ldr	r3, [r3]
 777 006e 1846     		mov	r0, r3
 778 0070 FFF7FEFF 		bl	OS_StrLen
 779 0074 0346     		mov	r3, r0
 780 0076 FB74     		strb	r3, [r7, #19]
 489:./ucOSII/Core/os_flag.c ****     OS_EXIT_CRITICAL();
 781              		.loc 1 489 5
 782 0078 7869     		ldr	r0, [r7, #20]
 783 007a FFF7FEFF 		bl	OS_CPU_SR_Restore
 490:./ucOSII/Core/os_flag.c ****     *perr  = OS_ERR_NONE;
 784              		.loc 1 490 12
 785 007e 7B68     		ldr	r3, [r7, #4]
 786 0080 0022     		movs	r2, #0
 787 0082 1A70     		strb	r2, [r3]
 491:./ucOSII/Core/os_flag.c ****     return (len);
 788              		.loc 1 491 12
 789 0084 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 790              	.L50:
 492:./ucOSII/Core/os_flag.c **** }
 791              		.loc 1 492 1
 792 0086 1846     		mov	r0, r3
 793 0088 1837     		adds	r7, r7, #24
 794              	.LCFI18:
 795              		.cfi_def_cfa_offset 8
 796 008a BD46     		mov	sp, r7
 797              	.LCFI19:
 798              		.cfi_def_cfa_register 13
 799              		@ sp needed
 800 008c 80BD     		pop	{r7, pc}
 801              	.L55:
 802 008e 00BF     		.align	2
 803              	.L54:
 804 0090 00000000 		.word	OSIntNesting
 805              		.cfi_endproc
 806              	.LFE6:
 808              		.section	.text.OSFlagNameSet,"ax",%progbits
 809              		.align	1
 810              		.global	OSFlagNameSet
 811              		.syntax unified
 812              		.thumb
 813              		.thumb_func
 815              	OSFlagNameSet:
 816              	.LFB7:
 493:./ucOSII/Core/os_flag.c **** #endif
 494:./ucOSII/Core/os_flag.c **** 
 495:./ucOSII/Core/os_flag.c **** 
 496:./ucOSII/Core/os_flag.c **** /*
 497:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 498:./ucOSII/Core/os_flag.c **** *                                ASSIGN A NAME TO AN EVENT FLAG GROUP
 499:./ucOSII/Core/os_flag.c **** *
 500:./ucOSII/Core/os_flag.c **** * Description: This function assigns a name to an event flag group.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 24


 501:./ucOSII/Core/os_flag.c **** *
 502:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp      is a pointer to the event flag group.
 503:./ucOSII/Core/os_flag.c **** *
 504:./ucOSII/Core/os_flag.c **** *              pname     is a pointer to an ASCII string that will be used as the name of the event
 505:./ucOSII/Core/os_flag.c **** *                        group.
 506:./ucOSII/Core/os_flag.c **** *
 507:./ucOSII/Core/os_flag.c **** *              perr      is a pointer to an error code that can contain one of the following values
 508:./ucOSII/Core/os_flag.c **** *
 509:./ucOSII/Core/os_flag.c **** *                        OS_ERR_NONE                if the requested task is resumed
 510:./ucOSII/Core/os_flag.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to an event flag gr
 511:./ucOSII/Core/os_flag.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 512:./ucOSII/Core/os_flag.c **** *                        OS_ERR_FLAG_INVALID_PGRP   if you passed a NULL pointer for 'pgrp'
 513:./ucOSII/Core/os_flag.c **** *                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
 514:./ucOSII/Core/os_flag.c **** *
 515:./ucOSII/Core/os_flag.c **** * Returns    : None
 516:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 517:./ucOSII/Core/os_flag.c **** */
 518:./ucOSII/Core/os_flag.c **** 
 519:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 520:./ucOSII/Core/os_flag.c **** void  OSFlagNameSet (OS_FLAG_GRP  *pgrp,
 521:./ucOSII/Core/os_flag.c ****                      INT8U        *pname,
 522:./ucOSII/Core/os_flag.c ****                      INT8U        *perr)
 523:./ucOSII/Core/os_flag.c **** {
 817              		.loc 1 523 1
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 24
 820              		@ frame_needed = 1, uses_anonymous_args = 0
 821 0000 80B5     		push	{r7, lr}
 822              	.LCFI20:
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 86B0     		sub	sp, sp, #24
 827              	.LCFI21:
 828              		.cfi_def_cfa_offset 32
 829 0004 00AF     		add	r7, sp, #0
 830              	.LCFI22:
 831              		.cfi_def_cfa_register 7
 832 0006 F860     		str	r0, [r7, #12]
 833 0008 B960     		str	r1, [r7, #8]
 834 000a 7A60     		str	r2, [r7, #4]
 524:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register       
 525:./ucOSII/Core/os_flag.c ****     OS_CPU_SR  cpu_sr = 0u;
 835              		.loc 1 525 16
 836 000c 0023     		movs	r3, #0
 837 000e 7B61     		str	r3, [r7, #20]
 526:./ucOSII/Core/os_flag.c **** #endif
 527:./ucOSII/Core/os_flag.c **** 
 528:./ucOSII/Core/os_flag.c **** 
 529:./ucOSII/Core/os_flag.c **** 
 530:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 531:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
 532:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 533:./ucOSII/Core/os_flag.c ****         return;
 534:./ucOSII/Core/os_flag.c ****     }
 535:./ucOSII/Core/os_flag.c **** #endif
 536:./ucOSII/Core/os_flag.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 25


 537:./ucOSII/Core/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 538:./ucOSII/Core/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                      
 838              		.loc 1 538 8
 839 0010 FB68     		ldr	r3, [r7, #12]
 840 0012 002B     		cmp	r3, #0
 841 0014 03D1     		bne	.L57
 539:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 842              		.loc 1 539 15
 843 0016 7B68     		ldr	r3, [r7, #4]
 844 0018 6E22     		movs	r2, #110
 845 001a 1A70     		strb	r2, [r3]
 540:./ucOSII/Core/os_flag.c ****         return;
 846              		.loc 1 540 9
 847 001c 27E0     		b	.L56
 848              	.L57:
 541:./ucOSII/Core/os_flag.c ****     }
 542:./ucOSII/Core/os_flag.c ****     if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                     
 849              		.loc 1 542 8
 850 001e BB68     		ldr	r3, [r7, #8]
 851 0020 002B     		cmp	r3, #0
 852 0022 03D1     		bne	.L59
 543:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_PNAME_NULL;
 853              		.loc 1 543 15
 854 0024 7B68     		ldr	r3, [r7, #4]
 855 0026 0C22     		movs	r2, #12
 856 0028 1A70     		strb	r2, [r3]
 544:./ucOSII/Core/os_flag.c ****         return;
 857              		.loc 1 544 9
 858 002a 20E0     		b	.L56
 859              	.L59:
 545:./ucOSII/Core/os_flag.c ****     }
 546:./ucOSII/Core/os_flag.c **** #endif
 547:./ucOSII/Core/os_flag.c ****     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR              
 860              		.loc 1 547 22
 861 002c 114B     		ldr	r3, .L62
 862 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 863              		.loc 1 547 8
 864 0030 002B     		cmp	r3, #0
 865 0032 03D0     		beq	.L60
 548:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_NAME_SET_ISR;
 866              		.loc 1 548 15
 867 0034 7B68     		ldr	r3, [r7, #4]
 868 0036 1222     		movs	r2, #18
 869 0038 1A70     		strb	r2, [r3]
 549:./ucOSII/Core/os_flag.c ****         return;
 870              		.loc 1 549 9
 871 003a 18E0     		b	.L56
 872              	.L60:
 550:./ucOSII/Core/os_flag.c ****     }
 551:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 873              		.loc 1 551 5
 874 003c 4020     		movs	r0, #64
 875 003e FFF7FEFF 		bl	OS_CPU_SR_Save
 876 0042 7861     		str	r0, [r7, #20]
 552:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 877              		.loc 1 552 13
 878 0044 FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 26


 879 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 880              		.loc 1 552 8
 881 0048 052B     		cmp	r3, #5
 882 004a 06D0     		beq	.L61
 553:./ucOSII/Core/os_flag.c ****         OS_EXIT_CRITICAL();
 883              		.loc 1 553 9
 884 004c 7869     		ldr	r0, [r7, #20]
 885 004e FFF7FEFF 		bl	OS_CPU_SR_Restore
 554:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 886              		.loc 1 554 15
 887 0052 7B68     		ldr	r3, [r7, #4]
 888 0054 0122     		movs	r2, #1
 889 0056 1A70     		strb	r2, [r3]
 555:./ucOSII/Core/os_flag.c ****         return;
 890              		.loc 1 555 9
 891 0058 09E0     		b	.L56
 892              	.L61:
 556:./ucOSII/Core/os_flag.c ****     }
 557:./ucOSII/Core/os_flag.c ****     pgrp->OSFlagName = pname;
 893              		.loc 1 557 22
 894 005a FB68     		ldr	r3, [r7, #12]
 895 005c BA68     		ldr	r2, [r7, #8]
 896 005e DA60     		str	r2, [r3, #12]
 558:./ucOSII/Core/os_flag.c ****     OS_EXIT_CRITICAL();
 897              		.loc 1 558 5
 898 0060 7869     		ldr	r0, [r7, #20]
 899 0062 FFF7FEFF 		bl	OS_CPU_SR_Restore
 559:./ucOSII/Core/os_flag.c ****     OS_TRACE_EVENT_NAME_SET(pgrp, pname);
 560:./ucOSII/Core/os_flag.c ****     *perr            = OS_ERR_NONE;
 900              		.loc 1 560 22
 901 0066 7B68     		ldr	r3, [r7, #4]
 902 0068 0022     		movs	r2, #0
 903 006a 1A70     		strb	r2, [r3]
 561:./ucOSII/Core/os_flag.c ****     return;
 904              		.loc 1 561 5
 905 006c 00BF     		nop
 906              	.L56:
 562:./ucOSII/Core/os_flag.c **** }
 907              		.loc 1 562 1
 908 006e 1837     		adds	r7, r7, #24
 909              	.LCFI23:
 910              		.cfi_def_cfa_offset 8
 911 0070 BD46     		mov	sp, r7
 912              	.LCFI24:
 913              		.cfi_def_cfa_register 13
 914              		@ sp needed
 915 0072 80BD     		pop	{r7, pc}
 916              	.L63:
 917              		.align	2
 918              	.L62:
 919 0074 00000000 		.word	OSIntNesting
 920              		.cfi_endproc
 921              	.LFE7:
 923              		.section	.text.OSFlagPend,"ax",%progbits
 924              		.align	1
 925              		.global	OSFlagPend
 926              		.syntax unified
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 27


 927              		.thumb
 928              		.thumb_func
 930              	OSFlagPend:
 931              	.LFB8:
 563:./ucOSII/Core/os_flag.c **** #endif
 564:./ucOSII/Core/os_flag.c **** 
 565:./ucOSII/Core/os_flag.c **** 
 566:./ucOSII/Core/os_flag.c **** /*
 567:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 568:./ucOSII/Core/os_flag.c **** *                                     WAIT ON AN EVENT FLAG GROUP
 569:./ucOSII/Core/os_flag.c **** *
 570:./ucOSII/Core/os_flag.c **** * Description: This function is called to wait for a combination of bits to be set in an event flag
 571:./ucOSII/Core/os_flag.c **** *              group.  Your application can wait for ANY bit to be set or ALL bits to be set.
 572:./ucOSII/Core/os_flag.c **** *
 573:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
 574:./ucOSII/Core/os_flag.c **** *
 575:./ucOSII/Core/os_flag.c **** *              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to wait
 576:./ucOSII/Core/os_flag.c **** *                            The bits you want are specified by setting the corresponding bits in
 577:./ucOSII/Core/os_flag.c **** *                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
 578:./ucOSII/Core/os_flag.c **** *                            'flags' would contain 0x03.
 579:./ucOSII/Core/os_flag.c **** *
 580:./ucOSII/Core/os_flag.c **** *              wait_type     specifies whether you want ALL bits to be set or ANY of the bits to be
 581:./ucOSII/Core/os_flag.c **** *                            You can specify the following argument:
 582:./ucOSII/Core/os_flag.c **** *
 583:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ALL   You will wait for ALL bits in 'mask' to be clea
 584:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_SET_ALL   You will wait for ALL bits in 'mask' to be set 
 585:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ANY   You will wait for ANY bit  in 'mask' to be clea
 586:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_SET_ANY   You will wait for ANY bit  in 'mask' to be set 
 587:./ucOSII/Core/os_flag.c **** *
 588:./ucOSII/Core/os_flag.c **** *                            NOTE: Add OS_FLAG_CONSUME if you want the event flag to be 'consumed' 
 589:./ucOSII/Core/os_flag.c **** *                                  the call.  Example, to wait for any flag in a group AND then cle
 590:./ucOSII/Core/os_flag.c **** *                                  the flags that are present, set 'wait_type' to:
 591:./ucOSII/Core/os_flag.c **** *
 592:./ucOSII/Core/os_flag.c **** *                                  OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME
 593:./ucOSII/Core/os_flag.c **** *
 594:./ucOSII/Core/os_flag.c **** *              timeout       is an optional timeout (in clock ticks) that your task will wait for t
 595:./ucOSII/Core/os_flag.c **** *                            desired bit combination.  If you specify 0, however, your task will wa
 596:./ucOSII/Core/os_flag.c **** *                            forever at the specified event flag group or, until a message arrives.
 597:./ucOSII/Core/os_flag.c **** *
 598:./ucOSII/Core/os_flag.c **** *              perr          is a pointer to an error code and can be:
 599:./ucOSII/Core/os_flag.c **** *                            OS_ERR_NONE               The desired bits have been set within the sp
 600:./ucOSII/Core/os_flag.c **** *                                                      'timeout'.
 601:./ucOSII/Core/os_flag.c **** *                            OS_ERR_PEND_ISR           If you tried to PEND from an ISR
 602:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP  If 'pgrp' is a NULL pointer.
 603:./ucOSII/Core/os_flag.c **** *                            OS_ERR_EVENT_TYPE         You are not pointing to an event flag group
 604:./ucOSII/Core/os_flag.c **** *                            OS_ERR_TIMEOUT            The bit(s) have not been set in the specifie
 605:./ucOSII/Core/os_flag.c **** *                                                      'timeout'.
 606:./ucOSII/Core/os_flag.c **** *                            OS_ERR_PEND_ABORT         The wait on the flag was aborted.
 607:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_WAIT_TYPE     You didn't specify a proper 'wait_type' argu
 608:./ucOSII/Core/os_flag.c **** *
 609:./ucOSII/Core/os_flag.c **** * Returns    : The flags in the event flag group that made the task ready or, 0 if a timeout or an 
 610:./ucOSII/Core/os_flag.c **** *              occurred.
 611:./ucOSII/Core/os_flag.c **** *
 612:./ucOSII/Core/os_flag.c **** * Called from: Task ONLY
 613:./ucOSII/Core/os_flag.c **** *
 614:./ucOSII/Core/os_flag.c **** * Note(s)    : 1) IMPORTANT, the behavior of this function has changed from PREVIOUS versions.  The
 615:./ucOSII/Core/os_flag.c **** *                 function NOW returns the flags that were ready INSTEAD of the current state of th
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 28


 616:./ucOSII/Core/os_flag.c **** *                 event flags.
 617:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 618:./ucOSII/Core/os_flag.c **** */
 619:./ucOSII/Core/os_flag.c **** 
 620:./ucOSII/Core/os_flag.c **** OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
 621:./ucOSII/Core/os_flag.c ****                       OS_FLAGS      flags,
 622:./ucOSII/Core/os_flag.c ****                       INT8U         wait_type,
 623:./ucOSII/Core/os_flag.c ****                       INT32U        timeout,
 624:./ucOSII/Core/os_flag.c ****                       INT8U        *perr)
 625:./ucOSII/Core/os_flag.c **** {
 932              		.loc 1 625 1
 933              		.cfi_startproc
 934              		@ args = 4, pretend = 0, frame = 56
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 80B5     		push	{r7, lr}
 937              	.LCFI25:
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 90B0     		sub	sp, sp, #64
 942              	.LCFI26:
 943              		.cfi_def_cfa_offset 72
 944 0004 02AF     		add	r7, sp, #8
 945              	.LCFI27:
 946              		.cfi_def_cfa 7, 64
 947 0006 F860     		str	r0, [r7, #12]
 948 0008 7B60     		str	r3, [r7, #4]
 949 000a 0B46     		mov	r3, r1	@ movhi
 950 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 951 000e 1346     		mov	r3, r2
 952 0010 7B72     		strb	r3, [r7, #9]
 626:./ucOSII/Core/os_flag.c ****     OS_FLAG_NODE  node;
 627:./ucOSII/Core/os_flag.c ****     OS_FLAGS      flags_rdy;
 628:./ucOSII/Core/os_flag.c ****     INT8U         result;
 629:./ucOSII/Core/os_flag.c ****     INT8U         pend_stat;
 630:./ucOSII/Core/os_flag.c ****     BOOLEAN       consume;
 631:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 632:./ucOSII/Core/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 953              		.loc 1 632 19
 954 0012 0023     		movs	r3, #0
 955 0014 3B63     		str	r3, [r7, #48]
 633:./ucOSII/Core/os_flag.c **** #endif
 634:./ucOSII/Core/os_flag.c **** 
 635:./ucOSII/Core/os_flag.c **** 
 636:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 637:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
 638:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 639:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 640:./ucOSII/Core/os_flag.c ****     }
 641:./ucOSII/Core/os_flag.c **** #endif
 642:./ucOSII/Core/os_flag.c **** 
 643:./ucOSII/Core/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 644:./ucOSII/Core/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                      
 956              		.loc 1 644 8
 957 0016 FB68     		ldr	r3, [r7, #12]
 958 0018 002B     		cmp	r3, #0
 959 001a 04D1     		bne	.L65
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 29


 645:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 960              		.loc 1 645 15
 961 001c 3B6C     		ldr	r3, [r7, #64]
 962 001e 6E22     		movs	r2, #110
 963 0020 1A70     		strb	r2, [r3]
 646:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 964              		.loc 1 646 16
 965 0022 0023     		movs	r3, #0
 966 0024 77E1     		b	.L94
 967              	.L65:
 647:./ucOSII/Core/os_flag.c ****     }
 648:./ucOSII/Core/os_flag.c **** #endif
 649:./ucOSII/Core/os_flag.c **** 
 650:./ucOSII/Core/os_flag.c ****     OS_TRACE_FLAG_PEND_ENTER(pgrp, flags, timeout, wait_type);
 651:./ucOSII/Core/os_flag.c **** 
 652:./ucOSII/Core/os_flag.c ****     if (OSIntNesting > 0u) {                               /* See if called from ISR ...           
 968              		.loc 1 652 22
 969 0026 9F4B     		ldr	r3, .L96
 970 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971              		.loc 1 652 8
 972 002a 002B     		cmp	r3, #0
 973 002c 04D0     		beq	.L67
 653:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR           
 974              		.loc 1 653 15
 975 002e 3B6C     		ldr	r3, [r7, #64]
 976 0030 0222     		movs	r2, #2
 977 0032 1A70     		strb	r2, [r3]
 654:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_PEND_EXIT(*perr);
 655:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 978              		.loc 1 655 16
 979 0034 0023     		movs	r3, #0
 980 0036 6EE1     		b	.L94
 981              	.L67:
 656:./ucOSII/Core/os_flag.c ****     }
 657:./ucOSII/Core/os_flag.c ****     if (OSLockNesting > 0u) {                              /* See if called with scheduler locked .
 982              		.loc 1 657 23
 983 0038 9B4B     		ldr	r3, .L96+4
 984 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 985              		.loc 1 657 8
 986 003c 002B     		cmp	r3, #0
 987 003e 04D0     		beq	.L68
 658:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked           
 988              		.loc 1 658 15
 989 0040 3B6C     		ldr	r3, [r7, #64]
 990 0042 0D22     		movs	r2, #13
 991 0044 1A70     		strb	r2, [r3]
 659:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_PEND_EXIT(*perr);
 660:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 992              		.loc 1 660 16
 993 0046 0023     		movs	r3, #0
 994 0048 65E1     		b	.L94
 995              	.L68:
 661:./ucOSII/Core/os_flag.c ****     }
 662:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type            
 996              		.loc 1 662 13
 997 004a FB68     		ldr	r3, [r7, #12]
 998 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 30


 999              		.loc 1 662 8
 1000 004e 052B     		cmp	r3, #5
 1001 0050 04D0     		beq	.L69
 663:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1002              		.loc 1 663 15
 1003 0052 3B6C     		ldr	r3, [r7, #64]
 1004 0054 0122     		movs	r2, #1
 1005 0056 1A70     		strb	r2, [r3]
 664:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_PEND_EXIT(*perr);
 665:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 1006              		.loc 1 665 16
 1007 0058 0023     		movs	r3, #0
 1008 005a 5CE1     		b	.L94
 1009              	.L69:
 666:./ucOSII/Core/os_flag.c ****     }
 667:./ucOSII/Core/os_flag.c ****     result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 1010              		.loc 1 667 12
 1011 005c 7B7A     		ldrb	r3, [r7, #9]
 1012 005e 23F07F03 		bic	r3, r3, #127
 1013 0062 87F82F30 		strb	r3, [r7, #47]
 668:./ucOSII/Core/os_flag.c ****     if (result != (INT8U)0) {                              /* See if we need to consume the flags  
 1014              		.loc 1 668 8
 1015 0066 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1016 006a 002B     		cmp	r3, #0
 1017 006c 07D0     		beq	.L70
 669:./ucOSII/Core/os_flag.c ****         wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
 1018              		.loc 1 669 19
 1019 006e 7B7A     		ldrb	r3, [r7, #9]
 1020 0070 03F07F03 		and	r3, r3, #127
 1021 0074 7B72     		strb	r3, [r7, #9]
 670:./ucOSII/Core/os_flag.c ****         consume    = OS_TRUE;
 1022              		.loc 1 670 20
 1023 0076 0123     		movs	r3, #1
 1024 0078 87F83730 		strb	r3, [r7, #55]
 1025 007c 02E0     		b	.L71
 1026              	.L70:
 671:./ucOSII/Core/os_flag.c ****     } else {
 672:./ucOSII/Core/os_flag.c ****         consume    = OS_FALSE;
 1027              		.loc 1 672 20
 1028 007e 0023     		movs	r3, #0
 1029 0080 87F83730 		strb	r3, [r7, #55]
 1030              	.L71:
 673:./ucOSII/Core/os_flag.c ****     }
 674:./ucOSII/Core/os_flag.c **** 
 675:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 1031              		.loc 1 675 5
 1032 0084 4020     		movs	r0, #64
 1033 0086 FFF7FEFF 		bl	OS_CPU_SR_Save
 1034 008a 3863     		str	r0, [r7, #48]
 676:./ucOSII/Core/os_flag.c ****     switch (wait_type) {
 1035              		.loc 1 676 5
 1036 008c 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 1037 008e 032B     		cmp	r3, #3
 1038 0090 00F2CA80 		bhi	.L72
 1039 0094 01A2     		adr	r2, .L74
 1040 0096 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1041 009a 00BF     		.p2align 2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 31


 1042              	.L74:
 1043 009c 6B010000 		.word	.L77+1
 1044 00a0 CB010000 		.word	.L76+1
 1045 00a4 AD000000 		.word	.L75+1
 1046 00a8 0D010000 		.word	.L73+1
 1047              		.p2align 1
 1048              	.L75:
 677:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set    
 678:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want 
 1049              		.loc 1 678 41
 1050 00ac FB68     		ldr	r3, [r7, #12]
 1051 00ae 1A89     		ldrh	r2, [r3, #8]
 1052              		.loc 1 678 24
 1053 00b0 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1054 00b2 1340     		ands	r3, r3, r2
 1055 00b4 BB85     		strh	r3, [r7, #44]	@ movhi
 679:./ucOSII/Core/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1056              		.loc 1 679 17
 1057 00b6 BA8D     		ldrh	r2, [r7, #44]
 1058 00b8 7B89     		ldrh	r3, [r7, #10]
 1059 00ba 9A42     		cmp	r2, r3
 1060 00bc 18D1     		bne	.L78
 680:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1061              		.loc 1 680 21
 1062 00be 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1063 00c2 012B     		cmp	r3, #1
 1064 00c4 08D1     		bne	.L79
 681:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted
 1065              		.loc 1 681 40
 1066 00c6 FB68     		ldr	r3, [r7, #12]
 1067 00c8 1A89     		ldrh	r2, [r3, #8]
 1068              		.loc 1 681 43
 1069 00ca BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1070 00cc DB43     		mvns	r3, r3
 1071 00ce 9BB2     		uxth	r3, r3
 1072              		.loc 1 681 40
 1073 00d0 1340     		ands	r3, r3, r2
 1074 00d2 9AB2     		uxth	r2, r3
 1075 00d4 FB68     		ldr	r3, [r7, #12]
 1076 00d6 1A81     		strh	r2, [r3, #8]	@ movhi
 1077              	.L79:
 682:./ucOSII/Core/os_flag.c ****                  }
 683:./ucOSII/Core/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 1078              		.loc 1 683 26
 1079 00d8 744B     		ldr	r3, .L96+8
 1080 00da 1B68     		ldr	r3, [r3]
 1081              		.loc 1 683 42
 1082 00dc BA8D     		ldrh	r2, [r7, #44]	@ movhi
 1083 00de 1A86     		strh	r2, [r3, #48]	@ movhi
 684:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1084              		.loc 1 684 18
 1085 00e0 386B     		ldr	r0, [r7, #48]
 1086 00e2 FFF7FEFF 		bl	OS_CPU_SR_Restore
 685:./ucOSII/Core/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1087              		.loc 1 685 42
 1088 00e6 3B6C     		ldr	r3, [r7, #64]
 1089 00e8 0022     		movs	r2, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 32


 1090 00ea 1A70     		strb	r2, [r3]
 686:./ucOSII/Core/os_flag.c ****                  OS_TRACE_FLAG_PEND_EXIT(*perr);
 687:./ucOSII/Core/os_flag.c ****                  return (flags_rdy);
 1091              		.loc 1 687 25
 1092 00ec BB8D     		ldrh	r3, [r7, #44]
 1093 00ee 12E1     		b	.L94
 1094              	.L78:
 688:./ucOSII/Core/os_flag.c ****              } else {                                      /* Block task until events occur or time
 689:./ucOSII/Core/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1095              		.loc 1 689 18
 1096 00f0 787A     		ldrb	r0, [r7, #9]	@ zero_extendqisi2
 1097 00f2 7A89     		ldrh	r2, [r7, #10]
 1098 00f4 07F11401 		add	r1, r7, #20
 1099 00f8 7B68     		ldr	r3, [r7, #4]
 1100 00fa 0093     		str	r3, [sp]
 1101 00fc 0346     		mov	r3, r0
 1102 00fe F868     		ldr	r0, [r7, #12]
 1103 0100 FFF7FEFF 		bl	OS_FlagBlock
 690:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 1104              		.loc 1 690 18
 1105 0104 386B     		ldr	r0, [r7, #48]
 1106 0106 FFF7FEFF 		bl	OS_CPU_SR_Restore
 691:./ucOSII/Core/os_flag.c ****              }
 692:./ucOSII/Core/os_flag.c ****              break;
 1107              		.loc 1 692 14
 1108 010a 97E0     		b	.L80
 1109              	.L73:
 693:./ucOSII/Core/os_flag.c **** 
 694:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_SET_ANY:
 695:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want
 1110              		.loc 1 695 41
 1111 010c FB68     		ldr	r3, [r7, #12]
 1112 010e 1A89     		ldrh	r2, [r3, #8]
 1113              		.loc 1 695 24
 1114 0110 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1115 0112 1340     		ands	r3, r3, r2
 1116 0114 BB85     		strh	r3, [r7, #44]	@ movhi
 696:./ucOSII/Core/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 1117              		.loc 1 696 17
 1118 0116 BB8D     		ldrh	r3, [r7, #44]
 1119 0118 002B     		cmp	r3, #0
 1120 011a 18D0     		beq	.L81
 697:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1121              		.loc 1 697 21
 1122 011c 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1123 0120 012B     		cmp	r3, #1
 1124 0122 08D1     		bne	.L82
 698:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we 
 1125              		.loc 1 698 40
 1126 0124 FB68     		ldr	r3, [r7, #12]
 1127 0126 1A89     		ldrh	r2, [r3, #8]
 1128              		.loc 1 698 43
 1129 0128 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1130 012a DB43     		mvns	r3, r3
 1131 012c 9BB2     		uxth	r3, r3
 1132              		.loc 1 698 40
 1133 012e 1340     		ands	r3, r3, r2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 33


 1134 0130 9AB2     		uxth	r2, r3
 1135 0132 FB68     		ldr	r3, [r7, #12]
 1136 0134 1A81     		strh	r2, [r3, #8]	@ movhi
 1137              	.L82:
 699:./ucOSII/Core/os_flag.c ****                  }
 700:./ucOSII/Core/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 1138              		.loc 1 700 26
 1139 0136 5D4B     		ldr	r3, .L96+8
 1140 0138 1B68     		ldr	r3, [r3]
 1141              		.loc 1 700 42
 1142 013a BA8D     		ldrh	r2, [r7, #44]	@ movhi
 1143 013c 1A86     		strh	r2, [r3, #48]	@ movhi
 701:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1144              		.loc 1 701 18
 1145 013e 386B     		ldr	r0, [r7, #48]
 1146 0140 FFF7FEFF 		bl	OS_CPU_SR_Restore
 702:./ucOSII/Core/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1147              		.loc 1 702 42
 1148 0144 3B6C     		ldr	r3, [r7, #64]
 1149 0146 0022     		movs	r2, #0
 1150 0148 1A70     		strb	r2, [r3]
 703:./ucOSII/Core/os_flag.c ****                  OS_TRACE_FLAG_PEND_EXIT(*perr);
 704:./ucOSII/Core/os_flag.c ****                  return (flags_rdy);
 1151              		.loc 1 704 25
 1152 014a BB8D     		ldrh	r3, [r7, #44]
 1153 014c E3E0     		b	.L94
 1154              	.L81:
 705:./ucOSII/Core/os_flag.c ****              } else {                                      /* Block task until events occur or time
 706:./ucOSII/Core/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1155              		.loc 1 706 18
 1156 014e 787A     		ldrb	r0, [r7, #9]	@ zero_extendqisi2
 1157 0150 7A89     		ldrh	r2, [r7, #10]
 1158 0152 07F11401 		add	r1, r7, #20
 1159 0156 7B68     		ldr	r3, [r7, #4]
 1160 0158 0093     		str	r3, [sp]
 1161 015a 0346     		mov	r3, r0
 1162 015c F868     		ldr	r0, [r7, #12]
 1163 015e FFF7FEFF 		bl	OS_FlagBlock
 707:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 1164              		.loc 1 707 18
 1165 0162 386B     		ldr	r0, [r7, #48]
 1166 0164 FFF7FEFF 		bl	OS_CPU_SR_Restore
 708:./ucOSII/Core/os_flag.c ****              }
 709:./ucOSII/Core/os_flag.c ****              break;
 1167              		.loc 1 709 14
 1168 0168 68E0     		b	.L80
 1169              	.L77:
 710:./ucOSII/Core/os_flag.c **** 
 711:./ucOSII/Core/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 712:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared
 713:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want 
 1170              		.loc 1 713 41
 1171 016a FB68     		ldr	r3, [r7, #12]
 1172 016c 1B89     		ldrh	r3, [r3, #8]
 1173              		.loc 1 713 26
 1174 016e DB43     		mvns	r3, r3
 1175 0170 9AB2     		uxth	r2, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 34


 1176              		.loc 1 713 24
 1177 0172 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1178 0174 1340     		ands	r3, r3, r2
 1179 0176 BB85     		strh	r3, [r7, #44]	@ movhi
 714:./ucOSII/Core/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1180              		.loc 1 714 17
 1181 0178 BA8D     		ldrh	r2, [r7, #44]
 1182 017a 7B89     		ldrh	r3, [r7, #10]
 1183 017c 9A42     		cmp	r2, r3
 1184 017e 16D1     		bne	.L83
 715:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1185              		.loc 1 715 21
 1186 0180 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1187 0184 012B     		cmp	r3, #1
 1188 0186 06D1     		bne	.L84
 716:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 1189              		.loc 1 716 40
 1190 0188 FB68     		ldr	r3, [r7, #12]
 1191 018a 1A89     		ldrh	r2, [r3, #8]
 1192 018c BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1193 018e 1343     		orrs	r3, r3, r2
 1194 0190 9AB2     		uxth	r2, r3
 1195 0192 FB68     		ldr	r3, [r7, #12]
 1196 0194 1A81     		strh	r2, [r3, #8]	@ movhi
 1197              	.L84:
 717:./ucOSII/Core/os_flag.c ****                  }
 718:./ucOSII/Core/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 1198              		.loc 1 718 26
 1199 0196 454B     		ldr	r3, .L96+8
 1200 0198 1B68     		ldr	r3, [r3]
 1201              		.loc 1 718 42
 1202 019a BA8D     		ldrh	r2, [r7, #44]	@ movhi
 1203 019c 1A86     		strh	r2, [r3, #48]	@ movhi
 719:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1204              		.loc 1 719 18
 1205 019e 386B     		ldr	r0, [r7, #48]
 1206 01a0 FFF7FEFF 		bl	OS_CPU_SR_Restore
 720:./ucOSII/Core/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1207              		.loc 1 720 42
 1208 01a4 3B6C     		ldr	r3, [r7, #64]
 1209 01a6 0022     		movs	r2, #0
 1210 01a8 1A70     		strb	r2, [r3]
 721:./ucOSII/Core/os_flag.c ****                  OS_TRACE_FLAG_PEND_EXIT(*perr);
 722:./ucOSII/Core/os_flag.c ****                  return (flags_rdy);
 1211              		.loc 1 722 25
 1212 01aa BB8D     		ldrh	r3, [r7, #44]
 1213 01ac B3E0     		b	.L94
 1214              	.L83:
 723:./ucOSII/Core/os_flag.c ****              } else {                                      /* Block task until events occur or time
 724:./ucOSII/Core/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1215              		.loc 1 724 18
 1216 01ae 787A     		ldrb	r0, [r7, #9]	@ zero_extendqisi2
 1217 01b0 7A89     		ldrh	r2, [r7, #10]
 1218 01b2 07F11401 		add	r1, r7, #20
 1219 01b6 7B68     		ldr	r3, [r7, #4]
 1220 01b8 0093     		str	r3, [sp]
 1221 01ba 0346     		mov	r3, r0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 35


 1222 01bc F868     		ldr	r0, [r7, #12]
 1223 01be FFF7FEFF 		bl	OS_FlagBlock
 725:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 1224              		.loc 1 725 18
 1225 01c2 386B     		ldr	r0, [r7, #48]
 1226 01c4 FFF7FEFF 		bl	OS_CPU_SR_Restore
 726:./ucOSII/Core/os_flag.c ****              }
 727:./ucOSII/Core/os_flag.c ****              break;
 1227              		.loc 1 727 14
 1228 01c8 38E0     		b	.L80
 1229              	.L76:
 728:./ucOSII/Core/os_flag.c **** 
 729:./ucOSII/Core/os_flag.c ****         case OS_FLAG_WAIT_CLR_ANY:
 730:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want  
 1230              		.loc 1 730 41
 1231 01ca FB68     		ldr	r3, [r7, #12]
 1232 01cc 1B89     		ldrh	r3, [r3, #8]
 1233              		.loc 1 730 26
 1234 01ce DB43     		mvns	r3, r3
 1235 01d0 9AB2     		uxth	r2, r3
 1236              		.loc 1 730 24
 1237 01d2 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1238 01d4 1340     		ands	r3, r3, r2
 1239 01d6 BB85     		strh	r3, [r7, #44]	@ movhi
 731:./ucOSII/Core/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
 1240              		.loc 1 731 17
 1241 01d8 BB8D     		ldrh	r3, [r7, #44]
 1242 01da 002B     		cmp	r3, #0
 1243 01dc 16D0     		beq	.L85
 732:./ucOSII/Core/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1244              		.loc 1 732 21
 1245 01de 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1246 01e2 012B     		cmp	r3, #1
 1247 01e4 06D1     		bne	.L86
 733:./ucOSII/Core/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 1248              		.loc 1 733 40
 1249 01e6 FB68     		ldr	r3, [r7, #12]
 1250 01e8 1A89     		ldrh	r2, [r3, #8]
 1251 01ea BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1252 01ec 1343     		orrs	r3, r3, r2
 1253 01ee 9AB2     		uxth	r2, r3
 1254 01f0 FB68     		ldr	r3, [r7, #12]
 1255 01f2 1A81     		strh	r2, [r3, #8]	@ movhi
 1256              	.L86:
 734:./ucOSII/Core/os_flag.c ****                  }
 735:./ucOSII/Core/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 1257              		.loc 1 735 26
 1258 01f4 2D4B     		ldr	r3, .L96+8
 1259 01f6 1B68     		ldr	r3, [r3]
 1260              		.loc 1 735 42
 1261 01f8 BA8D     		ldrh	r2, [r7, #44]	@ movhi
 1262 01fa 1A86     		strh	r2, [r3, #48]	@ movhi
 736:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1263              		.loc 1 736 18
 1264 01fc 386B     		ldr	r0, [r7, #48]
 1265 01fe FFF7FEFF 		bl	OS_CPU_SR_Restore
 737:./ucOSII/Core/os_flag.c ****                  *perr                   = OS_ERR_NONE;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 36


 1266              		.loc 1 737 42
 1267 0202 3B6C     		ldr	r3, [r7, #64]
 1268 0204 0022     		movs	r2, #0
 1269 0206 1A70     		strb	r2, [r3]
 738:./ucOSII/Core/os_flag.c ****                  OS_TRACE_FLAG_PEND_EXIT(*perr);
 739:./ucOSII/Core/os_flag.c ****                  return (flags_rdy);
 1270              		.loc 1 739 25
 1271 0208 BB8D     		ldrh	r3, [r7, #44]
 1272 020a 84E0     		b	.L94
 1273              	.L85:
 740:./ucOSII/Core/os_flag.c ****              } else {                                      /* Block task until events occur or time
 741:./ucOSII/Core/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1274              		.loc 1 741 18
 1275 020c 787A     		ldrb	r0, [r7, #9]	@ zero_extendqisi2
 1276 020e 7A89     		ldrh	r2, [r7, #10]
 1277 0210 07F11401 		add	r1, r7, #20
 1278 0214 7B68     		ldr	r3, [r7, #4]
 1279 0216 0093     		str	r3, [sp]
 1280 0218 0346     		mov	r3, r0
 1281 021a F868     		ldr	r0, [r7, #12]
 1282 021c FFF7FEFF 		bl	OS_FlagBlock
 742:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 1283              		.loc 1 742 18
 1284 0220 386B     		ldr	r0, [r7, #48]
 1285 0222 FFF7FEFF 		bl	OS_CPU_SR_Restore
 743:./ucOSII/Core/os_flag.c ****              }
 744:./ucOSII/Core/os_flag.c ****              break;
 1286              		.loc 1 744 14
 1287 0226 09E0     		b	.L80
 1288              	.L72:
 745:./ucOSII/Core/os_flag.c **** #endif
 746:./ucOSII/Core/os_flag.c **** 
 747:./ucOSII/Core/os_flag.c ****         default:
 748:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();
 1289              		.loc 1 748 14
 1290 0228 386B     		ldr	r0, [r7, #48]
 1291 022a FFF7FEFF 		bl	OS_CPU_SR_Restore
 749:./ucOSII/Core/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 1292              		.loc 1 749 24
 1293 022e 0023     		movs	r3, #0
 1294 0230 BB85     		strh	r3, [r7, #44]	@ movhi
 750:./ucOSII/Core/os_flag.c ****              *perr      = OS_ERR_FLAG_WAIT_TYPE;
 1295              		.loc 1 750 25
 1296 0232 3B6C     		ldr	r3, [r7, #64]
 1297 0234 6F22     		movs	r2, #111
 1298 0236 1A70     		strb	r2, [r3]
 751:./ucOSII/Core/os_flag.c ****              OS_TRACE_FLAG_PEND_EXIT(*perr);
 752:./ucOSII/Core/os_flag.c ****              return (flags_rdy);
 1299              		.loc 1 752 21
 1300 0238 BB8D     		ldrh	r3, [r7, #44]
 1301 023a 6CE0     		b	.L94
 1302              	.L80:
 753:./ucOSII/Core/os_flag.c ****     }
 754:./ucOSII/Core/os_flag.c **** 
 755:./ucOSII/Core/os_flag.c ****     OS_Sched();                                            /* Find next HPT ready to run           
 1303              		.loc 1 755 5
 1304 023c FFF7FEFF 		bl	OS_Sched
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 37


 756:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 1305              		.loc 1 756 5
 1306 0240 4020     		movs	r0, #64
 1307 0242 FFF7FEFF 		bl	OS_CPU_SR_Save
 1308 0246 3863     		str	r0, [r7, #48]
 757:./ucOSII/Core/os_flag.c ****     if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?        
 1309              		.loc 1 757 17
 1310 0248 184B     		ldr	r3, .L96+8
 1311 024a 1B68     		ldr	r3, [r3]
 1312 024c 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 1313              		.loc 1 757 8
 1314 0250 002B     		cmp	r3, #0
 1315 0252 2DD0     		beq	.L87
 758:./ucOSII/Core/os_flag.c ****         pend_stat                = OSTCBCur->OSTCBStatPend;
 1316              		.loc 1 758 44
 1317 0254 154B     		ldr	r3, .L96+8
 1318 0256 1B68     		ldr	r3, [r3]
 1319              		.loc 1 758 34
 1320 0258 93F83930 		ldrb	r3, [r3, #57]
 1321 025c 87F82B30 		strb	r3, [r7, #43]
 759:./ucOSII/Core/os_flag.c ****         OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1322              		.loc 1 759 17
 1323 0260 124B     		ldr	r3, .L96+8
 1324 0262 1B68     		ldr	r3, [r3]
 1325              		.loc 1 759 34
 1326 0264 0022     		movs	r2, #0
 1327 0266 83F83920 		strb	r2, [r3, #57]
 760:./ucOSII/Core/os_flag.c ****         OS_FlagUnlink(&node);
 1328              		.loc 1 760 9
 1329 026a 07F11403 		add	r3, r7, #20
 1330 026e 1846     		mov	r0, r3
 1331 0270 FFF7FEFF 		bl	OS_FlagUnlink
 761:./ucOSII/Core/os_flag.c ****         OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run          
 1332              		.loc 1 761 17
 1333 0274 0D4B     		ldr	r3, .L96+8
 1334 0276 1B68     		ldr	r3, [r3]
 1335              		.loc 1 761 34
 1336 0278 0022     		movs	r2, #0
 1337 027a 83F83820 		strb	r2, [r3, #56]
 762:./ucOSII/Core/os_flag.c ****         OS_EXIT_CRITICAL();
 1338              		.loc 1 762 9
 1339 027e 386B     		ldr	r0, [r7, #48]
 1340 0280 FFF7FEFF 		bl	OS_CPU_SR_Restore
 763:./ucOSII/Core/os_flag.c ****         flags_rdy                = (OS_FLAGS)0;
 1341              		.loc 1 763 34
 1342 0284 0023     		movs	r3, #0
 1343 0286 BB85     		strh	r3, [r7, #44]	@ movhi
 764:./ucOSII/Core/os_flag.c ****         switch (pend_stat) {
 1344              		.loc 1 764 9
 1345 0288 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1346 028c 022B     		cmp	r3, #2
 1347 028e 03D1     		bne	.L88
 765:./ucOSII/Core/os_flag.c ****             case OS_STAT_PEND_ABORT:
 766:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting   
 1348              		.loc 1 766 24
 1349 0290 3B6C     		ldr	r3, [r7, #64]
 1350 0292 0E22     		movs	r2, #14
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 38


 1351 0294 1A70     		strb	r2, [r3]
 767:./ucOSII/Core/os_flag.c ****                  break;
 1352              		.loc 1 767 18
 1353 0296 03E0     		b	.L89
 1354              	.L88:
 768:./ucOSII/Core/os_flag.c **** 
 769:./ucOSII/Core/os_flag.c ****             case OS_STAT_PEND_TO:
 770:./ucOSII/Core/os_flag.c ****             default:
 771:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting   
 1355              		.loc 1 771 24
 1356 0298 3B6C     		ldr	r3, [r7, #64]
 1357 029a 0A22     		movs	r2, #10
 1358 029c 1A70     		strb	r2, [r3]
 772:./ucOSII/Core/os_flag.c ****                  break;
 1359              		.loc 1 772 18
 1360 029e 00BF     		nop
 1361              	.L89:
 773:./ucOSII/Core/os_flag.c ****         }
 774:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_PEND_EXIT(*perr);
 775:./ucOSII/Core/os_flag.c ****         return (flags_rdy);
 1362              		.loc 1 775 16
 1363 02a0 BB8D     		ldrh	r3, [r7, #44]
 1364 02a2 38E0     		b	.L94
 1365              	.L97:
 1366              		.align	2
 1367              	.L96:
 1368 02a4 00000000 		.word	OSIntNesting
 1369 02a8 00000000 		.word	OSLockNesting
 1370 02ac 00000000 		.word	OSTCBCur
 1371              	.L87:
 776:./ucOSII/Core/os_flag.c ****     }
 777:./ucOSII/Core/os_flag.c ****     flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 1372              		.loc 1 777 25
 1373 02b0 1B4B     		ldr	r3, .L98
 1374 02b2 1B68     		ldr	r3, [r3]
 1375              		.loc 1 777 15
 1376 02b4 1B8E     		ldrh	r3, [r3, #48]	@ movhi
 1377 02b6 BB85     		strh	r3, [r7, #44]	@ movhi
 778:./ucOSII/Core/os_flag.c ****     if (consume == OS_TRUE) {                              /* See if we need to consume the flags  
 1378              		.loc 1 778 8
 1379 02b8 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1380 02bc 012B     		cmp	r3, #1
 1381 02be 22D1     		bne	.L95
 779:./ucOSII/Core/os_flag.c ****         switch (wait_type) {
 1382              		.loc 1 779 9
 1383 02c0 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 1384 02c2 012B     		cmp	r3, #1
 1385 02c4 02DC     		bgt	.L91
 1386 02c6 002B     		cmp	r3, #0
 1387 02c8 0DDA     		bge	.L92
 1388 02ca 14E0     		b	.L93
 1389              	.L91:
 1390 02cc 023B     		subs	r3, r3, #2
 1391 02ce 012B     		cmp	r3, #1
 1392 02d0 11D8     		bhi	.L93
 780:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:
 781:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got          
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 39


 782:./ucOSII/Core/os_flag.c ****                  pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
 1393              		.loc 1 782 36
 1394 02d2 FB68     		ldr	r3, [r7, #12]
 1395 02d4 1A89     		ldrh	r2, [r3, #8]
 1396              		.loc 1 782 39
 1397 02d6 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1398 02d8 DB43     		mvns	r3, r3
 1399 02da 9BB2     		uxth	r3, r3
 1400              		.loc 1 782 36
 1401 02dc 1340     		ands	r3, r3, r2
 1402 02de 9AB2     		uxth	r2, r3
 1403 02e0 FB68     		ldr	r3, [r7, #12]
 1404 02e2 1A81     		strh	r2, [r3, #8]	@ movhi
 783:./ucOSII/Core/os_flag.c ****                  break;
 1405              		.loc 1 783 18
 1406 02e4 10E0     		b	.L90
 1407              	.L92:
 784:./ucOSII/Core/os_flag.c **** 
 785:./ucOSII/Core/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 786:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_CLR_ALL:
 787:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got          
 788:./ucOSII/Core/os_flag.c ****                  pgrp->OSFlagFlags |=  flags_rdy;
 1408              		.loc 1 788 36
 1409 02e6 FB68     		ldr	r3, [r7, #12]
 1410 02e8 1A89     		ldrh	r2, [r3, #8]
 1411 02ea BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1412 02ec 1343     		orrs	r3, r3, r2
 1413 02ee 9AB2     		uxth	r2, r3
 1414 02f0 FB68     		ldr	r3, [r7, #12]
 1415 02f2 1A81     		strh	r2, [r3, #8]	@ movhi
 789:./ucOSII/Core/os_flag.c ****                  break;
 1416              		.loc 1 789 18
 1417 02f4 08E0     		b	.L90
 1418              	.L93:
 790:./ucOSII/Core/os_flag.c **** #endif
 791:./ucOSII/Core/os_flag.c ****             default:
 792:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 1419              		.loc 1 792 18
 1420 02f6 386B     		ldr	r0, [r7, #48]
 1421 02f8 FFF7FEFF 		bl	OS_CPU_SR_Restore
 793:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 1422              		.loc 1 793 24
 1423 02fc 3B6C     		ldr	r3, [r7, #64]
 1424 02fe 6F22     		movs	r2, #111
 1425 0300 1A70     		strb	r2, [r3]
 794:./ucOSII/Core/os_flag.c ****                  OS_TRACE_FLAG_PEND_EXIT(*perr);
 795:./ucOSII/Core/os_flag.c ****                  return ((OS_FLAGS)0);
 1426              		.loc 1 795 25
 1427 0302 0023     		movs	r3, #0
 1428 0304 07E0     		b	.L94
 1429              	.L95:
 796:./ucOSII/Core/os_flag.c ****         }
 797:./ucOSII/Core/os_flag.c ****     }
 1430              		.loc 1 797 5
 1431 0306 00BF     		nop
 1432              	.L90:
 798:./ucOSII/Core/os_flag.c ****     OS_EXIT_CRITICAL();
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 40


 1433              		.loc 1 798 5
 1434 0308 386B     		ldr	r0, [r7, #48]
 1435 030a FFF7FEFF 		bl	OS_CPU_SR_Restore
 799:./ucOSII/Core/os_flag.c ****     *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred          
 1436              		.loc 1 799 11
 1437 030e 3B6C     		ldr	r3, [r7, #64]
 1438 0310 0022     		movs	r2, #0
 1439 0312 1A70     		strb	r2, [r3]
 800:./ucOSII/Core/os_flag.c ****     OS_TRACE_FLAG_PEND_EXIT(*perr);
 801:./ucOSII/Core/os_flag.c ****     return (flags_rdy);
 1440              		.loc 1 801 12
 1441 0314 BB8D     		ldrh	r3, [r7, #44]
 1442              	.L94:
 802:./ucOSII/Core/os_flag.c **** }
 1443              		.loc 1 802 1 discriminator 1
 1444 0316 1846     		mov	r0, r3
 1445 0318 3837     		adds	r7, r7, #56
 1446              	.LCFI28:
 1447              		.cfi_def_cfa_offset 8
 1448 031a BD46     		mov	sp, r7
 1449              	.LCFI29:
 1450              		.cfi_def_cfa_register 13
 1451              		@ sp needed
 1452 031c 80BD     		pop	{r7, pc}
 1453              	.L99:
 1454 031e 00BF     		.align	2
 1455              	.L98:
 1456 0320 00000000 		.word	OSTCBCur
 1457              		.cfi_endproc
 1458              	.LFE8:
 1460              		.section	.text.OSFlagPendGetFlagsRdy,"ax",%progbits
 1461              		.align	1
 1462              		.global	OSFlagPendGetFlagsRdy
 1463              		.syntax unified
 1464              		.thumb
 1465              		.thumb_func
 1467              	OSFlagPendGetFlagsRdy:
 1468              	.LFB9:
 803:./ucOSII/Core/os_flag.c **** 
 804:./ucOSII/Core/os_flag.c **** 
 805:./ucOSII/Core/os_flag.c **** /*
 806:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 807:./ucOSII/Core/os_flag.c **** *                              GET FLAGS WHO CAUSED TASK TO BECOME READY
 808:./ucOSII/Core/os_flag.c **** *
 809:./ucOSII/Core/os_flag.c **** * Description: This function is called to obtain the flags that caused the task to become ready to 
 810:./ucOSII/Core/os_flag.c **** *              In other words, this function allows you to tell "Who done it!".
 811:./ucOSII/Core/os_flag.c **** *
 812:./ucOSII/Core/os_flag.c **** * Arguments  : None
 813:./ucOSII/Core/os_flag.c **** *
 814:./ucOSII/Core/os_flag.c **** * Returns    : The flags that caused the task to be ready.
 815:./ucOSII/Core/os_flag.c **** *
 816:./ucOSII/Core/os_flag.c **** * Called from: Task ONLY
 817:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 818:./ucOSII/Core/os_flag.c **** */
 819:./ucOSII/Core/os_flag.c **** 
 820:./ucOSII/Core/os_flag.c **** OS_FLAGS  OSFlagPendGetFlagsRdy (void)
 821:./ucOSII/Core/os_flag.c **** {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 41


 1469              		.loc 1 821 1
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 8
 1472              		@ frame_needed = 1, uses_anonymous_args = 0
 1473 0000 80B5     		push	{r7, lr}
 1474              	.LCFI30:
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 7, -8
 1477              		.cfi_offset 14, -4
 1478 0002 82B0     		sub	sp, sp, #8
 1479              	.LCFI31:
 1480              		.cfi_def_cfa_offset 16
 1481 0004 00AF     		add	r7, sp, #0
 1482              	.LCFI32:
 1483              		.cfi_def_cfa_register 7
 822:./ucOSII/Core/os_flag.c ****     OS_FLAGS      flags;
 823:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 824:./ucOSII/Core/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 1484              		.loc 1 824 19
 1485 0006 0023     		movs	r3, #0
 1486 0008 7B60     		str	r3, [r7, #4]
 825:./ucOSII/Core/os_flag.c **** #endif
 826:./ucOSII/Core/os_flag.c **** 
 827:./ucOSII/Core/os_flag.c **** 
 828:./ucOSII/Core/os_flag.c **** 
 829:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 1487              		.loc 1 829 5
 1488 000a 4020     		movs	r0, #64
 1489 000c FFF7FEFF 		bl	OS_CPU_SR_Save
 1490 0010 7860     		str	r0, [r7, #4]
 830:./ucOSII/Core/os_flag.c ****     flags = OSTCBCur->OSTCBFlagsRdy;
 1491              		.loc 1 830 21
 1492 0012 064B     		ldr	r3, .L102
 1493 0014 1B68     		ldr	r3, [r3]
 1494              		.loc 1 830 11
 1495 0016 1B8E     		ldrh	r3, [r3, #48]	@ movhi
 1496 0018 7B80     		strh	r3, [r7, #2]	@ movhi
 831:./ucOSII/Core/os_flag.c ****     OS_EXIT_CRITICAL();
 1497              		.loc 1 831 5
 1498 001a 7868     		ldr	r0, [r7, #4]
 1499 001c FFF7FEFF 		bl	OS_CPU_SR_Restore
 832:./ucOSII/Core/os_flag.c ****     return (flags);
 1500              		.loc 1 832 12
 1501 0020 7B88     		ldrh	r3, [r7, #2]
 833:./ucOSII/Core/os_flag.c **** }
 1502              		.loc 1 833 1
 1503 0022 1846     		mov	r0, r3
 1504 0024 0837     		adds	r7, r7, #8
 1505              	.LCFI33:
 1506              		.cfi_def_cfa_offset 8
 1507 0026 BD46     		mov	sp, r7
 1508              	.LCFI34:
 1509              		.cfi_def_cfa_register 13
 1510              		@ sp needed
 1511 0028 80BD     		pop	{r7, pc}
 1512              	.L103:
 1513 002a 00BF     		.align	2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 42


 1514              	.L102:
 1515 002c 00000000 		.word	OSTCBCur
 1516              		.cfi_endproc
 1517              	.LFE9:
 1519              		.section	.text.OSFlagPost,"ax",%progbits
 1520              		.align	1
 1521              		.global	OSFlagPost
 1522              		.syntax unified
 1523              		.thumb
 1524              		.thumb_func
 1526              	OSFlagPost:
 1527              	.LFB10:
 834:./ucOSII/Core/os_flag.c **** 
 835:./ucOSII/Core/os_flag.c **** 
 836:./ucOSII/Core/os_flag.c **** /*
 837:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 838:./ucOSII/Core/os_flag.c **** *                                       POST EVENT FLAG BIT(S)
 839:./ucOSII/Core/os_flag.c **** *
 840:./ucOSII/Core/os_flag.c **** * Description: This function is called to set or clear some bits in an event flag group.  The bits 
 841:./ucOSII/Core/os_flag.c **** *              set or clear are specified by a 'bit mask'.
 842:./ucOSII/Core/os_flag.c **** *
 843:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
 844:./ucOSII/Core/os_flag.c **** *
 845:./ucOSII/Core/os_flag.c **** *              flags         If 'opt' (see below) is OS_FLAG_SET, each bit that is set in 'flags' w
 846:./ucOSII/Core/os_flag.c **** *                            set the corresponding bit in the event flag group.  e.g. to set bits 0
 847:./ucOSII/Core/os_flag.c **** *                            and 5 you would set 'flags' to:
 848:./ucOSII/Core/os_flag.c **** *
 849:./ucOSII/Core/os_flag.c **** *                                0x31     (note, bit 0 is least significant bit)
 850:./ucOSII/Core/os_flag.c **** *
 851:./ucOSII/Core/os_flag.c **** *                            If 'opt' (see below) is OS_FLAG_CLR, each bit that is set in 'flags' w
 852:./ucOSII/Core/os_flag.c **** *                            CLEAR the corresponding bit in the event flag group.  e.g. to clear bi
 853:./ucOSII/Core/os_flag.c **** *                            4 and 5 you would specify 'flags' as:
 854:./ucOSII/Core/os_flag.c **** *
 855:./ucOSII/Core/os_flag.c **** *                                0x31     (note, bit 0 is least significant bit)
 856:./ucOSII/Core/os_flag.c **** *
 857:./ucOSII/Core/os_flag.c **** *              opt           indicates whether the flags will be:
 858:./ucOSII/Core/os_flag.c **** *                                set     (OS_FLAG_SET) or
 859:./ucOSII/Core/os_flag.c **** *                                cleared (OS_FLAG_CLR)
 860:./ucOSII/Core/os_flag.c **** *
 861:./ucOSII/Core/os_flag.c **** *              perr          is a pointer to an error code and can be:
 862:./ucOSII/Core/os_flag.c **** *                            OS_ERR_NONE                The call was successfull
 863:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP   You passed a NULL pointer
 864:./ucOSII/Core/os_flag.c **** *                            OS_ERR_EVENT_TYPE          You are not pointing to an event flag group
 865:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_INVALID_OPT    You specified an invalid option
 866:./ucOSII/Core/os_flag.c **** *
 867:./ucOSII/Core/os_flag.c **** * Returns    : the new value of the event flags bits that are still set.
 868:./ucOSII/Core/os_flag.c **** *
 869:./ucOSII/Core/os_flag.c **** * Called From: Task or ISR
 870:./ucOSII/Core/os_flag.c **** *
 871:./ucOSII/Core/os_flag.c **** * WARNING(s) : 1) The execution time of this function depends on the number of tasks waiting on the
 872:./ucOSII/Core/os_flag.c **** *                 flag group.
 873:./ucOSII/Core/os_flag.c **** *              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting
 874:./ucOSII/Core/os_flag.c **** *                 the event flag group.
 875:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 876:./ucOSII/Core/os_flag.c **** */
 877:./ucOSII/Core/os_flag.c **** OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
 878:./ucOSII/Core/os_flag.c ****                       OS_FLAGS      flags,
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 43


 879:./ucOSII/Core/os_flag.c ****                       INT8U         opt,
 880:./ucOSII/Core/os_flag.c ****                       INT8U        *perr)
 881:./ucOSII/Core/os_flag.c **** {
 1528              		.loc 1 881 1
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 40
 1531              		@ frame_needed = 1, uses_anonymous_args = 0
 1532 0000 80B5     		push	{r7, lr}
 1533              	.LCFI35:
 1534              		.cfi_def_cfa_offset 8
 1535              		.cfi_offset 7, -8
 1536              		.cfi_offset 14, -4
 1537 0002 8AB0     		sub	sp, sp, #40
 1538              	.LCFI36:
 1539              		.cfi_def_cfa_offset 48
 1540 0004 00AF     		add	r7, sp, #0
 1541              	.LCFI37:
 1542              		.cfi_def_cfa_register 7
 1543 0006 F860     		str	r0, [r7, #12]
 1544 0008 7B60     		str	r3, [r7, #4]
 1545 000a 0B46     		mov	r3, r1	@ movhi
 1546 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 1547 000e 1346     		mov	r3, r2
 1548 0010 7B72     		strb	r3, [r7, #9]
 882:./ucOSII/Core/os_flag.c ****     OS_FLAG_NODE *pnode;
 883:./ucOSII/Core/os_flag.c ****     BOOLEAN       sched;
 884:./ucOSII/Core/os_flag.c ****     OS_FLAGS      flags_cur;
 885:./ucOSII/Core/os_flag.c ****     OS_FLAGS      flags_rdy;
 886:./ucOSII/Core/os_flag.c ****     BOOLEAN       rdy;
 887:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register   
 888:./ucOSII/Core/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 1549              		.loc 1 888 19
 1550 0012 0023     		movs	r3, #0
 1551 0014 FB61     		str	r3, [r7, #28]
 889:./ucOSII/Core/os_flag.c **** #endif
 890:./ucOSII/Core/os_flag.c **** 
 891:./ucOSII/Core/os_flag.c **** 
 892:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 893:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
 894:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 895:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 896:./ucOSII/Core/os_flag.c ****     }
 897:./ucOSII/Core/os_flag.c **** #endif
 898:./ucOSII/Core/os_flag.c **** 
 899:./ucOSII/Core/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 900:./ucOSII/Core/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                            
 1552              		.loc 1 900 8
 1553 0016 FB68     		ldr	r3, [r7, #12]
 1554 0018 002B     		cmp	r3, #0
 1555 001a 04D1     		bne	.L105
 901:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 1556              		.loc 1 901 15
 1557 001c 7B68     		ldr	r3, [r7, #4]
 1558 001e 6E22     		movs	r2, #110
 1559 0020 1A70     		strb	r2, [r3]
 902:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 1560              		.loc 1 902 16
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 44


 1561 0022 0023     		movs	r3, #0
 1562 0024 D7E0     		b	.L106
 1563              	.L105:
 903:./ucOSII/Core/os_flag.c ****     }
 904:./ucOSII/Core/os_flag.c **** #endif
 905:./ucOSII/Core/os_flag.c **** 
 906:./ucOSII/Core/os_flag.c ****     OS_TRACE_FLAG_POST_ENTER(pgrp, flags, opt);
 907:./ucOSII/Core/os_flag.c **** 
 908:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag 
 1564              		.loc 1 908 13
 1565 0026 FB68     		ldr	r3, [r7, #12]
 1566 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1567              		.loc 1 908 8
 1568 002a 052B     		cmp	r3, #5
 1569 002c 04D0     		beq	.L107
 909:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1570              		.loc 1 909 15
 1571 002e 7B68     		ldr	r3, [r7, #4]
 1572 0030 0122     		movs	r2, #1
 1573 0032 1A70     		strb	r2, [r3]
 910:./ucOSII/Core/os_flag.c ****         OS_TRACE_FLAG_POST_EXIT(*perr);
 911:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 1574              		.loc 1 911 16
 1575 0034 0023     		movs	r3, #0
 1576 0036 CEE0     		b	.L106
 1577              	.L107:
 912:./ucOSII/Core/os_flag.c ****     }
 913:./ucOSII/Core/os_flag.c **** 
 914:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 1578              		.loc 1 914 5
 1579 0038 4020     		movs	r0, #64
 1580 003a FFF7FEFF 		bl	OS_CPU_SR_Save
 1581 003e F861     		str	r0, [r7, #28]
 915:./ucOSII/Core/os_flag.c ****     switch (opt) {
 1582              		.loc 1 915 5
 1583 0040 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 1584 0042 002B     		cmp	r3, #0
 1585 0044 02D0     		beq	.L108
 1586 0046 012B     		cmp	r3, #1
 1587 0048 0AD0     		beq	.L109
 1588 004a 11E0     		b	.L126
 1589              	.L108:
 916:./ucOSII/Core/os_flag.c ****         case OS_FLAG_CLR:
 917:./ucOSII/Core/os_flag.c ****              pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group     
 1590              		.loc 1 917 32
 1591 004c FB68     		ldr	r3, [r7, #12]
 1592 004e 1A89     		ldrh	r2, [r3, #8]
 1593              		.loc 1 917 35
 1594 0050 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1595 0052 DB43     		mvns	r3, r3
 1596 0054 9BB2     		uxth	r3, r3
 1597              		.loc 1 917 32
 1598 0056 1340     		ands	r3, r3, r2
 1599 0058 9AB2     		uxth	r2, r3
 1600 005a FB68     		ldr	r3, [r7, #12]
 1601 005c 1A81     		strh	r2, [r3, #8]	@ movhi
 918:./ucOSII/Core/os_flag.c ****              break;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 45


 1602              		.loc 1 918 14
 1603 005e 0FE0     		b	.L111
 1604              	.L109:
 919:./ucOSII/Core/os_flag.c **** 
 920:./ucOSII/Core/os_flag.c ****         case OS_FLAG_SET:
 921:./ucOSII/Core/os_flag.c ****              pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group     
 1605              		.loc 1 921 32
 1606 0060 FB68     		ldr	r3, [r7, #12]
 1607 0062 1A89     		ldrh	r2, [r3, #8]
 1608 0064 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1609 0066 1343     		orrs	r3, r3, r2
 1610 0068 9AB2     		uxth	r2, r3
 1611 006a FB68     		ldr	r3, [r7, #12]
 1612 006c 1A81     		strh	r2, [r3, #8]	@ movhi
 922:./ucOSII/Core/os_flag.c ****              break;
 1613              		.loc 1 922 14
 1614 006e 07E0     		b	.L111
 1615              	.L126:
 923:./ucOSII/Core/os_flag.c **** 
 924:./ucOSII/Core/os_flag.c ****         default:
 925:./ucOSII/Core/os_flag.c ****              OS_EXIT_CRITICAL();                     /* INVALID option                             
 1616              		.loc 1 925 14
 1617 0070 F869     		ldr	r0, [r7, #28]
 1618 0072 FFF7FEFF 		bl	OS_CPU_SR_Restore
 926:./ucOSII/Core/os_flag.c ****              *perr = OS_ERR_FLAG_INVALID_OPT;
 1619              		.loc 1 926 20
 1620 0076 7B68     		ldr	r3, [r7, #4]
 1621 0078 7122     		movs	r2, #113
 1622 007a 1A70     		strb	r2, [r3]
 927:./ucOSII/Core/os_flag.c ****              OS_TRACE_FLAG_POST_EXIT(*perr);
 928:./ucOSII/Core/os_flag.c ****              return ((OS_FLAGS)0);
 1623              		.loc 1 928 21
 1624 007c 0023     		movs	r3, #0
 1625 007e AAE0     		b	.L106
 1626              	.L111:
 929:./ucOSII/Core/os_flag.c ****     }
 930:./ucOSII/Core/os_flag.c ****     sched = OS_FALSE;                                /* Indicate that we don't need rescheduling   
 1627              		.loc 1 930 11
 1628 0080 0023     		movs	r3, #0
 1629 0082 87F82330 		strb	r3, [r7, #35]
 931:./ucOSII/Core/os_flag.c ****     pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1630              		.loc 1 931 11
 1631 0086 FB68     		ldr	r3, [r7, #12]
 1632 0088 5B68     		ldr	r3, [r3, #4]
 1633 008a 7B62     		str	r3, [r7, #36]
 932:./ucOSII/Core/os_flag.c ****     while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(
 1634              		.loc 1 932 11
 1635 008c 88E0     		b	.L112
 1636              	.L124:
 933:./ucOSII/Core/os_flag.c ****         switch (pnode->OSFlagNodeWaitType) {
 1637              		.loc 1 933 22
 1638 008e 7B6A     		ldr	r3, [r7, #36]
 1639 0090 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1640              		.loc 1 933 9
 1641 0092 032B     		cmp	r3, #3
 1642 0094 72D8     		bhi	.L113
 1643 0096 01A2     		adr	r2, .L115
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 46


 1644 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1645              		.p2align 2
 1646              	.L115:
 1647 009c 11010000 		.word	.L118+1
 1648 00a0 49010000 		.word	.L117+1
 1649 00a4 AD000000 		.word	.L116+1
 1650 00a8 E1000000 		.word	.L114+1
 1651              		.p2align 1
 1652              	.L116:
 934:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current n
 935:./ucOSII/Core/os_flag.c ****                  flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1653              		.loc 1 935 45
 1654 00ac FB68     		ldr	r3, [r7, #12]
 1655 00ae 1A89     		ldrh	r2, [r3, #8]
 1656              		.loc 1 935 66
 1657 00b0 7B6A     		ldr	r3, [r7, #36]
 1658 00b2 1B8A     		ldrh	r3, [r3, #16]
 1659              		.loc 1 935 28
 1660 00b4 1340     		ands	r3, r3, r2
 1661 00b6 3B83     		strh	r3, [r7, #24]	@ movhi
 936:./ucOSII/Core/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1662              		.loc 1 936 40
 1663 00b8 7B6A     		ldr	r3, [r7, #36]
 1664 00ba 1B8A     		ldrh	r3, [r3, #16]
 1665              		.loc 1 936 21
 1666 00bc 3A8B     		ldrh	r2, [r7, #24]
 1667 00be 9A42     		cmp	r2, r3
 1668 00c0 64D1     		bne	.L127
 937:./ucOSII/Core/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 1669              		.loc 1 937 28
 1670 00c2 3B8B     		ldrh	r3, [r7, #24]
 1671 00c4 0022     		movs	r2, #0
 1672 00c6 1946     		mov	r1, r3
 1673 00c8 786A     		ldr	r0, [r7, #36]
 1674 00ca FFF7FEFF 		bl	OS_FlagTaskRdy
 1675 00ce 0346     		mov	r3, r0
 1676 00d0 FB75     		strb	r3, [r7, #23]
 938:./ucOSII/Core/os_flag.c ****                      if (rdy == OS_TRUE) {
 1677              		.loc 1 938 25
 1678 00d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1679 00d4 012B     		cmp	r3, #1
 1680 00d6 59D1     		bne	.L127
 939:./ucOSII/Core/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1681              		.loc 1 939 32
 1682 00d8 0123     		movs	r3, #1
 1683 00da 87F82330 		strb	r3, [r7, #35]
 940:./ucOSII/Core/os_flag.c ****                      }
 941:./ucOSII/Core/os_flag.c ****                  }
 942:./ucOSII/Core/os_flag.c ****                  break;
 1684              		.loc 1 942 18
 1685 00de 55E0     		b	.L127
 1686              	.L114:
 943:./ucOSII/Core/os_flag.c **** 
 944:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                        
 945:./ucOSII/Core/os_flag.c ****                  flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1687              		.loc 1 945 45
 1688 00e0 FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 47


 1689 00e2 1A89     		ldrh	r2, [r3, #8]
 1690              		.loc 1 945 66
 1691 00e4 7B6A     		ldr	r3, [r7, #36]
 1692 00e6 1B8A     		ldrh	r3, [r3, #16]
 1693              		.loc 1 945 28
 1694 00e8 1340     		ands	r3, r3, r2
 1695 00ea 3B83     		strh	r3, [r7, #24]	@ movhi
 946:./ucOSII/Core/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1696              		.loc 1 946 21
 1697 00ec 3B8B     		ldrh	r3, [r7, #24]
 1698 00ee 002B     		cmp	r3, #0
 1699 00f0 4ED0     		beq	.L128
 947:./ucOSII/Core/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 1700              		.loc 1 947 28
 1701 00f2 3B8B     		ldrh	r3, [r7, #24]
 1702 00f4 0022     		movs	r2, #0
 1703 00f6 1946     		mov	r1, r3
 1704 00f8 786A     		ldr	r0, [r7, #36]
 1705 00fa FFF7FEFF 		bl	OS_FlagTaskRdy
 1706 00fe 0346     		mov	r3, r0
 1707 0100 FB75     		strb	r3, [r7, #23]
 948:./ucOSII/Core/os_flag.c ****                      if (rdy == OS_TRUE) {
 1708              		.loc 1 948 25
 1709 0102 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1710 0104 012B     		cmp	r3, #1
 1711 0106 43D1     		bne	.L128
 949:./ucOSII/Core/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1712              		.loc 1 949 32
 1713 0108 0123     		movs	r3, #1
 1714 010a 87F82330 		strb	r3, [r7, #35]
 950:./ucOSII/Core/os_flag.c ****                      }
 951:./ucOSII/Core/os_flag.c ****                  }
 952:./ucOSII/Core/os_flag.c ****                  break;
 1715              		.loc 1 952 18
 1716 010e 3FE0     		b	.L128
 1717              	.L118:
 953:./ucOSII/Core/os_flag.c **** 
 954:./ucOSII/Core/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 955:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current n
 956:./ucOSII/Core/os_flag.c ****                  flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 1718              		.loc 1 956 45
 1719 0110 FB68     		ldr	r3, [r7, #12]
 1720 0112 1B89     		ldrh	r3, [r3, #8]
 1721              		.loc 1 956 30
 1722 0114 DB43     		mvns	r3, r3
 1723 0116 9AB2     		uxth	r2, r3
 1724              		.loc 1 956 66
 1725 0118 7B6A     		ldr	r3, [r7, #36]
 1726 011a 1B8A     		ldrh	r3, [r3, #16]
 1727              		.loc 1 956 28
 1728 011c 1340     		ands	r3, r3, r2
 1729 011e 3B83     		strh	r3, [r7, #24]	@ movhi
 957:./ucOSII/Core/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1730              		.loc 1 957 40
 1731 0120 7B6A     		ldr	r3, [r7, #36]
 1732 0122 1B8A     		ldrh	r3, [r3, #16]
 1733              		.loc 1 957 21
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 48


 1734 0124 3A8B     		ldrh	r2, [r7, #24]
 1735 0126 9A42     		cmp	r2, r3
 1736 0128 34D1     		bne	.L129
 958:./ucOSII/Core/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 1737              		.loc 1 958 28
 1738 012a 3B8B     		ldrh	r3, [r7, #24]
 1739 012c 0022     		movs	r2, #0
 1740 012e 1946     		mov	r1, r3
 1741 0130 786A     		ldr	r0, [r7, #36]
 1742 0132 FFF7FEFF 		bl	OS_FlagTaskRdy
 1743 0136 0346     		mov	r3, r0
 1744 0138 FB75     		strb	r3, [r7, #23]
 959:./ucOSII/Core/os_flag.c ****                      if (rdy == OS_TRUE) {
 1745              		.loc 1 959 25
 1746 013a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1747 013c 012B     		cmp	r3, #1
 1748 013e 29D1     		bne	.L129
 960:./ucOSII/Core/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1749              		.loc 1 960 32
 1750 0140 0123     		movs	r3, #1
 1751 0142 87F82330 		strb	r3, [r7, #35]
 961:./ucOSII/Core/os_flag.c ****                      }
 962:./ucOSII/Core/os_flag.c ****                  }
 963:./ucOSII/Core/os_flag.c ****                  break;
 1752              		.loc 1 963 18
 1753 0146 25E0     		b	.L129
 1754              	.L117:
 964:./ucOSII/Core/os_flag.c **** 
 965:./ucOSII/Core/os_flag.c ****             case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                        
 966:./ucOSII/Core/os_flag.c ****                  flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 1755              		.loc 1 966 45
 1756 0148 FB68     		ldr	r3, [r7, #12]
 1757 014a 1B89     		ldrh	r3, [r3, #8]
 1758              		.loc 1 966 30
 1759 014c DB43     		mvns	r3, r3
 1760 014e 9AB2     		uxth	r2, r3
 1761              		.loc 1 966 66
 1762 0150 7B6A     		ldr	r3, [r7, #36]
 1763 0152 1B8A     		ldrh	r3, [r3, #16]
 1764              		.loc 1 966 28
 1765 0154 1340     		ands	r3, r3, r2
 1766 0156 3B83     		strh	r3, [r7, #24]	@ movhi
 967:./ucOSII/Core/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1767              		.loc 1 967 21
 1768 0158 3B8B     		ldrh	r3, [r7, #24]
 1769 015a 002B     		cmp	r3, #0
 1770 015c 1CD0     		beq	.L130
 968:./ucOSII/Core/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 1771              		.loc 1 968 28
 1772 015e 3B8B     		ldrh	r3, [r7, #24]
 1773 0160 0022     		movs	r2, #0
 1774 0162 1946     		mov	r1, r3
 1775 0164 786A     		ldr	r0, [r7, #36]
 1776 0166 FFF7FEFF 		bl	OS_FlagTaskRdy
 1777 016a 0346     		mov	r3, r0
 1778 016c FB75     		strb	r3, [r7, #23]
 969:./ucOSII/Core/os_flag.c ****                      if (rdy == OS_TRUE) {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 49


 1779              		.loc 1 969 25
 1780 016e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1781 0170 012B     		cmp	r3, #1
 1782 0172 11D1     		bne	.L130
 970:./ucOSII/Core/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1783              		.loc 1 970 32
 1784 0174 0123     		movs	r3, #1
 1785 0176 87F82330 		strb	r3, [r7, #35]
 971:./ucOSII/Core/os_flag.c ****                      }
 972:./ucOSII/Core/os_flag.c ****                  }
 973:./ucOSII/Core/os_flag.c ****                  break;
 1786              		.loc 1 973 18
 1787 017a 0DE0     		b	.L130
 1788              	.L113:
 974:./ucOSII/Core/os_flag.c **** #endif
 975:./ucOSII/Core/os_flag.c ****             default:
 976:./ucOSII/Core/os_flag.c ****                  OS_EXIT_CRITICAL();
 1789              		.loc 1 976 18
 1790 017c F869     		ldr	r0, [r7, #28]
 1791 017e FFF7FEFF 		bl	OS_CPU_SR_Restore
 977:./ucOSII/Core/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 1792              		.loc 1 977 24
 1793 0182 7B68     		ldr	r3, [r7, #4]
 1794 0184 6F22     		movs	r2, #111
 1795 0186 1A70     		strb	r2, [r3]
 978:./ucOSII/Core/os_flag.c ****                  OS_TRACE_FLAG_POST_EXIT(*perr);
 979:./ucOSII/Core/os_flag.c ****                  return ((OS_FLAGS)0);
 1796              		.loc 1 979 25
 1797 0188 0023     		movs	r3, #0
 1798 018a 24E0     		b	.L106
 1799              	.L127:
 942:./ucOSII/Core/os_flag.c **** 
 1800              		.loc 1 942 18
 1801 018c 00BF     		nop
 1802 018e 04E0     		b	.L120
 1803              	.L128:
 952:./ucOSII/Core/os_flag.c **** 
 1804              		.loc 1 952 18
 1805 0190 00BF     		nop
 1806 0192 02E0     		b	.L120
 1807              	.L129:
 963:./ucOSII/Core/os_flag.c **** 
 1808              		.loc 1 963 18
 1809 0194 00BF     		nop
 1810 0196 00E0     		b	.L120
 1811              	.L130:
 973:./ucOSII/Core/os_flag.c **** #endif
 1812              		.loc 1 973 18
 1813 0198 00BF     		nop
 1814              	.L120:
 980:./ucOSII/Core/os_flag.c ****         }
 981:./ucOSII/Core/os_flag.c ****         pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag
 1815              		.loc 1 981 15
 1816 019a 7B6A     		ldr	r3, [r7, #36]
 1817 019c 1B68     		ldr	r3, [r3]
 1818 019e 7B62     		str	r3, [r7, #36]
 1819              	.L112:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 50


 932:./ucOSII/Core/os_flag.c ****         switch (pnode->OSFlagNodeWaitType) {
 1820              		.loc 1 932 11
 1821 01a0 7B6A     		ldr	r3, [r7, #36]
 1822 01a2 002B     		cmp	r3, #0
 1823 01a4 7FF473AF 		bne	.L124
 982:./ucOSII/Core/os_flag.c ****     }
 983:./ucOSII/Core/os_flag.c ****     OS_EXIT_CRITICAL();
 1824              		.loc 1 983 5
 1825 01a8 F869     		ldr	r0, [r7, #28]
 1826 01aa FFF7FEFF 		bl	OS_CPU_SR_Restore
 984:./ucOSII/Core/os_flag.c ****     if (sched == OS_TRUE) {
 1827              		.loc 1 984 8
 1828 01ae 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1829 01b2 012B     		cmp	r3, #1
 1830 01b4 01D1     		bne	.L125
 985:./ucOSII/Core/os_flag.c ****         OS_Sched();
 1831              		.loc 1 985 9
 1832 01b6 FFF7FEFF 		bl	OS_Sched
 1833              	.L125:
 986:./ucOSII/Core/os_flag.c ****     }
 987:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 1834              		.loc 1 987 5
 1835 01ba 4020     		movs	r0, #64
 1836 01bc FFF7FEFF 		bl	OS_CPU_SR_Save
 1837 01c0 F861     		str	r0, [r7, #28]
 988:./ucOSII/Core/os_flag.c ****     flags_cur = pgrp->OSFlagFlags;
 1838              		.loc 1 988 15
 1839 01c2 FB68     		ldr	r3, [r7, #12]
 1840 01c4 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1841 01c6 7B83     		strh	r3, [r7, #26]	@ movhi
 989:./ucOSII/Core/os_flag.c ****     OS_EXIT_CRITICAL();
 1842              		.loc 1 989 5
 1843 01c8 F869     		ldr	r0, [r7, #28]
 1844 01ca FFF7FEFF 		bl	OS_CPU_SR_Restore
 990:./ucOSII/Core/os_flag.c ****     *perr     = OS_ERR_NONE;
 1845              		.loc 1 990 15
 1846 01ce 7B68     		ldr	r3, [r7, #4]
 1847 01d0 0022     		movs	r2, #0
 1848 01d2 1A70     		strb	r2, [r3]
 991:./ucOSII/Core/os_flag.c ****     OS_TRACE_FLAG_POST_EXIT(*perr);
 992:./ucOSII/Core/os_flag.c **** 
 993:./ucOSII/Core/os_flag.c ****     return (flags_cur);
 1849              		.loc 1 993 12
 1850 01d4 7B8B     		ldrh	r3, [r7, #26]
 1851              	.L106:
 994:./ucOSII/Core/os_flag.c **** }
 1852              		.loc 1 994 1
 1853 01d6 1846     		mov	r0, r3
 1854 01d8 2837     		adds	r7, r7, #40
 1855              	.LCFI38:
 1856              		.cfi_def_cfa_offset 8
 1857 01da BD46     		mov	sp, r7
 1858              	.LCFI39:
 1859              		.cfi_def_cfa_register 13
 1860              		@ sp needed
 1861 01dc 80BD     		pop	{r7, pc}
 1862              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 51


 1863              	.LFE10:
 1865 01de 00BF     		.section	.text.OSFlagQuery,"ax",%progbits
 1866              		.align	1
 1867              		.global	OSFlagQuery
 1868              		.syntax unified
 1869              		.thumb
 1870              		.thumb_func
 1872              	OSFlagQuery:
 1873              	.LFB11:
 995:./ucOSII/Core/os_flag.c **** 
 996:./ucOSII/Core/os_flag.c **** 
 997:./ucOSII/Core/os_flag.c **** /*
 998:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
 999:./ucOSII/Core/os_flag.c **** *                                          QUERY EVENT FLAG
1000:./ucOSII/Core/os_flag.c **** *
1001:./ucOSII/Core/os_flag.c **** * Description: This function is used to check the value of the event flag group.
1002:./ucOSII/Core/os_flag.c **** *
1003:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp         is a pointer to the desired event flag group.
1004:./ucOSII/Core/os_flag.c **** *
1005:./ucOSII/Core/os_flag.c **** *              perr          is a pointer to an error code returned to the called:
1006:./ucOSII/Core/os_flag.c **** *                            OS_ERR_NONE                The call was successfull
1007:./ucOSII/Core/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP   You passed a NULL pointer
1008:./ucOSII/Core/os_flag.c **** *                            OS_ERR_EVENT_TYPE          You are not pointing to an event flag group
1009:./ucOSII/Core/os_flag.c **** *
1010:./ucOSII/Core/os_flag.c **** * Returns    : The current value of the event flag group.
1011:./ucOSII/Core/os_flag.c **** *
1012:./ucOSII/Core/os_flag.c **** * Called From: Task or ISR
1013:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1014:./ucOSII/Core/os_flag.c **** */
1015:./ucOSII/Core/os_flag.c **** 
1016:./ucOSII/Core/os_flag.c **** #if OS_FLAG_QUERY_EN > 0u
1017:./ucOSII/Core/os_flag.c **** OS_FLAGS  OSFlagQuery (OS_FLAG_GRP  *pgrp,
1018:./ucOSII/Core/os_flag.c ****                        INT8U        *perr)
1019:./ucOSII/Core/os_flag.c **** {
 1874              		.loc 1 1019 1
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 16
 1877              		@ frame_needed = 1, uses_anonymous_args = 0
 1878 0000 80B5     		push	{r7, lr}
 1879              	.LCFI40:
 1880              		.cfi_def_cfa_offset 8
 1881              		.cfi_offset 7, -8
 1882              		.cfi_offset 14, -4
 1883 0002 84B0     		sub	sp, sp, #16
 1884              	.LCFI41:
 1885              		.cfi_def_cfa_offset 24
 1886 0004 00AF     		add	r7, sp, #0
 1887              	.LCFI42:
 1888              		.cfi_def_cfa_register 7
 1889 0006 7860     		str	r0, [r7, #4]
 1890 0008 3960     		str	r1, [r7]
1020:./ucOSII/Core/os_flag.c ****     OS_FLAGS   flags;
1021:./ucOSII/Core/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                      /* Allocate storage for CPU status register      
1022:./ucOSII/Core/os_flag.c ****     OS_CPU_SR  cpu_sr = 0u;
 1891              		.loc 1 1022 16
 1892 000a 0023     		movs	r3, #0
 1893 000c FB60     		str	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 52


1023:./ucOSII/Core/os_flag.c **** #endif
1024:./ucOSII/Core/os_flag.c **** 
1025:./ucOSII/Core/os_flag.c **** 
1026:./ucOSII/Core/os_flag.c **** 
1027:./ucOSII/Core/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
1028:./ucOSII/Core/os_flag.c ****     if (perr == (INT8U *)0) {
1029:./ucOSII/Core/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
1030:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
1031:./ucOSII/Core/os_flag.c ****     }
1032:./ucOSII/Core/os_flag.c **** #endif
1033:./ucOSII/Core/os_flag.c **** 
1034:./ucOSII/Core/os_flag.c **** #if OS_ARG_CHK_EN > 0u
1035:./ucOSII/Core/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                               
 1894              		.loc 1 1035 8
 1895 000e 7B68     		ldr	r3, [r7, #4]
 1896 0010 002B     		cmp	r3, #0
 1897 0012 04D1     		bne	.L132
1036:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 1898              		.loc 1 1036 15
 1899 0014 3B68     		ldr	r3, [r7]
 1900 0016 6E22     		movs	r2, #110
 1901 0018 1A70     		strb	r2, [r3]
1037:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 1902              		.loc 1 1037 16
 1903 001a 0023     		movs	r3, #0
 1904 001c 16E0     		b	.L133
 1905              	.L132:
1038:./ucOSII/Core/os_flag.c ****     }
1039:./ucOSII/Core/os_flag.c **** #endif
1040:./ucOSII/Core/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                     
 1906              		.loc 1 1040 13
 1907 001e 7B68     		ldr	r3, [r7, #4]
 1908 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1909              		.loc 1 1040 8
 1910 0022 052B     		cmp	r3, #5
 1911 0024 04D0     		beq	.L134
1041:./ucOSII/Core/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1912              		.loc 1 1041 15
 1913 0026 3B68     		ldr	r3, [r7]
 1914 0028 0122     		movs	r2, #1
 1915 002a 1A70     		strb	r2, [r3]
1042:./ucOSII/Core/os_flag.c ****         return ((OS_FLAGS)0);
 1916              		.loc 1 1042 16
 1917 002c 0023     		movs	r3, #0
 1918 002e 0DE0     		b	.L133
 1919              	.L134:
1043:./ucOSII/Core/os_flag.c ****     }
1044:./ucOSII/Core/os_flag.c ****     OS_ENTER_CRITICAL();
 1920              		.loc 1 1044 5
 1921 0030 4020     		movs	r0, #64
 1922 0032 FFF7FEFF 		bl	OS_CPU_SR_Save
 1923 0036 F860     		str	r0, [r7, #12]
1045:./ucOSII/Core/os_flag.c ****     flags = pgrp->OSFlagFlags;
 1924              		.loc 1 1045 11
 1925 0038 7B68     		ldr	r3, [r7, #4]
 1926 003a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1927 003c 7B81     		strh	r3, [r7, #10]	@ movhi
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 53


1046:./ucOSII/Core/os_flag.c ****     OS_EXIT_CRITICAL();
 1928              		.loc 1 1046 5
 1929 003e F868     		ldr	r0, [r7, #12]
 1930 0040 FFF7FEFF 		bl	OS_CPU_SR_Restore
1047:./ucOSII/Core/os_flag.c ****     *perr = OS_ERR_NONE;
 1931              		.loc 1 1047 11
 1932 0044 3B68     		ldr	r3, [r7]
 1933 0046 0022     		movs	r2, #0
 1934 0048 1A70     		strb	r2, [r3]
1048:./ucOSII/Core/os_flag.c ****     return (flags);                               /* Return the current value of the event flags   
 1935              		.loc 1 1048 12
 1936 004a 7B89     		ldrh	r3, [r7, #10]
 1937              	.L133:
1049:./ucOSII/Core/os_flag.c **** }
 1938              		.loc 1 1049 1
 1939 004c 1846     		mov	r0, r3
 1940 004e 1037     		adds	r7, r7, #16
 1941              	.LCFI43:
 1942              		.cfi_def_cfa_offset 8
 1943 0050 BD46     		mov	sp, r7
 1944              	.LCFI44:
 1945              		.cfi_def_cfa_register 13
 1946              		@ sp needed
 1947 0052 80BD     		pop	{r7, pc}
 1948              		.cfi_endproc
 1949              	.LFE11:
 1951              		.section	.text.OS_FlagBlock,"ax",%progbits
 1952              		.align	1
 1953              		.syntax unified
 1954              		.thumb
 1955              		.thumb_func
 1957              	OS_FlagBlock:
 1958              	.LFB12:
1050:./ucOSII/Core/os_flag.c **** #endif
1051:./ucOSII/Core/os_flag.c **** 
1052:./ucOSII/Core/os_flag.c **** 
1053:./ucOSII/Core/os_flag.c **** /*
1054:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1055:./ucOSII/Core/os_flag.c **** *                     SUSPEND TASK UNTIL EVENT FLAG(s) RECEIVED OR TIMEOUT OCCURS
1056:./ucOSII/Core/os_flag.c **** *
1057:./ucOSII/Core/os_flag.c **** * Description: This function is internal to uC/OS-II and is used to put a task to sleep until the d
1058:./ucOSII/Core/os_flag.c **** *              event flag bit(s) are set.
1059:./ucOSII/Core/os_flag.c **** *
1060:./ucOSII/Core/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
1061:./ucOSII/Core/os_flag.c **** *
1062:./ucOSII/Core/os_flag.c **** *              pnode         is a pointer to a structure which contains data about the task waiting
1063:./ucOSII/Core/os_flag.c **** *                            event flag bit(s) to be set.
1064:./ucOSII/Core/os_flag.c **** *
1065:./ucOSII/Core/os_flag.c **** *              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to chec
1066:./ucOSII/Core/os_flag.c **** *                            The bits you want are specified by setting the corresponding bits in
1067:./ucOSII/Core/os_flag.c **** *                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
1068:./ucOSII/Core/os_flag.c **** *                            'flags' would contain 0x03.
1069:./ucOSII/Core/os_flag.c **** *
1070:./ucOSII/Core/os_flag.c **** *              wait_type     specifies whether you want ALL bits to be set/cleared or ANY of the bi
1071:./ucOSII/Core/os_flag.c **** *                            to be set/cleared.
1072:./ucOSII/Core/os_flag.c **** *                            You can specify the following argument:
1073:./ucOSII/Core/os_flag.c **** *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 54


1074:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ALL   You will check ALL bits in 'mask' to be clear (
1075:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ANY   You will check ANY bit  in 'mask' to be clear (
1076:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_SET_ALL   You will check ALL bits in 'mask' to be set   (
1077:./ucOSII/Core/os_flag.c **** *                            OS_FLAG_WAIT_SET_ANY   You will check ANY bit  in 'mask' to be set   (
1078:./ucOSII/Core/os_flag.c **** *
1079:./ucOSII/Core/os_flag.c **** *              timeout       is the desired amount of time that the task will wait for the event fl
1080:./ucOSII/Core/os_flag.c **** *                            bit(s) to be set.
1081:./ucOSII/Core/os_flag.c **** *
1082:./ucOSII/Core/os_flag.c **** * Returns    : none
1083:./ucOSII/Core/os_flag.c **** *
1084:./ucOSII/Core/os_flag.c **** * Called by  : OSFlagPend()  OS_FLAG.C
1085:./ucOSII/Core/os_flag.c **** *
1086:./ucOSII/Core/os_flag.c **** * Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
1087:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1088:./ucOSII/Core/os_flag.c **** */
1089:./ucOSII/Core/os_flag.c **** 
1090:./ucOSII/Core/os_flag.c **** static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
1091:./ucOSII/Core/os_flag.c ****                             OS_FLAG_NODE *pnode,
1092:./ucOSII/Core/os_flag.c ****                             OS_FLAGS      flags,
1093:./ucOSII/Core/os_flag.c ****                             INT8U         wait_type,
1094:./ucOSII/Core/os_flag.c ****                             INT32U        timeout)
1095:./ucOSII/Core/os_flag.c **** {
 1959              		.loc 1 1095 1
 1960              		.cfi_startproc
 1961              		@ args = 4, pretend = 0, frame = 24
 1962              		@ frame_needed = 1, uses_anonymous_args = 0
 1963              		@ link register save eliminated.
 1964 0000 80B4     		push	{r7}
 1965              	.LCFI45:
 1966              		.cfi_def_cfa_offset 4
 1967              		.cfi_offset 7, -4
 1968 0002 87B0     		sub	sp, sp, #28
 1969              	.LCFI46:
 1970              		.cfi_def_cfa_offset 32
 1971 0004 00AF     		add	r7, sp, #0
 1972              	.LCFI47:
 1973              		.cfi_def_cfa_register 7
 1974 0006 F860     		str	r0, [r7, #12]
 1975 0008 B960     		str	r1, [r7, #8]
 1976 000a 1146     		mov	r1, r2
 1977 000c 1A46     		mov	r2, r3
 1978 000e 0B46     		mov	r3, r1	@ movhi
 1979 0010 FB80     		strh	r3, [r7, #6]	@ movhi
 1980 0012 1346     		mov	r3, r2
 1981 0014 7B71     		strb	r3, [r7, #5]
1096:./ucOSII/Core/os_flag.c ****     OS_FLAG_NODE  *pnode_next;
1097:./ucOSII/Core/os_flag.c ****     INT8U          y;
1098:./ucOSII/Core/os_flag.c **** 
1099:./ucOSII/Core/os_flag.c **** 
1100:./ucOSII/Core/os_flag.c ****     OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 1982              		.loc 1 1100 30
 1983 0016 314B     		ldr	r3, .L139
 1984 0018 1B68     		ldr	r3, [r3]
 1985 001a 93F83820 		ldrb	r2, [r3, #56]	@ zero_extendqisi2
 1986 001e 2F4B     		ldr	r3, .L139
 1987 0020 1B68     		ldr	r3, [r3]
 1988 0022 42F02002 		orr	r2, r2, #32
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 55


 1989 0026 D2B2     		uxtb	r2, r2
 1990 0028 83F83820 		strb	r2, [r3, #56]
1101:./ucOSII/Core/os_flag.c ****     OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 1991              		.loc 1 1101 13
 1992 002c 2B4B     		ldr	r3, .L139
 1993 002e 1B68     		ldr	r3, [r3]
 1994              		.loc 1 1101 31
 1995 0030 0022     		movs	r2, #0
 1996 0032 83F83920 		strb	r2, [r3, #57]
1102:./ucOSII/Core/os_flag.c ****     OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB               
 1997              		.loc 1 1102 13
 1998 0036 294B     		ldr	r3, .L139
 1999 0038 1B68     		ldr	r3, [r3]
 2000              		.loc 1 1102 31
 2001 003a 3A6A     		ldr	r2, [r7, #32]
 2002 003c 5A63     		str	r2, [r3, #52]
1103:./ucOSII/Core/os_flag.c **** #if OS_TASK_DEL_EN > 0u
1104:./ucOSII/Core/os_flag.c ****     OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                       
 2003              		.loc 1 1104 13
 2004 003e 274B     		ldr	r3, .L139
 2005 0040 1B68     		ldr	r3, [r3]
 2006              		.loc 1 1104 31
 2007 0042 BA68     		ldr	r2, [r7, #8]
 2008 0044 DA62     		str	r2, [r3, #44]
1105:./ucOSII/Core/os_flag.c **** #endif
1106:./ucOSII/Core/os_flag.c ****     pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for   
 2009              		.loc 1 1106 31
 2010 0046 BB68     		ldr	r3, [r7, #8]
 2011 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2012 004a 1A82     		strh	r2, [r3, #16]	@ movhi
1107:./ucOSII/Core/os_flag.c ****     pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing        
 2013              		.loc 1 1107 31
 2014 004c BB68     		ldr	r3, [r7, #8]
 2015 004e 7A79     		ldrb	r2, [r7, #5]
 2016 0050 9A74     		strb	r2, [r3, #18]
1108:./ucOSII/Core/os_flag.c ****     pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                        
 2017              		.loc 1 1108 31
 2018 0052 224B     		ldr	r3, .L139
 2019 0054 1A68     		ldr	r2, [r3]
 2020 0056 BB68     		ldr	r3, [r7, #8]
 2021 0058 9A60     		str	r2, [r3, #8]
1109:./ucOSII/Core/os_flag.c ****     pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait l
 2022              		.loc 1 1109 37
 2023 005a FB68     		ldr	r3, [r7, #12]
 2024 005c 5A68     		ldr	r2, [r3, #4]
 2025              		.loc 1 1109 31
 2026 005e BB68     		ldr	r3, [r7, #8]
 2027 0060 1A60     		str	r2, [r3]
1110:./ucOSII/Core/os_flag.c ****     pnode->OSFlagNodePrev     = (void *)0;
 2028              		.loc 1 1110 31
 2029 0062 BB68     		ldr	r3, [r7, #8]
 2030 0064 0022     		movs	r2, #0
 2031 0066 5A60     		str	r2, [r3, #4]
1111:./ucOSII/Core/os_flag.c ****     pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                  
 2032              		.loc 1 1111 31
 2033 0068 BB68     		ldr	r3, [r7, #8]
 2034 006a FA68     		ldr	r2, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 56


 2035 006c DA60     		str	r2, [r3, #12]
1112:./ucOSII/Core/os_flag.c ****     pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2036              		.loc 1 1112 31
 2037 006e FB68     		ldr	r3, [r7, #12]
 2038 0070 5B68     		ldr	r3, [r3, #4]
 2039 0072 7B61     		str	r3, [r7, #20]
1113:./ucOSII/Core/os_flag.c ****     if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?         
 2040              		.loc 1 1113 8
 2041 0074 7B69     		ldr	r3, [r7, #20]
 2042 0076 002B     		cmp	r3, #0
 2043 0078 02D0     		beq	.L136
1114:./ucOSII/Core/os_flag.c ****         pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list            
 2044              		.loc 1 1114 36
 2045 007a 7B69     		ldr	r3, [r7, #20]
 2046 007c BA68     		ldr	r2, [r7, #8]
 2047 007e 5A60     		str	r2, [r3, #4]
 2048              	.L136:
1115:./ucOSII/Core/os_flag.c ****     }
1116:./ucOSII/Core/os_flag.c ****     pgrp->OSFlagWaitList = (void *)pnode;
 2049              		.loc 1 1116 26
 2050 0080 FB68     		ldr	r3, [r7, #12]
 2051 0082 BA68     		ldr	r2, [r7, #8]
 2052 0084 5A60     		str	r2, [r3, #4]
1117:./ucOSII/Core/os_flag.c **** 
1118:./ucOSII/Core/os_flag.c ****     y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) receive
 2053              		.loc 1 1118 29
 2054 0086 154B     		ldr	r3, .L139
 2055 0088 1B68     		ldr	r3, [r3]
 2056              		.loc 1 1118 18
 2057 008a 93F83C30 		ldrb	r3, [r3, #60]
 2058 008e FB74     		strb	r3, [r7, #19]
1119:./ucOSII/Core/os_flag.c ****     OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 2059              		.loc 1 1119 17
 2060 0090 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2061 0092 134A     		ldr	r2, .L139+4
 2062 0094 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 2063              		.loc 1 1119 38
 2064 0096 114B     		ldr	r3, .L139
 2065 0098 1B68     		ldr	r3, [r3]
 2066 009a 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 2067              		.loc 1 1119 20
 2068 009e DB43     		mvns	r3, r3
 2069 00a0 DAB2     		uxtb	r2, r3
 2070              		.loc 1 1119 17
 2071 00a2 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2072 00a4 0A40     		ands	r2, r2, r1
 2073 00a6 D1B2     		uxtb	r1, r2
 2074 00a8 0D4A     		ldr	r2, .L139+4
 2075 00aa D154     		strb	r1, [r2, r3]
1120:./ucOSII/Core/os_flag.c ****     OS_TRACE_TASK_SUSPENDED(OSTCBCur);
1121:./ucOSII/Core/os_flag.c ****     if (OSRdyTbl[y] == 0x00u) {
 2076              		.loc 1 1121 17
 2077 00ac FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2078 00ae 0C4A     		ldr	r2, .L139+4
 2079 00b0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2080              		.loc 1 1121 8
 2081 00b2 002B     		cmp	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 57


 2082 00b4 0BD1     		bne	.L138
1122:./ucOSII/Core/os_flag.c ****         OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 2083              		.loc 1 1122 39
 2084 00b6 094B     		ldr	r3, .L139
 2085 00b8 1B68     		ldr	r3, [r3]
 2086 00ba 93F83E30 		ldrb	r3, [r3, #62]	@ zero_extendqisi2
 2087              		.loc 1 1122 21
 2088 00be DB43     		mvns	r3, r3
 2089 00c0 DAB2     		uxtb	r2, r3
 2090              		.loc 1 1122 18
 2091 00c2 084B     		ldr	r3, .L139+8
 2092 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2093 00c6 1340     		ands	r3, r3, r2
 2094 00c8 DAB2     		uxtb	r2, r3
 2095 00ca 064B     		ldr	r3, .L139+8
 2096 00cc 1A70     		strb	r2, [r3]
 2097              	.L138:
1123:./ucOSII/Core/os_flag.c ****     }
1124:./ucOSII/Core/os_flag.c **** }
 2098              		.loc 1 1124 1
 2099 00ce 00BF     		nop
 2100 00d0 1C37     		adds	r7, r7, #28
 2101              	.LCFI48:
 2102              		.cfi_def_cfa_offset 4
 2103 00d2 BD46     		mov	sp, r7
 2104              	.LCFI49:
 2105              		.cfi_def_cfa_register 13
 2106              		@ sp needed
 2107 00d4 5DF8047B 		ldr	r7, [sp], #4
 2108              	.LCFI50:
 2109              		.cfi_restore 7
 2110              		.cfi_def_cfa_offset 0
 2111 00d8 7047     		bx	lr
 2112              	.L140:
 2113 00da 00BF     		.align	2
 2114              	.L139:
 2115 00dc 00000000 		.word	OSTCBCur
 2116 00e0 00000000 		.word	OSRdyTbl
 2117 00e4 00000000 		.word	OSRdyGrp
 2118              		.cfi_endproc
 2119              	.LFE12:
 2121              		.section	.text.OS_FlagInit,"ax",%progbits
 2122              		.align	1
 2123              		.global	OS_FlagInit
 2124              		.syntax unified
 2125              		.thumb
 2126              		.thumb_func
 2128              	OS_FlagInit:
 2129              	.LFB13:
1125:./ucOSII/Core/os_flag.c **** 
1126:./ucOSII/Core/os_flag.c **** 
1127:./ucOSII/Core/os_flag.c **** /*
1128:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1129:./ucOSII/Core/os_flag.c **** *                                  INITIALIZE THE EVENT FLAG MODULE
1130:./ucOSII/Core/os_flag.c **** *
1131:./ucOSII/Core/os_flag.c **** * Description: This function is called by uC/OS-II to initialize the event flag module.  Your appli
1132:./ucOSII/Core/os_flag.c **** *              MUST NOT call this function.  In other words, this function is internal to uC/OS-II.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 58


1133:./ucOSII/Core/os_flag.c **** *
1134:./ucOSII/Core/os_flag.c **** * Arguments  : none
1135:./ucOSII/Core/os_flag.c **** *
1136:./ucOSII/Core/os_flag.c **** * Returns    : none
1137:./ucOSII/Core/os_flag.c **** *
1138:./ucOSII/Core/os_flag.c **** * WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/
1139:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1140:./ucOSII/Core/os_flag.c **** */
1141:./ucOSII/Core/os_flag.c **** 
1142:./ucOSII/Core/os_flag.c **** void  OS_FlagInit (void)
1143:./ucOSII/Core/os_flag.c **** {
 2130              		.loc 1 1143 1
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 16
 2133              		@ frame_needed = 1, uses_anonymous_args = 0
 2134 0000 80B5     		push	{r7, lr}
 2135              	.LCFI51:
 2136              		.cfi_def_cfa_offset 8
 2137              		.cfi_offset 7, -8
 2138              		.cfi_offset 14, -4
 2139 0002 84B0     		sub	sp, sp, #16
 2140              	.LCFI52:
 2141              		.cfi_def_cfa_offset 24
 2142 0004 00AF     		add	r7, sp, #0
 2143              	.LCFI53:
 2144              		.cfi_def_cfa_register 7
1144:./ucOSII/Core/os_flag.c **** #if OS_MAX_FLAGS == 1u
1145:./ucOSII/Core/os_flag.c ****     OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!  
1146:./ucOSII/Core/os_flag.c ****     OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
1147:./ucOSII/Core/os_flag.c ****     OSFlagFreeList->OSFlagWaitList = (void *)0;
1148:./ucOSII/Core/os_flag.c ****     OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
1149:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
1150:./ucOSII/Core/os_flag.c ****     OSFlagFreeList->OSFlagName     = (INT8U *)"?";
1151:./ucOSII/Core/os_flag.c **** #endif
1152:./ucOSII/Core/os_flag.c **** #endif
1153:./ucOSII/Core/os_flag.c **** 
1154:./ucOSII/Core/os_flag.c **** #if OS_MAX_FLAGS >= 2u
1155:./ucOSII/Core/os_flag.c ****     INT16U        ix;
1156:./ucOSII/Core/os_flag.c ****     INT16U        ix_next;
1157:./ucOSII/Core/os_flag.c ****     OS_FLAG_GRP  *pgrp1;
1158:./ucOSII/Core/os_flag.c ****     OS_FLAG_GRP  *pgrp2;
1159:./ucOSII/Core/os_flag.c **** 
1160:./ucOSII/Core/os_flag.c **** 
1161:./ucOSII/Core/os_flag.c ****     OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table  
 2145              		.loc 1 1161 5
 2146 0006 5021     		movs	r1, #80
 2147 0008 1B48     		ldr	r0, .L144
 2148 000a FFF7FEFF 		bl	OS_MemClr
1162:./ucOSII/Core/os_flag.c ****     for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLA
 2149              		.loc 1 1162 13
 2150 000e 0023     		movs	r3, #0
 2151 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 2152              		.loc 1 1162 5
 2153 0012 18E0     		b	.L142
 2154              	.L143:
1163:./ucOSII/Core/os_flag.c ****         ix_next = ix + 1u;
 2155              		.loc 1 1163 17 discriminator 3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 59


 2156 0014 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2157 0016 0133     		adds	r3, r3, #1
 2158 0018 FB80     		strh	r3, [r7, #6]	@ movhi
1164:./ucOSII/Core/os_flag.c ****         pgrp1 = &OSFlagTbl[ix];
 2159              		.loc 1 1164 27 discriminator 3
 2160 001a FB89     		ldrh	r3, [r7, #14]
 2161              		.loc 1 1164 15 discriminator 3
 2162 001c 1B01     		lsls	r3, r3, #4
 2163 001e 164A     		ldr	r2, .L144
 2164 0020 1344     		add	r3, r3, r2
 2165 0022 BB60     		str	r3, [r7, #8]
1165:./ucOSII/Core/os_flag.c ****         pgrp2 = &OSFlagTbl[ix_next];
 2166              		.loc 1 1165 27 discriminator 3
 2167 0024 FB88     		ldrh	r3, [r7, #6]
 2168              		.loc 1 1165 15 discriminator 3
 2169 0026 1B01     		lsls	r3, r3, #4
 2170 0028 134A     		ldr	r2, .L144
 2171 002a 1344     		add	r3, r3, r2
 2172 002c 3B60     		str	r3, [r7]
1166:./ucOSII/Core/os_flag.c ****         pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2173              		.loc 1 1166 31 discriminator 3
 2174 002e BB68     		ldr	r3, [r7, #8]
 2175 0030 0022     		movs	r2, #0
 2176 0032 1A70     		strb	r2, [r3]
1167:./ucOSII/Core/os_flag.c ****         pgrp1->OSFlagWaitList = (void *)pgrp2;
 2177              		.loc 1 1167 31 discriminator 3
 2178 0034 BB68     		ldr	r3, [r7, #8]
 2179 0036 3A68     		ldr	r2, [r7]
 2180 0038 5A60     		str	r2, [r3, #4]
1168:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
1169:./ucOSII/Core/os_flag.c ****         pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                
 2181              		.loc 1 1169 31 discriminator 3
 2182 003a BB68     		ldr	r3, [r7, #8]
 2183 003c 0F4A     		ldr	r2, .L144+4
 2184 003e DA60     		str	r2, [r3, #12]
1162:./ucOSII/Core/os_flag.c ****         ix_next = ix + 1u;
 2185              		.loc 1 1162 47 discriminator 3
 2186 0040 FB89     		ldrh	r3, [r7, #14]
 2187 0042 0133     		adds	r3, r3, #1
 2188 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 2189              	.L142:
1162:./ucOSII/Core/os_flag.c ****         ix_next = ix + 1u;
 2190              		.loc 1 1162 5 discriminator 1
 2191 0046 FB89     		ldrh	r3, [r7, #14]
 2192 0048 032B     		cmp	r3, #3
 2193 004a E3D9     		bls	.L143
1170:./ucOSII/Core/os_flag.c **** #endif
1171:./ucOSII/Core/os_flag.c ****     }
1172:./ucOSII/Core/os_flag.c ****     pgrp1                 = &OSFlagTbl[ix];
 2194              		.loc 1 1172 39
 2195 004c FB89     		ldrh	r3, [r7, #14]
 2196              		.loc 1 1172 27
 2197 004e 1B01     		lsls	r3, r3, #4
 2198 0050 094A     		ldr	r2, .L144
 2199 0052 1344     		add	r3, r3, r2
 2200 0054 BB60     		str	r3, [r7, #8]
1173:./ucOSII/Core/os_flag.c ****     pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 60


 2201              		.loc 1 1173 27
 2202 0056 BB68     		ldr	r3, [r7, #8]
 2203 0058 0022     		movs	r2, #0
 2204 005a 1A70     		strb	r2, [r3]
1174:./ucOSII/Core/os_flag.c ****     pgrp1->OSFlagWaitList = (void *)0;
 2205              		.loc 1 1174 27
 2206 005c BB68     		ldr	r3, [r7, #8]
 2207 005e 0022     		movs	r2, #0
 2208 0060 5A60     		str	r2, [r3, #4]
1175:./ucOSII/Core/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
1176:./ucOSII/Core/os_flag.c ****     pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                
 2209              		.loc 1 1176 27
 2210 0062 BB68     		ldr	r3, [r7, #8]
 2211 0064 054A     		ldr	r2, .L144+4
 2212 0066 DA60     		str	r2, [r3, #12]
1177:./ucOSII/Core/os_flag.c **** #endif
1178:./ucOSII/Core/os_flag.c ****     OSFlagFreeList        = &OSFlagTbl[0];
 2213              		.loc 1 1178 27
 2214 0068 054B     		ldr	r3, .L144+8
 2215 006a 034A     		ldr	r2, .L144
 2216 006c 1A60     		str	r2, [r3]
1179:./ucOSII/Core/os_flag.c **** #endif
1180:./ucOSII/Core/os_flag.c **** }
 2217              		.loc 1 1180 1
 2218 006e 00BF     		nop
 2219 0070 1037     		adds	r7, r7, #16
 2220              	.LCFI54:
 2221              		.cfi_def_cfa_offset 8
 2222 0072 BD46     		mov	sp, r7
 2223              	.LCFI55:
 2224              		.cfi_def_cfa_register 13
 2225              		@ sp needed
 2226 0074 80BD     		pop	{r7, pc}
 2227              	.L145:
 2228 0076 00BF     		.align	2
 2229              	.L144:
 2230 0078 00000000 		.word	OSFlagTbl
 2231 007c 00000000 		.word	.LC0
 2232 0080 00000000 		.word	OSFlagFreeList
 2233              		.cfi_endproc
 2234              	.LFE13:
 2236              		.section	.text.OS_FlagTaskRdy,"ax",%progbits
 2237              		.align	1
 2238              		.syntax unified
 2239              		.thumb
 2240              		.thumb_func
 2242              	OS_FlagTaskRdy:
 2243              	.LFB14:
1181:./ucOSII/Core/os_flag.c **** 
1182:./ucOSII/Core/os_flag.c **** 
1183:./ucOSII/Core/os_flag.c **** /*
1184:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1185:./ucOSII/Core/os_flag.c **** *                              MAKE TASK READY-TO-RUN, EVENT(s) OCCURRED
1186:./ucOSII/Core/os_flag.c **** *
1187:./ucOSII/Core/os_flag.c **** * Description: This function is internal to uC/OS-II and is used to make a task ready-to-run becaus
1188:./ucOSII/Core/os_flag.c **** *              desired event flag bits have been set.
1189:./ucOSII/Core/os_flag.c **** *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 61


1190:./ucOSII/Core/os_flag.c **** * Arguments  : pnode         is a pointer to a structure which contains data about the task waiting
1191:./ucOSII/Core/os_flag.c **** *                            event flag bit(s) to be set.
1192:./ucOSII/Core/os_flag.c **** *
1193:./ucOSII/Core/os_flag.c **** *              flags_rdy     contains the bit pattern of the event flags that cause the task to bec
1194:./ucOSII/Core/os_flag.c **** *                            ready-to-run.
1195:./ucOSII/Core/os_flag.c **** *
1196:./ucOSII/Core/os_flag.c **** *              pend_stat   is used to indicate the readied task's pending status:
1197:./ucOSII/Core/os_flag.c **** *
1198:./ucOSII/Core/os_flag.c **** *
1199:./ucOSII/Core/os_flag.c **** * Returns    : OS_TRUE       If the task has been placed in the ready list and thus needs schedulin
1200:./ucOSII/Core/os_flag.c **** *              OS_FALSE      The task is still not ready to run and thus scheduling is not necessar
1201:./ucOSII/Core/os_flag.c **** *
1202:./ucOSII/Core/os_flag.c **** * Called by  : OSFlagsPost() OS_FLAG.C
1203:./ucOSII/Core/os_flag.c **** *
1204:./ucOSII/Core/os_flag.c **** * Note(s)    : 1) This function assumes that interrupts are disabled.
1205:./ucOSII/Core/os_flag.c **** *              2) This function is INTERNAL to uC/OS-II and your application should not call it.
1206:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1207:./ucOSII/Core/os_flag.c **** */
1208:./ucOSII/Core/os_flag.c **** 
1209:./ucOSII/Core/os_flag.c **** static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
1210:./ucOSII/Core/os_flag.c ****                                  OS_FLAGS      flags_rdy,
1211:./ucOSII/Core/os_flag.c ****                                  INT8U         pend_stat)
1212:./ucOSII/Core/os_flag.c **** {
 2244              		.loc 1 1212 1
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 16
 2247              		@ frame_needed = 1, uses_anonymous_args = 0
 2248 0000 80B5     		push	{r7, lr}
 2249              	.LCFI56:
 2250              		.cfi_def_cfa_offset 8
 2251              		.cfi_offset 7, -8
 2252              		.cfi_offset 14, -4
 2253 0002 84B0     		sub	sp, sp, #16
 2254              	.LCFI57:
 2255              		.cfi_def_cfa_offset 24
 2256 0004 00AF     		add	r7, sp, #0
 2257              	.LCFI58:
 2258              		.cfi_def_cfa_register 7
 2259 0006 7860     		str	r0, [r7, #4]
 2260 0008 0B46     		mov	r3, r1
 2261 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 2262 000c 1346     		mov	r3, r2
 2263 000e 7B70     		strb	r3, [r7, #1]
1213:./ucOSII/Core/os_flag.c ****     OS_TCB   *ptcb;
1214:./ucOSII/Core/os_flag.c ****     BOOLEAN   sched;
1215:./ucOSII/Core/os_flag.c **** 
1216:./ucOSII/Core/os_flag.c **** 
1217:./ucOSII/Core/os_flag.c ****     ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task         
 2264              		.loc 1 1217 26
 2265 0010 7B68     		ldr	r3, [r7, #4]
 2266 0012 9B68     		ldr	r3, [r3, #8]
 2267 0014 BB60     		str	r3, [r7, #8]
1218:./ucOSII/Core/os_flag.c ****     ptcb->OSTCBDly       = 0u;
 2268              		.loc 1 1218 26
 2269 0016 BB68     		ldr	r3, [r7, #8]
 2270 0018 0022     		movs	r2, #0
 2271 001a 5A63     		str	r2, [r3, #52]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 62


1219:./ucOSII/Core/os_flag.c ****     ptcb->OSTCBFlagsRdy  = flags_rdy;
 2272              		.loc 1 1219 26
 2273 001c BB68     		ldr	r3, [r7, #8]
 2274 001e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 2275 0020 1A86     		strh	r2, [r3, #48]	@ movhi
1220:./ucOSII/Core/os_flag.c ****     ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
 2276              		.loc 1 1220 25
 2277 0022 BB68     		ldr	r3, [r7, #8]
 2278 0024 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2279 0028 23F02003 		bic	r3, r3, #32
 2280 002c DAB2     		uxtb	r2, r3
 2281 002e BB68     		ldr	r3, [r7, #8]
 2282 0030 83F83820 		strb	r2, [r3, #56]
1221:./ucOSII/Core/os_flag.c ****     ptcb->OSTCBStatPend  = pend_stat;
 2283              		.loc 1 1221 26
 2284 0034 BB68     		ldr	r3, [r7, #8]
 2285 0036 7A78     		ldrb	r2, [r7, #1]
 2286 0038 83F83920 		strb	r2, [r3, #57]
1222:./ucOSII/Core/os_flag.c ****     if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                      
 2287              		.loc 1 1222 13
 2288 003c BB68     		ldr	r3, [r7, #8]
 2289 003e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2290              		.loc 1 1222 8
 2291 0042 002B     		cmp	r3, #0
 2292 0044 1BD1     		bne	.L147
1223:./ucOSII/Core/os_flag.c ****         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list             
 2293              		.loc 1 1223 39
 2294 0046 BB68     		ldr	r3, [r7, #8]
 2295 0048 93F83E20 		ldrb	r2, [r3, #62]	@ zero_extendqisi2
 2296              		.loc 1 1223 32
 2297 004c 114B     		ldr	r3, .L150
 2298 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2299 0050 1343     		orrs	r3, r3, r2
 2300 0052 DAB2     		uxtb	r2, r3
 2301 0054 0F4B     		ldr	r3, .L150
 2302 0056 1A70     		strb	r2, [r3]
1224:./ucOSII/Core/os_flag.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2303              		.loc 1 1224 22
 2304 0058 BB68     		ldr	r3, [r7, #8]
 2305 005a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2306              		.loc 1 1224 32
 2307 005e 1A46     		mov	r2, r3
 2308 0060 0D4B     		ldr	r3, .L150+4
 2309 0062 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 2310              		.loc 1 1224 39
 2311 0064 BB68     		ldr	r3, [r7, #8]
 2312 0066 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 2313              		.loc 1 1224 22
 2314 006a B968     		ldr	r1, [r7, #8]
 2315 006c 91F83C10 		ldrb	r1, [r1, #60]	@ zero_extendqisi2
 2316              		.loc 1 1224 32
 2317 0070 1343     		orrs	r3, r3, r2
 2318 0072 DAB2     		uxtb	r2, r3
 2319 0074 084B     		ldr	r3, .L150+4
 2320 0076 5A54     		strb	r2, [r3, r1]
1225:./ucOSII/Core/os_flag.c ****         OS_TRACE_TASK_READY(ptcb);
1226:./ucOSII/Core/os_flag.c ****         sched                   = OS_TRUE;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 63


 2321              		.loc 1 1226 33
 2322 0078 0123     		movs	r3, #1
 2323 007a FB73     		strb	r3, [r7, #15]
 2324 007c 01E0     		b	.L148
 2325              	.L147:
1227:./ucOSII/Core/os_flag.c ****     } else {
1228:./ucOSII/Core/os_flag.c ****         sched                   = OS_FALSE;
 2326              		.loc 1 1228 33
 2327 007e 0023     		movs	r3, #0
 2328 0080 FB73     		strb	r3, [r7, #15]
 2329              	.L148:
1229:./ucOSII/Core/os_flag.c ****     }
1230:./ucOSII/Core/os_flag.c ****     OS_FlagUnlink(pnode);
 2330              		.loc 1 1230 5
 2331 0082 7868     		ldr	r0, [r7, #4]
 2332 0084 FFF7FEFF 		bl	OS_FlagUnlink
1231:./ucOSII/Core/os_flag.c ****     return (sched);
 2333              		.loc 1 1231 12
 2334 0088 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1232:./ucOSII/Core/os_flag.c **** }
 2335              		.loc 1 1232 1
 2336 008a 1846     		mov	r0, r3
 2337 008c 1037     		adds	r7, r7, #16
 2338              	.LCFI59:
 2339              		.cfi_def_cfa_offset 8
 2340 008e BD46     		mov	sp, r7
 2341              	.LCFI60:
 2342              		.cfi_def_cfa_register 13
 2343              		@ sp needed
 2344 0090 80BD     		pop	{r7, pc}
 2345              	.L151:
 2346 0092 00BF     		.align	2
 2347              	.L150:
 2348 0094 00000000 		.word	OSRdyGrp
 2349 0098 00000000 		.word	OSRdyTbl
 2350              		.cfi_endproc
 2351              	.LFE14:
 2353              		.section	.text.OS_FlagUnlink,"ax",%progbits
 2354              		.align	1
 2355              		.global	OS_FlagUnlink
 2356              		.syntax unified
 2357              		.thumb
 2358              		.thumb_func
 2360              	OS_FlagUnlink:
 2361              	.LFB15:
1233:./ucOSII/Core/os_flag.c **** 
1234:./ucOSII/Core/os_flag.c **** 
1235:./ucOSII/Core/os_flag.c **** /*
1236:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1237:./ucOSII/Core/os_flag.c **** *                              UNLINK EVENT FLAG NODE FROM WAITING LIST
1238:./ucOSII/Core/os_flag.c **** *
1239:./ucOSII/Core/os_flag.c **** * Description: This function is internal to uC/OS-II and is used to unlink an event flag node from 
1240:./ucOSII/Core/os_flag.c **** *              list of tasks waiting for the event flag.
1241:./ucOSII/Core/os_flag.c **** *
1242:./ucOSII/Core/os_flag.c **** * Arguments  : pnode         is a pointer to a structure which contains data about the task waiting
1243:./ucOSII/Core/os_flag.c **** *                            event flag bit(s) to be set.
1244:./ucOSII/Core/os_flag.c **** *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 64


1245:./ucOSII/Core/os_flag.c **** * Returns    : none
1246:./ucOSII/Core/os_flag.c **** *
1247:./ucOSII/Core/os_flag.c **** * Called by  : OS_FlagTaskRdy() OS_FLAG.C
1248:./ucOSII/Core/os_flag.c **** *              OSFlagPend()     OS_FLAG.C
1249:./ucOSII/Core/os_flag.c **** *              OSTaskDel()      OS_TASK.C
1250:./ucOSII/Core/os_flag.c **** *
1251:./ucOSII/Core/os_flag.c **** * Note(s)    : 1) This function assumes that interrupts are disabled.
1252:./ucOSII/Core/os_flag.c **** *              2) This function is INTERNAL to uC/OS-II and your application should not call it.
1253:./ucOSII/Core/os_flag.c **** ***************************************************************************************************
1254:./ucOSII/Core/os_flag.c **** */
1255:./ucOSII/Core/os_flag.c **** 
1256:./ucOSII/Core/os_flag.c **** void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
1257:./ucOSII/Core/os_flag.c **** {
 2362              		.loc 1 1257 1
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 24
 2365              		@ frame_needed = 1, uses_anonymous_args = 0
 2366              		@ link register save eliminated.
 2367 0000 80B4     		push	{r7}
 2368              	.LCFI61:
 2369              		.cfi_def_cfa_offset 4
 2370              		.cfi_offset 7, -4
 2371 0002 87B0     		sub	sp, sp, #28
 2372              	.LCFI62:
 2373              		.cfi_def_cfa_offset 32
 2374 0004 00AF     		add	r7, sp, #0
 2375              	.LCFI63:
 2376              		.cfi_def_cfa_register 7
 2377 0006 7860     		str	r0, [r7, #4]
1258:./ucOSII/Core/os_flag.c **** #if OS_TASK_DEL_EN > 0u
1259:./ucOSII/Core/os_flag.c ****     OS_TCB       *ptcb;
1260:./ucOSII/Core/os_flag.c **** #endif
1261:./ucOSII/Core/os_flag.c ****     OS_FLAG_GRP  *pgrp;
1262:./ucOSII/Core/os_flag.c ****     OS_FLAG_NODE *pnode_prev;
1263:./ucOSII/Core/os_flag.c ****     OS_FLAG_NODE *pnode_next;
1264:./ucOSII/Core/os_flag.c **** 
1265:./ucOSII/Core/os_flag.c **** 
1266:./ucOSII/Core/os_flag.c ****     pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2378              		.loc 1 1266 16
 2379 0008 7B68     		ldr	r3, [r7, #4]
 2380 000a 5B68     		ldr	r3, [r3, #4]
 2381 000c 7B61     		str	r3, [r7, #20]
1267:./ucOSII/Core/os_flag.c ****     pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2382              		.loc 1 1267 16
 2383 000e 7B68     		ldr	r3, [r7, #4]
 2384 0010 1B68     		ldr	r3, [r3]
 2385 0012 3B61     		str	r3, [r7, #16]
1268:./ucOSII/Core/os_flag.c ****     if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?  
 2386              		.loc 1 1268 8
 2387 0014 7B69     		ldr	r3, [r7, #20]
 2388 0016 002B     		cmp	r3, #0
 2389 0018 0CD1     		bne	.L153
1269:./ucOSII/Core/os_flag.c ****         pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2390              		.loc 1 1269 30
 2391 001a 7B68     		ldr	r3, [r7, #4]
 2392 001c DB68     		ldr	r3, [r3, #12]
 2393 001e FB60     		str	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 65


1270:./ucOSII/Core/os_flag.c ****         pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st nod
 2394              		.loc 1 1270 30
 2395 0020 FB68     		ldr	r3, [r7, #12]
 2396 0022 3A69     		ldr	r2, [r7, #16]
 2397 0024 5A60     		str	r2, [r3, #4]
1271:./ucOSII/Core/os_flag.c ****         if (pnode_next != (OS_FLAG_NODE *)0) {
 2398              		.loc 1 1271 12
 2399 0026 3B69     		ldr	r3, [r7, #16]
 2400 0028 002B     		cmp	r3, #0
 2401 002a 0CD0     		beq	.L154
1272:./ucOSII/Core/os_flag.c ****             pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to N
 2402              		.loc 1 1272 40
 2403 002c 3B69     		ldr	r3, [r7, #16]
 2404 002e 0022     		movs	r2, #0
 2405 0030 5A60     		str	r2, [r3, #4]
 2406 0032 08E0     		b	.L154
 2407              	.L153:
1273:./ucOSII/Core/os_flag.c ****         }
1274:./ucOSII/Core/os_flag.c ****     } else {                                                    /* No,  A node somewhere in the lis
1275:./ucOSII/Core/os_flag.c ****         pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unl
 2408              		.loc 1 1275 36
 2409 0034 7B69     		ldr	r3, [r7, #20]
 2410 0036 3A69     		ldr	r2, [r7, #16]
 2411 0038 1A60     		str	r2, [r3]
1276:./ucOSII/Core/os_flag.c ****         if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?    
 2412              		.loc 1 1276 12
 2413 003a 3B69     		ldr	r3, [r7, #16]
 2414 003c 002B     		cmp	r3, #0
 2415 003e 02D0     		beq	.L154
1277:./ucOSII/Core/os_flag.c ****             pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current nod
 2416              		.loc 1 1277 40
 2417 0040 3B69     		ldr	r3, [r7, #16]
 2418 0042 7A69     		ldr	r2, [r7, #20]
 2419 0044 5A60     		str	r2, [r3, #4]
 2420              	.L154:
1278:./ucOSII/Core/os_flag.c ****         }
1279:./ucOSII/Core/os_flag.c ****     }
1280:./ucOSII/Core/os_flag.c **** #if OS_TASK_DEL_EN > 0u
1281:./ucOSII/Core/os_flag.c ****     ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 2421              		.loc 1 1281 25
 2422 0046 7B68     		ldr	r3, [r7, #4]
 2423 0048 9B68     		ldr	r3, [r3, #8]
 2424 004a BB60     		str	r3, [r7, #8]
1282:./ucOSII/Core/os_flag.c ****     ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 2425              		.loc 1 1282 25
 2426 004c BB68     		ldr	r3, [r7, #8]
 2427 004e 0022     		movs	r2, #0
 2428 0050 DA62     		str	r2, [r3, #44]
1283:./ucOSII/Core/os_flag.c **** #endif
1284:./ucOSII/Core/os_flag.c **** }
 2429              		.loc 1 1284 1
 2430 0052 00BF     		nop
 2431 0054 1C37     		adds	r7, r7, #28
 2432              	.LCFI64:
 2433              		.cfi_def_cfa_offset 4
 2434 0056 BD46     		mov	sp, r7
 2435              	.LCFI65:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 66


 2436              		.cfi_def_cfa_register 13
 2437              		@ sp needed
 2438 0058 5DF8047B 		ldr	r7, [sp], #4
 2439              	.LCFI66:
 2440              		.cfi_restore 7
 2441              		.cfi_def_cfa_offset 0
 2442 005c 7047     		bx	lr
 2443              		.cfi_endproc
 2444              	.LFE15:
 2446              		.text
 2447              	.Letext0:
 2448              		.file 2 "./ucOSII/Port/os_cpu.h"
 2449              		.file 3 "./ucOSII/Core/ucos_ii.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 os_flag.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:20     .text.OSFlagAccept:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:26     .text.OSFlagAccept:0000000000000000 OSFlagAccept
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:116    .text.OSFlagAccept:0000000000000074 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:120    .text.OSFlagAccept:0000000000000084 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:312    .rodata:0000000000000000 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:316    .text.OSFlagCreate:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:322    .text.OSFlagCreate:0000000000000000 OSFlagCreate
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:427    .text.OSFlagCreate:000000000000007c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:434    .text.OSFlagDel:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:440    .text.OSFlagDel:0000000000000000 OSFlagDel
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2242   .text.OS_FlagTaskRdy:0000000000000000 OS_FlagTaskRdy
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:673    .text.OSFlagDel:000000000000012c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:680    .text.OSFlagNameGet:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:686    .text.OSFlagNameGet:0000000000000000 OSFlagNameGet
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:804    .text.OSFlagNameGet:0000000000000090 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:809    .text.OSFlagNameSet:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:815    .text.OSFlagNameSet:0000000000000000 OSFlagNameSet
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:919    .text.OSFlagNameSet:0000000000000074 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:924    .text.OSFlagPend:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:930    .text.OSFlagPend:0000000000000000 OSFlagPend
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1043   .text.OSFlagPend:000000000000009c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1047   .text.OSFlagPend:00000000000000ac $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1957   .text.OS_FlagBlock:0000000000000000 OS_FlagBlock
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2360   .text.OS_FlagUnlink:0000000000000000 OS_FlagUnlink
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1368   .text.OSFlagPend:00000000000002a4 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1373   .text.OSFlagPend:00000000000002b0 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1456   .text.OSFlagPend:0000000000000320 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1461   .text.OSFlagPendGetFlagsRdy:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1467   .text.OSFlagPendGetFlagsRdy:0000000000000000 OSFlagPendGetFlagsRdy
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1515   .text.OSFlagPendGetFlagsRdy:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1520   .text.OSFlagPost:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1526   .text.OSFlagPost:0000000000000000 OSFlagPost
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1647   .text.OSFlagPost:000000000000009c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1651   .text.OSFlagPost:00000000000000ac $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1866   .text.OSFlagQuery:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1872   .text.OSFlagQuery:0000000000000000 OSFlagQuery
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:1952   .text.OS_FlagBlock:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2115   .text.OS_FlagBlock:00000000000000dc $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2122   .text.OS_FlagInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2128   .text.OS_FlagInit:0000000000000000 OS_FlagInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2230   .text.OS_FlagInit:0000000000000078 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2237   .text.OS_FlagTaskRdy:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2348   .text.OS_FlagTaskRdy:0000000000000094 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s:2354   .text.OS_FlagUnlink:0000000000000000 $t

UNDEFINED SYMBOLS
OS_CPU_SR_Save
OS_CPU_SR_Restore
OSIntNesting
OSFlagFreeList
OS_Sched
OS_StrLen
OSLockNesting
OSTCBCur
OSRdyTbl
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccO6aFNf.s 			page 68


OSRdyGrp
OS_MemClr
OSFlagTbl
