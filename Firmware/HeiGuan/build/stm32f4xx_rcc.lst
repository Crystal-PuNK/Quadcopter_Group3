ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.APBAHBPrescTable,"aw"
  20              		.align	2
  23              	APBAHBPrescTable:
  24 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004\001\002\003\004\006"
  24      01020304 
  24      01020304 
  24      06
  25 000d 070809   		.ascii	"\007\010\011"
  26              		.section	.text.RCC_DeInit,"ax",%progbits
  27              		.align	1
  28              		.global	RCC_DeInit
  29              		.syntax unified
  30              		.thumb
  31              		.thumb_func
  33              	RCC_DeInit:
  34              	.LFB123:
  35              		.file 1 "./Library/stm32f4xx_rcc.c"
   1:./Library/stm32f4xx_rcc.c **** /**
   2:./Library/stm32f4xx_rcc.c ****   ******************************************************************************
   3:./Library/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:./Library/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_rcc.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_rcc.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:./Library/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:./Library/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:./Library/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:./Library/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:./Library/stm32f4xx_rcc.c ****   *
  14:./Library/stm32f4xx_rcc.c ****  @verbatim
  15:./Library/stm32f4xx_rcc.c ****  ===============================================================================
  16:./Library/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:./Library/stm32f4xx_rcc.c ****  ===============================================================================
  18:./Library/stm32f4xx_rcc.c ****     [..]  
  19:./Library/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:./Library/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:./Library/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:./Library/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 2


  23:./Library/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:./Library/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:./Library/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:./Library/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:./Library/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:./Library/stm32f4xx_rcc.c ****     [..]          
  29:./Library/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:
  30:./Library/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:./Library/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:./Library/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:./Library/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:./Library/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:./Library/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:./Library/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:./Library/stm32f4xx_rcc.c ****  @endverbatim    
  38:./Library/stm32f4xx_rcc.c ****   ******************************************************************************
  39:./Library/stm32f4xx_rcc.c ****   * @attention
  40:./Library/stm32f4xx_rcc.c ****   *
  41:./Library/stm32f4xx_rcc.c ****   * Copyright (c) 2016 STMicroelectronics.
  42:./Library/stm32f4xx_rcc.c ****   * All rights reserved.
  43:./Library/stm32f4xx_rcc.c ****   *
  44:./Library/stm32f4xx_rcc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  45:./Library/stm32f4xx_rcc.c ****   * in the root directory of this software component.
  46:./Library/stm32f4xx_rcc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  47:./Library/stm32f4xx_rcc.c ****   *
  48:./Library/stm32f4xx_rcc.c ****   ******************************************************************************
  49:./Library/stm32f4xx_rcc.c ****   */
  50:./Library/stm32f4xx_rcc.c **** 
  51:./Library/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  52:./Library/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  53:./Library/stm32f4xx_rcc.c **** 
  54:./Library/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  55:./Library/stm32f4xx_rcc.c ****   * @{
  56:./Library/stm32f4xx_rcc.c ****   */
  57:./Library/stm32f4xx_rcc.c **** 
  58:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC 
  59:./Library/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  60:./Library/stm32f4xx_rcc.c ****   * @{
  61:./Library/stm32f4xx_rcc.c ****   */ 
  62:./Library/stm32f4xx_rcc.c **** 
  63:./Library/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  64:./Library/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  65:./Library/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  66:./Library/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  67:./Library/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  68:./Library/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  69:./Library/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  70:./Library/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  71:./Library/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  72:./Library/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  73:./Library/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  74:./Library/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  75:./Library/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  76:./Library/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  77:./Library/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  78:./Library/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  79:./Library/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 3


  80:./Library/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  81:./Library/stm32f4xx_rcc.c **** 
  82:./Library/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  83:./Library/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  84:./Library/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  85:./Library/stm32f4xx_rcc.c **** 
  86:./Library/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:./Library/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:./Library/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:./Library/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:./Library/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:./Library/stm32f4xx_rcc.c **** 
  92:./Library/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:./Library/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:./Library/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:./Library/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:./Library/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:./Library/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:./Library/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:./Library/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:./Library/stm32f4xx_rcc.c **** 
 101:./Library/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 102:./Library/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 103:./Library/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 104:./Library/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 105:./Library/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 106:./Library/stm32f4xx_rcc.c **** 
 107:./Library/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 108:./Library/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 109:./Library/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 110:./Library/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 111:./Library/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 112:./Library/stm32f4xx_rcc.c ****     
 113:./Library/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
 114:./Library/stm32f4xx_rcc.c **** #define RCC_CFGR_OFFSET            (RCC_OFFSET + 0x08)
 115:./Library/stm32f4xx_rcc.c ****  #if defined(STM32F410xx)
 116:./Library/stm32f4xx_rcc.c **** /* Alias word address of MCO1EN bit */
 117:./Library/stm32f4xx_rcc.c **** #define RCC_MCO1EN_BIT_NUMBER      0x8
 118:./Library/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO1EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO1EN_BIT_NUMBE
 119:./Library/stm32f4xx_rcc.c **** 
 120:./Library/stm32f4xx_rcc.c **** /* Alias word address of MCO2EN bit */
 121:./Library/stm32f4xx_rcc.c **** #define RCC_MCO2EN_BIT_NUMBER      0x9
 122:./Library/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO2EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO2EN_BIT_NUMBE
 123:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
 124:./Library/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 125:./Library/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 126:./Library/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 127:./Library/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 128:./Library/stm32f4xx_rcc.c **** 
 129:./Library/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 130:./Library/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 131:./Library/stm32f4xx_rcc.c **** 
 132:./Library/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 133:./Library/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 134:./Library/stm32f4xx_rcc.c **** 
 135:./Library/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 136:./Library/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 4


 137:./Library/stm32f4xx_rcc.c **** 
 138:./Library/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 139:./Library/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 140:./Library/stm32f4xx_rcc.c **** 
 141:./Library/stm32f4xx_rcc.c **** /* BDCR register base address */
 142:./Library/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 143:./Library/stm32f4xx_rcc.c **** 
 144:./Library/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 145:./Library/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 146:./Library/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 147:./Library/stm32f4xx_rcc.c **** 
 148:./Library/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 149:./Library/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 150:./Library/stm32f4xx_rcc.c **** 
 151:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 152:./Library/stm32f4xx_rcc.c ****   * @{
 153:./Library/stm32f4xx_rcc.c ****   */ 
 154:./Library/stm32f4xx_rcc.c **** 
 155:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 156:./Library/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 157:./Library/stm32f4xx_rcc.c ****  *
 158:./Library/stm32f4xx_rcc.c **** @verbatim   
 159:./Library/stm32f4xx_rcc.c ****  ===================================================================================
 160:./Library/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 161:./Library/stm32f4xx_rcc.c ****  ===================================================================================
 162:./Library/stm32f4xx_rcc.c ****     [..]
 163:./Library/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 164:./Library/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 165:./Library/stm32f4xx_rcc.c ****   
 166:./Library/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 167:./Library/stm32f4xx_rcc.c ****           the PLL as System clock source.
 168:./Library/stm32f4xx_rcc.c **** 
 169:./Library/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 170:./Library/stm32f4xx_rcc.c ****           clock source.
 171:./Library/stm32f4xx_rcc.c **** 
 172:./Library/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 173:./Library/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 174:./Library/stm32f4xx_rcc.c **** 
 175:./Library/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 176:./Library/stm32f4xx_rcc.c **** 
 177:./Library/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 178:./Library/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 179:./Library/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 180:./Library/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 181:./Library/stm32f4xx_rcc.c **** 
 182:./Library/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 183:./Library/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 184:./Library/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 185:./Library/stm32f4xx_rcc.c ****      
 186:./Library/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 187:./Library/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx/446xx/469xx/479xx d
 188:./Library/stm32f4xx_rcc.c ****   
 189:./Library/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 190:./Library/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 191:./Library/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 192:./Library/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 193:./Library/stm32f4xx_rcc.c ****          exception vector.   
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 5


 194:./Library/stm32f4xx_rcc.c **** 
 195:./Library/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 196:./Library/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 197:./Library/stm32f4xx_rcc.c **** 
 198:./Library/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 199:./Library/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 200:./Library/stm32f4xx_rcc.c ****  @endverbatim
 201:./Library/stm32f4xx_rcc.c ****   * @{
 202:./Library/stm32f4xx_rcc.c ****   */
 203:./Library/stm32f4xx_rcc.c **** 
 204:./Library/stm32f4xx_rcc.c **** /**
 205:./Library/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 206:./Library/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 207:./Library/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 208:./Library/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 209:./Library/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 210:./Library/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 211:./Library/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 212:./Library/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 213:./Library/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 214:./Library/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 215:./Library/stm32f4xx_rcc.c ****   * @param  None
 216:./Library/stm32f4xx_rcc.c ****   * @retval None
 217:./Library/stm32f4xx_rcc.c ****   */
 218:./Library/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 219:./Library/stm32f4xx_rcc.c **** {
  36              		.loc 1 219 1
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 0
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40              		@ link register save eliminated.
  41 0000 80B4     		push	{r7}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 4
  44              		.cfi_offset 7, -4
  45 0002 00AF     		add	r7, sp, #0
  46              	.LCFI1:
  47              		.cfi_def_cfa_register 7
 220:./Library/stm32f4xx_rcc.c ****   /* Set HSION bit */
 221:./Library/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  48              		.loc 1 221 11
  49 0004 144B     		ldr	r3, .L2
  50 0006 1B68     		ldr	r3, [r3]
  51 0008 134A     		ldr	r2, .L2
  52 000a 43F00103 		orr	r3, r3, #1
  53 000e 1360     		str	r3, [r2]
 222:./Library/stm32f4xx_rcc.c **** 
 223:./Library/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 224:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  54              		.loc 1 224 6
  55 0010 114B     		ldr	r3, .L2
  56              		.loc 1 224 13
  57 0012 0022     		movs	r2, #0
  58 0014 9A60     		str	r2, [r3, #8]
 225:./Library/stm32f4xx_rcc.c **** 
 226:./Library/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits
 227:./Library/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 6


  59              		.loc 1 227 11
  60 0016 104B     		ldr	r3, .L2
  61 0018 1B68     		ldr	r3, [r3]
  62 001a 0F4A     		ldr	r2, .L2
  63 001c 23F0A853 		bic	r3, r3, #352321536
  64 0020 23F41023 		bic	r3, r3, #589824
  65 0024 1360     		str	r3, [r2]
 228:./Library/stm32f4xx_rcc.c ****   
 229:./Library/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 230:./Library/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  66              		.loc 1 230 6
  67 0026 0C4B     		ldr	r3, .L2
  68              		.loc 1 230 16
  69 0028 0C4A     		ldr	r2, .L2+4
  70 002a 5A60     		str	r2, [r3, #4]
 231:./Library/stm32f4xx_rcc.c **** 
 232:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 233:./Library/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 234:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  71              		.loc 1 234 6
  72 002c 0A4B     		ldr	r3, .L2
  73              		.loc 1 234 19
  74 002e 0C4A     		ldr	r2, .L2+8
  75 0030 C3F88420 		str	r2, [r3, #132]
 235:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
 236:./Library/stm32f4xx_rcc.c **** 
 237:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 238:./Library/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
 239:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
 240:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
 241:./Library/stm32f4xx_rcc.c ****   
 242:./Library/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 243:./Library/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  76              		.loc 1 243 11
  77 0034 084B     		ldr	r3, .L2
  78 0036 1B68     		ldr	r3, [r3]
  79 0038 074A     		ldr	r2, .L2
  80 003a 23F48023 		bic	r3, r3, #262144
  81 003e 1360     		str	r3, [r2]
 244:./Library/stm32f4xx_rcc.c **** 
 245:./Library/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 246:./Library/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  82              		.loc 1 246 6
  83 0040 054B     		ldr	r3, .L2
  84              		.loc 1 246 12
  85 0042 0022     		movs	r2, #0
  86 0044 DA60     		str	r2, [r3, #12]
 247:./Library/stm32f4xx_rcc.c **** 
 248:./Library/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423
 249:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000;
  87              		.loc 1 249 6
  88 0046 044B     		ldr	r3, .L2
  89              		.loc 1 249 16
  90 0048 0022     		movs	r2, #0
  91 004a C3F88C20 		str	r2, [r3, #140]
 250:./Library/stm32f4xx_rcc.c ****   
 251:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 7


 252:./Library/stm32f4xx_rcc.c ****   /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F
 253:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 = 0x00000000;
 254:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */  
 255:./Library/stm32f4xx_rcc.c **** }
  92              		.loc 1 255 1
  93 004e 00BF     		nop
  94 0050 BD46     		mov	sp, r7
  95              	.LCFI2:
  96              		.cfi_def_cfa_register 13
  97              		@ sp needed
  98 0052 5DF8047B 		ldr	r7, [sp], #4
  99              	.LCFI3:
 100              		.cfi_restore 7
 101              		.cfi_def_cfa_offset 0
 102 0056 7047     		bx	lr
 103              	.L3:
 104              		.align	2
 105              	.L2:
 106 0058 00380240 		.word	1073887232
 107 005c 10300024 		.word	603992080
 108 0060 00300020 		.word	536883200
 109              		.cfi_endproc
 110              	.LFE123:
 112              		.section	.text.RCC_HSEConfig,"ax",%progbits
 113              		.align	1
 114              		.global	RCC_HSEConfig
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	RCC_HSEConfig:
 120              	.LFB124:
 256:./Library/stm32f4xx_rcc.c **** 
 257:./Library/stm32f4xx_rcc.c **** /**
 258:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 259:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 260:./Library/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 261:./Library/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 262:./Library/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 263:./Library/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 264:./Library/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 265:./Library/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 266:./Library/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 267:./Library/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 268:./Library/stm32f4xx_rcc.c ****   *         function.    
 269:./Library/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 270:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 271:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 272:./Library/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 273:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 274:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 275:./Library/stm32f4xx_rcc.c ****   * @retval None
 276:./Library/stm32f4xx_rcc.c ****   */
 277:./Library/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 278:./Library/stm32f4xx_rcc.c **** {
 121              		.loc 1 278 1
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 8


 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              	.LCFI4:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0002 83B0     		sub	sp, sp, #12
 131              	.LCFI5:
 132              		.cfi_def_cfa_offset 16
 133 0004 00AF     		add	r7, sp, #0
 134              	.LCFI6:
 135              		.cfi_def_cfa_register 7
 136 0006 0346     		mov	r3, r0
 137 0008 FB71     		strb	r3, [r7, #7]
 279:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 280:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 281:./Library/stm32f4xx_rcc.c **** 
 282:./Library/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 283:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 138              		.loc 1 283 3
 139 000a 064B     		ldr	r3, .L5
 140              		.loc 1 283 38
 141 000c 0022     		movs	r2, #0
 142 000e 1A70     		strb	r2, [r3]
 284:./Library/stm32f4xx_rcc.c **** 
 285:./Library/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 286:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 143              		.loc 1 286 3
 144 0010 044A     		ldr	r2, .L5
 145              		.loc 1 286 38
 146 0012 FB79     		ldrb	r3, [r7, #7]
 147 0014 1370     		strb	r3, [r2]
 287:./Library/stm32f4xx_rcc.c **** }
 148              		.loc 1 287 1
 149 0016 00BF     		nop
 150 0018 0C37     		adds	r7, r7, #12
 151              	.LCFI7:
 152              		.cfi_def_cfa_offset 4
 153 001a BD46     		mov	sp, r7
 154              	.LCFI8:
 155              		.cfi_def_cfa_register 13
 156              		@ sp needed
 157 001c 5DF8047B 		ldr	r7, [sp], #4
 158              	.LCFI9:
 159              		.cfi_restore 7
 160              		.cfi_def_cfa_offset 0
 161 0020 7047     		bx	lr
 162              	.L6:
 163 0022 00BF     		.align	2
 164              	.L5:
 165 0024 02380240 		.word	1073887234
 166              		.cfi_endproc
 167              	.LFE124:
 169              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 170              		.align	1
 171              		.global	RCC_WaitForHSEStartUp
 172              		.syntax unified
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 9


 173              		.thumb
 174              		.thumb_func
 176              	RCC_WaitForHSEStartUp:
 177              	.LFB125:
 288:./Library/stm32f4xx_rcc.c **** 
 289:./Library/stm32f4xx_rcc.c **** /**
 290:./Library/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 291:./Library/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 292:./Library/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 293:./Library/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 294:./Library/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 295:./Library/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 296:./Library/stm32f4xx_rcc.c ****   * @param  None
 297:./Library/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 298:./Library/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 299:./Library/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 300:./Library/stm32f4xx_rcc.c ****   */
 301:./Library/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 302:./Library/stm32f4xx_rcc.c **** {
 178              		.loc 1 302 1
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 8
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182 0000 80B5     		push	{r7, lr}
 183              	.LCFI10:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 7, -8
 186              		.cfi_offset 14, -4
 187 0002 82B0     		sub	sp, sp, #8
 188              	.LCFI11:
 189              		.cfi_def_cfa_offset 16
 190 0004 00AF     		add	r7, sp, #0
 191              	.LCFI12:
 192              		.cfi_def_cfa_register 7
 303:./Library/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 193              		.loc 1 303 17
 194 0006 0023     		movs	r3, #0
 195 0008 3B60     		str	r3, [r7]
 304:./Library/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 196              		.loc 1 304 15
 197 000a 0023     		movs	r3, #0
 198 000c FB71     		strb	r3, [r7, #7]
 305:./Library/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 199              		.loc 1 305 14
 200 000e 0023     		movs	r3, #0
 201 0010 BB71     		strb	r3, [r7, #6]
 202              	.L9:
 306:./Library/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 307:./Library/stm32f4xx_rcc.c ****   do
 308:./Library/stm32f4xx_rcc.c ****   {
 309:./Library/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 203              		.loc 1 309 17 discriminator 2
 204 0012 3120     		movs	r0, #49
 205 0014 FFF7FEFF 		bl	RCC_GetFlagStatus
 206 0018 0346     		mov	r3, r0
 207 001a BB71     		strb	r3, [r7, #6]
 310:./Library/stm32f4xx_rcc.c ****     startupcounter++;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 10


 208              		.loc 1 310 19 discriminator 2
 209 001c 3B68     		ldr	r3, [r7]
 210 001e 0133     		adds	r3, r3, #1
 211 0020 3B60     		str	r3, [r7]
 311:./Library/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 212              		.loc 1 311 27 discriminator 2
 213 0022 3B68     		ldr	r3, [r7]
 214              		.loc 1 311 3 discriminator 2
 215 0024 B3F5A04F 		cmp	r3, #20480
 216 0028 02D0     		beq	.L8
 217              		.loc 1 311 51 discriminator 1
 218 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 219 002c 002B     		cmp	r3, #0
 220 002e F0D0     		beq	.L9
 221              	.L8:
 312:./Library/stm32f4xx_rcc.c **** 
 313:./Library/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 222              		.loc 1 313 7
 223 0030 3120     		movs	r0, #49
 224 0032 FFF7FEFF 		bl	RCC_GetFlagStatus
 225 0036 0346     		mov	r3, r0
 226              		.loc 1 313 6
 227 0038 002B     		cmp	r3, #0
 228 003a 02D0     		beq	.L10
 314:./Library/stm32f4xx_rcc.c ****   {
 315:./Library/stm32f4xx_rcc.c ****     status = SUCCESS;
 229              		.loc 1 315 12
 230 003c 0123     		movs	r3, #1
 231 003e FB71     		strb	r3, [r7, #7]
 232 0040 01E0     		b	.L11
 233              	.L10:
 316:./Library/stm32f4xx_rcc.c ****   }
 317:./Library/stm32f4xx_rcc.c ****   else
 318:./Library/stm32f4xx_rcc.c ****   {
 319:./Library/stm32f4xx_rcc.c ****     status = ERROR;
 234              		.loc 1 319 12
 235 0042 0023     		movs	r3, #0
 236 0044 FB71     		strb	r3, [r7, #7]
 237              	.L11:
 320:./Library/stm32f4xx_rcc.c ****   }
 321:./Library/stm32f4xx_rcc.c ****   return (status);
 238              		.loc 1 321 10
 239 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 322:./Library/stm32f4xx_rcc.c **** }
 240              		.loc 1 322 1
 241 0048 1846     		mov	r0, r3
 242 004a 0837     		adds	r7, r7, #8
 243              	.LCFI13:
 244              		.cfi_def_cfa_offset 8
 245 004c BD46     		mov	sp, r7
 246              	.LCFI14:
 247              		.cfi_def_cfa_register 13
 248              		@ sp needed
 249 004e 80BD     		pop	{r7, pc}
 250              		.cfi_endproc
 251              	.LFE125:
 253              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 11


 254              		.align	1
 255              		.global	RCC_AdjustHSICalibrationValue
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 260              	RCC_AdjustHSICalibrationValue:
 261              	.LFB126:
 323:./Library/stm32f4xx_rcc.c **** 
 324:./Library/stm32f4xx_rcc.c **** /**
 325:./Library/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 326:./Library/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 327:./Library/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 328:./Library/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 329:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 330:./Library/stm32f4xx_rcc.c ****   * @retval None
 331:./Library/stm32f4xx_rcc.c ****   */
 332:./Library/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 333:./Library/stm32f4xx_rcc.c **** {
 262              		.loc 1 333 1
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 16
 265              		@ frame_needed = 1, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 267 0000 80B4     		push	{r7}
 268              	.LCFI15:
 269              		.cfi_def_cfa_offset 4
 270              		.cfi_offset 7, -4
 271 0002 85B0     		sub	sp, sp, #20
 272              	.LCFI16:
 273              		.cfi_def_cfa_offset 24
 274 0004 00AF     		add	r7, sp, #0
 275              	.LCFI17:
 276              		.cfi_def_cfa_register 7
 277 0006 0346     		mov	r3, r0
 278 0008 FB71     		strb	r3, [r7, #7]
 334:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 279              		.loc 1 334 12
 280 000a 0023     		movs	r3, #0
 281 000c FB60     		str	r3, [r7, #12]
 335:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 336:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 337:./Library/stm32f4xx_rcc.c **** 
 338:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 282              		.loc 1 338 15
 283 000e 0A4B     		ldr	r3, .L14
 284              		.loc 1 338 10
 285 0010 1B68     		ldr	r3, [r3]
 286 0012 FB60     		str	r3, [r7, #12]
 339:./Library/stm32f4xx_rcc.c **** 
 340:./Library/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 287              		.loc 1 341 10
 288 0014 FB68     		ldr	r3, [r7, #12]
 289 0016 23F0F803 		bic	r3, r3, #248
 290 001a FB60     		str	r3, [r7, #12]
 342:./Library/stm32f4xx_rcc.c **** 
 343:./Library/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 12


 344:./Library/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 291              		.loc 1 344 13
 292 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 293              		.loc 1 344 43
 294 001e DB00     		lsls	r3, r3, #3
 295              		.loc 1 344 10
 296 0020 FA68     		ldr	r2, [r7, #12]
 297 0022 1343     		orrs	r3, r3, r2
 298 0024 FB60     		str	r3, [r7, #12]
 345:./Library/stm32f4xx_rcc.c **** 
 346:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
 347:./Library/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 299              		.loc 1 347 6
 300 0026 044A     		ldr	r2, .L14
 301              		.loc 1 347 11
 302 0028 FB68     		ldr	r3, [r7, #12]
 303 002a 1360     		str	r3, [r2]
 348:./Library/stm32f4xx_rcc.c **** }
 304              		.loc 1 348 1
 305 002c 00BF     		nop
 306 002e 1437     		adds	r7, r7, #20
 307              	.LCFI18:
 308              		.cfi_def_cfa_offset 4
 309 0030 BD46     		mov	sp, r7
 310              	.LCFI19:
 311              		.cfi_def_cfa_register 13
 312              		@ sp needed
 313 0032 5DF8047B 		ldr	r7, [sp], #4
 314              	.LCFI20:
 315              		.cfi_restore 7
 316              		.cfi_def_cfa_offset 0
 317 0036 7047     		bx	lr
 318              	.L15:
 319              		.align	2
 320              	.L14:
 321 0038 00380240 		.word	1073887232
 322              		.cfi_endproc
 323              	.LFE126:
 325              		.section	.text.RCC_HSICmd,"ax",%progbits
 326              		.align	1
 327              		.global	RCC_HSICmd
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 332              	RCC_HSICmd:
 333              	.LFB127:
 349:./Library/stm32f4xx_rcc.c **** 
 350:./Library/stm32f4xx_rcc.c **** /**
 351:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 352:./Library/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 353:./Library/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 354:./Library/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 355:./Library/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 356:./Library/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 357:./Library/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 358:./Library/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 359:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 13


 360:./Library/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 361:./Library/stm32f4xx_rcc.c ****   *         system clock source.  
 362:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 363:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 364:./Library/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 365:./Library/stm32f4xx_rcc.c ****   *         clock cycles.  
 366:./Library/stm32f4xx_rcc.c ****   * @retval None
 367:./Library/stm32f4xx_rcc.c ****   */
 368:./Library/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 369:./Library/stm32f4xx_rcc.c **** {
 334              		.loc 1 369 1
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0000 80B4     		push	{r7}
 340              	.LCFI21:
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0002 83B0     		sub	sp, sp, #12
 344              	.LCFI22:
 345              		.cfi_def_cfa_offset 16
 346 0004 00AF     		add	r7, sp, #0
 347              	.LCFI23:
 348              		.cfi_def_cfa_register 7
 349 0006 0346     		mov	r3, r0
 350 0008 FB71     		strb	r3, [r7, #7]
 370:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 371:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 372:./Library/stm32f4xx_rcc.c **** 
 373:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 351              		.loc 1 373 3
 352 000a 044A     		ldr	r2, .L17
 353              		.loc 1 373 36
 354 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 355              		.loc 1 373 34
 356 000e 1360     		str	r3, [r2]
 374:./Library/stm32f4xx_rcc.c **** }
 357              		.loc 1 374 1
 358 0010 00BF     		nop
 359 0012 0C37     		adds	r7, r7, #12
 360              	.LCFI24:
 361              		.cfi_def_cfa_offset 4
 362 0014 BD46     		mov	sp, r7
 363              	.LCFI25:
 364              		.cfi_def_cfa_register 13
 365              		@ sp needed
 366 0016 5DF8047B 		ldr	r7, [sp], #4
 367              	.LCFI26:
 368              		.cfi_restore 7
 369              		.cfi_def_cfa_offset 0
 370 001a 7047     		bx	lr
 371              	.L18:
 372              		.align	2
 373              	.L17:
 374 001c 00004742 		.word	1111949312
 375              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 14


 376              	.LFE127:
 378              		.section	.text.RCC_LSEConfig,"ax",%progbits
 379              		.align	1
 380              		.global	RCC_LSEConfig
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 385              	RCC_LSEConfig:
 386              	.LFB128:
 375:./Library/stm32f4xx_rcc.c **** 
 376:./Library/stm32f4xx_rcc.c **** /**
 377:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 378:./Library/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 379:./Library/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 380:./Library/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 381:./Library/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 382:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 383:./Library/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 384:./Library/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 385:./Library/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 386:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 387:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 388:./Library/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 389:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 390:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 391:./Library/stm32f4xx_rcc.c ****   * @retval None
 392:./Library/stm32f4xx_rcc.c ****   */
 393:./Library/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 394:./Library/stm32f4xx_rcc.c **** {
 387              		.loc 1 394 1
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 8
 390              		@ frame_needed = 1, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392 0000 80B4     		push	{r7}
 393              	.LCFI27:
 394              		.cfi_def_cfa_offset 4
 395              		.cfi_offset 7, -4
 396 0002 83B0     		sub	sp, sp, #12
 397              	.LCFI28:
 398              		.cfi_def_cfa_offset 16
 399 0004 00AF     		add	r7, sp, #0
 400              	.LCFI29:
 401              		.cfi_def_cfa_register 7
 402 0006 0346     		mov	r3, r0
 403 0008 FB71     		strb	r3, [r7, #7]
 395:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 397:./Library/stm32f4xx_rcc.c **** 
 398:./Library/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 399:./Library/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 400:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 404              		.loc 1 400 3
 405 000a 0D4B     		ldr	r3, .L24
 406              		.loc 1 400 34
 407 000c 0022     		movs	r2, #0
 408 000e 1A70     		strb	r2, [r3]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 15


 401:./Library/stm32f4xx_rcc.c **** 
 402:./Library/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 403:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 409              		.loc 1 403 3
 410 0010 0B4B     		ldr	r3, .L24
 411              		.loc 1 403 34
 412 0012 0022     		movs	r2, #0
 413 0014 1A70     		strb	r2, [r3]
 404:./Library/stm32f4xx_rcc.c **** 
 405:./Library/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 406:./Library/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 414              		.loc 1 406 3
 415 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 416 0018 012B     		cmp	r3, #1
 417 001a 02D0     		beq	.L20
 418 001c 042B     		cmp	r3, #4
 419 001e 04D0     		beq	.L21
 407:./Library/stm32f4xx_rcc.c ****   {
 408:./Library/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 409:./Library/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 410:./Library/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 411:./Library/stm32f4xx_rcc.c ****       break;
 412:./Library/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 413:./Library/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 414:./Library/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 415:./Library/stm32f4xx_rcc.c ****       break;
 416:./Library/stm32f4xx_rcc.c ****     default:
 417:./Library/stm32f4xx_rcc.c ****       break;
 420              		.loc 1 417 7
 421 0020 07E0     		b	.L23
 422              	.L20:
 410:./Library/stm32f4xx_rcc.c ****       break;
 423              		.loc 1 410 7
 424 0022 074B     		ldr	r3, .L24
 410:./Library/stm32f4xx_rcc.c ****       break;
 425              		.loc 1 410 38
 426 0024 0122     		movs	r2, #1
 427 0026 1A70     		strb	r2, [r3]
 411:./Library/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 428              		.loc 1 411 7
 429 0028 03E0     		b	.L23
 430              	.L21:
 414:./Library/stm32f4xx_rcc.c ****       break;
 431              		.loc 1 414 7
 432 002a 054B     		ldr	r3, .L24
 414:./Library/stm32f4xx_rcc.c ****       break;
 433              		.loc 1 414 38
 434 002c 0522     		movs	r2, #5
 435 002e 1A70     		strb	r2, [r3]
 415:./Library/stm32f4xx_rcc.c ****     default:
 436              		.loc 1 415 7
 437 0030 00BF     		nop
 438              	.L23:
 418:./Library/stm32f4xx_rcc.c ****   }
 419:./Library/stm32f4xx_rcc.c **** }
 439              		.loc 1 419 1
 440 0032 00BF     		nop
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 16


 441 0034 0C37     		adds	r7, r7, #12
 442              	.LCFI30:
 443              		.cfi_def_cfa_offset 4
 444 0036 BD46     		mov	sp, r7
 445              	.LCFI31:
 446              		.cfi_def_cfa_register 13
 447              		@ sp needed
 448 0038 5DF8047B 		ldr	r7, [sp], #4
 449              	.LCFI32:
 450              		.cfi_restore 7
 451              		.cfi_def_cfa_offset 0
 452 003c 7047     		bx	lr
 453              	.L25:
 454 003e 00BF     		.align	2
 455              	.L24:
 456 0040 70380240 		.word	1073887344
 457              		.cfi_endproc
 458              	.LFE128:
 460              		.section	.text.RCC_LSICmd,"ax",%progbits
 461              		.align	1
 462              		.global	RCC_LSICmd
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 467              	RCC_LSICmd:
 468              	.LFB129:
 420:./Library/stm32f4xx_rcc.c **** 
 421:./Library/stm32f4xx_rcc.c **** /**
 422:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 423:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 424:./Library/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 425:./Library/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 426:./Library/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 427:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 428:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 429:./Library/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 430:./Library/stm32f4xx_rcc.c ****   *         clock cycles. 
 431:./Library/stm32f4xx_rcc.c ****   * @retval None
 432:./Library/stm32f4xx_rcc.c ****   */
 433:./Library/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 434:./Library/stm32f4xx_rcc.c **** {
 469              		.loc 1 434 1
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 8
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474 0000 80B4     		push	{r7}
 475              	.LCFI33:
 476              		.cfi_def_cfa_offset 4
 477              		.cfi_offset 7, -4
 478 0002 83B0     		sub	sp, sp, #12
 479              	.LCFI34:
 480              		.cfi_def_cfa_offset 16
 481 0004 00AF     		add	r7, sp, #0
 482              	.LCFI35:
 483              		.cfi_def_cfa_register 7
 484 0006 0346     		mov	r3, r0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 17


 485 0008 FB71     		strb	r3, [r7, #7]
 435:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 436:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 437:./Library/stm32f4xx_rcc.c **** 
 438:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 486              		.loc 1 438 3
 487 000a 044A     		ldr	r2, .L27
 488              		.loc 1 438 37
 489 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 490              		.loc 1 438 35
 491 000e 1360     		str	r3, [r2]
 439:./Library/stm32f4xx_rcc.c **** }
 492              		.loc 1 439 1
 493 0010 00BF     		nop
 494 0012 0C37     		adds	r7, r7, #12
 495              	.LCFI36:
 496              		.cfi_def_cfa_offset 4
 497 0014 BD46     		mov	sp, r7
 498              	.LCFI37:
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
 501 0016 5DF8047B 		ldr	r7, [sp], #4
 502              	.LCFI38:
 503              		.cfi_restore 7
 504              		.cfi_def_cfa_offset 0
 505 001a 7047     		bx	lr
 506              	.L28:
 507              		.align	2
 508              	.L27:
 509 001c 800E4742 		.word	1111953024
 510              		.cfi_endproc
 511              	.LFE129:
 513              		.section	.text.RCC_PLLConfig,"ax",%progbits
 514              		.align	1
 515              		.global	RCC_PLLConfig
 516              		.syntax unified
 517              		.thumb
 518              		.thumb_func
 520              	RCC_PLLConfig:
 521              	.LFB130:
 440:./Library/stm32f4xx_rcc.c **** 
 441:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 442:./Library/stm32f4xx_rcc.c **** /**
 443:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 444:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 445:./Library/stm32f4xx_rcc.c ****   *  
 446:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 447:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 448:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 449:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 450:./Library/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 451:./Library/stm32f4xx_rcc.c ****   *  
 452:./Library/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 453:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 454:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 455:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 456:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 18


 457:./Library/stm32f4xx_rcc.c ****   *  
 458:./Library/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 459:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 460:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 461:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 462:./Library/stm32f4xx_rcc.c ****   *   
 463:./Library/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 464:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 465:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 466:./Library/stm32f4xx_rcc.c ****   *         the System clock frequency.
 467:./Library/stm32f4xx_rcc.c ****   *  
 468:./Library/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 469:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 470:./Library/stm32f4xx_rcc.c ****   *
 471:./Library/stm32f4xx_rcc.c ****   * @param  PLLR: specifies the division factor for I2S, SAI, SYSTEM, SPDIF in STM32F446xx devices
 472:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 473:./Library/stm32f4xx_rcc.c ****   *
 474:./Library/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 475:./Library/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 476:./Library/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 477:./Library/stm32f4xx_rcc.c ****   *         correctly.
 478:./Library/stm32f4xx_rcc.c ****   *   
 479:./Library/stm32f4xx_rcc.c ****   * @retval None
 480:./Library/stm32f4xx_rcc.c ****   */
 481:./Library/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 482:./Library/stm32f4xx_rcc.c **** {
 483:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 484:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 485:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 486:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 487:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 488:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 489:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLR_VALUE(PLLR));
 490:./Library/stm32f4xx_rcc.c ****   
 491:./Library/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 492:./Library/stm32f4xx_rcc.c ****                  (PLLQ << 24) | (PLLR << 28);
 493:./Library/stm32f4xx_rcc.c **** }
 494:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
 495:./Library/stm32f4xx_rcc.c **** 
 496:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 497:./Library/stm32f4xx_rcc.c **** /**
 498:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 499:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 500:./Library/stm32f4xx_rcc.c ****   *  
 501:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 502:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 503:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 504:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 505:./Library/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 506:./Library/stm32f4xx_rcc.c ****   *  
 507:./Library/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 508:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 509:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 510:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 511:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 512:./Library/stm32f4xx_rcc.c ****   *  
 513:./Library/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 19


 514:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 515:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 516:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 517:./Library/stm32f4xx_rcc.c ****   *   
 518:./Library/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 519:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 520:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 521:./Library/stm32f4xx_rcc.c ****   *         the System clock frequency.
 522:./Library/stm32f4xx_rcc.c ****   *  
 523:./Library/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 524:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 525:./Library/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 526:./Library/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 527:./Library/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 528:./Library/stm32f4xx_rcc.c ****   *         correctly.
 529:./Library/stm32f4xx_rcc.c ****   *   
 530:./Library/stm32f4xx_rcc.c ****   * @retval None
 531:./Library/stm32f4xx_rcc.c ****   */
 532:./Library/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 533:./Library/stm32f4xx_rcc.c **** {
 522              		.loc 1 533 1
 523              		.cfi_startproc
 524              		@ args = 4, pretend = 0, frame = 16
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526              		@ link register save eliminated.
 527 0000 80B4     		push	{r7}
 528              	.LCFI39:
 529              		.cfi_def_cfa_offset 4
 530              		.cfi_offset 7, -4
 531 0002 85B0     		sub	sp, sp, #20
 532              	.LCFI40:
 533              		.cfi_def_cfa_offset 24
 534 0004 00AF     		add	r7, sp, #0
 535              	.LCFI41:
 536              		.cfi_def_cfa_register 7
 537 0006 F860     		str	r0, [r7, #12]
 538 0008 B960     		str	r1, [r7, #8]
 539 000a 7A60     		str	r2, [r7, #4]
 540 000c 3B60     		str	r3, [r7]
 534:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 535:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 536:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 537:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 538:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 539:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 540:./Library/stm32f4xx_rcc.c **** 
 541:./Library/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 541              		.loc 1 541 31
 542 000e 7B68     		ldr	r3, [r7, #4]
 543 0010 9A01     		lsls	r2, r3, #6
 544              		.loc 1 541 23
 545 0012 BB68     		ldr	r3, [r7, #8]
 546 0014 1A43     		orrs	r2, r2, r3
 547              		.loc 1 541 47
 548 0016 3B68     		ldr	r3, [r7]
 549 0018 5B08     		lsrs	r3, r3, #1
 550              		.loc 1 541 53
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 20


 551 001a 013B     		subs	r3, r3, #1
 552              		.loc 1 541 57
 553 001c 1B04     		lsls	r3, r3, #16
 554              		.loc 1 541 37
 555 001e 1A43     		orrs	r2, r2, r3
 556              		.loc 1 541 64
 557 0020 FB68     		ldr	r3, [r7, #12]
 558 0022 1A43     		orrs	r2, r2, r3
 542:./Library/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 559              		.loc 1 542 24
 560 0024 BB69     		ldr	r3, [r7, #24]
 561 0026 1B06     		lsls	r3, r3, #24
 541:./Library/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 562              		.loc 1 541 6
 563 0028 0449     		ldr	r1, .L30
 541:./Library/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 564              		.loc 1 541 82
 565 002a 1343     		orrs	r3, r3, r2
 541:./Library/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 566              		.loc 1 541 16
 567 002c 4B60     		str	r3, [r1, #4]
 543:./Library/stm32f4xx_rcc.c **** }
 568              		.loc 1 543 1
 569 002e 00BF     		nop
 570 0030 1437     		adds	r7, r7, #20
 571              	.LCFI42:
 572              		.cfi_def_cfa_offset 4
 573 0032 BD46     		mov	sp, r7
 574              	.LCFI43:
 575              		.cfi_def_cfa_register 13
 576              		@ sp needed
 577 0034 5DF8047B 		ldr	r7, [sp], #4
 578              	.LCFI44:
 579              		.cfi_restore 7
 580              		.cfi_def_cfa_offset 0
 581 0038 7047     		bx	lr
 582              	.L31:
 583 003a 00BF     		.align	2
 584              	.L30:
 585 003c 00380240 		.word	1073887232
 586              		.cfi_endproc
 587              	.LFE130:
 589              		.section	.text.RCC_PLLCmd,"ax",%progbits
 590              		.align	1
 591              		.global	RCC_PLLCmd
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 596              	RCC_PLLCmd:
 597              	.LFB131:
 544:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 545:./Library/stm32f4xx_rcc.c **** 
 546:./Library/stm32f4xx_rcc.c **** /**
 547:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 548:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 549:./Library/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 550:./Library/stm32f4xx_rcc.c ****   *         be used as system clock source.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 21


 551:./Library/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 552:./Library/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 553:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 554:./Library/stm32f4xx_rcc.c ****   * @retval None
 555:./Library/stm32f4xx_rcc.c ****   */
 556:./Library/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 557:./Library/stm32f4xx_rcc.c **** {
 598              		.loc 1 557 1
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 8
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603 0000 80B4     		push	{r7}
 604              	.LCFI45:
 605              		.cfi_def_cfa_offset 4
 606              		.cfi_offset 7, -4
 607 0002 83B0     		sub	sp, sp, #12
 608              	.LCFI46:
 609              		.cfi_def_cfa_offset 16
 610 0004 00AF     		add	r7, sp, #0
 611              	.LCFI47:
 612              		.cfi_def_cfa_register 7
 613 0006 0346     		mov	r3, r0
 614 0008 FB71     		strb	r3, [r7, #7]
 558:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 559:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 560:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 615              		.loc 1 560 3
 616 000a 044A     		ldr	r2, .L33
 617              		.loc 1 560 36
 618 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 619              		.loc 1 560 34
 620 000e 1360     		str	r3, [r2]
 561:./Library/stm32f4xx_rcc.c **** }
 621              		.loc 1 561 1
 622 0010 00BF     		nop
 623 0012 0C37     		adds	r7, r7, #12
 624              	.LCFI48:
 625              		.cfi_def_cfa_offset 4
 626 0014 BD46     		mov	sp, r7
 627              	.LCFI49:
 628              		.cfi_def_cfa_register 13
 629              		@ sp needed
 630 0016 5DF8047B 		ldr	r7, [sp], #4
 631              	.LCFI50:
 632              		.cfi_restore 7
 633              		.cfi_def_cfa_offset 0
 634 001a 7047     		bx	lr
 635              	.L34:
 636              		.align	2
 637              	.L33:
 638 001c 60004742 		.word	1111949408
 639              		.cfi_endproc
 640              	.LFE131:
 642              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 643              		.align	1
 644              		.global	RCC_PLLI2SConfig
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 22


 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 649              	RCC_PLLI2SConfig:
 650              	.LFB132:
 562:./Library/stm32f4xx_rcc.c **** 
 563:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx)
 564:./Library/stm32f4xx_rcc.c **** /**
 565:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 566:./Library/stm32f4xx_rcc.c ****   *  
 567:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 568:./Library/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 569:./Library/stm32f4xx_rcc.c ****   *    
 570:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 571:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 572:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 573:./Library/stm32f4xx_rcc.c ****   *             
 574:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 575:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 576:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 577:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 578:./Library/stm32f4xx_rcc.c ****   *    
 579:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 580:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 581:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 582:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 583:./Library/stm32f4xx_rcc.c ****   *   
 584:./Library/stm32f4xx_rcc.c ****   * @retval None
 585:./Library/stm32f4xx_rcc.c ****   */
 586:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 587:./Library/stm32f4xx_rcc.c **** {
 651              		.loc 1 587 1
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 8
 654              		@ frame_needed = 1, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 656 0000 80B4     		push	{r7}
 657              	.LCFI51:
 658              		.cfi_def_cfa_offset 4
 659              		.cfi_offset 7, -4
 660 0002 83B0     		sub	sp, sp, #12
 661              	.LCFI52:
 662              		.cfi_def_cfa_offset 16
 663 0004 00AF     		add	r7, sp, #0
 664              	.LCFI53:
 665              		.cfi_def_cfa_register 7
 666 0006 7860     		str	r0, [r7, #4]
 667 0008 3960     		str	r1, [r7]
 588:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 589:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 590:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 591:./Library/stm32f4xx_rcc.c **** 
 592:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 668              		.loc 1 592 30
 669 000a 7B68     		ldr	r3, [r7, #4]
 670 000c 9A01     		lsls	r2, r3, #6
 671              		.loc 1 592 47
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 23


 672 000e 3B68     		ldr	r3, [r7]
 673 0010 1B07     		lsls	r3, r3, #28
 674              		.loc 1 592 6
 675 0012 0549     		ldr	r1, .L36
 676              		.loc 1 592 36
 677 0014 1343     		orrs	r3, r3, r2
 678              		.loc 1 592 19
 679 0016 C1F88430 		str	r3, [r1, #132]
 593:./Library/stm32f4xx_rcc.c **** }
 680              		.loc 1 593 1
 681 001a 00BF     		nop
 682 001c 0C37     		adds	r7, r7, #12
 683              	.LCFI54:
 684              		.cfi_def_cfa_offset 4
 685 001e BD46     		mov	sp, r7
 686              	.LCFI55:
 687              		.cfi_def_cfa_register 13
 688              		@ sp needed
 689 0020 5DF8047B 		ldr	r7, [sp], #4
 690              	.LCFI56:
 691              		.cfi_restore 7
 692              		.cfi_def_cfa_offset 0
 693 0024 7047     		bx	lr
 694              	.L37:
 695 0026 00BF     		.align	2
 696              	.L36:
 697 0028 00380240 		.word	1073887232
 698              		.cfi_endproc
 699              	.LFE132:
 701              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 702              		.align	1
 703              		.global	RCC_PLLI2SCmd
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 708              	RCC_PLLI2SCmd:
 709              	.LFB133:
 594:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 595:./Library/stm32f4xx_rcc.c **** 
 596:./Library/stm32f4xx_rcc.c **** #if defined(STM32F411xE)
 597:./Library/stm32f4xx_rcc.c **** /**
 598:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 599:./Library/stm32f4xx_rcc.c ****   *  
 600:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 601:./Library/stm32f4xx_rcc.c ****   *    
 602:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 603:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 604:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 605:./Library/stm32f4xx_rcc.c ****   *
 606:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 607:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 608:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 609:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 610:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 611:./Library/stm32f4xx_rcc.c ****   *
 612:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 613:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 24


 614:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 615:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 616:./Library/stm32f4xx_rcc.c ****   *    
 617:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 618:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 619:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 620:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 621:./Library/stm32f4xx_rcc.c ****   *   
 622:./Library/stm32f4xx_rcc.c ****   * @retval None
 623:./Library/stm32f4xx_rcc.c ****   */
 624:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 625:./Library/stm32f4xx_rcc.c **** {
 626:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 627:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 628:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 629:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 630:./Library/stm32f4xx_rcc.c **** 
 631:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 632:./Library/stm32f4xx_rcc.c **** }
 633:./Library/stm32f4xx_rcc.c **** #endif /* STM32F411xE */
 634:./Library/stm32f4xx_rcc.c **** 
 635:./Library/stm32f4xx_rcc.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 636:./Library/stm32f4xx_rcc.c **** /**
 637:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 638:./Library/stm32f4xx_rcc.c ****   * 
 639:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 640:./Library/stm32f4xx_rcc.c ****   *         
 641:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 642:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 643:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 644:./Library/stm32f4xx_rcc.c ****   *             
 645:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 646:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 647:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 648:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 649:./Library/stm32f4xx_rcc.c ****   * 
 650:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 651:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 652:./Library/stm32f4xx_rcc.c ****   *                 
 653:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 654:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 655:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 656:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 657:./Library/stm32f4xx_rcc.c ****   *   
 658:./Library/stm32f4xx_rcc.c ****   * @retval None
 659:./Library/stm32f4xx_rcc.c ****   */
 660:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 661:./Library/stm32f4xx_rcc.c **** {
 662:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 663:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 664:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 665:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 666:./Library/stm32f4xx_rcc.c **** 
 667:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 668:./Library/stm32f4xx_rcc.c **** }
 669:./Library/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 670:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 25


 671:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG ) || defined(STM32F413_423xx) || defined(STM32F446xx)
 672:./Library/stm32f4xx_rcc.c **** /**
 673:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 674:./Library/stm32f4xx_rcc.c ****   * 
 675:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 676:./Library/stm32f4xx_rcc.c ****   *         
 677:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 678:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 679:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 680:./Library/stm32f4xx_rcc.c ****   * 
 681:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 682:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 683:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 684:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 685:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 686:./Library/stm32f4xx_rcc.c ****   *
 687:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 688:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 689:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 690:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 691:./Library/stm32f4xx_rcc.c ****   *
 692:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SP: specifies the division factor for PLL 48Mhz clock output
 693:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 694:./Library/stm32f4xx_rcc.c ****   *
 695:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 696:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 697:./Library/stm32f4xx_rcc.c ****   *                 
 698:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 699:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 700:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 701:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 702:./Library/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 703:./Library/stm32f4xx_rcc.c ****   *   
 704:./Library/stm32f4xx_rcc.c ****   * @retval None
 705:./Library/stm32f4xx_rcc.c ****   */
 706:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SM, uint32_t PLLI2SN, uint32_t PLLI2SP, uint32_t PLLI2SQ, uint3
 707:./Library/stm32f4xx_rcc.c **** {
 708:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 709:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 710:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 711:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SP));
 712:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 713:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 714:./Library/stm32f4xx_rcc.c **** 
 715:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR =  PLLI2SM | (PLLI2SN << 6) | (((PLLI2SP >> 1) -1) << 16) | (PLLI2SQ << 24) | (PL
 716:./Library/stm32f4xx_rcc.c **** }
 717:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
 718:./Library/stm32f4xx_rcc.c **** 
 719:./Library/stm32f4xx_rcc.c **** /**
 720:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 721:./Library/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 722:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 723:./Library/stm32f4xx_rcc.c ****   * @retval None
 724:./Library/stm32f4xx_rcc.c ****   */
 725:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 726:./Library/stm32f4xx_rcc.c **** {
 710              		.loc 1 726 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 26


 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715 0000 80B4     		push	{r7}
 716              	.LCFI57:
 717              		.cfi_def_cfa_offset 4
 718              		.cfi_offset 7, -4
 719 0002 83B0     		sub	sp, sp, #12
 720              	.LCFI58:
 721              		.cfi_def_cfa_offset 16
 722 0004 00AF     		add	r7, sp, #0
 723              	.LCFI59:
 724              		.cfi_def_cfa_register 7
 725 0006 0346     		mov	r3, r0
 726 0008 FB71     		strb	r3, [r7, #7]
 727:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 728:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 729:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 727              		.loc 1 729 3
 728 000a 044A     		ldr	r2, .L39
 729              		.loc 1 729 39
 730 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 731              		.loc 1 729 37
 732 000e 1360     		str	r3, [r2]
 730:./Library/stm32f4xx_rcc.c **** }
 733              		.loc 1 730 1
 734 0010 00BF     		nop
 735 0012 0C37     		adds	r7, r7, #12
 736              	.LCFI60:
 737              		.cfi_def_cfa_offset 4
 738 0014 BD46     		mov	sp, r7
 739              	.LCFI61:
 740              		.cfi_def_cfa_register 13
 741              		@ sp needed
 742 0016 5DF8047B 		ldr	r7, [sp], #4
 743              	.LCFI62:
 744              		.cfi_restore 7
 745              		.cfi_def_cfa_offset 0
 746 001a 7047     		bx	lr
 747              	.L40:
 748              		.align	2
 749              	.L39:
 750 001c 68004742 		.word	1111949416
 751              		.cfi_endproc
 752              	.LFE133:
 754              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 755              		.align	1
 756              		.global	RCC_PLLSAIConfig
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 761              	RCC_PLLSAIConfig:
 762              	.LFB134:
 731:./Library/stm32f4xx_rcc.c **** 
 732:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
 733:./Library/stm32f4xx_rcc.c **** /**
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 27


 734:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 735:./Library/stm32f4xx_rcc.c ****   *
 736:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F469_479xx devices 
 737:./Library/stm32f4xx_rcc.c ****   *        
 738:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 739:./Library/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 740:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 741:./Library/stm32f4xx_rcc.c ****   *
 742:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 743:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 744:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 745:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 746:./Library/stm32f4xx_rcc.c ****   *
 747:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 748:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}..
 749:./Library/stm32f4xx_rcc.c ****   *           
 750:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 751:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 752:./Library/stm32f4xx_rcc.c ****   *            
 753:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 754:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 755:./Library/stm32f4xx_rcc.c ****   *   
 756:./Library/stm32f4xx_rcc.c ****   * @retval None
 757:./Library/stm32f4xx_rcc.c ****   */
 758:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 759:./Library/stm32f4xx_rcc.c **** {
 760:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 761:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 762:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 763:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 764:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 765:./Library/stm32f4xx_rcc.c **** 
 766:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16) | (PLLSAIQ << 24) | (PLLSAIR << 28
 767:./Library/stm32f4xx_rcc.c **** }
 768:./Library/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */
 769:./Library/stm32f4xx_rcc.c **** 
 770:./Library/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 771:./Library/stm32f4xx_rcc.c **** /**
 772:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 773:./Library/stm32f4xx_rcc.c ****   *
 774:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 775:./Library/stm32f4xx_rcc.c ****   *        
 776:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 777:./Library/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 778:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 779:./Library/stm32f4xx_rcc.c ****   * 
 780:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIM: specifies the division factor for PLLSAI VCO input clock
 781:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 782:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIM parameter correctly to ensure that the VCO input
 783:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 784:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLSAI jitter.
 785:./Library/stm32f4xx_rcc.c ****   *
 786:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 787:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 788:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 789:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 790:./Library/stm32f4xx_rcc.c ****   * 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 28


 791:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 792:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}.
 793:./Library/stm32f4xx_rcc.c ****   *
 794:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 795:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 796:./Library/stm32f4xx_rcc.c ****   *   
 797:./Library/stm32f4xx_rcc.c ****   * @retval None
 798:./Library/stm32f4xx_rcc.c ****   */
 799:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIM, uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ)
 800:./Library/stm32f4xx_rcc.c **** {
 801:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 802:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIM));
 803:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 804:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 805:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 806:./Library/stm32f4xx_rcc.c **** 
 807:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = PLLSAIM | (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16)  | (PLLSAIQ << 24);
 808:./Library/stm32f4xx_rcc.c **** }
 809:./Library/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 810:./Library/stm32f4xx_rcc.c **** 
 811:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 812:./Library/stm32f4xx_rcc.c **** /**
 813:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 814:./Library/stm32f4xx_rcc.c ****   *
 815:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 816:./Library/stm32f4xx_rcc.c ****   *        
 817:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 818:./Library/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 819:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 820:./Library/stm32f4xx_rcc.c ****   *             
 821:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 822:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 823:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 824:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 825:./Library/stm32f4xx_rcc.c ****   *           
 826:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 827:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 828:./Library/stm32f4xx_rcc.c ****   *            
 829:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 830:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 831:./Library/stm32f4xx_rcc.c ****   *   
 832:./Library/stm32f4xx_rcc.c ****   * @retval None
 833:./Library/stm32f4xx_rcc.c ****   */
 834:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 835:./Library/stm32f4xx_rcc.c **** {
 763              		.loc 1 835 1
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 16
 766              		@ frame_needed = 1, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768 0000 80B4     		push	{r7}
 769              	.LCFI63:
 770              		.cfi_def_cfa_offset 4
 771              		.cfi_offset 7, -4
 772 0002 85B0     		sub	sp, sp, #20
 773              	.LCFI64:
 774              		.cfi_def_cfa_offset 24
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 29


 775 0004 00AF     		add	r7, sp, #0
 776              	.LCFI65:
 777              		.cfi_def_cfa_register 7
 778 0006 F860     		str	r0, [r7, #12]
 779 0008 B960     		str	r1, [r7, #8]
 780 000a 7A60     		str	r2, [r7, #4]
 836:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 837:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 838:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 839:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 840:./Library/stm32f4xx_rcc.c ****   
 841:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 781              		.loc 1 841 30
 782 000c FB68     		ldr	r3, [r7, #12]
 783 000e 9A01     		lsls	r2, r3, #6
 784              		.loc 1 841 47
 785 0010 BB68     		ldr	r3, [r7, #8]
 786 0012 1B06     		lsls	r3, r3, #24
 787              		.loc 1 841 36
 788 0014 1A43     		orrs	r2, r2, r3
 789              		.loc 1 841 65
 790 0016 7B68     		ldr	r3, [r7, #4]
 791 0018 1B07     		lsls	r3, r3, #28
 792              		.loc 1 841 6
 793 001a 0549     		ldr	r1, .L42
 794              		.loc 1 841 54
 795 001c 1343     		orrs	r3, r3, r2
 796              		.loc 1 841 19
 797 001e C1F88830 		str	r3, [r1, #136]
 842:./Library/stm32f4xx_rcc.c **** }
 798              		.loc 1 842 1
 799 0022 00BF     		nop
 800 0024 1437     		adds	r7, r7, #20
 801              	.LCFI66:
 802              		.cfi_def_cfa_offset 4
 803 0026 BD46     		mov	sp, r7
 804              	.LCFI67:
 805              		.cfi_def_cfa_register 13
 806              		@ sp needed
 807 0028 5DF8047B 		ldr	r7, [sp], #4
 808              	.LCFI68:
 809              		.cfi_restore 7
 810              		.cfi_def_cfa_offset 0
 811 002c 7047     		bx	lr
 812              	.L43:
 813 002e 00BF     		.align	2
 814              	.L42:
 815 0030 00380240 		.word	1073887232
 816              		.cfi_endproc
 817              	.LFE134:
 819              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 820              		.align	1
 821              		.global	RCC_PLLSAICmd
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 826              	RCC_PLLSAICmd:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 30


 827              	.LFB135:
 843:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 844:./Library/stm32f4xx_rcc.c **** 
 845:./Library/stm32f4xx_rcc.c **** /**
 846:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 847:./Library/stm32f4xx_rcc.c ****   * 
 848:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices 
 849:./Library/stm32f4xx_rcc.c ****   *       
 850:./Library/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 851:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 852:./Library/stm32f4xx_rcc.c ****   * @retval None
 853:./Library/stm32f4xx_rcc.c ****   */
 854:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 855:./Library/stm32f4xx_rcc.c **** {
 828              		.loc 1 855 1
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 8
 831              		@ frame_needed = 1, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833 0000 80B4     		push	{r7}
 834              	.LCFI69:
 835              		.cfi_def_cfa_offset 4
 836              		.cfi_offset 7, -4
 837 0002 83B0     		sub	sp, sp, #12
 838              	.LCFI70:
 839              		.cfi_def_cfa_offset 16
 840 0004 00AF     		add	r7, sp, #0
 841              	.LCFI71:
 842              		.cfi_def_cfa_register 7
 843 0006 0346     		mov	r3, r0
 844 0008 FB71     		strb	r3, [r7, #7]
 856:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 857:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 858:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 845              		.loc 1 858 3
 846 000a 044A     		ldr	r2, .L45
 847              		.loc 1 858 39
 848 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 849              		.loc 1 858 37
 850 000e 1360     		str	r3, [r2]
 859:./Library/stm32f4xx_rcc.c **** }
 851              		.loc 1 859 1
 852 0010 00BF     		nop
 853 0012 0C37     		adds	r7, r7, #12
 854              	.LCFI72:
 855              		.cfi_def_cfa_offset 4
 856 0014 BD46     		mov	sp, r7
 857              	.LCFI73:
 858              		.cfi_def_cfa_register 13
 859              		@ sp needed
 860 0016 5DF8047B 		ldr	r7, [sp], #4
 861              	.LCFI74:
 862              		.cfi_restore 7
 863              		.cfi_def_cfa_offset 0
 864 001a 7047     		bx	lr
 865              	.L46:
 866              		.align	2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 31


 867              	.L45:
 868 001c 70004742 		.word	1111949424
 869              		.cfi_endproc
 870              	.LFE135:
 872              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 873              		.align	1
 874              		.global	RCC_ClockSecuritySystemCmd
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 879              	RCC_ClockSecuritySystemCmd:
 880              	.LFB136:
 860:./Library/stm32f4xx_rcc.c **** 
 861:./Library/stm32f4xx_rcc.c **** /**
 862:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 863:./Library/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 864:./Library/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 865:./Library/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 866:./Library/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 867:./Library/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 868:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 869:./Library/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 870:./Library/stm32f4xx_rcc.c ****   * @retval None
 871:./Library/stm32f4xx_rcc.c ****   */
 872:./Library/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 873:./Library/stm32f4xx_rcc.c **** {
 881              		.loc 1 873 1
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 8
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885              		@ link register save eliminated.
 886 0000 80B4     		push	{r7}
 887              	.LCFI75:
 888              		.cfi_def_cfa_offset 4
 889              		.cfi_offset 7, -4
 890 0002 83B0     		sub	sp, sp, #12
 891              	.LCFI76:
 892              		.cfi_def_cfa_offset 16
 893 0004 00AF     		add	r7, sp, #0
 894              	.LCFI77:
 895              		.cfi_def_cfa_register 7
 896 0006 0346     		mov	r3, r0
 897 0008 FB71     		strb	r3, [r7, #7]
 874:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 875:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 876:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 898              		.loc 1 876 3
 899 000a 044A     		ldr	r2, .L48
 900              		.loc 1 876 36
 901 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 902              		.loc 1 876 34
 903 000e 1360     		str	r3, [r2]
 877:./Library/stm32f4xx_rcc.c **** }
 904              		.loc 1 877 1
 905 0010 00BF     		nop
 906 0012 0C37     		adds	r7, r7, #12
 907              	.LCFI78:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 32


 908              		.cfi_def_cfa_offset 4
 909 0014 BD46     		mov	sp, r7
 910              	.LCFI79:
 911              		.cfi_def_cfa_register 13
 912              		@ sp needed
 913 0016 5DF8047B 		ldr	r7, [sp], #4
 914              	.LCFI80:
 915              		.cfi_restore 7
 916              		.cfi_def_cfa_offset 0
 917 001a 7047     		bx	lr
 918              	.L49:
 919              		.align	2
 920              	.L48:
 921 001c 4C004742 		.word	1111949388
 922              		.cfi_endproc
 923              	.LFE136:
 925              		.section	.text.RCC_MCO1Config,"ax",%progbits
 926              		.align	1
 927              		.global	RCC_MCO1Config
 928              		.syntax unified
 929              		.thumb
 930              		.thumb_func
 932              	RCC_MCO1Config:
 933              	.LFB137:
 878:./Library/stm32f4xx_rcc.c **** 
 879:./Library/stm32f4xx_rcc.c **** /**
 880:./Library/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 881:./Library/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 882:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 883:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 884:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 885:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 886:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 887:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 888:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 889:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 890:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 891:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 892:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 893:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 894:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 895:./Library/stm32f4xx_rcc.c ****   * @retval None
 896:./Library/stm32f4xx_rcc.c ****   */
 897:./Library/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 898:./Library/stm32f4xx_rcc.c **** {
 934              		.loc 1 898 1
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 16
 937              		@ frame_needed = 1, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 939 0000 80B4     		push	{r7}
 940              	.LCFI81:
 941              		.cfi_def_cfa_offset 4
 942              		.cfi_offset 7, -4
 943 0002 85B0     		sub	sp, sp, #20
 944              	.LCFI82:
 945              		.cfi_def_cfa_offset 24
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 33


 946 0004 00AF     		add	r7, sp, #0
 947              	.LCFI83:
 948              		.cfi_def_cfa_register 7
 949 0006 7860     		str	r0, [r7, #4]
 950 0008 3960     		str	r1, [r7]
 899:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 951              		.loc 1 899 12
 952 000a 0023     		movs	r3, #0
 953 000c FB60     		str	r3, [r7, #12]
 900:./Library/stm32f4xx_rcc.c ****   
 901:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 902:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 903:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 904:./Library/stm32f4xx_rcc.c **** 
 905:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 954              		.loc 1 905 15
 955 000e 0B4B     		ldr	r3, .L51
 956              		.loc 1 905 10
 957 0010 9B68     		ldr	r3, [r3, #8]
 958 0012 FB60     		str	r3, [r7, #12]
 906:./Library/stm32f4xx_rcc.c **** 
 907:./Library/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 908:./Library/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 959              		.loc 1 908 10
 960 0014 FB68     		ldr	r3, [r7, #12]
 961 0016 23F0EC63 		bic	r3, r3, #123731968
 962 001a FB60     		str	r3, [r7, #12]
 909:./Library/stm32f4xx_rcc.c **** 
 910:./Library/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 911:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 963              		.loc 1 911 28
 964 001c 7A68     		ldr	r2, [r7, #4]
 965 001e 3B68     		ldr	r3, [r7]
 966 0020 1343     		orrs	r3, r3, r2
 967              		.loc 1 911 10
 968 0022 FA68     		ldr	r2, [r7, #12]
 969 0024 1343     		orrs	r3, r3, r2
 970 0026 FB60     		str	r3, [r7, #12]
 912:./Library/stm32f4xx_rcc.c ****   
 913:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
 914:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 971              		.loc 1 914 6
 972 0028 044A     		ldr	r2, .L51
 973              		.loc 1 914 13
 974 002a FB68     		ldr	r3, [r7, #12]
 975 002c 9360     		str	r3, [r2, #8]
 915:./Library/stm32f4xx_rcc.c **** 
 916:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 917:./Library/stm32f4xx_rcc.c ****   RCC_MCO1Cmd(ENABLE);
 918:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 919:./Library/stm32f4xx_rcc.c **** }
 976              		.loc 1 919 1
 977 002e 00BF     		nop
 978 0030 1437     		adds	r7, r7, #20
 979              	.LCFI84:
 980              		.cfi_def_cfa_offset 4
 981 0032 BD46     		mov	sp, r7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 34


 982              	.LCFI85:
 983              		.cfi_def_cfa_register 13
 984              		@ sp needed
 985 0034 5DF8047B 		ldr	r7, [sp], #4
 986              	.LCFI86:
 987              		.cfi_restore 7
 988              		.cfi_def_cfa_offset 0
 989 0038 7047     		bx	lr
 990              	.L52:
 991 003a 00BF     		.align	2
 992              	.L51:
 993 003c 00380240 		.word	1073887232
 994              		.cfi_endproc
 995              	.LFE137:
 997              		.section	.text.RCC_MCO2Config,"ax",%progbits
 998              		.align	1
 999              		.global	RCC_MCO2Config
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1004              	RCC_MCO2Config:
 1005              	.LFB138:
 920:./Library/stm32f4xx_rcc.c **** 
 921:./Library/stm32f4xx_rcc.c **** /**
 922:./Library/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 923:./Library/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 924:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 925:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 926:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 927:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 928:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 929:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 930:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 931:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 932:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 933:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 934:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 935:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 936:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 937:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 938:./Library/stm32f4xx_rcc.c ****   * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
 939:./Library/stm32f4xx_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 940:./Library/stm32f4xx_rcc.c ****   * @retval None
 941:./Library/stm32f4xx_rcc.c ****   */
 942:./Library/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 943:./Library/stm32f4xx_rcc.c **** {
 1006              		.loc 1 943 1
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 16
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010              		@ link register save eliminated.
 1011 0000 80B4     		push	{r7}
 1012              	.LCFI87:
 1013              		.cfi_def_cfa_offset 4
 1014              		.cfi_offset 7, -4
 1015 0002 85B0     		sub	sp, sp, #20
 1016              	.LCFI88:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 35


 1017              		.cfi_def_cfa_offset 24
 1018 0004 00AF     		add	r7, sp, #0
 1019              	.LCFI89:
 1020              		.cfi_def_cfa_register 7
 1021 0006 7860     		str	r0, [r7, #4]
 1022 0008 3960     		str	r1, [r7]
 944:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1023              		.loc 1 944 12
 1024 000a 0023     		movs	r3, #0
 1025 000c FB60     		str	r3, [r7, #12]
 945:./Library/stm32f4xx_rcc.c ****   
 946:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 947:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 948:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 949:./Library/stm32f4xx_rcc.c ****   
 950:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1026              		.loc 1 950 15
 1027 000e 0B4B     		ldr	r3, .L54
 1028              		.loc 1 950 10
 1029 0010 9B68     		ldr	r3, [r3, #8]
 1030 0012 FB60     		str	r3, [r7, #12]
 951:./Library/stm32f4xx_rcc.c ****   
 952:./Library/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 953:./Library/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 1031              		.loc 1 953 10
 1032 0014 FB68     		ldr	r3, [r7, #12]
 1033 0016 23F07843 		bic	r3, r3, #-134217728
 1034 001a FB60     		str	r3, [r7, #12]
 954:./Library/stm32f4xx_rcc.c **** 
 955:./Library/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 956:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 1035              		.loc 1 956 28
 1036 001c 7A68     		ldr	r2, [r7, #4]
 1037 001e 3B68     		ldr	r3, [r7]
 1038 0020 1343     		orrs	r3, r3, r2
 1039              		.loc 1 956 10
 1040 0022 FA68     		ldr	r2, [r7, #12]
 1041 0024 1343     		orrs	r3, r3, r2
 1042 0026 FB60     		str	r3, [r7, #12]
 957:./Library/stm32f4xx_rcc.c ****   
 958:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
 959:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1043              		.loc 1 959 6
 1044 0028 044A     		ldr	r2, .L54
 1045              		.loc 1 959 13
 1046 002a FB68     		ldr	r3, [r7, #12]
 1047 002c 9360     		str	r3, [r2, #8]
 960:./Library/stm32f4xx_rcc.c **** 
 961:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 962:./Library/stm32f4xx_rcc.c ****   RCC_MCO2Cmd(ENABLE);
 963:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 964:./Library/stm32f4xx_rcc.c **** }
 1048              		.loc 1 964 1
 1049 002e 00BF     		nop
 1050 0030 1437     		adds	r7, r7, #20
 1051              	.LCFI90:
 1052              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 36


 1053 0032 BD46     		mov	sp, r7
 1054              	.LCFI91:
 1055              		.cfi_def_cfa_register 13
 1056              		@ sp needed
 1057 0034 5DF8047B 		ldr	r7, [sp], #4
 1058              	.LCFI92:
 1059              		.cfi_restore 7
 1060              		.cfi_def_cfa_offset 0
 1061 0038 7047     		bx	lr
 1062              	.L55:
 1063 003a 00BF     		.align	2
 1064              	.L54:
 1065 003c 00380240 		.word	1073887232
 1066              		.cfi_endproc
 1067              	.LFE138:
 1069              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 1070              		.align	1
 1071              		.global	RCC_SYSCLKConfig
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1076              	RCC_SYSCLKConfig:
 1077              	.LFB139:
 965:./Library/stm32f4xx_rcc.c **** 
 966:./Library/stm32f4xx_rcc.c **** /**
 967:./Library/stm32f4xx_rcc.c ****   * @}
 968:./Library/stm32f4xx_rcc.c ****   */
 969:./Library/stm32f4xx_rcc.c **** 
 970:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 971:./Library/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 972:./Library/stm32f4xx_rcc.c ****  *
 973:./Library/stm32f4xx_rcc.c **** @verbatim   
 974:./Library/stm32f4xx_rcc.c ****  ===============================================================================
 975:./Library/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 976:./Library/stm32f4xx_rcc.c ****  ===============================================================================  
 977:./Library/stm32f4xx_rcc.c ****     [..]
 978:./Library/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 979:./Library/stm32f4xx_rcc.c ****       APB2 busses clocks.
 980:./Library/stm32f4xx_rcc.c ****   
 981:./Library/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 982:./Library/stm32f4xx_rcc.c ****           HSE and PLL.
 983:./Library/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 984:./Library/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 985:./Library/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 986:./Library/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 987:./Library/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 988:./Library/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 989:./Library/stm32f4xx_rcc.c **** 
 990:./Library/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 991:./Library/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 992:./Library/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 993:./Library/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 994:./Library/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 995:./Library/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 996:./Library/stm32f4xx_rcc.c ****              functions to configure this clock. 
 997:./Library/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 998:./Library/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 37


 999:./Library/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
1000:./Library/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
1001:./Library/stm32f4xx_rcc.c ****        
1002:./Library/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
1003:./Library/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
1004:./Library/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
1005:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1006:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1007:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1008:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1009:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1010:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1011:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1012:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1013:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1014:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1015:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1016:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1017:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1018:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1019:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1020:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1021:./Library/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1022:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1023:./Library/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1024:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1025:./Library/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
1026:./Library/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+
1027:./Library/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx/469xx/479xx devices, the maximum frequency of the SYSCLK and HCLK i
1028:./Library/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
1029:./Library/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1030:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1031:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1032:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1033:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1034:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1035:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1036:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1037:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1038:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1039:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1040:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1041:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1042:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1043:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1044:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1045:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1046:./Library/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1047:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1048:./Library/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1049:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1050:./Library/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
1051:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1052:./Library/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
1053:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1054:./Library/stm32f4xx_rcc.c ****    
1055:./Library/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 38


1056:./Library/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
1057:./Library/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1058:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1059:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1060:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1061:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1062:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1063:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1064:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1065:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1066:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1067:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1068:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1069:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1070:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
1071:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1072:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
1073:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1074:./Library/stm32f4xx_rcc.c **** 
1075:./Library/stm32f4xx_rcc.c ****       (#) For STM32F410xx/STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 
1076:./Library/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
1077:./Library/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1078:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1079:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1080:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1081:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1082:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1083:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1084:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
1085:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1086:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
1087:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1088:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
1089:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1090:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
1091:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1092:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
1093:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1094:./Library/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
1095:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1096:./Library/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
1097:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1098:./Library/stm32f4xx_rcc.c ****   
1099:./Library/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
1100:./Library/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
1101:./Library/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
1102:./Library/stm32f4xx_rcc.c ****           [..] 
1103:./Library/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx/469xx/479xx devices:
1104:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
1105:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
1106:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
1107:./Library/stm32f4xx_rcc.c ****           [..]  
1108:./Library/stm32f4xx_rcc.c ****           On STM32F401x devices:
1109:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
1110:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
1111:./Library/stm32f4xx_rcc.c ****           On STM32F410xx/STM32F411xE devices:
1112:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 39


1113:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
1114:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
1115:./Library/stm32f4xx_rcc.c **** 
1116:./Library/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
1117:./Library/stm32f4xx_rcc.c **** 
1118:./Library/stm32f4xx_rcc.c **** @endverbatim
1119:./Library/stm32f4xx_rcc.c ****   * @{
1120:./Library/stm32f4xx_rcc.c ****   */
1121:./Library/stm32f4xx_rcc.c **** 
1122:./Library/stm32f4xx_rcc.c **** /**
1123:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
1124:./Library/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
1125:./Library/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
1126:./Library/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
1127:./Library/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
1128:./Library/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
1129:./Library/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
1130:./Library/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
1131:./Library/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
1132:./Library/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
1133:./Library/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
1134:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
1135:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1136:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI: HSI selected as system clock source
1137:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
1138:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_
1139:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F
1140:./Library/stm32f4xx_rcc.c ****   * @retval None
1141:./Library/stm32f4xx_rcc.c ****   */
1142:./Library/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
1143:./Library/stm32f4xx_rcc.c **** {
 1078              		.loc 1 1143 1
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 16
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
 1083 0000 80B4     		push	{r7}
 1084              	.LCFI93:
 1085              		.cfi_def_cfa_offset 4
 1086              		.cfi_offset 7, -4
 1087 0002 85B0     		sub	sp, sp, #20
 1088              	.LCFI94:
 1089              		.cfi_def_cfa_offset 24
 1090 0004 00AF     		add	r7, sp, #0
 1091              	.LCFI95:
 1092              		.cfi_def_cfa_register 7
 1093 0006 7860     		str	r0, [r7, #4]
1144:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1094              		.loc 1 1144 12
 1095 0008 0023     		movs	r3, #0
 1096 000a FB60     		str	r3, [r7, #12]
1145:./Library/stm32f4xx_rcc.c **** 
1146:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1147:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
1148:./Library/stm32f4xx_rcc.c **** 
1149:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1097              		.loc 1 1149 15
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 40


 1098 000c 094B     		ldr	r3, .L57
 1099              		.loc 1 1149 10
 1100 000e 9B68     		ldr	r3, [r3, #8]
 1101 0010 FB60     		str	r3, [r7, #12]
1150:./Library/stm32f4xx_rcc.c **** 
1151:./Library/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
1152:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 1102              		.loc 1 1152 10
 1103 0012 FB68     		ldr	r3, [r7, #12]
 1104 0014 23F00303 		bic	r3, r3, #3
 1105 0018 FB60     		str	r3, [r7, #12]
1153:./Library/stm32f4xx_rcc.c **** 
1154:./Library/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
1155:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 1106              		.loc 1 1155 10
 1107 001a FA68     		ldr	r2, [r7, #12]
 1108 001c 7B68     		ldr	r3, [r7, #4]
 1109 001e 1343     		orrs	r3, r3, r2
 1110 0020 FB60     		str	r3, [r7, #12]
1156:./Library/stm32f4xx_rcc.c **** 
1157:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1158:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1111              		.loc 1 1158 6
 1112 0022 044A     		ldr	r2, .L57
 1113              		.loc 1 1158 13
 1114 0024 FB68     		ldr	r3, [r7, #12]
 1115 0026 9360     		str	r3, [r2, #8]
1159:./Library/stm32f4xx_rcc.c **** }
 1116              		.loc 1 1159 1
 1117 0028 00BF     		nop
 1118 002a 1437     		adds	r7, r7, #20
 1119              	.LCFI96:
 1120              		.cfi_def_cfa_offset 4
 1121 002c BD46     		mov	sp, r7
 1122              	.LCFI97:
 1123              		.cfi_def_cfa_register 13
 1124              		@ sp needed
 1125 002e 5DF8047B 		ldr	r7, [sp], #4
 1126              	.LCFI98:
 1127              		.cfi_restore 7
 1128              		.cfi_def_cfa_offset 0
 1129 0032 7047     		bx	lr
 1130              	.L58:
 1131              		.align	2
 1132              	.L57:
 1133 0034 00380240 		.word	1073887232
 1134              		.cfi_endproc
 1135              	.LFE139:
 1137              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 1138              		.align	1
 1139              		.global	RCC_GetSYSCLKSource
 1140              		.syntax unified
 1141              		.thumb
 1142              		.thumb_func
 1144              	RCC_GetSYSCLKSource:
 1145              	.LFB140:
1160:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 41


1161:./Library/stm32f4xx_rcc.c **** /**
1162:./Library/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
1163:./Library/stm32f4xx_rcc.c ****   * @param  None
1164:./Library/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
1165:./Library/stm32f4xx_rcc.c ****   *         of the following:
1166:./Library/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
1167:./Library/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
1168:./Library/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
1169:./Library/stm32f4xx_rcc.c ****   *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM3
1170:./Library/stm32f4xx_rcc.c ****   */
1171:./Library/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
1172:./Library/stm32f4xx_rcc.c **** {
 1146              		.loc 1 1172 1
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 1151 0000 80B4     		push	{r7}
 1152              	.LCFI99:
 1153              		.cfi_def_cfa_offset 4
 1154              		.cfi_offset 7, -4
 1155 0002 00AF     		add	r7, sp, #0
 1156              	.LCFI100:
 1157              		.cfi_def_cfa_register 7
1173:./Library/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 1158              		.loc 1 1173 24
 1159 0004 054B     		ldr	r3, .L61
 1160 0006 9B68     		ldr	r3, [r3, #8]
 1161              		.loc 1 1173 11
 1162 0008 DBB2     		uxtb	r3, r3
 1163 000a 03F00C03 		and	r3, r3, #12
 1164 000e DBB2     		uxtb	r3, r3
1174:./Library/stm32f4xx_rcc.c **** }
 1165              		.loc 1 1174 1
 1166 0010 1846     		mov	r0, r3
 1167 0012 BD46     		mov	sp, r7
 1168              	.LCFI101:
 1169              		.cfi_def_cfa_register 13
 1170              		@ sp needed
 1171 0014 5DF8047B 		ldr	r7, [sp], #4
 1172              	.LCFI102:
 1173              		.cfi_restore 7
 1174              		.cfi_def_cfa_offset 0
 1175 0018 7047     		bx	lr
 1176              	.L62:
 1177 001a 00BF     		.align	2
 1178              	.L61:
 1179 001c 00380240 		.word	1073887232
 1180              		.cfi_endproc
 1181              	.LFE140:
 1183              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 1184              		.align	1
 1185              		.global	RCC_HCLKConfig
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1190              	RCC_HCLKConfig:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 42


 1191              	.LFB141:
1175:./Library/stm32f4xx_rcc.c **** 
1176:./Library/stm32f4xx_rcc.c **** /**
1177:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
1178:./Library/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
1179:./Library/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
1180:./Library/stm32f4xx_rcc.c ****   *         (for more details refer to section above
1181:./Library/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
1182:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
1183:./Library/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
1184:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1185:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
1186:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
1187:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
1188:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
1189:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
1190:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
1191:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
1192:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
1193:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
1194:./Library/stm32f4xx_rcc.c ****   * @retval None
1195:./Library/stm32f4xx_rcc.c ****   */
1196:./Library/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
1197:./Library/stm32f4xx_rcc.c **** {
 1192              		.loc 1 1197 1
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 16
 1195              		@ frame_needed = 1, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 1197 0000 80B4     		push	{r7}
 1198              	.LCFI103:
 1199              		.cfi_def_cfa_offset 4
 1200              		.cfi_offset 7, -4
 1201 0002 85B0     		sub	sp, sp, #20
 1202              	.LCFI104:
 1203              		.cfi_def_cfa_offset 24
 1204 0004 00AF     		add	r7, sp, #0
 1205              	.LCFI105:
 1206              		.cfi_def_cfa_register 7
 1207 0006 7860     		str	r0, [r7, #4]
1198:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1208              		.loc 1 1198 12
 1209 0008 0023     		movs	r3, #0
 1210 000a FB60     		str	r3, [r7, #12]
1199:./Library/stm32f4xx_rcc.c ****   
1200:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1201:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
1202:./Library/stm32f4xx_rcc.c **** 
1203:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1211              		.loc 1 1203 15
 1212 000c 094B     		ldr	r3, .L64
 1213              		.loc 1 1203 10
 1214 000e 9B68     		ldr	r3, [r3, #8]
 1215 0010 FB60     		str	r3, [r7, #12]
1204:./Library/stm32f4xx_rcc.c **** 
1205:./Library/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
1206:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 43


 1216              		.loc 1 1206 10
 1217 0012 FB68     		ldr	r3, [r7, #12]
 1218 0014 23F0F003 		bic	r3, r3, #240
 1219 0018 FB60     		str	r3, [r7, #12]
1207:./Library/stm32f4xx_rcc.c **** 
1208:./Library/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
1209:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 1220              		.loc 1 1209 10
 1221 001a FA68     		ldr	r2, [r7, #12]
 1222 001c 7B68     		ldr	r3, [r7, #4]
 1223 001e 1343     		orrs	r3, r3, r2
 1224 0020 FB60     		str	r3, [r7, #12]
1210:./Library/stm32f4xx_rcc.c **** 
1211:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1212:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1225              		.loc 1 1212 6
 1226 0022 044A     		ldr	r2, .L64
 1227              		.loc 1 1212 13
 1228 0024 FB68     		ldr	r3, [r7, #12]
 1229 0026 9360     		str	r3, [r2, #8]
1213:./Library/stm32f4xx_rcc.c **** }
 1230              		.loc 1 1213 1
 1231 0028 00BF     		nop
 1232 002a 1437     		adds	r7, r7, #20
 1233              	.LCFI106:
 1234              		.cfi_def_cfa_offset 4
 1235 002c BD46     		mov	sp, r7
 1236              	.LCFI107:
 1237              		.cfi_def_cfa_register 13
 1238              		@ sp needed
 1239 002e 5DF8047B 		ldr	r7, [sp], #4
 1240              	.LCFI108:
 1241              		.cfi_restore 7
 1242              		.cfi_def_cfa_offset 0
 1243 0032 7047     		bx	lr
 1244              	.L65:
 1245              		.align	2
 1246              	.L64:
 1247 0034 00380240 		.word	1073887232
 1248              		.cfi_endproc
 1249              	.LFE141:
 1251              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 1252              		.align	1
 1253              		.global	RCC_PCLK1Config
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1258              	RCC_PCLK1Config:
 1259              	.LFB142:
1214:./Library/stm32f4xx_rcc.c **** 
1215:./Library/stm32f4xx_rcc.c **** /**
1216:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1217:./Library/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1218:./Library/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1219:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1220:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1221:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 44


1222:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1223:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1224:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1225:./Library/stm32f4xx_rcc.c ****   * @retval None
1226:./Library/stm32f4xx_rcc.c ****   */
1227:./Library/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1228:./Library/stm32f4xx_rcc.c **** {
 1260              		.loc 1 1228 1
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 16
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 1265 0000 80B4     		push	{r7}
 1266              	.LCFI109:
 1267              		.cfi_def_cfa_offset 4
 1268              		.cfi_offset 7, -4
 1269 0002 85B0     		sub	sp, sp, #20
 1270              	.LCFI110:
 1271              		.cfi_def_cfa_offset 24
 1272 0004 00AF     		add	r7, sp, #0
 1273              	.LCFI111:
 1274              		.cfi_def_cfa_register 7
 1275 0006 7860     		str	r0, [r7, #4]
1229:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1276              		.loc 1 1229 12
 1277 0008 0023     		movs	r3, #0
 1278 000a FB60     		str	r3, [r7, #12]
1230:./Library/stm32f4xx_rcc.c **** 
1231:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1232:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1233:./Library/stm32f4xx_rcc.c **** 
1234:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1279              		.loc 1 1234 15
 1280 000c 094B     		ldr	r3, .L67
 1281              		.loc 1 1234 10
 1282 000e 9B68     		ldr	r3, [r3, #8]
 1283 0010 FB60     		str	r3, [r7, #12]
1235:./Library/stm32f4xx_rcc.c **** 
1236:./Library/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1237:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 1284              		.loc 1 1237 10
 1285 0012 FB68     		ldr	r3, [r7, #12]
 1286 0014 23F4E053 		bic	r3, r3, #7168
 1287 0018 FB60     		str	r3, [r7, #12]
1238:./Library/stm32f4xx_rcc.c **** 
1239:./Library/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1240:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 1288              		.loc 1 1240 10
 1289 001a FA68     		ldr	r2, [r7, #12]
 1290 001c 7B68     		ldr	r3, [r7, #4]
 1291 001e 1343     		orrs	r3, r3, r2
 1292 0020 FB60     		str	r3, [r7, #12]
1241:./Library/stm32f4xx_rcc.c **** 
1242:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1243:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1293              		.loc 1 1243 6
 1294 0022 044A     		ldr	r2, .L67
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 45


 1295              		.loc 1 1243 13
 1296 0024 FB68     		ldr	r3, [r7, #12]
 1297 0026 9360     		str	r3, [r2, #8]
1244:./Library/stm32f4xx_rcc.c **** }
 1298              		.loc 1 1244 1
 1299 0028 00BF     		nop
 1300 002a 1437     		adds	r7, r7, #20
 1301              	.LCFI112:
 1302              		.cfi_def_cfa_offset 4
 1303 002c BD46     		mov	sp, r7
 1304              	.LCFI113:
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 002e 5DF8047B 		ldr	r7, [sp], #4
 1308              	.LCFI114:
 1309              		.cfi_restore 7
 1310              		.cfi_def_cfa_offset 0
 1311 0032 7047     		bx	lr
 1312              	.L68:
 1313              		.align	2
 1314              	.L67:
 1315 0034 00380240 		.word	1073887232
 1316              		.cfi_endproc
 1317              	.LFE142:
 1319              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 1320              		.align	1
 1321              		.global	RCC_PCLK2Config
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1326              	RCC_PCLK2Config:
 1327              	.LFB143:
1245:./Library/stm32f4xx_rcc.c **** 
1246:./Library/stm32f4xx_rcc.c **** /**
1247:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1248:./Library/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1249:./Library/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1250:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1251:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1252:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1253:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1254:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1255:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1256:./Library/stm32f4xx_rcc.c ****   * @retval None
1257:./Library/stm32f4xx_rcc.c ****   */
1258:./Library/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1259:./Library/stm32f4xx_rcc.c **** {
 1328              		.loc 1 1259 1
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 16
 1331              		@ frame_needed = 1, uses_anonymous_args = 0
 1332              		@ link register save eliminated.
 1333 0000 80B4     		push	{r7}
 1334              	.LCFI115:
 1335              		.cfi_def_cfa_offset 4
 1336              		.cfi_offset 7, -4
 1337 0002 85B0     		sub	sp, sp, #20
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 46


 1338              	.LCFI116:
 1339              		.cfi_def_cfa_offset 24
 1340 0004 00AF     		add	r7, sp, #0
 1341              	.LCFI117:
 1342              		.cfi_def_cfa_register 7
 1343 0006 7860     		str	r0, [r7, #4]
1260:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1344              		.loc 1 1260 12
 1345 0008 0023     		movs	r3, #0
 1346 000a FB60     		str	r3, [r7, #12]
1261:./Library/stm32f4xx_rcc.c **** 
1262:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1263:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1264:./Library/stm32f4xx_rcc.c **** 
1265:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1347              		.loc 1 1265 15
 1348 000c 0A4B     		ldr	r3, .L70
 1349              		.loc 1 1265 10
 1350 000e 9B68     		ldr	r3, [r3, #8]
 1351 0010 FB60     		str	r3, [r7, #12]
1266:./Library/stm32f4xx_rcc.c **** 
1267:./Library/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1268:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 1352              		.loc 1 1268 10
 1353 0012 FB68     		ldr	r3, [r7, #12]
 1354 0014 23F46043 		bic	r3, r3, #57344
 1355 0018 FB60     		str	r3, [r7, #12]
1269:./Library/stm32f4xx_rcc.c **** 
1270:./Library/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1271:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 1356              		.loc 1 1271 22
 1357 001a 7B68     		ldr	r3, [r7, #4]
 1358 001c DB00     		lsls	r3, r3, #3
 1359              		.loc 1 1271 10
 1360 001e FA68     		ldr	r2, [r7, #12]
 1361 0020 1343     		orrs	r3, r3, r2
 1362 0022 FB60     		str	r3, [r7, #12]
1272:./Library/stm32f4xx_rcc.c **** 
1273:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1274:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1363              		.loc 1 1274 6
 1364 0024 044A     		ldr	r2, .L70
 1365              		.loc 1 1274 13
 1366 0026 FB68     		ldr	r3, [r7, #12]
 1367 0028 9360     		str	r3, [r2, #8]
1275:./Library/stm32f4xx_rcc.c **** }
 1368              		.loc 1 1275 1
 1369 002a 00BF     		nop
 1370 002c 1437     		adds	r7, r7, #20
 1371              	.LCFI118:
 1372              		.cfi_def_cfa_offset 4
 1373 002e BD46     		mov	sp, r7
 1374              	.LCFI119:
 1375              		.cfi_def_cfa_register 13
 1376              		@ sp needed
 1377 0030 5DF8047B 		ldr	r7, [sp], #4
 1378              	.LCFI120:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 47


 1379              		.cfi_restore 7
 1380              		.cfi_def_cfa_offset 0
 1381 0034 7047     		bx	lr
 1382              	.L71:
 1383 0036 00BF     		.align	2
 1384              	.L70:
 1385 0038 00380240 		.word	1073887232
 1386              		.cfi_endproc
 1387              	.LFE143:
 1389              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1390              		.align	1
 1391              		.global	RCC_GetClocksFreq
 1392              		.syntax unified
 1393              		.thumb
 1394              		.thumb_func
 1396              	RCC_GetClocksFreq:
 1397              	.LFB144:
1276:./Library/stm32f4xx_rcc.c **** 
1277:./Library/stm32f4xx_rcc.c **** /**
1278:./Library/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1279:./Library/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.
1280:./Library/stm32f4xx_rcc.c ****   * 
1281:./Library/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1282:./Library/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1283:./Library/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1284:./Library/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1285:./Library/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1286:./Library/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1287:./Library/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1288:./Library/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1289:./Library/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1290:./Library/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1291:./Library/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1292:./Library/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1293:./Library/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1294:./Library/stm32f4xx_rcc.c ****   *                have wrong result.
1295:./Library/stm32f4xx_rcc.c ****   *                
1296:./Library/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1297:./Library/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1298:./Library/stm32f4xx_rcc.c ****   *   
1299:./Library/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1300:./Library/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1301:./Library/stm32f4xx_rcc.c ****   *     
1302:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1303:./Library/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1304:./Library/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1305:./Library/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1306:./Library/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1307:./Library/stm32f4xx_rcc.c ****   *    
1308:./Library/stm32f4xx_rcc.c ****   * @retval None
1309:./Library/stm32f4xx_rcc.c ****   */
1310:./Library/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1311:./Library/stm32f4xx_rcc.c **** {
 1398              		.loc 1 1311 1
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 32
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 48


 1402              		@ link register save eliminated.
 1403 0000 80B4     		push	{r7}
 1404              	.LCFI121:
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 7, -4
 1407 0002 89B0     		sub	sp, sp, #36
 1408              	.LCFI122:
 1409              		.cfi_def_cfa_offset 40
 1410 0004 00AF     		add	r7, sp, #0
 1411              	.LCFI123:
 1412              		.cfi_def_cfa_register 7
 1413 0006 7860     		str	r0, [r7, #4]
1312:./Library/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1414              		.loc 1 1312 12
 1415 0008 0023     		movs	r3, #0
 1416 000a BB61     		str	r3, [r7, #24]
 1417              		.loc 1 1312 21
 1418 000c 0023     		movs	r3, #0
 1419 000e 7B61     		str	r3, [r7, #20]
 1420              		.loc 1 1312 32
 1421 0010 0023     		movs	r3, #0
 1422 0012 FB61     		str	r3, [r7, #28]
 1423              		.loc 1 1312 44
 1424 0014 0223     		movs	r3, #2
 1425 0016 3B61     		str	r3, [r7, #16]
 1426              		.loc 1 1312 54
 1427 0018 0023     		movs	r3, #0
 1428 001a FB60     		str	r3, [r7, #12]
 1429              		.loc 1 1312 69
 1430 001c 0223     		movs	r3, #2
 1431 001e BB60     		str	r3, [r7, #8]
1313:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
1314:./Library/stm32f4xx_rcc.c ****   uint32_t pllr = 2;
1315:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1316:./Library/stm32f4xx_rcc.c ****   
1317:./Library/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1318:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1432              		.loc 1 1318 12
 1433 0020 4A4B     		ldr	r3, .L80
 1434 0022 9B68     		ldr	r3, [r3, #8]
 1435              		.loc 1 1318 7
 1436 0024 03F00C03 		and	r3, r3, #12
 1437 0028 BB61     		str	r3, [r7, #24]
1319:./Library/stm32f4xx_rcc.c ****   
1320:./Library/stm32f4xx_rcc.c ****   switch (tmp)
 1438              		.loc 1 1320 3
 1439 002a BB69     		ldr	r3, [r7, #24]
 1440 002c 082B     		cmp	r3, #8
 1441 002e 11D0     		beq	.L73
 1442 0030 BB69     		ldr	r3, [r7, #24]
 1443 0032 082B     		cmp	r3, #8
 1444 0034 44D8     		bhi	.L74
 1445 0036 BB69     		ldr	r3, [r7, #24]
 1446 0038 002B     		cmp	r3, #0
 1447 003a 03D0     		beq	.L75
 1448 003c BB69     		ldr	r3, [r7, #24]
 1449 003e 042B     		cmp	r3, #4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 49


 1450 0040 04D0     		beq	.L76
 1451 0042 3DE0     		b	.L74
 1452              	.L75:
1321:./Library/stm32f4xx_rcc.c ****   {
1322:./Library/stm32f4xx_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1323:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1453              		.loc 1 1323 34
 1454 0044 7B68     		ldr	r3, [r7, #4]
 1455 0046 424A     		ldr	r2, .L80+4
 1456 0048 1A60     		str	r2, [r3]
1324:./Library/stm32f4xx_rcc.c ****     break;
 1457              		.loc 1 1324 5
 1458 004a 3DE0     		b	.L77
 1459              	.L76:
1325:./Library/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
1326:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1460              		.loc 1 1326 34
 1461 004c 7B68     		ldr	r3, [r7, #4]
 1462 004e 414A     		ldr	r2, .L80+8
 1463 0050 1A60     		str	r2, [r3]
1327:./Library/stm32f4xx_rcc.c ****     break;
 1464              		.loc 1 1327 5
 1465 0052 39E0     		b	.L77
 1466              	.L73:
1328:./Library/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
1329:./Library/stm32f4xx_rcc.c ****     
1330:./Library/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1331:./Library/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLP
1332:./Library/stm32f4xx_rcc.c ****     */    
1333:./Library/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1467              		.loc 1 1333 21
 1468 0054 3D4B     		ldr	r3, .L80
 1469 0056 5B68     		ldr	r3, [r3, #4]
 1470              		.loc 1 1333 53
 1471 0058 9B0D     		lsrs	r3, r3, #22
 1472              		.loc 1 1333 15
 1473 005a 03F00103 		and	r3, r3, #1
 1474 005e FB60     		str	r3, [r7, #12]
1334:./Library/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1475              		.loc 1 1334 15
 1476 0060 3A4B     		ldr	r3, .L80
 1477 0062 5B68     		ldr	r3, [r3, #4]
 1478              		.loc 1 1334 10
 1479 0064 03F03F03 		and	r3, r3, #63
 1480 0068 BB60     		str	r3, [r7, #8]
1335:./Library/stm32f4xx_rcc.c ****     
1336:./Library/stm32f4xx_rcc.c ****     if (pllsource != 0)
 1481              		.loc 1 1336 8
 1482 006a FB68     		ldr	r3, [r7, #12]
 1483 006c 002B     		cmp	r3, #0
 1484 006e 0CD0     		beq	.L78
1337:./Library/stm32f4xx_rcc.c ****     {
1338:./Library/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1339:./Library/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1485              		.loc 1 1339 27
 1486 0070 384A     		ldr	r2, .L80+8
 1487 0072 BB68     		ldr	r3, [r7, #8]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 50


 1488 0074 B2FBF3F3 		udiv	r3, r2, r3
 1489              		.loc 1 1339 42
 1490 0078 344A     		ldr	r2, .L80
 1491 007a 5268     		ldr	r2, [r2, #4]
 1492              		.loc 1 1339 72
 1493 007c 9209     		lsrs	r2, r2, #6
 1494 007e C2F30802 		ubfx	r2, r2, #0, #9
 1495              		.loc 1 1339 14
 1496 0082 02FB03F3 		mul	r3, r2, r3
 1497 0086 FB61     		str	r3, [r7, #28]
 1498 0088 0BE0     		b	.L79
 1499              	.L78:
1340:./Library/stm32f4xx_rcc.c ****     }
1341:./Library/stm32f4xx_rcc.c ****     else
1342:./Library/stm32f4xx_rcc.c ****     {
1343:./Library/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1344:./Library/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1500              		.loc 1 1344 27
 1501 008a 314A     		ldr	r2, .L80+4
 1502 008c BB68     		ldr	r3, [r7, #8]
 1503 008e B2FBF3F3 		udiv	r3, r2, r3
 1504              		.loc 1 1344 42
 1505 0092 2E4A     		ldr	r2, .L80
 1506 0094 5268     		ldr	r2, [r2, #4]
 1507              		.loc 1 1344 72
 1508 0096 9209     		lsrs	r2, r2, #6
 1509 0098 C2F30802 		ubfx	r2, r2, #0, #9
 1510              		.loc 1 1344 14
 1511 009c 02FB03F3 		mul	r3, r2, r3
 1512 00a0 FB61     		str	r3, [r7, #28]
 1513              	.L79:
1345:./Library/stm32f4xx_rcc.c ****     }
1346:./Library/stm32f4xx_rcc.c ****     
1347:./Library/stm32f4xx_rcc.c ****     pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1514              		.loc 1 1347 18
 1515 00a2 2A4B     		ldr	r3, .L80
 1516 00a4 5B68     		ldr	r3, [r3, #4]
 1517              		.loc 1 1347 48
 1518 00a6 1B0C     		lsrs	r3, r3, #16
 1519 00a8 03F00303 		and	r3, r3, #3
 1520              		.loc 1 1347 54
 1521 00ac 0133     		adds	r3, r3, #1
 1522              		.loc 1 1347 10
 1523 00ae 5B00     		lsls	r3, r3, #1
 1524 00b0 3B61     		str	r3, [r7, #16]
1348:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1525              		.loc 1 1348 42
 1526 00b2 FA69     		ldr	r2, [r7, #28]
 1527 00b4 3B69     		ldr	r3, [r7, #16]
 1528 00b6 B2FBF3F2 		udiv	r2, r2, r3
 1529              		.loc 1 1348 34
 1530 00ba 7B68     		ldr	r3, [r7, #4]
 1531 00bc 1A60     		str	r2, [r3]
1349:./Library/stm32f4xx_rcc.c ****     break;
 1532              		.loc 1 1349 5
 1533 00be 03E0     		b	.L77
 1534              	.L74:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 51


1350:./Library/stm32f4xx_rcc.c **** 
1351:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1352:./Library/stm32f4xx_rcc.c ****   case 0x0C:  /* PLL R used as system clock  source */
1353:./Library/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1354:./Library/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1355:./Library/stm32f4xx_rcc.c ****     */    
1356:./Library/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1357:./Library/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1358:./Library/stm32f4xx_rcc.c ****     
1359:./Library/stm32f4xx_rcc.c ****     if (pllsource != 0)
1360:./Library/stm32f4xx_rcc.c ****     {
1361:./Library/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1362:./Library/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1363:./Library/stm32f4xx_rcc.c ****     }
1364:./Library/stm32f4xx_rcc.c ****     else
1365:./Library/stm32f4xx_rcc.c ****     {
1366:./Library/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1367:./Library/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1368:./Library/stm32f4xx_rcc.c ****     }
1369:./Library/stm32f4xx_rcc.c ****     
1370:./Library/stm32f4xx_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
1371:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
1372:./Library/stm32f4xx_rcc.c ****     break;
1373:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1374:./Library/stm32f4xx_rcc.c ****     
1375:./Library/stm32f4xx_rcc.c ****   default:
1376:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1535              		.loc 1 1376 34
 1536 00c0 7B68     		ldr	r3, [r7, #4]
 1537 00c2 234A     		ldr	r2, .L80+4
 1538 00c4 1A60     		str	r2, [r3]
1377:./Library/stm32f4xx_rcc.c ****     break;
 1539              		.loc 1 1377 5
 1540 00c6 00BF     		nop
 1541              	.L77:
1378:./Library/stm32f4xx_rcc.c ****   }
1379:./Library/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1380:./Library/stm32f4xx_rcc.c ****   
1381:./Library/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1382:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1542              		.loc 1 1382 12
 1543 00c8 204B     		ldr	r3, .L80
 1544 00ca 9B68     		ldr	r3, [r3, #8]
 1545              		.loc 1 1382 7
 1546 00cc 03F0F003 		and	r3, r3, #240
 1547 00d0 BB61     		str	r3, [r7, #24]
1383:./Library/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1548              		.loc 1 1383 7
 1549 00d2 BB69     		ldr	r3, [r7, #24]
 1550 00d4 1B09     		lsrs	r3, r3, #4
 1551 00d6 BB61     		str	r3, [r7, #24]
1384:./Library/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1552              		.loc 1 1384 27
 1553 00d8 1F4A     		ldr	r2, .L80+12
 1554 00da BB69     		ldr	r3, [r7, #24]
 1555 00dc 1344     		add	r3, r3, r2
 1556 00de 1B78     		ldrb	r3, [r3]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 52


 1557 00e0 DBB2     		uxtb	r3, r3
 1558              		.loc 1 1384 9
 1559 00e2 7B61     		str	r3, [r7, #20]
1385:./Library/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1386:./Library/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1560              		.loc 1 1386 42
 1561 00e4 7B68     		ldr	r3, [r7, #4]
 1562 00e6 1A68     		ldr	r2, [r3]
 1563              		.loc 1 1386 61
 1564 00e8 7B69     		ldr	r3, [r7, #20]
 1565 00ea DA40     		lsrs	r2, r2, r3
 1566              		.loc 1 1386 30
 1567 00ec 7B68     		ldr	r3, [r7, #4]
 1568 00ee 5A60     		str	r2, [r3, #4]
1387:./Library/stm32f4xx_rcc.c **** 
1388:./Library/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1389:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1569              		.loc 1 1389 12
 1570 00f0 164B     		ldr	r3, .L80
 1571 00f2 9B68     		ldr	r3, [r3, #8]
 1572              		.loc 1 1389 7
 1573 00f4 03F4E053 		and	r3, r3, #7168
 1574 00f8 BB61     		str	r3, [r7, #24]
1390:./Library/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1575              		.loc 1 1390 7
 1576 00fa BB69     		ldr	r3, [r7, #24]
 1577 00fc 9B0A     		lsrs	r3, r3, #10
 1578 00fe BB61     		str	r3, [r7, #24]
1391:./Library/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1579              		.loc 1 1391 27
 1580 0100 154A     		ldr	r2, .L80+12
 1581 0102 BB69     		ldr	r3, [r7, #24]
 1582 0104 1344     		add	r3, r3, r2
 1583 0106 1B78     		ldrb	r3, [r3]
 1584 0108 DBB2     		uxtb	r3, r3
 1585              		.loc 1 1391 9
 1586 010a 7B61     		str	r3, [r7, #20]
1392:./Library/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1393:./Library/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1587              		.loc 1 1393 43
 1588 010c 7B68     		ldr	r3, [r7, #4]
 1589 010e 5A68     		ldr	r2, [r3, #4]
 1590              		.loc 1 1393 60
 1591 0110 7B69     		ldr	r3, [r7, #20]
 1592 0112 DA40     		lsrs	r2, r2, r3
 1593              		.loc 1 1393 31
 1594 0114 7B68     		ldr	r3, [r7, #4]
 1595 0116 9A60     		str	r2, [r3, #8]
1394:./Library/stm32f4xx_rcc.c **** 
1395:./Library/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1396:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1596              		.loc 1 1396 12
 1597 0118 0C4B     		ldr	r3, .L80
 1598 011a 9B68     		ldr	r3, [r3, #8]
 1599              		.loc 1 1396 7
 1600 011c 03F46043 		and	r3, r3, #57344
 1601 0120 BB61     		str	r3, [r7, #24]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 53


1397:./Library/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1602              		.loc 1 1397 7
 1603 0122 BB69     		ldr	r3, [r7, #24]
 1604 0124 5B0B     		lsrs	r3, r3, #13
 1605 0126 BB61     		str	r3, [r7, #24]
1398:./Library/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1606              		.loc 1 1398 27
 1607 0128 0B4A     		ldr	r2, .L80+12
 1608 012a BB69     		ldr	r3, [r7, #24]
 1609 012c 1344     		add	r3, r3, r2
 1610 012e 1B78     		ldrb	r3, [r3]
 1611 0130 DBB2     		uxtb	r3, r3
 1612              		.loc 1 1398 9
 1613 0132 7B61     		str	r3, [r7, #20]
1399:./Library/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1400:./Library/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1614              		.loc 1 1400 43
 1615 0134 7B68     		ldr	r3, [r7, #4]
 1616 0136 5A68     		ldr	r2, [r3, #4]
 1617              		.loc 1 1400 60
 1618 0138 7B69     		ldr	r3, [r7, #20]
 1619 013a DA40     		lsrs	r2, r2, r3
 1620              		.loc 1 1400 31
 1621 013c 7B68     		ldr	r3, [r7, #4]
 1622 013e DA60     		str	r2, [r3, #12]
1401:./Library/stm32f4xx_rcc.c **** }
 1623              		.loc 1 1401 1
 1624 0140 00BF     		nop
 1625 0142 2437     		adds	r7, r7, #36
 1626              	.LCFI124:
 1627              		.cfi_def_cfa_offset 4
 1628 0144 BD46     		mov	sp, r7
 1629              	.LCFI125:
 1630              		.cfi_def_cfa_register 13
 1631              		@ sp needed
 1632 0146 5DF8047B 		ldr	r7, [sp], #4
 1633              	.LCFI126:
 1634              		.cfi_restore 7
 1635              		.cfi_def_cfa_offset 0
 1636 014a 7047     		bx	lr
 1637              	.L81:
 1638              		.align	2
 1639              	.L80:
 1640 014c 00380240 		.word	1073887232
 1641 0150 0024F400 		.word	16000000
 1642 0154 40787D01 		.word	25000000
 1643 0158 00000000 		.word	APBAHBPrescTable
 1644              		.cfi_endproc
 1645              	.LFE144:
 1647              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1648              		.align	1
 1649              		.global	RCC_RTCCLKConfig
 1650              		.syntax unified
 1651              		.thumb
 1652              		.thumb_func
 1654              	RCC_RTCCLKConfig:
 1655              	.LFB145:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 54


1402:./Library/stm32f4xx_rcc.c **** 
1403:./Library/stm32f4xx_rcc.c **** /**
1404:./Library/stm32f4xx_rcc.c ****   * @}
1405:./Library/stm32f4xx_rcc.c ****   */
1406:./Library/stm32f4xx_rcc.c **** 
1407:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1408:./Library/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1409:./Library/stm32f4xx_rcc.c ****  *
1410:./Library/stm32f4xx_rcc.c **** @verbatim   
1411:./Library/stm32f4xx_rcc.c ****  ===============================================================================
1412:./Library/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1413:./Library/stm32f4xx_rcc.c ****  ===============================================================================  
1414:./Library/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1415:./Library/stm32f4xx_rcc.c ****   
1416:./Library/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1417:./Library/stm32f4xx_rcc.c ****           by 2 to 31.
1418:./Library/stm32f4xx_rcc.c ****      
1419:./Library/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1420:./Library/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1421:./Library/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1422:./Library/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1423:./Library/stm32f4xx_rcc.c **** 
1424:./Library/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1425:./Library/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1426:./Library/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1427:./Library/stm32f4xx_rcc.c ****      
1428:./Library/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1429:./Library/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1430:./Library/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1431:./Library/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1432:./Library/stm32f4xx_rcc.c **** 
1433:./Library/stm32f4xx_rcc.c **** @endverbatim
1434:./Library/stm32f4xx_rcc.c ****   * @{
1435:./Library/stm32f4xx_rcc.c ****   */
1436:./Library/stm32f4xx_rcc.c **** 
1437:./Library/stm32f4xx_rcc.c **** /**
1438:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1439:./Library/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1440:./Library/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1441:./Library/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1442:./Library/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1443:./Library/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1444:./Library/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1445:./Library/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1446:./Library/stm32f4xx_rcc.c ****   *    
1447:./Library/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1448:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1449:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1450:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1451:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1452:./Library/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1453:./Library/stm32f4xx_rcc.c ****   *  
1454:./Library/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1455:./Library/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1456:./Library/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1457:./Library/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1458:./Library/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 55


1459:./Library/stm32f4xx_rcc.c ****   *         RTC clock source).
1460:./Library/stm32f4xx_rcc.c ****   *  
1461:./Library/stm32f4xx_rcc.c ****   * @retval None
1462:./Library/stm32f4xx_rcc.c ****   */
1463:./Library/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1464:./Library/stm32f4xx_rcc.c **** {
 1656              		.loc 1 1464 1
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 16
 1659              		@ frame_needed = 1, uses_anonymous_args = 0
 1660              		@ link register save eliminated.
 1661 0000 80B4     		push	{r7}
 1662              	.LCFI127:
 1663              		.cfi_def_cfa_offset 4
 1664              		.cfi_offset 7, -4
 1665 0002 85B0     		sub	sp, sp, #20
 1666              	.LCFI128:
 1667              		.cfi_def_cfa_offset 24
 1668 0004 00AF     		add	r7, sp, #0
 1669              	.LCFI129:
 1670              		.cfi_def_cfa_register 7
 1671 0006 7860     		str	r0, [r7, #4]
1465:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1672              		.loc 1 1465 12
 1673 0008 0023     		movs	r3, #0
 1674 000a FB60     		str	r3, [r7, #12]
1466:./Library/stm32f4xx_rcc.c **** 
1467:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1468:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1469:./Library/stm32f4xx_rcc.c **** 
1470:./Library/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1675              		.loc 1 1470 25
 1676 000c 7B68     		ldr	r3, [r7, #4]
 1677 000e 03F44073 		and	r3, r3, #768
 1678              		.loc 1 1470 6
 1679 0012 B3F5407F 		cmp	r3, #768
 1680 0016 11D1     		bne	.L83
1471:./Library/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1472:./Library/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1681              		.loc 1 1472 17
 1682 0018 0F4B     		ldr	r3, .L84
 1683              		.loc 1 1472 12
 1684 001a 9B68     		ldr	r3, [r3, #8]
 1685 001c FB60     		str	r3, [r7, #12]
1473:./Library/stm32f4xx_rcc.c **** 
1474:./Library/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1475:./Library/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1686              		.loc 1 1475 12
 1687 001e FB68     		ldr	r3, [r7, #12]
 1688 0020 23F4F813 		bic	r3, r3, #2031616
 1689 0024 FB60     		str	r3, [r7, #12]
1476:./Library/stm32f4xx_rcc.c **** 
1477:./Library/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1478:./Library/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1690              		.loc 1 1478 33
 1691 0026 7B68     		ldr	r3, [r7, #4]
 1692 0028 23F07043 		bic	r3, r3, #-268435456
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 56


 1693 002c 23F44073 		bic	r3, r3, #768
 1694              		.loc 1 1478 12
 1695 0030 FA68     		ldr	r2, [r7, #12]
 1696 0032 1343     		orrs	r3, r3, r2
 1697 0034 FB60     		str	r3, [r7, #12]
1479:./Library/stm32f4xx_rcc.c **** 
1480:./Library/stm32f4xx_rcc.c ****     /* Store the new value */
1481:./Library/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1698              		.loc 1 1481 8
 1699 0036 084A     		ldr	r2, .L84
 1700              		.loc 1 1481 15
 1701 0038 FB68     		ldr	r3, [r7, #12]
 1702 003a 9360     		str	r3, [r2, #8]
 1703              	.L83:
1482:./Library/stm32f4xx_rcc.c ****   }
1483:./Library/stm32f4xx_rcc.c ****     
1484:./Library/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1485:./Library/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1704              		.loc 1 1485 13
 1705 003c 064B     		ldr	r3, .L84
 1706 003e 1A6F     		ldr	r2, [r3, #112]
 1707              		.loc 1 1485 34
 1708 0040 7B68     		ldr	r3, [r7, #4]
 1709 0042 C3F30B03 		ubfx	r3, r3, #0, #12
 1710              		.loc 1 1485 13
 1711 0046 0449     		ldr	r1, .L84
 1712 0048 1343     		orrs	r3, r3, r2
 1713 004a 0B67     		str	r3, [r1, #112]
1486:./Library/stm32f4xx_rcc.c **** }
 1714              		.loc 1 1486 1
 1715 004c 00BF     		nop
 1716 004e 1437     		adds	r7, r7, #20
 1717              	.LCFI130:
 1718              		.cfi_def_cfa_offset 4
 1719 0050 BD46     		mov	sp, r7
 1720              	.LCFI131:
 1721              		.cfi_def_cfa_register 13
 1722              		@ sp needed
 1723 0052 5DF8047B 		ldr	r7, [sp], #4
 1724              	.LCFI132:
 1725              		.cfi_restore 7
 1726              		.cfi_def_cfa_offset 0
 1727 0056 7047     		bx	lr
 1728              	.L85:
 1729              		.align	2
 1730              	.L84:
 1731 0058 00380240 		.word	1073887232
 1732              		.cfi_endproc
 1733              	.LFE145:
 1735              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1736              		.align	1
 1737              		.global	RCC_RTCCLKCmd
 1738              		.syntax unified
 1739              		.thumb
 1740              		.thumb_func
 1742              	RCC_RTCCLKCmd:
 1743              	.LFB146:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 57


1487:./Library/stm32f4xx_rcc.c **** 
1488:./Library/stm32f4xx_rcc.c **** /**
1489:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1490:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1491:./Library/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1492:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1493:./Library/stm32f4xx_rcc.c ****   * @retval None
1494:./Library/stm32f4xx_rcc.c ****   */
1495:./Library/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1496:./Library/stm32f4xx_rcc.c **** {
 1744              		.loc 1 1496 1
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 8
 1747              		@ frame_needed = 1, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
 1749 0000 80B4     		push	{r7}
 1750              	.LCFI133:
 1751              		.cfi_def_cfa_offset 4
 1752              		.cfi_offset 7, -4
 1753 0002 83B0     		sub	sp, sp, #12
 1754              	.LCFI134:
 1755              		.cfi_def_cfa_offset 16
 1756 0004 00AF     		add	r7, sp, #0
 1757              	.LCFI135:
 1758              		.cfi_def_cfa_register 7
 1759 0006 0346     		mov	r3, r0
 1760 0008 FB71     		strb	r3, [r7, #7]
1497:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1498:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1499:./Library/stm32f4xx_rcc.c **** 
1500:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1761              		.loc 1 1500 3
 1762 000a 044A     		ldr	r2, .L87
 1763              		.loc 1 1500 38
 1764 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1765              		.loc 1 1500 36
 1766 000e 1360     		str	r3, [r2]
1501:./Library/stm32f4xx_rcc.c **** }
 1767              		.loc 1 1501 1
 1768 0010 00BF     		nop
 1769 0012 0C37     		adds	r7, r7, #12
 1770              	.LCFI136:
 1771              		.cfi_def_cfa_offset 4
 1772 0014 BD46     		mov	sp, r7
 1773              	.LCFI137:
 1774              		.cfi_def_cfa_register 13
 1775              		@ sp needed
 1776 0016 5DF8047B 		ldr	r7, [sp], #4
 1777              	.LCFI138:
 1778              		.cfi_restore 7
 1779              		.cfi_def_cfa_offset 0
 1780 001a 7047     		bx	lr
 1781              	.L88:
 1782              		.align	2
 1783              	.L87:
 1784 001c 3C0E4742 		.word	1111952956
 1785              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 58


 1786              	.LFE146:
 1788              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1789              		.align	1
 1790              		.global	RCC_BackupResetCmd
 1791              		.syntax unified
 1792              		.thumb
 1793              		.thumb_func
 1795              	RCC_BackupResetCmd:
 1796              	.LFB147:
1502:./Library/stm32f4xx_rcc.c **** 
1503:./Library/stm32f4xx_rcc.c **** /**
1504:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1505:./Library/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1506:./Library/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1507:./Library/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1508:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1509:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1510:./Library/stm32f4xx_rcc.c ****   * @retval None
1511:./Library/stm32f4xx_rcc.c ****   */
1512:./Library/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1513:./Library/stm32f4xx_rcc.c **** {
 1797              		.loc 1 1513 1
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 8
 1800              		@ frame_needed = 1, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
 1802 0000 80B4     		push	{r7}
 1803              	.LCFI139:
 1804              		.cfi_def_cfa_offset 4
 1805              		.cfi_offset 7, -4
 1806 0002 83B0     		sub	sp, sp, #12
 1807              	.LCFI140:
 1808              		.cfi_def_cfa_offset 16
 1809 0004 00AF     		add	r7, sp, #0
 1810              	.LCFI141:
 1811              		.cfi_def_cfa_register 7
 1812 0006 0346     		mov	r3, r0
 1813 0008 FB71     		strb	r3, [r7, #7]
1514:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1515:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1516:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1814              		.loc 1 1516 3
 1815 000a 044A     		ldr	r2, .L90
 1816              		.loc 1 1516 38
 1817 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1818              		.loc 1 1516 36
 1819 000e 1360     		str	r3, [r2]
1517:./Library/stm32f4xx_rcc.c **** }
 1820              		.loc 1 1517 1
 1821 0010 00BF     		nop
 1822 0012 0C37     		adds	r7, r7, #12
 1823              	.LCFI142:
 1824              		.cfi_def_cfa_offset 4
 1825 0014 BD46     		mov	sp, r7
 1826              	.LCFI143:
 1827              		.cfi_def_cfa_register 13
 1828              		@ sp needed
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 59


 1829 0016 5DF8047B 		ldr	r7, [sp], #4
 1830              	.LCFI144:
 1831              		.cfi_restore 7
 1832              		.cfi_def_cfa_offset 0
 1833 001a 7047     		bx	lr
 1834              	.L91:
 1835              		.align	2
 1836              	.L90:
 1837 001c 400E4742 		.word	1111952960
 1838              		.cfi_endproc
 1839              	.LFE147:
 1841              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1842              		.align	1
 1843              		.global	RCC_I2SCLKConfig
 1844              		.syntax unified
 1845              		.thumb
 1846              		.thumb_func
 1848              	RCC_I2SCLKConfig:
 1849              	.LFB148:
1518:./Library/stm32f4xx_rcc.c **** 
1519:./Library/stm32f4xx_rcc.c **** #if defined (STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1520:./Library/stm32f4xx_rcc.c **** /**
1521:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1522:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1523:./Library/stm32f4xx_rcc.c ****   *
1524:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SAPBx: specifies the APBx I2S clock source.
1525:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1526:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB1: I2S peripheral instance is on APB1 Bus
1527:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB2: I2S peripheral instance is on APB2 Bus
1528:./Library/stm32f4xx_rcc.c ****   *
1529:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1530:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1531:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1532:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1533:./Library/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1534:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLL: PLL clock used as I2S clock source
1535:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as I2S clock source
1536:./Library/stm32f4xx_rcc.c ****   * @retval None
1537:./Library/stm32f4xx_rcc.c ****   */
1538:./Library/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SAPBx, uint32_t RCC_I2SCLKSource)
1539:./Library/stm32f4xx_rcc.c **** {
1540:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1541:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1542:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2S_APBx(RCC_I2SAPBx));
1543:./Library/stm32f4xx_rcc.c ****   
1544:./Library/stm32f4xx_rcc.c ****   if(RCC_I2SAPBx == RCC_I2SBus_APB1)
1545:./Library/stm32f4xx_rcc.c ****   {
1546:./Library/stm32f4xx_rcc.c ****     /* Clear APB1 I2Sx clock source selection bits */
1547:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S1SRC;
1548:./Library/stm32f4xx_rcc.c ****     /* Set new APB1 I2Sx clock source*/
1549:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_I2SCLKSource;
1550:./Library/stm32f4xx_rcc.c ****   }
1551:./Library/stm32f4xx_rcc.c ****   else
1552:./Library/stm32f4xx_rcc.c ****   {
1553:./Library/stm32f4xx_rcc.c ****     /* Clear APB2 I2Sx clock source selection  bits */
1554:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S2SRC;
1555:./Library/stm32f4xx_rcc.c ****     /* Set new APB2 I2Sx clock source */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 60


1556:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_I2SCLKSource << 2);
1557:./Library/stm32f4xx_rcc.c ****   }
1558:./Library/stm32f4xx_rcc.c **** }
1559:./Library/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
1560:./Library/stm32f4xx_rcc.c **** /**
1561:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAIx clock source (SAIxCLK).
1562:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the SAIx APB clock.
1563:./Library/stm32f4xx_rcc.c ****   *
1564:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIInstance: specifies the SAIx clock source.
1565:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1566:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI1: SAI1 clock source selection
1567:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI2: SAI2 clock source selections
1568:./Library/stm32f4xx_rcc.c ****   *
1569:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAICLKSource: specifies the SAI clock source.
1570:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1571:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLSAI: PLLSAI clock used as SAI clock source
1572:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1573:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLL: PLL clock used as SAI clock source
1574:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock source
1575:./Library/stm32f4xx_rcc.c ****   * @retval None
1576:./Library/stm32f4xx_rcc.c ****   */
1577:./Library/stm32f4xx_rcc.c **** void RCC_SAICLKConfig(uint32_t RCC_SAIInstance, uint32_t RCC_SAICLKSource)
1578:./Library/stm32f4xx_rcc.c **** {
1579:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1580:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAICLK_SOURCE(RCC_SAICLKSource));
1581:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAI_INSTANCE(RCC_SAIInstance));
1582:./Library/stm32f4xx_rcc.c ****   
1583:./Library/stm32f4xx_rcc.c ****   if(RCC_SAIInstance == RCC_SAIInstance_SAI1)
1584:./Library/stm32f4xx_rcc.c ****   {
1585:./Library/stm32f4xx_rcc.c ****     /* Clear SAI1 clock source selection bits */
1586:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI1SRC;
1587:./Library/stm32f4xx_rcc.c ****     /* Set new SAI1 clock source */
1588:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_SAICLKSource;
1589:./Library/stm32f4xx_rcc.c ****   }
1590:./Library/stm32f4xx_rcc.c ****   else
1591:./Library/stm32f4xx_rcc.c ****   {
1592:./Library/stm32f4xx_rcc.c ****     /* Clear SAI2 clock source selection bits */
1593:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI2SRC;
1594:./Library/stm32f4xx_rcc.c ****     /* Set new SAI2 clock source */
1595:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_SAICLKSource << 2);
1596:./Library/stm32f4xx_rcc.c ****   }
1597:./Library/stm32f4xx_rcc.c **** }
1598:./Library/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1599:./Library/stm32f4xx_rcc.c **** 
1600:./Library/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1601:./Library/stm32f4xx_rcc.c **** /**
1602:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.      
1603:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1604:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1605:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1606:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1607:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1608:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1609:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLL: PLL clock used as SAI clock source
1610:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1611:./Library/stm32f4xx_rcc.c ****   * @retval None
1612:./Library/stm32f4xx_rcc.c ****   */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 61


1613:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1614:./Library/stm32f4xx_rcc.c **** {
1615:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1616:./Library/stm32f4xx_rcc.c ****   
1617:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1618:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1619:./Library/stm32f4xx_rcc.c ****   
1620:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1621:./Library/stm32f4xx_rcc.c **** 
1622:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1623:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1624:./Library/stm32f4xx_rcc.c **** 
1625:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1626:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1627:./Library/stm32f4xx_rcc.c **** 
1628:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1629:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1630:./Library/stm32f4xx_rcc.c **** }
1631:./Library/stm32f4xx_rcc.c **** 
1632:./Library/stm32f4xx_rcc.c **** /**
1633:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.      
1634:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1635:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1636:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1637:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1638:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1639:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1640:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLL: PLL clock used as SAI clock source
1641:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1642:./Library/stm32f4xx_rcc.c ****   * @retval None
1643:./Library/stm32f4xx_rcc.c ****   */
1644:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1645:./Library/stm32f4xx_rcc.c **** {
1646:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1647:./Library/stm32f4xx_rcc.c ****   
1648:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1649:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1650:./Library/stm32f4xx_rcc.c ****   
1651:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1652:./Library/stm32f4xx_rcc.c **** 
1653:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1654:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1655:./Library/stm32f4xx_rcc.c **** 
1656:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1657:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1658:./Library/stm32f4xx_rcc.c **** 
1659:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1660:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1661:./Library/stm32f4xx_rcc.c **** }
1662:./Library/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1663:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1664:./Library/stm32f4xx_rcc.c **** 
1665:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
1666:./Library/stm32f4xx_rcc.c **** /**
1667:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1668:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S clock.
1669:./Library/stm32f4xx_rcc.c ****   *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 62


1670:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1671:./Library/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1672:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLR: PLL VCO output clock divided by PLLR.
1673:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_EXT: External clock mapped on the I2S_CKIN pin.
1674:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLSRC: HSI/HSE depends on PLLSRC.
1675:./Library/stm32f4xx_rcc.c ****   * @retval None
1676:./Library/stm32f4xx_rcc.c ****   */
1677:./Library/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1678:./Library/stm32f4xx_rcc.c **** {
1679:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1680:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1681:./Library/stm32f4xx_rcc.c ****   
1682:./Library/stm32f4xx_rcc.c ****   /* Clear I2Sx clock source selection bits */
1683:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR &= ~RCC_DCKCFGR_I2SSRC;
1684:./Library/stm32f4xx_rcc.c ****   /* Set new I2Sx clock source*/
1685:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR |= RCC_I2SCLKSource;
1686:./Library/stm32f4xx_rcc.c **** }
1687:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
1688:./Library/stm32f4xx_rcc.c **** 
1689:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1690:./Library/stm32f4xx_rcc.c **** /**
1691:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1692:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1693:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1694:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1695:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1696:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1697:./Library/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1698:./Library/stm32f4xx_rcc.c ****   * @retval None
1699:./Library/stm32f4xx_rcc.c ****   */
1700:./Library/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1701:./Library/stm32f4xx_rcc.c **** {
 1850              		.loc 1 1701 1
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 8
 1853              		@ frame_needed = 1, uses_anonymous_args = 0
 1854              		@ link register save eliminated.
 1855 0000 80B4     		push	{r7}
 1856              	.LCFI145:
 1857              		.cfi_def_cfa_offset 4
 1858              		.cfi_offset 7, -4
 1859 0002 83B0     		sub	sp, sp, #12
 1860              	.LCFI146:
 1861              		.cfi_def_cfa_offset 16
 1862 0004 00AF     		add	r7, sp, #0
 1863              	.LCFI147:
 1864              		.cfi_def_cfa_register 7
 1865 0006 7860     		str	r0, [r7, #4]
1702:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1703:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1704:./Library/stm32f4xx_rcc.c **** 
1705:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 1866              		.loc 1 1705 3
 1867 0008 044A     		ldr	r2, .L93
 1868              		.loc 1 1705 37
 1869 000a 7B68     		ldr	r3, [r7, #4]
 1870 000c 1360     		str	r3, [r2]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 63


1706:./Library/stm32f4xx_rcc.c **** }
 1871              		.loc 1 1706 1
 1872 000e 00BF     		nop
 1873 0010 0C37     		adds	r7, r7, #12
 1874              	.LCFI148:
 1875              		.cfi_def_cfa_offset 4
 1876 0012 BD46     		mov	sp, r7
 1877              	.LCFI149:
 1878              		.cfi_def_cfa_register 13
 1879              		@ sp needed
 1880 0014 5DF8047B 		ldr	r7, [sp], #4
 1881              	.LCFI150:
 1882              		.cfi_restore 7
 1883              		.cfi_def_cfa_offset 0
 1884 0018 7047     		bx	lr
 1885              	.L94:
 1886 001a 00BF     		.align	2
 1887              	.L93:
 1888 001c 5C014742 		.word	1111949660
 1889              		.cfi_endproc
 1890              	.LFE148:
 1892              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1893              		.align	1
 1894              		.global	RCC_SAIPLLI2SClkDivConfig
 1895              		.syntax unified
 1896              		.thumb
 1897              		.thumb_func
 1899              	RCC_SAIPLLI2SClkDivConfig:
 1900              	.LFB149:
1707:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
1708:./Library/stm32f4xx_rcc.c **** 
1709:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1710:./Library/stm32f4xx_rcc.c **** /**
1711:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1712:./Library/stm32f4xx_rcc.c ****   * 
1713:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1714:./Library/stm32f4xx_rcc.c ****   *       
1715:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1716:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1717:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1718:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1719:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1720:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1721:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1722:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1723:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1724:./Library/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1725:./Library/stm32f4xx_rcc.c ****   * @retval None
1726:./Library/stm32f4xx_rcc.c ****   */
1727:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1728:./Library/stm32f4xx_rcc.c **** {
1729:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1730:./Library/stm32f4xx_rcc.c ****   
1731:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1732:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1733:./Library/stm32f4xx_rcc.c ****   
1734:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 64


1735:./Library/stm32f4xx_rcc.c **** 
1736:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1737:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1738:./Library/stm32f4xx_rcc.c **** 
1739:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1740:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1741:./Library/stm32f4xx_rcc.c **** 
1742:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1743:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1744:./Library/stm32f4xx_rcc.c **** }
1745:./Library/stm32f4xx_rcc.c **** 
1746:./Library/stm32f4xx_rcc.c **** /**
1747:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1748:./Library/stm32f4xx_rcc.c ****   * 
1749:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1750:./Library/stm32f4xx_rcc.c ****   *       
1751:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1752:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1753:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1754:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1755:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1756:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1757:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1758:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1759:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1760:./Library/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1761:./Library/stm32f4xx_rcc.c ****   * @retval None
1762:./Library/stm32f4xx_rcc.c ****   */
1763:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1764:./Library/stm32f4xx_rcc.c **** {
1765:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1766:./Library/stm32f4xx_rcc.c ****   
1767:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1768:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1769:./Library/stm32f4xx_rcc.c ****   
1770:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1771:./Library/stm32f4xx_rcc.c **** 
1772:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1773:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1774:./Library/stm32f4xx_rcc.c **** 
1775:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1776:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1777:./Library/stm32f4xx_rcc.c **** 
1778:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1779:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1780:./Library/stm32f4xx_rcc.c **** }
1781:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
1782:./Library/stm32f4xx_rcc.c **** 
1783:./Library/stm32f4xx_rcc.c **** /**
1784:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1785:./Library/stm32f4xx_rcc.c ****   * 
1786:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1787:./Library/stm32f4xx_rcc.c ****   *   
1788:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1789:./Library/stm32f4xx_rcc.c ****   *              
1790:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1791:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 65


1792:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1793:./Library/stm32f4xx_rcc.c ****   *              
1794:./Library/stm32f4xx_rcc.c ****   * @retval None
1795:./Library/stm32f4xx_rcc.c ****   */
1796:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1797:./Library/stm32f4xx_rcc.c **** {
 1901              		.loc 1 1797 1
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 16
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906 0000 80B4     		push	{r7}
 1907              	.LCFI151:
 1908              		.cfi_def_cfa_offset 4
 1909              		.cfi_offset 7, -4
 1910 0002 85B0     		sub	sp, sp, #20
 1911              	.LCFI152:
 1912              		.cfi_def_cfa_offset 24
 1913 0004 00AF     		add	r7, sp, #0
 1914              	.LCFI153:
 1915              		.cfi_def_cfa_register 7
 1916 0006 7860     		str	r0, [r7, #4]
1798:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1917              		.loc 1 1798 12
 1918 0008 0023     		movs	r3, #0
 1919 000a FB60     		str	r3, [r7, #12]
1799:./Library/stm32f4xx_rcc.c ****   
1800:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1801:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1802:./Library/stm32f4xx_rcc.c ****   
1803:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1920              		.loc 1 1803 15
 1921 000c 0B4B     		ldr	r3, .L96
 1922              		.loc 1 1803 10
 1923 000e D3F88C30 		ldr	r3, [r3, #140]
 1924 0012 FB60     		str	r3, [r7, #12]
1804:./Library/stm32f4xx_rcc.c **** 
1805:./Library/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1806:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1925              		.loc 1 1806 10
 1926 0014 FB68     		ldr	r3, [r7, #12]
 1927 0016 23F01F03 		bic	r3, r3, #31
 1928 001a FB60     		str	r3, [r7, #12]
1807:./Library/stm32f4xx_rcc.c **** 
1808:./Library/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1809:./Library/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1929              		.loc 1 1809 29
 1930 001c 7B68     		ldr	r3, [r7, #4]
 1931 001e 013B     		subs	r3, r3, #1
 1932              		.loc 1 1809 10
 1933 0020 FA68     		ldr	r2, [r7, #12]
 1934 0022 1343     		orrs	r3, r3, r2
 1935 0024 FB60     		str	r3, [r7, #12]
1810:./Library/stm32f4xx_rcc.c **** 
1811:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1812:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1936              		.loc 1 1812 6
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 66


 1937 0026 054A     		ldr	r2, .L96
 1938              		.loc 1 1812 16
 1939 0028 FB68     		ldr	r3, [r7, #12]
 1940 002a C2F88C30 		str	r3, [r2, #140]
1813:./Library/stm32f4xx_rcc.c **** }
 1941              		.loc 1 1813 1
 1942 002e 00BF     		nop
 1943 0030 1437     		adds	r7, r7, #20
 1944              	.LCFI154:
 1945              		.cfi_def_cfa_offset 4
 1946 0032 BD46     		mov	sp, r7
 1947              	.LCFI155:
 1948              		.cfi_def_cfa_register 13
 1949              		@ sp needed
 1950 0034 5DF8047B 		ldr	r7, [sp], #4
 1951              	.LCFI156:
 1952              		.cfi_restore 7
 1953              		.cfi_def_cfa_offset 0
 1954 0038 7047     		bx	lr
 1955              	.L97:
 1956 003a 00BF     		.align	2
 1957              	.L96:
 1958 003c 00380240 		.word	1073887232
 1959              		.cfi_endproc
 1960              	.LFE149:
 1962              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1963              		.align	1
 1964              		.global	RCC_SAIPLLSAIClkDivConfig
 1965              		.syntax unified
 1966              		.thumb
 1967              		.thumb_func
 1969              	RCC_SAIPLLSAIClkDivConfig:
 1970              	.LFB150:
1814:./Library/stm32f4xx_rcc.c **** 
1815:./Library/stm32f4xx_rcc.c **** /**
1816:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1817:./Library/stm32f4xx_rcc.c ****   * 
1818:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1819:./Library/stm32f4xx_rcc.c ****   *        
1820:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1821:./Library/stm32f4xx_rcc.c ****   *   
1822:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1823:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1824:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1825:./Library/stm32f4xx_rcc.c ****   *              
1826:./Library/stm32f4xx_rcc.c ****   * @retval None
1827:./Library/stm32f4xx_rcc.c ****   */
1828:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1829:./Library/stm32f4xx_rcc.c **** {
 1971              		.loc 1 1829 1
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 16
 1974              		@ frame_needed = 1, uses_anonymous_args = 0
 1975              		@ link register save eliminated.
 1976 0000 80B4     		push	{r7}
 1977              	.LCFI157:
 1978              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 67


 1979              		.cfi_offset 7, -4
 1980 0002 85B0     		sub	sp, sp, #20
 1981              	.LCFI158:
 1982              		.cfi_def_cfa_offset 24
 1983 0004 00AF     		add	r7, sp, #0
 1984              	.LCFI159:
 1985              		.cfi_def_cfa_register 7
 1986 0006 7860     		str	r0, [r7, #4]
1830:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1987              		.loc 1 1830 12
 1988 0008 0023     		movs	r3, #0
 1989 000a FB60     		str	r3, [r7, #12]
1831:./Library/stm32f4xx_rcc.c ****   
1832:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1833:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1834:./Library/stm32f4xx_rcc.c ****   
1835:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1990              		.loc 1 1835 15
 1991 000c 0B4B     		ldr	r3, .L99
 1992              		.loc 1 1835 10
 1993 000e D3F88C30 		ldr	r3, [r3, #140]
 1994 0012 FB60     		str	r3, [r7, #12]
1836:./Library/stm32f4xx_rcc.c **** 
1837:./Library/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1838:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1995              		.loc 1 1838 10
 1996 0014 FB68     		ldr	r3, [r7, #12]
 1997 0016 23F4F853 		bic	r3, r3, #7936
 1998 001a FB60     		str	r3, [r7, #12]
1839:./Library/stm32f4xx_rcc.c **** 
1840:./Library/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1841:./Library/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1999              		.loc 1 1841 30
 2000 001c 7B68     		ldr	r3, [r7, #4]
 2001 001e 013B     		subs	r3, r3, #1
 2002              		.loc 1 1841 35
 2003 0020 1B02     		lsls	r3, r3, #8
 2004              		.loc 1 1841 10
 2005 0022 FA68     		ldr	r2, [r7, #12]
 2006 0024 1343     		orrs	r3, r3, r2
 2007 0026 FB60     		str	r3, [r7, #12]
1842:./Library/stm32f4xx_rcc.c **** 
1843:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1844:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 2008              		.loc 1 1844 6
 2009 0028 044A     		ldr	r2, .L99
 2010              		.loc 1 1844 16
 2011 002a FB68     		ldr	r3, [r7, #12]
 2012 002c C2F88C30 		str	r3, [r2, #140]
1845:./Library/stm32f4xx_rcc.c **** }
 2013              		.loc 1 1845 1
 2014 0030 00BF     		nop
 2015 0032 1437     		adds	r7, r7, #20
 2016              	.LCFI160:
 2017              		.cfi_def_cfa_offset 4
 2018 0034 BD46     		mov	sp, r7
 2019              	.LCFI161:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 68


 2020              		.cfi_def_cfa_register 13
 2021              		@ sp needed
 2022 0036 5DF8047B 		ldr	r7, [sp], #4
 2023              	.LCFI162:
 2024              		.cfi_restore 7
 2025              		.cfi_def_cfa_offset 0
 2026 003a 7047     		bx	lr
 2027              	.L100:
 2028              		.align	2
 2029              	.L99:
 2030 003c 00380240 		.word	1073887232
 2031              		.cfi_endproc
 2032              	.LFE150:
 2034              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 2035              		.align	1
 2036              		.global	RCC_LTDCCLKDivConfig
 2037              		.syntax unified
 2038              		.thumb
 2039              		.thumb_func
 2041              	RCC_LTDCCLKDivConfig:
 2042              	.LFB151:
1846:./Library/stm32f4xx_rcc.c **** 
1847:./Library/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1848:./Library/stm32f4xx_rcc.c **** /**
1849:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1850:./Library/stm32f4xx_rcc.c ****   * 
1851:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1852:./Library/stm32f4xx_rcc.c ****   *   
1853:./Library/stm32f4xx_rcc.c ****   * @param   RCC_PLLI2SDivR: specifies the PLLI2S division factor for SAI1 clock.
1854:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1855:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2SR) / RCC_PLLI2SDivR 
1856:./Library/stm32f4xx_rcc.c ****   * @retval None
1857:./Library/stm32f4xx_rcc.c ****   */
1858:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SRClkDivConfig(uint32_t RCC_PLLI2SDivR)  
1859:./Library/stm32f4xx_rcc.c **** {
1860:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1861:./Library/stm32f4xx_rcc.c ****   
1862:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1863:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVR_VALUE(RCC_PLLI2SDivR));
1864:./Library/stm32f4xx_rcc.c ****   
1865:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1866:./Library/stm32f4xx_rcc.c **** 
1867:./Library/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVR[4:0] bits */
1868:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVR);
1869:./Library/stm32f4xx_rcc.c **** 
1870:./Library/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVR values */
1871:./Library/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivR-1);
1872:./Library/stm32f4xx_rcc.c **** 
1873:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1874:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1875:./Library/stm32f4xx_rcc.c **** }
1876:./Library/stm32f4xx_rcc.c **** 
1877:./Library/stm32f4xx_rcc.c **** /**
1878:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLL.
1879:./Library/stm32f4xx_rcc.c ****   * 
1880:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1881:./Library/stm32f4xx_rcc.c ****   *        
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 69


1882:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1883:./Library/stm32f4xx_rcc.c ****   *   
1884:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLDivR: specifies the PLL division factor for SAI1 clock.
1885:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1886:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLR) / RCC_PLLDivR 
1887:./Library/stm32f4xx_rcc.c ****   *              
1888:./Library/stm32f4xx_rcc.c ****   * @retval None
1889:./Library/stm32f4xx_rcc.c ****   */
1890:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLRClkDivConfig(uint32_t RCC_PLLDivR)  
1891:./Library/stm32f4xx_rcc.c **** {
1892:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1893:./Library/stm32f4xx_rcc.c ****   
1894:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1895:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_PLLDivR));
1896:./Library/stm32f4xx_rcc.c ****   
1897:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1898:./Library/stm32f4xx_rcc.c **** 
1899:./Library/stm32f4xx_rcc.c ****   /* Clear PLLDIVR[12:8] */
1900:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLDIVR);
1901:./Library/stm32f4xx_rcc.c **** 
1902:./Library/stm32f4xx_rcc.c ****   /* Set PLLDivR values */
1903:./Library/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLDivR - 1 ) << 8);
1904:./Library/stm32f4xx_rcc.c **** 
1905:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1906:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1907:./Library/stm32f4xx_rcc.c **** }
1908:./Library/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1909:./Library/stm32f4xx_rcc.c **** 
1910:./Library/stm32f4xx_rcc.c **** /**
1911:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1912:./Library/stm32f4xx_rcc.c ****   * 
1913:./Library/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F42xxx/43xxx/446xx/469xx/479xx Devices.
1914:./Library/stm32f4xx_rcc.c ****   *      
1915:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1916:./Library/stm32f4xx_rcc.c ****   *   
1917:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1918:./Library/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1919:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1920:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div2: LTDC clock = f(PLLSAI_R)/2
1921:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div4: LTDC clock = f(PLLSAI_R)/4
1922:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div8: LTDC clock = f(PLLSAI_R)/8
1923:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
1924:./Library/stm32f4xx_rcc.c ****   *            
1925:./Library/stm32f4xx_rcc.c ****   * @retval None
1926:./Library/stm32f4xx_rcc.c ****   */
1927:./Library/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1928:./Library/stm32f4xx_rcc.c **** {
 2043              		.loc 1 1928 1
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 16
 2046              		@ frame_needed = 1, uses_anonymous_args = 0
 2047              		@ link register save eliminated.
 2048 0000 80B4     		push	{r7}
 2049              	.LCFI163:
 2050              		.cfi_def_cfa_offset 4
 2051              		.cfi_offset 7, -4
 2052 0002 85B0     		sub	sp, sp, #20
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 70


 2053              	.LCFI164:
 2054              		.cfi_def_cfa_offset 24
 2055 0004 00AF     		add	r7, sp, #0
 2056              	.LCFI165:
 2057              		.cfi_def_cfa_register 7
 2058 0006 7860     		str	r0, [r7, #4]
1929:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 2059              		.loc 1 1929 12
 2060 0008 0023     		movs	r3, #0
 2061 000a FB60     		str	r3, [r7, #12]
1930:./Library/stm32f4xx_rcc.c ****   
1931:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1932:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1933:./Library/stm32f4xx_rcc.c ****   
1934:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 2062              		.loc 1 1934 15
 2063 000c 0A4B     		ldr	r3, .L102
 2064              		.loc 1 1934 10
 2065 000e D3F88C30 		ldr	r3, [r3, #140]
 2066 0012 FB60     		str	r3, [r7, #12]
1935:./Library/stm32f4xx_rcc.c **** 
1936:./Library/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1937:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 2067              		.loc 1 1937 10
 2068 0014 FB68     		ldr	r3, [r7, #12]
 2069 0016 23F44033 		bic	r3, r3, #196608
 2070 001a FB60     		str	r3, [r7, #12]
1938:./Library/stm32f4xx_rcc.c **** 
1939:./Library/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1940:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 2071              		.loc 1 1940 10
 2072 001c FA68     		ldr	r2, [r7, #12]
 2073 001e 7B68     		ldr	r3, [r7, #4]
 2074 0020 1343     		orrs	r3, r3, r2
 2075 0022 FB60     		str	r3, [r7, #12]
1941:./Library/stm32f4xx_rcc.c **** 
1942:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1943:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 2076              		.loc 1 1943 6
 2077 0024 044A     		ldr	r2, .L102
 2078              		.loc 1 1943 16
 2079 0026 FB68     		ldr	r3, [r7, #12]
 2080 0028 C2F88C30 		str	r3, [r2, #140]
1944:./Library/stm32f4xx_rcc.c **** }
 2081              		.loc 1 1944 1
 2082 002c 00BF     		nop
 2083 002e 1437     		adds	r7, r7, #20
 2084              	.LCFI166:
 2085              		.cfi_def_cfa_offset 4
 2086 0030 BD46     		mov	sp, r7
 2087              	.LCFI167:
 2088              		.cfi_def_cfa_register 13
 2089              		@ sp needed
 2090 0032 5DF8047B 		ldr	r7, [sp], #4
 2091              	.LCFI168:
 2092              		.cfi_restore 7
 2093              		.cfi_def_cfa_offset 0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 71


 2094 0036 7047     		bx	lr
 2095              	.L103:
 2096              		.align	2
 2097              	.L102:
 2098 0038 00380240 		.word	1073887232
 2099              		.cfi_endproc
 2100              	.LFE151:
 2102              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 2103              		.align	1
 2104              		.global	RCC_TIMCLKPresConfig
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2109              	RCC_TIMCLKPresConfig:
 2110              	.LFB152:
1945:./Library/stm32f4xx_rcc.c **** 
1946:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx)
1947:./Library/stm32f4xx_rcc.c **** /**
1948:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM clock source (DFSDMCLK).
1949:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1950:./Library/stm32f4xx_rcc.c ****   * @param  RCC_DFSDMCLKSource: specifies the DFSDM clock source.
1951:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1952:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_APB: APB clock used as DFSDM clock source.
1953:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_SYS: System clock used as DFSDM clock source.
1954:./Library/stm32f4xx_rcc.c ****   *                                        
1955:./Library/stm32f4xx_rcc.c ****   * @retval None
1956:./Library/stm32f4xx_rcc.c ****   */
1957:./Library/stm32f4xx_rcc.c **** void RCC_DFSDM1CLKConfig(uint32_t RCC_DFSDMCLKSource)
1958:./Library/stm32f4xx_rcc.c **** {
1959:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1960:./Library/stm32f4xx_rcc.c ****   
1961:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1962:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDM1CLK_SOURCE(RCC_DFSDMCLKSource));
1963:./Library/stm32f4xx_rcc.c ****   
1964:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1965:./Library/stm32f4xx_rcc.c **** 
1966:./Library/stm32f4xx_rcc.c ****   /* Clear CKDFSDM-SEL  bit */
1967:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1SEL;
1968:./Library/stm32f4xx_rcc.c **** 
1969:./Library/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL bit according to RCC_DFSDMCLKSource value */
1970:./Library/stm32f4xx_rcc.c ****   tmpreg |= (RCC_DFSDMCLKSource << 31) ;
1971:./Library/stm32f4xx_rcc.c **** 
1972:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1973:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1974:./Library/stm32f4xx_rcc.c **** }
1975:./Library/stm32f4xx_rcc.c **** 
1976:./Library/stm32f4xx_rcc.c **** /**
1977:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
1978:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1979:./Library/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM1ACLKSource: specifies the DFSDM clock source.
1980:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1981:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
1982:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
1983:./Library/stm32f4xx_rcc.c ****   *                                        
1984:./Library/stm32f4xx_rcc.c ****   * @retval None
1985:./Library/stm32f4xx_rcc.c ****   */
1986:./Library/stm32f4xx_rcc.c **** void RCC_DFSDM1ACLKConfig(uint32_t RCC_DFSDM1ACLKSource)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 72


1987:./Library/stm32f4xx_rcc.c **** {
1988:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1989:./Library/stm32f4xx_rcc.c ****   
1990:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1991:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMACLK_SOURCE(RCC_DFSDM1ACLKSource));
1992:./Library/stm32f4xx_rcc.c ****   
1993:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1994:./Library/stm32f4xx_rcc.c **** 
1995:./Library/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
1996:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
1997:./Library/stm32f4xx_rcc.c **** 
1998:./Library/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
1999:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDM1ACLKSource;
2000:./Library/stm32f4xx_rcc.c **** 
2001:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
2002:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2003:./Library/stm32f4xx_rcc.c **** }
2004:./Library/stm32f4xx_rcc.c **** 
2005:./Library/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
2006:./Library/stm32f4xx_rcc.c **** /**
2007:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
2008:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
2009:./Library/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM2ACLKSource: specifies the DFSDM clock source.
2010:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2011:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
2012:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
2013:./Library/stm32f4xx_rcc.c ****   *                                        
2014:./Library/stm32f4xx_rcc.c ****   * @retval None
2015:./Library/stm32f4xx_rcc.c ****   */
2016:./Library/stm32f4xx_rcc.c **** void RCC_DFSDM2ACLKConfig(uint32_t RCC_DFSDMACLKSource)
2017:./Library/stm32f4xx_rcc.c **** {
2018:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
2019:./Library/stm32f4xx_rcc.c ****   
2020:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2021:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMCLK_SOURCE(RCC_DFSDMACLKSource));
2022:./Library/stm32f4xx_rcc.c ****   
2023:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2024:./Library/stm32f4xx_rcc.c **** 
2025:./Library/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2026:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2027:./Library/stm32f4xx_rcc.c **** 
2028:./Library/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2029:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDMACLKSource;
2030:./Library/stm32f4xx_rcc.c **** 
2031:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
2032:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2033:./Library/stm32f4xx_rcc.c **** }
2034:./Library/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
2035:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx */
2036:./Library/stm32f4xx_rcc.c **** 
2037:./Library/stm32f4xx_rcc.c **** /**
2038:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
2039:./Library/stm32f4xx_rcc.c ****   * 
2040:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
2041:./Library/stm32f4xx_rcc.c ****   *   
2042:./Library/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
2043:./Library/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 73


2044:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
2045:./Library/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
2046:./Library/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
2047:./Library/stm32f4xx_rcc.c ****   *                 division by 4 or more.
2048:./Library/stm32f4xx_rcc.c ****   *                   
2049:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
2050:./Library/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
2051:./Library/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
2052:./Library/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
2053:./Library/stm32f4xx_rcc.c ****   * @retval None
2054:./Library/stm32f4xx_rcc.c ****   */
2055:./Library/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
2056:./Library/stm32f4xx_rcc.c **** {
 2111              		.loc 1 2056 1
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 8
 2114              		@ frame_needed = 1, uses_anonymous_args = 0
 2115              		@ link register save eliminated.
 2116 0000 80B4     		push	{r7}
 2117              	.LCFI169:
 2118              		.cfi_def_cfa_offset 4
 2119              		.cfi_offset 7, -4
 2120 0002 83B0     		sub	sp, sp, #12
 2121              	.LCFI170:
 2122              		.cfi_def_cfa_offset 16
 2123 0004 00AF     		add	r7, sp, #0
 2124              	.LCFI171:
 2125              		.cfi_def_cfa_register 7
 2126 0006 7860     		str	r0, [r7, #4]
2057:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2058:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
2059:./Library/stm32f4xx_rcc.c **** 
2060:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 2127              		.loc 1 2060 3
 2128 0008 044A     		ldr	r2, .L105
 2129              		.loc 1 2060 40
 2130 000a 7B68     		ldr	r3, [r7, #4]
 2131 000c 1360     		str	r3, [r2]
2061:./Library/stm32f4xx_rcc.c **** }
 2132              		.loc 1 2061 1
 2133 000e 00BF     		nop
 2134 0010 0C37     		adds	r7, r7, #12
 2135              	.LCFI172:
 2136              		.cfi_def_cfa_offset 4
 2137 0012 BD46     		mov	sp, r7
 2138              	.LCFI173:
 2139              		.cfi_def_cfa_register 13
 2140              		@ sp needed
 2141 0014 5DF8047B 		ldr	r7, [sp], #4
 2142              	.LCFI174:
 2143              		.cfi_restore 7
 2144              		.cfi_def_cfa_offset 0
 2145 0018 7047     		bx	lr
 2146              	.L106:
 2147 001a 00BF     		.align	2
 2148              	.L105:
 2149 001c E0114742 		.word	1111953888
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 74


 2150              		.cfi_endproc
 2151              	.LFE152:
 2153              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 2154              		.align	1
 2155              		.global	RCC_AHB1PeriphClockCmd
 2156              		.syntax unified
 2157              		.thumb
 2158              		.thumb_func
 2160              	RCC_AHB1PeriphClockCmd:
 2161              	.LFB153:
2062:./Library/stm32f4xx_rcc.c **** 
2063:./Library/stm32f4xx_rcc.c **** /**
2064:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
2065:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2066:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2067:./Library/stm32f4xx_rcc.c ****   *         using it.   
2068:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2069:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2070:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2071:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2072:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2073:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2074:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2075:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2076:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2077:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2078:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2079:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2080:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
2081:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2082:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2083:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
2084:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2085:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2086:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
2087:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2088:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2089:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2090:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2091:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2092:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2093:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2094:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2095:./Library/stm32f4xx_rcc.c ****   * @retval None
2096:./Library/stm32f4xx_rcc.c ****   */
2097:./Library/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2098:./Library/stm32f4xx_rcc.c **** {
 2162              		.loc 1 2098 1
 2163              		.cfi_startproc
 2164              		@ args = 0, pretend = 0, frame = 8
 2165              		@ frame_needed = 1, uses_anonymous_args = 0
 2166              		@ link register save eliminated.
 2167 0000 80B4     		push	{r7}
 2168              	.LCFI175:
 2169              		.cfi_def_cfa_offset 4
 2170              		.cfi_offset 7, -4
 2171 0002 83B0     		sub	sp, sp, #12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 75


 2172              	.LCFI176:
 2173              		.cfi_def_cfa_offset 16
 2174 0004 00AF     		add	r7, sp, #0
 2175              	.LCFI177:
 2176              		.cfi_def_cfa_register 7
 2177 0006 7860     		str	r0, [r7, #4]
 2178 0008 0B46     		mov	r3, r1
 2179 000a FB70     		strb	r3, [r7, #3]
2099:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2100:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
2101:./Library/stm32f4xx_rcc.c **** 
2102:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2103:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2180              		.loc 1 2103 6
 2181 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2182 000e 002B     		cmp	r3, #0
 2183 0010 06D0     		beq	.L108
2104:./Library/stm32f4xx_rcc.c ****   {
2105:./Library/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 2184              		.loc 1 2105 18
 2185 0012 0A4B     		ldr	r3, .L111
 2186 0014 1A6B     		ldr	r2, [r3, #48]
 2187 0016 0949     		ldr	r1, .L111
 2188 0018 7B68     		ldr	r3, [r7, #4]
 2189 001a 1343     		orrs	r3, r3, r2
 2190 001c 0B63     		str	r3, [r1, #48]
2106:./Library/stm32f4xx_rcc.c ****   }
2107:./Library/stm32f4xx_rcc.c ****   else
2108:./Library/stm32f4xx_rcc.c ****   {
2109:./Library/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
2110:./Library/stm32f4xx_rcc.c ****   }
2111:./Library/stm32f4xx_rcc.c **** }
 2191              		.loc 1 2111 1
 2192 001e 06E0     		b	.L110
 2193              	.L108:
2109:./Library/stm32f4xx_rcc.c ****   }
 2194              		.loc 1 2109 18
 2195 0020 064B     		ldr	r3, .L111
 2196 0022 1A6B     		ldr	r2, [r3, #48]
2109:./Library/stm32f4xx_rcc.c ****   }
 2197              		.loc 1 2109 21
 2198 0024 7B68     		ldr	r3, [r7, #4]
 2199 0026 DB43     		mvns	r3, r3
2109:./Library/stm32f4xx_rcc.c ****   }
 2200              		.loc 1 2109 18
 2201 0028 0449     		ldr	r1, .L111
 2202 002a 1340     		ands	r3, r3, r2
 2203 002c 0B63     		str	r3, [r1, #48]
 2204              	.L110:
 2205              		.loc 1 2111 1
 2206 002e 00BF     		nop
 2207 0030 0C37     		adds	r7, r7, #12
 2208              	.LCFI178:
 2209              		.cfi_def_cfa_offset 4
 2210 0032 BD46     		mov	sp, r7
 2211              	.LCFI179:
 2212              		.cfi_def_cfa_register 13
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 76


 2213              		@ sp needed
 2214 0034 5DF8047B 		ldr	r7, [sp], #4
 2215              	.LCFI180:
 2216              		.cfi_restore 7
 2217              		.cfi_def_cfa_offset 0
 2218 0038 7047     		bx	lr
 2219              	.L112:
 2220 003a 00BF     		.align	2
 2221              	.L111:
 2222 003c 00380240 		.word	1073887232
 2223              		.cfi_endproc
 2224              	.LFE153:
 2226              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 2227              		.align	1
 2228              		.global	RCC_AHB2PeriphClockCmd
 2229              		.syntax unified
 2230              		.thumb
 2231              		.thumb_func
 2233              	RCC_AHB2PeriphClockCmd:
 2234              	.LFB154:
2112:./Library/stm32f4xx_rcc.c **** 
2113:./Library/stm32f4xx_rcc.c **** /**
2114:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
2115:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2116:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2117:./Library/stm32f4xx_rcc.c ****   *         using it. 
2118:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2119:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2120:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2121:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2122:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2123:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2124:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2125:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2126:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2127:./Library/stm32f4xx_rcc.c ****   * @retval None
2128:./Library/stm32f4xx_rcc.c ****   */
2129:./Library/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2130:./Library/stm32f4xx_rcc.c **** {
 2235              		.loc 1 2130 1
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 8
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
 2240 0000 80B4     		push	{r7}
 2241              	.LCFI181:
 2242              		.cfi_def_cfa_offset 4
 2243              		.cfi_offset 7, -4
 2244 0002 83B0     		sub	sp, sp, #12
 2245              	.LCFI182:
 2246              		.cfi_def_cfa_offset 16
 2247 0004 00AF     		add	r7, sp, #0
 2248              	.LCFI183:
 2249              		.cfi_def_cfa_register 7
 2250 0006 7860     		str	r0, [r7, #4]
 2251 0008 0B46     		mov	r3, r1
 2252 000a FB70     		strb	r3, [r7, #3]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 77


2131:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2132:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2133:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2134:./Library/stm32f4xx_rcc.c **** 
2135:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2253              		.loc 1 2135 6
 2254 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2255 000e 002B     		cmp	r3, #0
 2256 0010 06D0     		beq	.L114
2136:./Library/stm32f4xx_rcc.c ****   {
2137:./Library/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 2257              		.loc 1 2137 18
 2258 0012 0A4B     		ldr	r3, .L117
 2259 0014 5A6B     		ldr	r2, [r3, #52]
 2260 0016 0949     		ldr	r1, .L117
 2261 0018 7B68     		ldr	r3, [r7, #4]
 2262 001a 1343     		orrs	r3, r3, r2
 2263 001c 4B63     		str	r3, [r1, #52]
2138:./Library/stm32f4xx_rcc.c ****   }
2139:./Library/stm32f4xx_rcc.c ****   else
2140:./Library/stm32f4xx_rcc.c ****   {
2141:./Library/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
2142:./Library/stm32f4xx_rcc.c ****   }
2143:./Library/stm32f4xx_rcc.c **** }
 2264              		.loc 1 2143 1
 2265 001e 06E0     		b	.L116
 2266              	.L114:
2141:./Library/stm32f4xx_rcc.c ****   }
 2267              		.loc 1 2141 18
 2268 0020 064B     		ldr	r3, .L117
 2269 0022 5A6B     		ldr	r2, [r3, #52]
2141:./Library/stm32f4xx_rcc.c ****   }
 2270              		.loc 1 2141 21
 2271 0024 7B68     		ldr	r3, [r7, #4]
 2272 0026 DB43     		mvns	r3, r3
2141:./Library/stm32f4xx_rcc.c ****   }
 2273              		.loc 1 2141 18
 2274 0028 0449     		ldr	r1, .L117
 2275 002a 1340     		ands	r3, r3, r2
 2276 002c 4B63     		str	r3, [r1, #52]
 2277              	.L116:
 2278              		.loc 1 2143 1
 2279 002e 00BF     		nop
 2280 0030 0C37     		adds	r7, r7, #12
 2281              	.LCFI184:
 2282              		.cfi_def_cfa_offset 4
 2283 0032 BD46     		mov	sp, r7
 2284              	.LCFI185:
 2285              		.cfi_def_cfa_register 13
 2286              		@ sp needed
 2287 0034 5DF8047B 		ldr	r7, [sp], #4
 2288              	.LCFI186:
 2289              		.cfi_restore 7
 2290              		.cfi_def_cfa_offset 0
 2291 0038 7047     		bx	lr
 2292              	.L118:
 2293 003a 00BF     		.align	2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 78


 2294              	.L117:
 2295 003c 00380240 		.word	1073887232
 2296              		.cfi_endproc
 2297              	.LFE154:
 2299              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 2300              		.align	1
 2301              		.global	RCC_APB1PeriphClockCmd
 2302              		.syntax unified
 2303              		.thumb
 2304              		.thumb_func
 2306              	RCC_APB1PeriphClockCmd:
 2307              	.LFB155:
2144:./Library/stm32f4xx_rcc.c **** 
2145:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2146:./Library/stm32f4xx_rcc.c **** /**
2147:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
2148:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2149:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2150:./Library/stm32f4xx_rcc.c ****   *         using it. 
2151:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2152:./Library/stm32f4xx_rcc.c ****   *          This parameter must be: 
2153:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2154:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2155:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2156:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2157:./Library/stm32f4xx_rcc.c ****   * @retval None
2158:./Library/stm32f4xx_rcc.c ****   */
2159:./Library/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2160:./Library/stm32f4xx_rcc.c **** {
2161:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2162:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
2163:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2164:./Library/stm32f4xx_rcc.c **** 
2165:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2166:./Library/stm32f4xx_rcc.c ****   {
2167:./Library/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
2168:./Library/stm32f4xx_rcc.c ****   }
2169:./Library/stm32f4xx_rcc.c ****   else
2170:./Library/stm32f4xx_rcc.c ****   {
2171:./Library/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
2172:./Library/stm32f4xx_rcc.c ****   }
2173:./Library/stm32f4xx_rcc.c **** }
2174:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2175:./Library/stm32f4xx_rcc.c **** 
2176:./Library/stm32f4xx_rcc.c **** /**
2177:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
2178:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2179:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2180:./Library/stm32f4xx_rcc.c ****   *         using it. 
2181:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2182:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2183:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2184:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2185:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2186:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2187:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2188:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 79


2189:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2190:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2191:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2192:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2193:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2194:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2195:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2196:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2197:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2198:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2199:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2200:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2201:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2202:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2203:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2204:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2205:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2206:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2207:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2208:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2209:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2210:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2211:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2212:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2213:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2214:./Library/stm32f4xx_rcc.c ****   * @retval None
2215:./Library/stm32f4xx_rcc.c ****   */
2216:./Library/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2217:./Library/stm32f4xx_rcc.c **** {
 2308              		.loc 1 2217 1
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 8
 2311              		@ frame_needed = 1, uses_anonymous_args = 0
 2312              		@ link register save eliminated.
 2313 0000 80B4     		push	{r7}
 2314              	.LCFI187:
 2315              		.cfi_def_cfa_offset 4
 2316              		.cfi_offset 7, -4
 2317 0002 83B0     		sub	sp, sp, #12
 2318              	.LCFI188:
 2319              		.cfi_def_cfa_offset 16
 2320 0004 00AF     		add	r7, sp, #0
 2321              	.LCFI189:
 2322              		.cfi_def_cfa_register 7
 2323 0006 7860     		str	r0, [r7, #4]
 2324 0008 0B46     		mov	r3, r1
 2325 000a FB70     		strb	r3, [r7, #3]
2218:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2219:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
2220:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2221:./Library/stm32f4xx_rcc.c **** 
2222:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2326              		.loc 1 2222 6
 2327 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2328 000e 002B     		cmp	r3, #0
 2329 0010 06D0     		beq	.L120
2223:./Library/stm32f4xx_rcc.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 80


2224:./Library/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 2330              		.loc 1 2224 18
 2331 0012 0A4B     		ldr	r3, .L123
 2332 0014 1A6C     		ldr	r2, [r3, #64]
 2333 0016 0949     		ldr	r1, .L123
 2334 0018 7B68     		ldr	r3, [r7, #4]
 2335 001a 1343     		orrs	r3, r3, r2
 2336 001c 0B64     		str	r3, [r1, #64]
2225:./Library/stm32f4xx_rcc.c ****   }
2226:./Library/stm32f4xx_rcc.c ****   else
2227:./Library/stm32f4xx_rcc.c ****   {
2228:./Library/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
2229:./Library/stm32f4xx_rcc.c ****   }
2230:./Library/stm32f4xx_rcc.c **** }
 2337              		.loc 1 2230 1
 2338 001e 06E0     		b	.L122
 2339              	.L120:
2228:./Library/stm32f4xx_rcc.c ****   }
 2340              		.loc 1 2228 18
 2341 0020 064B     		ldr	r3, .L123
 2342 0022 1A6C     		ldr	r2, [r3, #64]
2228:./Library/stm32f4xx_rcc.c ****   }
 2343              		.loc 1 2228 21
 2344 0024 7B68     		ldr	r3, [r7, #4]
 2345 0026 DB43     		mvns	r3, r3
2228:./Library/stm32f4xx_rcc.c ****   }
 2346              		.loc 1 2228 18
 2347 0028 0449     		ldr	r1, .L123
 2348 002a 1340     		ands	r3, r3, r2
 2349 002c 0B64     		str	r3, [r1, #64]
 2350              	.L122:
 2351              		.loc 1 2230 1
 2352 002e 00BF     		nop
 2353 0030 0C37     		adds	r7, r7, #12
 2354              	.LCFI190:
 2355              		.cfi_def_cfa_offset 4
 2356 0032 BD46     		mov	sp, r7
 2357              	.LCFI191:
 2358              		.cfi_def_cfa_register 13
 2359              		@ sp needed
 2360 0034 5DF8047B 		ldr	r7, [sp], #4
 2361              	.LCFI192:
 2362              		.cfi_restore 7
 2363              		.cfi_def_cfa_offset 0
 2364 0038 7047     		bx	lr
 2365              	.L124:
 2366 003a 00BF     		.align	2
 2367              	.L123:
 2368 003c 00380240 		.word	1073887232
 2369              		.cfi_endproc
 2370              	.LFE155:
 2372              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 2373              		.align	1
 2374              		.global	RCC_APB2PeriphClockCmd
 2375              		.syntax unified
 2376              		.thumb
 2377              		.thumb_func
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 81


 2379              	RCC_APB2PeriphClockCmd:
 2380              	.LFB156:
2231:./Library/stm32f4xx_rcc.c **** 
2232:./Library/stm32f4xx_rcc.c **** /**
2233:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
2234:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2235:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2236:./Library/stm32f4xx_rcc.c ****   *         using it.
2237:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2238:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2239:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2240:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2241:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2242:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2243:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2244:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2245:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2246:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2247:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2248:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2249:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2250:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2251:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2252:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2253:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2254:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2255:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2256:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2257:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2258:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2259:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2260:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2261:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2262:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2263:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2264:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2265:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2266:./Library/stm32f4xx_rcc.c ****   * @retval None
2267:./Library/stm32f4xx_rcc.c ****   */
2268:./Library/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2269:./Library/stm32f4xx_rcc.c **** {
 2381              		.loc 1 2269 1
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 8
 2384              		@ frame_needed = 1, uses_anonymous_args = 0
 2385              		@ link register save eliminated.
 2386 0000 80B4     		push	{r7}
 2387              	.LCFI193:
 2388              		.cfi_def_cfa_offset 4
 2389              		.cfi_offset 7, -4
 2390 0002 83B0     		sub	sp, sp, #12
 2391              	.LCFI194:
 2392              		.cfi_def_cfa_offset 16
 2393 0004 00AF     		add	r7, sp, #0
 2394              	.LCFI195:
 2395              		.cfi_def_cfa_register 7
 2396 0006 7860     		str	r0, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 82


 2397 0008 0B46     		mov	r3, r1
 2398 000a FB70     		strb	r3, [r7, #3]
2270:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2271:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2272:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2273:./Library/stm32f4xx_rcc.c **** 
2274:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2399              		.loc 1 2274 6
 2400 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2401 000e 002B     		cmp	r3, #0
 2402 0010 06D0     		beq	.L126
2275:./Library/stm32f4xx_rcc.c ****   {
2276:./Library/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 2403              		.loc 1 2276 18
 2404 0012 0A4B     		ldr	r3, .L129
 2405 0014 5A6C     		ldr	r2, [r3, #68]
 2406 0016 0949     		ldr	r1, .L129
 2407 0018 7B68     		ldr	r3, [r7, #4]
 2408 001a 1343     		orrs	r3, r3, r2
 2409 001c 4B64     		str	r3, [r1, #68]
2277:./Library/stm32f4xx_rcc.c ****   }
2278:./Library/stm32f4xx_rcc.c ****   else
2279:./Library/stm32f4xx_rcc.c ****   {
2280:./Library/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
2281:./Library/stm32f4xx_rcc.c ****   }
2282:./Library/stm32f4xx_rcc.c **** }
 2410              		.loc 1 2282 1
 2411 001e 06E0     		b	.L128
 2412              	.L126:
2280:./Library/stm32f4xx_rcc.c ****   }
 2413              		.loc 1 2280 18
 2414 0020 064B     		ldr	r3, .L129
 2415 0022 5A6C     		ldr	r2, [r3, #68]
2280:./Library/stm32f4xx_rcc.c ****   }
 2416              		.loc 1 2280 21
 2417 0024 7B68     		ldr	r3, [r7, #4]
 2418 0026 DB43     		mvns	r3, r3
2280:./Library/stm32f4xx_rcc.c ****   }
 2419              		.loc 1 2280 18
 2420 0028 0449     		ldr	r1, .L129
 2421 002a 1340     		ands	r3, r3, r2
 2422 002c 4B64     		str	r3, [r1, #68]
 2423              	.L128:
 2424              		.loc 1 2282 1
 2425 002e 00BF     		nop
 2426 0030 0C37     		adds	r7, r7, #12
 2427              	.LCFI196:
 2428              		.cfi_def_cfa_offset 4
 2429 0032 BD46     		mov	sp, r7
 2430              	.LCFI197:
 2431              		.cfi_def_cfa_register 13
 2432              		@ sp needed
 2433 0034 5DF8047B 		ldr	r7, [sp], #4
 2434              	.LCFI198:
 2435              		.cfi_restore 7
 2436              		.cfi_def_cfa_offset 0
 2437 0038 7047     		bx	lr
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 83


 2438              	.L130:
 2439 003a 00BF     		.align	2
 2440              	.L129:
 2441 003c 00380240 		.word	1073887232
 2442              		.cfi_endproc
 2443              	.LFE156:
 2445              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 2446              		.align	1
 2447              		.global	RCC_AHB1PeriphResetCmd
 2448              		.syntax unified
 2449              		.thumb
 2450              		.thumb_func
 2452              	RCC_AHB1PeriphResetCmd:
 2453              	.LFB157:
2283:./Library/stm32f4xx_rcc.c **** 
2284:./Library/stm32f4xx_rcc.c **** /**
2285:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
2286:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
2287:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2288:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
2289:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
2290:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
2291:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
2292:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
2293:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
2294:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2295:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2296:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
2297:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
2298:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
2299:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
2300:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
2301:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
2302:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
2303:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
2304:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
2305:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_RNG:     RNG clock for STM32F410xx devices   
2306:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2307:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2308:./Library/stm32f4xx_rcc.c ****   * @retval None
2309:./Library/stm32f4xx_rcc.c ****   */
2310:./Library/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2311:./Library/stm32f4xx_rcc.c **** {
 2454              		.loc 1 2311 1
 2455              		.cfi_startproc
 2456              		@ args = 0, pretend = 0, frame = 8
 2457              		@ frame_needed = 1, uses_anonymous_args = 0
 2458              		@ link register save eliminated.
 2459 0000 80B4     		push	{r7}
 2460              	.LCFI199:
 2461              		.cfi_def_cfa_offset 4
 2462              		.cfi_offset 7, -4
 2463 0002 83B0     		sub	sp, sp, #12
 2464              	.LCFI200:
 2465              		.cfi_def_cfa_offset 16
 2466 0004 00AF     		add	r7, sp, #0
 2467              	.LCFI201:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 84


 2468              		.cfi_def_cfa_register 7
 2469 0006 7860     		str	r0, [r7, #4]
 2470 0008 0B46     		mov	r3, r1
 2471 000a FB70     		strb	r3, [r7, #3]
2312:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2313:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
2314:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2315:./Library/stm32f4xx_rcc.c **** 
2316:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2472              		.loc 1 2316 6
 2473 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2474 000e 002B     		cmp	r3, #0
 2475 0010 06D0     		beq	.L132
2317:./Library/stm32f4xx_rcc.c ****   {
2318:./Library/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 2476              		.loc 1 2318 19
 2477 0012 0A4B     		ldr	r3, .L135
 2478 0014 1A69     		ldr	r2, [r3, #16]
 2479 0016 0949     		ldr	r1, .L135
 2480 0018 7B68     		ldr	r3, [r7, #4]
 2481 001a 1343     		orrs	r3, r3, r2
 2482 001c 0B61     		str	r3, [r1, #16]
2319:./Library/stm32f4xx_rcc.c ****   }
2320:./Library/stm32f4xx_rcc.c ****   else
2321:./Library/stm32f4xx_rcc.c ****   {
2322:./Library/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
2323:./Library/stm32f4xx_rcc.c ****   }
2324:./Library/stm32f4xx_rcc.c **** }
 2483              		.loc 1 2324 1
 2484 001e 06E0     		b	.L134
 2485              	.L132:
2322:./Library/stm32f4xx_rcc.c ****   }
 2486              		.loc 1 2322 19
 2487 0020 064B     		ldr	r3, .L135
 2488 0022 1A69     		ldr	r2, [r3, #16]
2322:./Library/stm32f4xx_rcc.c ****   }
 2489              		.loc 1 2322 22
 2490 0024 7B68     		ldr	r3, [r7, #4]
 2491 0026 DB43     		mvns	r3, r3
2322:./Library/stm32f4xx_rcc.c ****   }
 2492              		.loc 1 2322 19
 2493 0028 0449     		ldr	r1, .L135
 2494 002a 1340     		ands	r3, r3, r2
 2495 002c 0B61     		str	r3, [r1, #16]
 2496              	.L134:
 2497              		.loc 1 2324 1
 2498 002e 00BF     		nop
 2499 0030 0C37     		adds	r7, r7, #12
 2500              	.LCFI202:
 2501              		.cfi_def_cfa_offset 4
 2502 0032 BD46     		mov	sp, r7
 2503              	.LCFI203:
 2504              		.cfi_def_cfa_register 13
 2505              		@ sp needed
 2506 0034 5DF8047B 		ldr	r7, [sp], #4
 2507              	.LCFI204:
 2508              		.cfi_restore 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 85


 2509              		.cfi_def_cfa_offset 0
 2510 0038 7047     		bx	lr
 2511              	.L136:
 2512 003a 00BF     		.align	2
 2513              	.L135:
 2514 003c 00380240 		.word	1073887232
 2515              		.cfi_endproc
 2516              	.LFE157:
 2518              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 2519              		.align	1
 2520              		.global	RCC_AHB2PeriphResetCmd
 2521              		.syntax unified
 2522              		.thumb
 2523              		.thumb_func
 2525              	RCC_AHB2PeriphResetCmd:
 2526              	.LFB158:
2325:./Library/stm32f4xx_rcc.c **** 
2326:./Library/stm32f4xx_rcc.c **** /**
2327:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
2328:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
2329:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2330:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2331:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2332:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2333:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock for STM32F40_41xxx/STM32F412xG/STM32F413_423xx
2334:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2335:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2336:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2337:./Library/stm32f4xx_rcc.c ****   * @retval None
2338:./Library/stm32f4xx_rcc.c ****   */
2339:./Library/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2340:./Library/stm32f4xx_rcc.c **** {
 2527              		.loc 1 2340 1
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 8
 2530              		@ frame_needed = 1, uses_anonymous_args = 0
 2531              		@ link register save eliminated.
 2532 0000 80B4     		push	{r7}
 2533              	.LCFI205:
 2534              		.cfi_def_cfa_offset 4
 2535              		.cfi_offset 7, -4
 2536 0002 83B0     		sub	sp, sp, #12
 2537              	.LCFI206:
 2538              		.cfi_def_cfa_offset 16
 2539 0004 00AF     		add	r7, sp, #0
 2540              	.LCFI207:
 2541              		.cfi_def_cfa_register 7
 2542 0006 7860     		str	r0, [r7, #4]
 2543 0008 0B46     		mov	r3, r1
 2544 000a FB70     		strb	r3, [r7, #3]
2341:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2342:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2343:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2344:./Library/stm32f4xx_rcc.c **** 
2345:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2545              		.loc 1 2345 6
 2546 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 86


 2547 000e 002B     		cmp	r3, #0
 2548 0010 06D0     		beq	.L138
2346:./Library/stm32f4xx_rcc.c ****   {
2347:./Library/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 2549              		.loc 1 2347 19
 2550 0012 0A4B     		ldr	r3, .L141
 2551 0014 5A69     		ldr	r2, [r3, #20]
 2552 0016 0949     		ldr	r1, .L141
 2553 0018 7B68     		ldr	r3, [r7, #4]
 2554 001a 1343     		orrs	r3, r3, r2
 2555 001c 4B61     		str	r3, [r1, #20]
2348:./Library/stm32f4xx_rcc.c ****   }
2349:./Library/stm32f4xx_rcc.c ****   else
2350:./Library/stm32f4xx_rcc.c ****   {
2351:./Library/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
2352:./Library/stm32f4xx_rcc.c ****   }
2353:./Library/stm32f4xx_rcc.c **** }
 2556              		.loc 1 2353 1
 2557 001e 06E0     		b	.L140
 2558              	.L138:
2351:./Library/stm32f4xx_rcc.c ****   }
 2559              		.loc 1 2351 19
 2560 0020 064B     		ldr	r3, .L141
 2561 0022 5A69     		ldr	r2, [r3, #20]
2351:./Library/stm32f4xx_rcc.c ****   }
 2562              		.loc 1 2351 22
 2563 0024 7B68     		ldr	r3, [r7, #4]
 2564 0026 DB43     		mvns	r3, r3
2351:./Library/stm32f4xx_rcc.c ****   }
 2565              		.loc 1 2351 19
 2566 0028 0449     		ldr	r1, .L141
 2567 002a 1340     		ands	r3, r3, r2
 2568 002c 4B61     		str	r3, [r1, #20]
 2569              	.L140:
 2570              		.loc 1 2353 1
 2571 002e 00BF     		nop
 2572 0030 0C37     		adds	r7, r7, #12
 2573              	.LCFI208:
 2574              		.cfi_def_cfa_offset 4
 2575 0032 BD46     		mov	sp, r7
 2576              	.LCFI209:
 2577              		.cfi_def_cfa_register 13
 2578              		@ sp needed
 2579 0034 5DF8047B 		ldr	r7, [sp], #4
 2580              	.LCFI210:
 2581              		.cfi_restore 7
 2582              		.cfi_def_cfa_offset 0
 2583 0038 7047     		bx	lr
 2584              	.L142:
 2585 003a 00BF     		.align	2
 2586              	.L141:
 2587 003c 00380240 		.word	1073887232
 2588              		.cfi_endproc
 2589              	.LFE158:
 2591              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 2592              		.align	1
 2593              		.global	RCC_APB1PeriphResetCmd
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 87


 2594              		.syntax unified
 2595              		.thumb
 2596              		.thumb_func
 2598              	RCC_APB1PeriphResetCmd:
 2599              	.LFB159:
2354:./Library/stm32f4xx_rcc.c **** 
2355:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2356:./Library/stm32f4xx_rcc.c **** /**
2357:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
2358:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
2359:./Library/stm32f4xx_rcc.c ****   *          This parameter must be: 
2360:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG, STM32F413_423xx and STM32F4
2361:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F446xx/STM32F469_479xx devices)
2362:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2363:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2364:./Library/stm32f4xx_rcc.c ****   * @retval None
2365:./Library/stm32f4xx_rcc.c ****   */
2366:./Library/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2367:./Library/stm32f4xx_rcc.c **** {
2368:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2369:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2370:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2371:./Library/stm32f4xx_rcc.c **** 
2372:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2373:./Library/stm32f4xx_rcc.c ****   {
2374:./Library/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
2375:./Library/stm32f4xx_rcc.c ****   }
2376:./Library/stm32f4xx_rcc.c ****   else
2377:./Library/stm32f4xx_rcc.c ****   {
2378:./Library/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
2379:./Library/stm32f4xx_rcc.c ****   }
2380:./Library/stm32f4xx_rcc.c **** }
2381:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2382:./Library/stm32f4xx_rcc.c **** 
2383:./Library/stm32f4xx_rcc.c **** /**
2384:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
2385:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
2386:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2387:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2388:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2389:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2390:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2391:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2392:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2393:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2394:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2395:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2396:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2397:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2398:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2399:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2400:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2401:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2402:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2403:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2404:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2405:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 88


2406:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2407:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2408:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2409:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2410:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2411:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock(STM32F446xx devices)
2412:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2413:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2414:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2415:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
2416:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2417:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2418:./Library/stm32f4xx_rcc.c ****   * @retval None
2419:./Library/stm32f4xx_rcc.c ****   */
2420:./Library/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2421:./Library/stm32f4xx_rcc.c **** {
 2600              		.loc 1 2421 1
 2601              		.cfi_startproc
 2602              		@ args = 0, pretend = 0, frame = 8
 2603              		@ frame_needed = 1, uses_anonymous_args = 0
 2604              		@ link register save eliminated.
 2605 0000 80B4     		push	{r7}
 2606              	.LCFI211:
 2607              		.cfi_def_cfa_offset 4
 2608              		.cfi_offset 7, -4
 2609 0002 83B0     		sub	sp, sp, #12
 2610              	.LCFI212:
 2611              		.cfi_def_cfa_offset 16
 2612 0004 00AF     		add	r7, sp, #0
 2613              	.LCFI213:
 2614              		.cfi_def_cfa_register 7
 2615 0006 7860     		str	r0, [r7, #4]
 2616 0008 0B46     		mov	r3, r1
 2617 000a FB70     		strb	r3, [r7, #3]
2422:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2423:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2424:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2425:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2618              		.loc 1 2425 6
 2619 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2620 000e 002B     		cmp	r3, #0
 2621 0010 06D0     		beq	.L144
2426:./Library/stm32f4xx_rcc.c ****   {
2427:./Library/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 2622              		.loc 1 2427 19
 2623 0012 0A4B     		ldr	r3, .L147
 2624 0014 1A6A     		ldr	r2, [r3, #32]
 2625 0016 0949     		ldr	r1, .L147
 2626 0018 7B68     		ldr	r3, [r7, #4]
 2627 001a 1343     		orrs	r3, r3, r2
 2628 001c 0B62     		str	r3, [r1, #32]
2428:./Library/stm32f4xx_rcc.c ****   }
2429:./Library/stm32f4xx_rcc.c ****   else
2430:./Library/stm32f4xx_rcc.c ****   {
2431:./Library/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
2432:./Library/stm32f4xx_rcc.c ****   }
2433:./Library/stm32f4xx_rcc.c **** }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 89


 2629              		.loc 1 2433 1
 2630 001e 06E0     		b	.L146
 2631              	.L144:
2431:./Library/stm32f4xx_rcc.c ****   }
 2632              		.loc 1 2431 19
 2633 0020 064B     		ldr	r3, .L147
 2634 0022 1A6A     		ldr	r2, [r3, #32]
2431:./Library/stm32f4xx_rcc.c ****   }
 2635              		.loc 1 2431 22
 2636 0024 7B68     		ldr	r3, [r7, #4]
 2637 0026 DB43     		mvns	r3, r3
2431:./Library/stm32f4xx_rcc.c ****   }
 2638              		.loc 1 2431 19
 2639 0028 0449     		ldr	r1, .L147
 2640 002a 1340     		ands	r3, r3, r2
 2641 002c 0B62     		str	r3, [r1, #32]
 2642              	.L146:
 2643              		.loc 1 2433 1
 2644 002e 00BF     		nop
 2645 0030 0C37     		adds	r7, r7, #12
 2646              	.LCFI214:
 2647              		.cfi_def_cfa_offset 4
 2648 0032 BD46     		mov	sp, r7
 2649              	.LCFI215:
 2650              		.cfi_def_cfa_register 13
 2651              		@ sp needed
 2652 0034 5DF8047B 		ldr	r7, [sp], #4
 2653              	.LCFI216:
 2654              		.cfi_restore 7
 2655              		.cfi_def_cfa_offset 0
 2656 0038 7047     		bx	lr
 2657              	.L148:
 2658 003a 00BF     		.align	2
 2659              	.L147:
 2660 003c 00380240 		.word	1073887232
 2661              		.cfi_endproc
 2662              	.LFE159:
 2664              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 2665              		.align	1
 2666              		.global	RCC_APB2PeriphResetCmd
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2671              	RCC_APB2PeriphResetCmd:
 2672              	.LFB160:
2434:./Library/stm32f4xx_rcc.c **** 
2435:./Library/stm32f4xx_rcc.c **** /**
2436:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
2437:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
2438:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2439:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2440:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2441:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2442:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2443:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2444:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2445:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 90


2446:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2447:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2448:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
2449:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2450:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2451:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2452:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2453:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2454:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2455:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2456:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2457:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2458:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2459:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2460:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2461:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2462:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2463:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2464:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2465:./Library/stm32f4xx_rcc.c ****   * @retval None
2466:./Library/stm32f4xx_rcc.c ****   */
2467:./Library/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2468:./Library/stm32f4xx_rcc.c **** {
 2673              		.loc 1 2468 1
 2674              		.cfi_startproc
 2675              		@ args = 0, pretend = 0, frame = 8
 2676              		@ frame_needed = 1, uses_anonymous_args = 0
 2677              		@ link register save eliminated.
 2678 0000 80B4     		push	{r7}
 2679              	.LCFI217:
 2680              		.cfi_def_cfa_offset 4
 2681              		.cfi_offset 7, -4
 2682 0002 83B0     		sub	sp, sp, #12
 2683              	.LCFI218:
 2684              		.cfi_def_cfa_offset 16
 2685 0004 00AF     		add	r7, sp, #0
 2686              	.LCFI219:
 2687              		.cfi_def_cfa_register 7
 2688 0006 7860     		str	r0, [r7, #4]
 2689 0008 0B46     		mov	r3, r1
 2690 000a FB70     		strb	r3, [r7, #3]
2469:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2470:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
2471:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2472:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2691              		.loc 1 2472 6
 2692 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2693 000e 002B     		cmp	r3, #0
 2694 0010 06D0     		beq	.L150
2473:./Library/stm32f4xx_rcc.c ****   {
2474:./Library/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2695              		.loc 1 2474 19
 2696 0012 0A4B     		ldr	r3, .L153
 2697 0014 5A6A     		ldr	r2, [r3, #36]
 2698 0016 0949     		ldr	r1, .L153
 2699 0018 7B68     		ldr	r3, [r7, #4]
 2700 001a 1343     		orrs	r3, r3, r2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 91


 2701 001c 4B62     		str	r3, [r1, #36]
2475:./Library/stm32f4xx_rcc.c ****   }
2476:./Library/stm32f4xx_rcc.c ****   else
2477:./Library/stm32f4xx_rcc.c ****   {
2478:./Library/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
2479:./Library/stm32f4xx_rcc.c ****   }
2480:./Library/stm32f4xx_rcc.c **** }
 2702              		.loc 1 2480 1
 2703 001e 06E0     		b	.L152
 2704              	.L150:
2478:./Library/stm32f4xx_rcc.c ****   }
 2705              		.loc 1 2478 19
 2706 0020 064B     		ldr	r3, .L153
 2707 0022 5A6A     		ldr	r2, [r3, #36]
2478:./Library/stm32f4xx_rcc.c ****   }
 2708              		.loc 1 2478 22
 2709 0024 7B68     		ldr	r3, [r7, #4]
 2710 0026 DB43     		mvns	r3, r3
2478:./Library/stm32f4xx_rcc.c ****   }
 2711              		.loc 1 2478 19
 2712 0028 0449     		ldr	r1, .L153
 2713 002a 1340     		ands	r3, r3, r2
 2714 002c 4B62     		str	r3, [r1, #36]
 2715              	.L152:
 2716              		.loc 1 2480 1
 2717 002e 00BF     		nop
 2718 0030 0C37     		adds	r7, r7, #12
 2719              	.LCFI220:
 2720              		.cfi_def_cfa_offset 4
 2721 0032 BD46     		mov	sp, r7
 2722              	.LCFI221:
 2723              		.cfi_def_cfa_register 13
 2724              		@ sp needed
 2725 0034 5DF8047B 		ldr	r7, [sp], #4
 2726              	.LCFI222:
 2727              		.cfi_restore 7
 2728              		.cfi_def_cfa_offset 0
 2729 0038 7047     		bx	lr
 2730              	.L154:
 2731 003a 00BF     		.align	2
 2732              	.L153:
 2733 003c 00380240 		.word	1073887232
 2734              		.cfi_endproc
 2735              	.LFE160:
 2737              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2738              		.align	1
 2739              		.global	RCC_AHB1PeriphClockLPModeCmd
 2740              		.syntax unified
 2741              		.thumb
 2742              		.thumb_func
 2744              	RCC_AHB1PeriphClockLPModeCmd:
 2745              	.LFB161:
2481:./Library/stm32f4xx_rcc.c **** 
2482:./Library/stm32f4xx_rcc.c **** /**
2483:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
2484:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2485:./Library/stm32f4xx_rcc.c ****   *         power consumption.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 92


2486:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2487:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2488:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2489:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2490:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2491:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2492:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2493:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2494:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2495:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2496:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2497:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2498:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2499:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2500:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
2501:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2502:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2503:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2504:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2505:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
2506:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2507:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2508:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2509:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2510:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2511:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2512:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2513:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2514:./Library/stm32f4xx_rcc.c ****   * @retval None
2515:./Library/stm32f4xx_rcc.c ****   */
2516:./Library/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2517:./Library/stm32f4xx_rcc.c **** {
 2746              		.loc 1 2517 1
 2747              		.cfi_startproc
 2748              		@ args = 0, pretend = 0, frame = 8
 2749              		@ frame_needed = 1, uses_anonymous_args = 0
 2750              		@ link register save eliminated.
 2751 0000 80B4     		push	{r7}
 2752              	.LCFI223:
 2753              		.cfi_def_cfa_offset 4
 2754              		.cfi_offset 7, -4
 2755 0002 83B0     		sub	sp, sp, #12
 2756              	.LCFI224:
 2757              		.cfi_def_cfa_offset 16
 2758 0004 00AF     		add	r7, sp, #0
 2759              	.LCFI225:
 2760              		.cfi_def_cfa_register 7
 2761 0006 7860     		str	r0, [r7, #4]
 2762 0008 0B46     		mov	r3, r1
 2763 000a FB70     		strb	r3, [r7, #3]
2518:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2519:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
2520:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2521:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2764              		.loc 1 2521 6
 2765 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2766 000e 002B     		cmp	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 93


 2767 0010 06D0     		beq	.L156
2522:./Library/stm32f4xx_rcc.c ****   {
2523:./Library/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2768              		.loc 1 2523 20
 2769 0012 0A4B     		ldr	r3, .L159
 2770 0014 1A6D     		ldr	r2, [r3, #80]
 2771 0016 0949     		ldr	r1, .L159
 2772 0018 7B68     		ldr	r3, [r7, #4]
 2773 001a 1343     		orrs	r3, r3, r2
 2774 001c 0B65     		str	r3, [r1, #80]
2524:./Library/stm32f4xx_rcc.c ****   }
2525:./Library/stm32f4xx_rcc.c ****   else
2526:./Library/stm32f4xx_rcc.c ****   {
2527:./Library/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
2528:./Library/stm32f4xx_rcc.c ****   }
2529:./Library/stm32f4xx_rcc.c **** }
 2775              		.loc 1 2529 1
 2776 001e 06E0     		b	.L158
 2777              	.L156:
2527:./Library/stm32f4xx_rcc.c ****   }
 2778              		.loc 1 2527 20
 2779 0020 064B     		ldr	r3, .L159
 2780 0022 1A6D     		ldr	r2, [r3, #80]
2527:./Library/stm32f4xx_rcc.c ****   }
 2781              		.loc 1 2527 23
 2782 0024 7B68     		ldr	r3, [r7, #4]
 2783 0026 DB43     		mvns	r3, r3
2527:./Library/stm32f4xx_rcc.c ****   }
 2784              		.loc 1 2527 20
 2785 0028 0449     		ldr	r1, .L159
 2786 002a 1340     		ands	r3, r3, r2
 2787 002c 0B65     		str	r3, [r1, #80]
 2788              	.L158:
 2789              		.loc 1 2529 1
 2790 002e 00BF     		nop
 2791 0030 0C37     		adds	r7, r7, #12
 2792              	.LCFI226:
 2793              		.cfi_def_cfa_offset 4
 2794 0032 BD46     		mov	sp, r7
 2795              	.LCFI227:
 2796              		.cfi_def_cfa_register 13
 2797              		@ sp needed
 2798 0034 5DF8047B 		ldr	r7, [sp], #4
 2799              	.LCFI228:
 2800              		.cfi_restore 7
 2801              		.cfi_def_cfa_offset 0
 2802 0038 7047     		bx	lr
 2803              	.L160:
 2804 003a 00BF     		.align	2
 2805              	.L159:
 2806 003c 00380240 		.word	1073887232
 2807              		.cfi_endproc
 2808              	.LFE161:
 2810              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2811              		.align	1
 2812              		.global	RCC_AHB2PeriphClockLPModeCmd
 2813              		.syntax unified
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 94


 2814              		.thumb
 2815              		.thumb_func
 2817              	RCC_AHB2PeriphClockLPModeCmd:
 2818              	.LFB162:
2530:./Library/stm32f4xx_rcc.c **** 
2531:./Library/stm32f4xx_rcc.c **** /**
2532:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
2533:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2534:./Library/stm32f4xx_rcc.c ****   *           power consumption.
2535:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2536:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2537:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2538:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2539:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2540:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2541:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2542:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2543:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
2544:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2545:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2546:./Library/stm32f4xx_rcc.c ****   * @retval None
2547:./Library/stm32f4xx_rcc.c ****   */
2548:./Library/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2549:./Library/stm32f4xx_rcc.c **** {
 2819              		.loc 1 2549 1
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 8
 2822              		@ frame_needed = 1, uses_anonymous_args = 0
 2823              		@ link register save eliminated.
 2824 0000 80B4     		push	{r7}
 2825              	.LCFI229:
 2826              		.cfi_def_cfa_offset 4
 2827              		.cfi_offset 7, -4
 2828 0002 83B0     		sub	sp, sp, #12
 2829              	.LCFI230:
 2830              		.cfi_def_cfa_offset 16
 2831 0004 00AF     		add	r7, sp, #0
 2832              	.LCFI231:
 2833              		.cfi_def_cfa_register 7
 2834 0006 7860     		str	r0, [r7, #4]
 2835 0008 0B46     		mov	r3, r1
 2836 000a FB70     		strb	r3, [r7, #3]
2550:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2551:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2552:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2553:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2837              		.loc 1 2553 6
 2838 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2839 000e 002B     		cmp	r3, #0
 2840 0010 06D0     		beq	.L162
2554:./Library/stm32f4xx_rcc.c ****   {
2555:./Library/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2841              		.loc 1 2555 20
 2842 0012 0A4B     		ldr	r3, .L165
 2843 0014 5A6D     		ldr	r2, [r3, #84]
 2844 0016 0949     		ldr	r1, .L165
 2845 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 95


 2846 001a 1343     		orrs	r3, r3, r2
 2847 001c 4B65     		str	r3, [r1, #84]
2556:./Library/stm32f4xx_rcc.c ****   }
2557:./Library/stm32f4xx_rcc.c ****   else
2558:./Library/stm32f4xx_rcc.c ****   {
2559:./Library/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
2560:./Library/stm32f4xx_rcc.c ****   }
2561:./Library/stm32f4xx_rcc.c **** }
 2848              		.loc 1 2561 1
 2849 001e 06E0     		b	.L164
 2850              	.L162:
2559:./Library/stm32f4xx_rcc.c ****   }
 2851              		.loc 1 2559 20
 2852 0020 064B     		ldr	r3, .L165
 2853 0022 5A6D     		ldr	r2, [r3, #84]
2559:./Library/stm32f4xx_rcc.c ****   }
 2854              		.loc 1 2559 23
 2855 0024 7B68     		ldr	r3, [r7, #4]
 2856 0026 DB43     		mvns	r3, r3
2559:./Library/stm32f4xx_rcc.c ****   }
 2857              		.loc 1 2559 20
 2858 0028 0449     		ldr	r1, .L165
 2859 002a 1340     		ands	r3, r3, r2
 2860 002c 4B65     		str	r3, [r1, #84]
 2861              	.L164:
 2862              		.loc 1 2561 1
 2863 002e 00BF     		nop
 2864 0030 0C37     		adds	r7, r7, #12
 2865              	.LCFI232:
 2866              		.cfi_def_cfa_offset 4
 2867 0032 BD46     		mov	sp, r7
 2868              	.LCFI233:
 2869              		.cfi_def_cfa_register 13
 2870              		@ sp needed
 2871 0034 5DF8047B 		ldr	r7, [sp], #4
 2872              	.LCFI234:
 2873              		.cfi_restore 7
 2874              		.cfi_def_cfa_offset 0
 2875 0038 7047     		bx	lr
 2876              	.L166:
 2877 003a 00BF     		.align	2
 2878              	.L165:
 2879 003c 00380240 		.word	1073887232
 2880              		.cfi_endproc
 2881              	.LFE162:
 2883              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2884              		.align	1
 2885              		.global	RCC_APB1PeriphClockLPModeCmd
 2886              		.syntax unified
 2887              		.thumb
 2888              		.thumb_func
 2890              	RCC_APB1PeriphClockLPModeCmd:
 2891              	.LFB163:
2562:./Library/stm32f4xx_rcc.c **** 
2563:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2564:./Library/stm32f4xx_rcc.c **** /**
2565:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 96


2566:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2567:./Library/stm32f4xx_rcc.c ****   *         power consumption.
2568:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2569:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2570:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2571:./Library/stm32f4xx_rcc.c ****   *          This parameter must be: 
2572:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2573:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2574:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2575:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2576:./Library/stm32f4xx_rcc.c ****   * @retval None
2577:./Library/stm32f4xx_rcc.c ****   */
2578:./Library/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2579:./Library/stm32f4xx_rcc.c **** {
2580:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2581:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2582:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2583:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2584:./Library/stm32f4xx_rcc.c ****   {
2585:./Library/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
2586:./Library/stm32f4xx_rcc.c ****   }
2587:./Library/stm32f4xx_rcc.c ****   else
2588:./Library/stm32f4xx_rcc.c ****   {
2589:./Library/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
2590:./Library/stm32f4xx_rcc.c ****   }
2591:./Library/stm32f4xx_rcc.c **** }
2592:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2593:./Library/stm32f4xx_rcc.c **** 
2594:./Library/stm32f4xx_rcc.c **** /**
2595:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
2596:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2597:./Library/stm32f4xx_rcc.c ****   *         power consumption.
2598:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2599:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2600:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2601:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2602:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2603:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2604:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2605:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2606:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2607:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2608:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2609:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2610:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2611:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2612:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2613:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2614:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2615:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2616:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2617:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2618:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2619:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2620:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2621:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2622:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 97


2623:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2624:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2625:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2626:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2627:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2628:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2629:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2630:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2631:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2632:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2633:./Library/stm32f4xx_rcc.c ****   * @retval None
2634:./Library/stm32f4xx_rcc.c ****   */
2635:./Library/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2636:./Library/stm32f4xx_rcc.c **** {
 2892              		.loc 1 2636 1
 2893              		.cfi_startproc
 2894              		@ args = 0, pretend = 0, frame = 8
 2895              		@ frame_needed = 1, uses_anonymous_args = 0
 2896              		@ link register save eliminated.
 2897 0000 80B4     		push	{r7}
 2898              	.LCFI235:
 2899              		.cfi_def_cfa_offset 4
 2900              		.cfi_offset 7, -4
 2901 0002 83B0     		sub	sp, sp, #12
 2902              	.LCFI236:
 2903              		.cfi_def_cfa_offset 16
 2904 0004 00AF     		add	r7, sp, #0
 2905              	.LCFI237:
 2906              		.cfi_def_cfa_register 7
 2907 0006 7860     		str	r0, [r7, #4]
 2908 0008 0B46     		mov	r3, r1
 2909 000a FB70     		strb	r3, [r7, #3]
2637:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2638:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2639:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2640:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2910              		.loc 1 2640 6
 2911 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2912 000e 002B     		cmp	r3, #0
 2913 0010 06D0     		beq	.L168
2641:./Library/stm32f4xx_rcc.c ****   {
2642:./Library/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2914              		.loc 1 2642 20
 2915 0012 0A4B     		ldr	r3, .L171
 2916 0014 1A6E     		ldr	r2, [r3, #96]
 2917 0016 0949     		ldr	r1, .L171
 2918 0018 7B68     		ldr	r3, [r7, #4]
 2919 001a 1343     		orrs	r3, r3, r2
 2920 001c 0B66     		str	r3, [r1, #96]
2643:./Library/stm32f4xx_rcc.c ****   }
2644:./Library/stm32f4xx_rcc.c ****   else
2645:./Library/stm32f4xx_rcc.c ****   {
2646:./Library/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
2647:./Library/stm32f4xx_rcc.c ****   }
2648:./Library/stm32f4xx_rcc.c **** }
 2921              		.loc 1 2648 1
 2922 001e 06E0     		b	.L170
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 98


 2923              	.L168:
2646:./Library/stm32f4xx_rcc.c ****   }
 2924              		.loc 1 2646 20
 2925 0020 064B     		ldr	r3, .L171
 2926 0022 1A6E     		ldr	r2, [r3, #96]
2646:./Library/stm32f4xx_rcc.c ****   }
 2927              		.loc 1 2646 23
 2928 0024 7B68     		ldr	r3, [r7, #4]
 2929 0026 DB43     		mvns	r3, r3
2646:./Library/stm32f4xx_rcc.c ****   }
 2930              		.loc 1 2646 20
 2931 0028 0449     		ldr	r1, .L171
 2932 002a 1340     		ands	r3, r3, r2
 2933 002c 0B66     		str	r3, [r1, #96]
 2934              	.L170:
 2935              		.loc 1 2648 1
 2936 002e 00BF     		nop
 2937 0030 0C37     		adds	r7, r7, #12
 2938              	.LCFI238:
 2939              		.cfi_def_cfa_offset 4
 2940 0032 BD46     		mov	sp, r7
 2941              	.LCFI239:
 2942              		.cfi_def_cfa_register 13
 2943              		@ sp needed
 2944 0034 5DF8047B 		ldr	r7, [sp], #4
 2945              	.LCFI240:
 2946              		.cfi_restore 7
 2947              		.cfi_def_cfa_offset 0
 2948 0038 7047     		bx	lr
 2949              	.L172:
 2950 003a 00BF     		.align	2
 2951              	.L171:
 2952 003c 00380240 		.word	1073887232
 2953              		.cfi_endproc
 2954              	.LFE163:
 2956              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2957              		.align	1
 2958              		.global	RCC_APB2PeriphClockLPModeCmd
 2959              		.syntax unified
 2960              		.thumb
 2961              		.thumb_func
 2963              	RCC_APB2PeriphClockLPModeCmd:
 2964              	.LFB164:
2649:./Library/stm32f4xx_rcc.c **** 
2650:./Library/stm32f4xx_rcc.c **** /**
2651:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2652:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2653:./Library/stm32f4xx_rcc.c ****   *         power consumption.
2654:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2655:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2656:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2657:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2658:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2659:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2660:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2661:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2662:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 99


2663:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2664:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2665:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2666:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2667:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2668:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2669:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2670:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2671:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2672:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2673:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2674:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2675:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2676:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices)
2677:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2678:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2679:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2680:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2681:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2682:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2683:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2684:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2685:./Library/stm32f4xx_rcc.c ****   * @retval None
2686:./Library/stm32f4xx_rcc.c ****   */
2687:./Library/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2688:./Library/stm32f4xx_rcc.c **** {
 2965              		.loc 1 2688 1
 2966              		.cfi_startproc
 2967              		@ args = 0, pretend = 0, frame = 8
 2968              		@ frame_needed = 1, uses_anonymous_args = 0
 2969              		@ link register save eliminated.
 2970 0000 80B4     		push	{r7}
 2971              	.LCFI241:
 2972              		.cfi_def_cfa_offset 4
 2973              		.cfi_offset 7, -4
 2974 0002 83B0     		sub	sp, sp, #12
 2975              	.LCFI242:
 2976              		.cfi_def_cfa_offset 16
 2977 0004 00AF     		add	r7, sp, #0
 2978              	.LCFI243:
 2979              		.cfi_def_cfa_register 7
 2980 0006 7860     		str	r0, [r7, #4]
 2981 0008 0B46     		mov	r3, r1
 2982 000a FB70     		strb	r3, [r7, #3]
2689:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2690:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2691:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2692:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2983              		.loc 1 2692 6
 2984 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2985 000e 002B     		cmp	r3, #0
 2986 0010 06D0     		beq	.L174
2693:./Library/stm32f4xx_rcc.c ****   {
2694:./Library/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2987              		.loc 1 2694 20
 2988 0012 0A4B     		ldr	r3, .L177
 2989 0014 5A6E     		ldr	r2, [r3, #100]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 100


 2990 0016 0949     		ldr	r1, .L177
 2991 0018 7B68     		ldr	r3, [r7, #4]
 2992 001a 1343     		orrs	r3, r3, r2
 2993 001c 4B66     		str	r3, [r1, #100]
2695:./Library/stm32f4xx_rcc.c ****   }
2696:./Library/stm32f4xx_rcc.c ****   else
2697:./Library/stm32f4xx_rcc.c ****   {
2698:./Library/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
2699:./Library/stm32f4xx_rcc.c ****   }
2700:./Library/stm32f4xx_rcc.c **** }
 2994              		.loc 1 2700 1
 2995 001e 06E0     		b	.L176
 2996              	.L174:
2698:./Library/stm32f4xx_rcc.c ****   }
 2997              		.loc 1 2698 20
 2998 0020 064B     		ldr	r3, .L177
 2999 0022 5A6E     		ldr	r2, [r3, #100]
2698:./Library/stm32f4xx_rcc.c ****   }
 3000              		.loc 1 2698 23
 3001 0024 7B68     		ldr	r3, [r7, #4]
 3002 0026 DB43     		mvns	r3, r3
2698:./Library/stm32f4xx_rcc.c ****   }
 3003              		.loc 1 2698 20
 3004 0028 0449     		ldr	r1, .L177
 3005 002a 1340     		ands	r3, r3, r2
 3006 002c 4B66     		str	r3, [r1, #100]
 3007              	.L176:
 3008              		.loc 1 2700 1
 3009 002e 00BF     		nop
 3010 0030 0C37     		adds	r7, r7, #12
 3011              	.LCFI244:
 3012              		.cfi_def_cfa_offset 4
 3013 0032 BD46     		mov	sp, r7
 3014              	.LCFI245:
 3015              		.cfi_def_cfa_register 13
 3016              		@ sp needed
 3017 0034 5DF8047B 		ldr	r7, [sp], #4
 3018              	.LCFI246:
 3019              		.cfi_restore 7
 3020              		.cfi_def_cfa_offset 0
 3021 0038 7047     		bx	lr
 3022              	.L178:
 3023 003a 00BF     		.align	2
 3024              	.L177:
 3025 003c 00380240 		.word	1073887232
 3026              		.cfi_endproc
 3027              	.LFE164:
 3029              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 3030              		.align	1
 3031              		.global	RCC_LSEModeConfig
 3032              		.syntax unified
 3033              		.thumb
 3034              		.thumb_func
 3036              	RCC_LSEModeConfig:
 3037              	.LFB165:
2701:./Library/stm32f4xx_rcc.c **** 
2702:./Library/stm32f4xx_rcc.c **** /**
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 101


2703:./Library/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2704:./Library/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469_479xx devic
2705:./Library/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2706:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2707:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2708:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2709:./Library/stm32f4xx_rcc.c ****   * @retval None
2710:./Library/stm32f4xx_rcc.c ****   */
2711:./Library/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t RCC_Mode)
2712:./Library/stm32f4xx_rcc.c **** {
 3038              		.loc 1 2712 1
 3039              		.cfi_startproc
 3040              		@ args = 0, pretend = 0, frame = 8
 3041              		@ frame_needed = 1, uses_anonymous_args = 0
 3042              		@ link register save eliminated.
 3043 0000 80B4     		push	{r7}
 3044              	.LCFI247:
 3045              		.cfi_def_cfa_offset 4
 3046              		.cfi_offset 7, -4
 3047 0002 83B0     		sub	sp, sp, #12
 3048              	.LCFI248:
 3049              		.cfi_def_cfa_offset 16
 3050 0004 00AF     		add	r7, sp, #0
 3051              	.LCFI249:
 3052              		.cfi_def_cfa_register 7
 3053 0006 0346     		mov	r3, r0
 3054 0008 FB71     		strb	r3, [r7, #7]
2713:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2714:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(RCC_Mode));
2715:./Library/stm32f4xx_rcc.c ****   
2716:./Library/stm32f4xx_rcc.c ****   if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 3055              		.loc 1 2716 5
 3056 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3057 000c 012B     		cmp	r3, #1
 3058 000e 06D1     		bne	.L180
2717:./Library/stm32f4xx_rcc.c ****   {
2718:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 3059              		.loc 1 2718 5
 3060 0010 094B     		ldr	r3, .L183
 3061 0012 1B6F     		ldr	r3, [r3, #112]
 3062 0014 084A     		ldr	r2, .L183
 3063 0016 43F00803 		orr	r3, r3, #8
 3064 001a 1367     		str	r3, [r2, #112]
2719:./Library/stm32f4xx_rcc.c ****   }
2720:./Library/stm32f4xx_rcc.c ****   else
2721:./Library/stm32f4xx_rcc.c ****   {
2722:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2723:./Library/stm32f4xx_rcc.c ****   }
2724:./Library/stm32f4xx_rcc.c **** }
 3065              		.loc 1 2724 1
 3066 001c 05E0     		b	.L182
 3067              	.L180:
2722:./Library/stm32f4xx_rcc.c ****   }
 3068              		.loc 1 2722 5
 3069 001e 064B     		ldr	r3, .L183
 3070 0020 1B6F     		ldr	r3, [r3, #112]
 3071 0022 054A     		ldr	r2, .L183
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 102


 3072 0024 23F00803 		bic	r3, r3, #8
 3073 0028 1367     		str	r3, [r2, #112]
 3074              	.L182:
 3075              		.loc 1 2724 1
 3076 002a 00BF     		nop
 3077 002c 0C37     		adds	r7, r7, #12
 3078              	.LCFI250:
 3079              		.cfi_def_cfa_offset 4
 3080 002e BD46     		mov	sp, r7
 3081              	.LCFI251:
 3082              		.cfi_def_cfa_register 13
 3083              		@ sp needed
 3084 0030 5DF8047B 		ldr	r7, [sp], #4
 3085              	.LCFI252:
 3086              		.cfi_restore 7
 3087              		.cfi_def_cfa_offset 0
 3088 0034 7047     		bx	lr
 3089              	.L184:
 3090 0036 00BF     		.align	2
 3091              	.L183:
 3092 0038 00380240 		.word	1073887232
 3093              		.cfi_endproc
 3094              	.LFE165:
 3096              		.section	.text.RCC_ITConfig,"ax",%progbits
 3097              		.align	1
 3098              		.global	RCC_ITConfig
 3099              		.syntax unified
 3100              		.thumb
 3101              		.thumb_func
 3103              	RCC_ITConfig:
 3104              	.LFB166:
2725:./Library/stm32f4xx_rcc.c **** 
2726:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
2727:./Library/stm32f4xx_rcc.c **** /**
2728:./Library/stm32f4xx_rcc.c ****   * @brief Configures the LPTIM1 clock Source.
2729:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F410xx devices.
2730:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the LPTIM1 clock Source.
2731:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2732:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_PCLK: LPTIM1 clock from APB1 selected.
2733:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_HSI:  LPTIM1 clock from HSI selected.
2734:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSI:  LPTIM1 clock from LSI selected.
2735:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSE:  LPTIM1 clock from LSE selected.
2736:./Library/stm32f4xx_rcc.c ****   * @retval None
2737:./Library/stm32f4xx_rcc.c ****   */
2738:./Library/stm32f4xx_rcc.c **** void RCC_LPTIM1ClockSourceConfig(uint32_t RCC_ClockSource)
2739:./Library/stm32f4xx_rcc.c **** {
2740:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2741:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LPTIM1_CLOCKSOURCE(RCC_ClockSource));
2742:./Library/stm32f4xx_rcc.c **** 
2743:./Library/stm32f4xx_rcc.c ****   /* Clear LPTIM1 clock source selection source bits */
2744:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_LPTIM1SEL;
2745:./Library/stm32f4xx_rcc.c ****   /* Set new LPTIM1 clock source */
2746:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2747:./Library/stm32f4xx_rcc.c **** }
2748:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */
2749:./Library/stm32f4xx_rcc.c **** 
2750:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 103


2751:./Library/stm32f4xx_rcc.c **** /**
2752:./Library/stm32f4xx_rcc.c ****   * @brief Configures the DSI clock Source.
2753:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx devices.
2754:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the DSI clock Source.
2755:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2756:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PHY: DSI-PHY used as DSI byte lane clock source (usual case).
2757:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PLLR: PLL_R used as DSI byte lane clock source, used in case D
2758:./Library/stm32f4xx_rcc.c ****   * @retval None
2759:./Library/stm32f4xx_rcc.c ****   */
2760:./Library/stm32f4xx_rcc.c **** void RCC_DSIClockSourceConfig(uint8_t RCC_ClockSource)
2761:./Library/stm32f4xx_rcc.c **** {
2762:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2763:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DSI_CLOCKSOURCE(RCC_ClockSource));
2764:./Library/stm32f4xx_rcc.c ****   
2765:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_DSICLKSource_PLLR)
2766:./Library/stm32f4xx_rcc.c ****   {
2767:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2768:./Library/stm32f4xx_rcc.c ****   }
2769:./Library/stm32f4xx_rcc.c ****   else
2770:./Library/stm32f4xx_rcc.c ****   {
2771:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2772:./Library/stm32f4xx_rcc.c ****   }
2773:./Library/stm32f4xx_rcc.c **** }
2774:./Library/stm32f4xx_rcc.c **** #endif /*  STM32F469_479xx */
2775:./Library/stm32f4xx_rcc.c **** 
2776:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_4
2777:./Library/stm32f4xx_rcc.c **** /**
2778:./Library/stm32f4xx_rcc.c ****   * @brief Configures the 48MHz clock Source.
2779:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx/STM32F469_479xx devices.
2780:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the 48MHz clock Source.
2781:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2782:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLL: 48MHz from PLL selected.
2783:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLLSAI: 48MHz from PLLSAI selected.
2784:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_CK48CLKSOURCE_PLLI2SQ : 48MHz from PLLI2SQ
2785:./Library/stm32f4xx_rcc.c ****   * @retval None
2786:./Library/stm32f4xx_rcc.c ****   */
2787:./Library/stm32f4xx_rcc.c **** void RCC_48MHzClockSourceConfig(uint8_t RCC_ClockSource)
2788:./Library/stm32f4xx_rcc.c **** {
2789:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2790:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_48MHZ_CLOCKSOURCE(RCC_ClockSource));
2791:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx) 
2792:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2793:./Library/stm32f4xx_rcc.c ****   {
2794:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2795:./Library/stm32f4xx_rcc.c ****   }
2796:./Library/stm32f4xx_rcc.c ****   else
2797:./Library/stm32f4xx_rcc.c ****   {
2798:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2799:./Library/stm32f4xx_rcc.c ****   }
2800:./Library/stm32f4xx_rcc.c **** #elif  defined(STM32F446xx)
2801:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2802:./Library/stm32f4xx_rcc.c ****   {
2803:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2804:./Library/stm32f4xx_rcc.c ****   }
2805:./Library/stm32f4xx_rcc.c ****   else
2806:./Library/stm32f4xx_rcc.c ****   {
2807:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 104


2808:./Library/stm32f4xx_rcc.c ****   }
2809:./Library/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx)
2810:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CK48CLKSOURCE_PLLI2SQ)
2811:./Library/stm32f4xx_rcc.c ****   {
2812:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2813:./Library/stm32f4xx_rcc.c ****   }
2814:./Library/stm32f4xx_rcc.c ****   else
2815:./Library/stm32f4xx_rcc.c ****   {
2816:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2817:./Library/stm32f4xx_rcc.c ****   }
2818:./Library/stm32f4xx_rcc.c **** #else
2819:./Library/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */  
2820:./Library/stm32f4xx_rcc.c **** }
2821:./Library/stm32f4xx_rcc.c **** 
2822:./Library/stm32f4xx_rcc.c **** /**
2823:./Library/stm32f4xx_rcc.c ****   * @brief Configures the SDIO clock Source.
2824:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx/STM32F446xx devices.
2825:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SDIO clock Source.
2826:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2827:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_48MHZ: 48MHz clock selected.
2828:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_SYSCLK: system clock selected.
2829:./Library/stm32f4xx_rcc.c ****   * @retval None
2830:./Library/stm32f4xx_rcc.c ****   */
2831:./Library/stm32f4xx_rcc.c **** void RCC_SDIOClockSourceConfig(uint8_t RCC_ClockSource)
2832:./Library/stm32f4xx_rcc.c **** {
2833:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2834:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SDIO_CLOCKSOURCE(RCC_ClockSource));
2835:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)   
2836:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2837:./Library/stm32f4xx_rcc.c ****   {
2838:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2839:./Library/stm32f4xx_rcc.c ****   }
2840:./Library/stm32f4xx_rcc.c ****   else
2841:./Library/stm32f4xx_rcc.c ****   {
2842:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2843:./Library/stm32f4xx_rcc.c ****   }
2844:./Library/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
2845:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2846:./Library/stm32f4xx_rcc.c ****   {
2847:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2848:./Library/stm32f4xx_rcc.c ****   }
2849:./Library/stm32f4xx_rcc.c ****   else
2850:./Library/stm32f4xx_rcc.c ****   {
2851:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2852:./Library/stm32f4xx_rcc.c ****   }
2853:./Library/stm32f4xx_rcc.c **** #else
2854:./Library/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */ 
2855:./Library/stm32f4xx_rcc.c **** }
2856:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
2857:./Library/stm32f4xx_rcc.c **** 
2858:./Library/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2859:./Library/stm32f4xx_rcc.c **** /**
2860:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 clock gating for the specified IPs.
2861:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2862:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB1ClockGating: specifies the AHB1 clock gating.
2863:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2864:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB1Bridge: AHB1 to APB1 clock
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 105


2865:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB2Bridge: AHB1 to APB2 clock 
2866:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_CM4DBG: Cortex M4 ETM clock
2867:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SPARE: Spare clock
2868:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SRAM: SRAM controller clock
2869:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_FLITF: Flash interface clock
2870:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_RCC: RCC clock
2871:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2872:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2873:./Library/stm32f4xx_rcc.c ****   * @retval None
2874:./Library/stm32f4xx_rcc.c ****   */
2875:./Library/stm32f4xx_rcc.c **** void RCC_AHB1ClockGatingCmd(uint32_t RCC_AHB1ClockGating, FunctionalState NewState)
2876:./Library/stm32f4xx_rcc.c **** {
2877:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2878:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCKGATING(RCC_AHB1ClockGating));
2879:./Library/stm32f4xx_rcc.c **** 
2880:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2881:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2882:./Library/stm32f4xx_rcc.c ****   {
2883:./Library/stm32f4xx_rcc.c ****     RCC->CKGATENR &= ~RCC_AHB1ClockGating;
2884:./Library/stm32f4xx_rcc.c ****   }
2885:./Library/stm32f4xx_rcc.c ****   else
2886:./Library/stm32f4xx_rcc.c ****   {
2887:./Library/stm32f4xx_rcc.c ****     RCC->CKGATENR |= RCC_AHB1ClockGating;
2888:./Library/stm32f4xx_rcc.c ****   }
2889:./Library/stm32f4xx_rcc.c **** }
2890:./Library/stm32f4xx_rcc.c **** 
2891:./Library/stm32f4xx_rcc.c **** /**
2892:./Library/stm32f4xx_rcc.c ****   * @brief Configures the SPDIFRX clock Source.
2893:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2894:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SPDIFRX clock Source.
2895:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2896:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLR: SPDIFRX clock from PLL_R selected.
2897:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLI2SP: SPDIFRX clock from PLLI2S_P selected.
2898:./Library/stm32f4xx_rcc.c ****   * @retval None
2899:./Library/stm32f4xx_rcc.c ****   */
2900:./Library/stm32f4xx_rcc.c **** void RCC_SPDIFRXClockSourceConfig(uint8_t RCC_ClockSource)
2901:./Library/stm32f4xx_rcc.c **** {
2902:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2903:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SPDIFRX_CLOCKSOURCE(RCC_ClockSource));
2904:./Library/stm32f4xx_rcc.c ****   
2905:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SPDIFRXCLKSource_PLLI2SP)
2906:./Library/stm32f4xx_rcc.c ****   {
2907:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2908:./Library/stm32f4xx_rcc.c ****   }
2909:./Library/stm32f4xx_rcc.c ****   else
2910:./Library/stm32f4xx_rcc.c ****   {
2911:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2912:./Library/stm32f4xx_rcc.c ****   }
2913:./Library/stm32f4xx_rcc.c **** }
2914:./Library/stm32f4xx_rcc.c **** 
2915:./Library/stm32f4xx_rcc.c **** /**
2916:./Library/stm32f4xx_rcc.c ****   * @brief Configures the CEC clock Source.
2917:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2918:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the CEC clock Source.
2919:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2920:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_HSIDiv488: CEC clock from HSI/488 selected.
2921:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_LSE: CEC clock from LSE selected.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 106


2922:./Library/stm32f4xx_rcc.c ****   * @retval None
2923:./Library/stm32f4xx_rcc.c ****   */
2924:./Library/stm32f4xx_rcc.c **** void RCC_CECClockSourceConfig(uint8_t RCC_ClockSource)
2925:./Library/stm32f4xx_rcc.c **** {
2926:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2927:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CEC_CLOCKSOURCE(RCC_ClockSource));
2928:./Library/stm32f4xx_rcc.c ****   
2929:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CECCLKSource_LSE)
2930:./Library/stm32f4xx_rcc.c ****   {
2931:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2932:./Library/stm32f4xx_rcc.c ****   }
2933:./Library/stm32f4xx_rcc.c ****   else
2934:./Library/stm32f4xx_rcc.c ****   {
2935:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2936:./Library/stm32f4xx_rcc.c ****   }
2937:./Library/stm32f4xx_rcc.c **** }
2938:./Library/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2939:./Library/stm32f4xx_rcc.c **** 
2940:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
2941:./Library/stm32f4xx_rcc.c **** /**
2942:./Library/stm32f4xx_rcc.c ****   * @brief Configures the FMPI2C1 clock Source.
2943:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2944:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the FMPI2C1 clock Source.
2945:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2946:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_APB1: FMPI2C1 clock from APB1 selected.
2947:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_SYSCLK: FMPI2C1 clock from Sytem clock selected.
2948:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_HSI: FMPI2C1 clock from HSI selected.
2949:./Library/stm32f4xx_rcc.c ****   * @retval None
2950:./Library/stm32f4xx_rcc.c ****   */
2951:./Library/stm32f4xx_rcc.c **** void RCC_FMPI2C1ClockSourceConfig(uint32_t RCC_ClockSource)
2952:./Library/stm32f4xx_rcc.c **** {
2953:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2954:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FMPI2C1_CLOCKSOURCE(RCC_ClockSource));
2955:./Library/stm32f4xx_rcc.c **** 
2956:./Library/stm32f4xx_rcc.c ****   /* Clear FMPI2C1 clock source selection source bits */
2957:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_FMPI2C1SEL;
2958:./Library/stm32f4xx_rcc.c ****   /* Set new FMPI2C1 clock source */
2959:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2960:./Library/stm32f4xx_rcc.c **** }
2961:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
2962:./Library/stm32f4xx_rcc.c **** /**
2963:./Library/stm32f4xx_rcc.c ****   * @}
2964:./Library/stm32f4xx_rcc.c ****   */
2965:./Library/stm32f4xx_rcc.c **** 
2966:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
2967:./Library/stm32f4xx_rcc.c **** /**
2968:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO1.
2969:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO1.
2970:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2971:./Library/stm32f4xx_rcc.c ****   * @retval None
2972:./Library/stm32f4xx_rcc.c ****   */
2973:./Library/stm32f4xx_rcc.c **** void RCC_MCO1Cmd(FunctionalState NewState)
2974:./Library/stm32f4xx_rcc.c **** {
2975:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2976:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2977:./Library/stm32f4xx_rcc.c **** 
2978:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO1EN_BB = (uint32_t)NewState;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 107


2979:./Library/stm32f4xx_rcc.c **** }
2980:./Library/stm32f4xx_rcc.c **** 
2981:./Library/stm32f4xx_rcc.c **** /**
2982:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO2.
2983:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO2.
2984:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2985:./Library/stm32f4xx_rcc.c ****   * @retval None
2986:./Library/stm32f4xx_rcc.c ****   */
2987:./Library/stm32f4xx_rcc.c **** void RCC_MCO2Cmd(FunctionalState NewState)
2988:./Library/stm32f4xx_rcc.c **** {
2989:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2990:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2991:./Library/stm32f4xx_rcc.c **** 
2992:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO2EN_BB = (uint32_t)NewState;
2993:./Library/stm32f4xx_rcc.c **** }
2994:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
2995:./Library/stm32f4xx_rcc.c **** 
2996:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2997:./Library/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2998:./Library/stm32f4xx_rcc.c ****  *
2999:./Library/stm32f4xx_rcc.c **** @verbatim   
3000:./Library/stm32f4xx_rcc.c ****  ===============================================================================
3001:./Library/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
3002:./Library/stm32f4xx_rcc.c ****  ===============================================================================  
3003:./Library/stm32f4xx_rcc.c **** 
3004:./Library/stm32f4xx_rcc.c **** @endverbatim
3005:./Library/stm32f4xx_rcc.c ****   * @{
3006:./Library/stm32f4xx_rcc.c ****   */
3007:./Library/stm32f4xx_rcc.c **** 
3008:./Library/stm32f4xx_rcc.c **** /**
3009:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
3010:./Library/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
3011:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3012:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3013:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3014:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3015:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3016:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3017:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3018:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3019:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
3020:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
3021:./Library/stm32f4xx_rcc.c ****   * @retval None
3022:./Library/stm32f4xx_rcc.c ****   */
3023:./Library/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
3024:./Library/stm32f4xx_rcc.c **** {
 3105              		.loc 1 3024 1
 3106              		.cfi_startproc
 3107              		@ args = 0, pretend = 0, frame = 8
 3108              		@ frame_needed = 1, uses_anonymous_args = 0
 3109              		@ link register save eliminated.
 3110 0000 80B4     		push	{r7}
 3111              	.LCFI253:
 3112              		.cfi_def_cfa_offset 4
 3113              		.cfi_offset 7, -4
 3114 0002 83B0     		sub	sp, sp, #12
 3115              	.LCFI254:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 108


 3116              		.cfi_def_cfa_offset 16
 3117 0004 00AF     		add	r7, sp, #0
 3118              	.LCFI255:
 3119              		.cfi_def_cfa_register 7
 3120 0006 0346     		mov	r3, r0
 3121 0008 0A46     		mov	r2, r1
 3122 000a FB71     		strb	r3, [r7, #7]
 3123 000c 1346     		mov	r3, r2
 3124 000e BB71     		strb	r3, [r7, #6]
3025:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3026:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
3027:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3028:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 3125              		.loc 1 3028 6
 3126 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3127 0012 002B     		cmp	r3, #0
 3128 0014 08D0     		beq	.L186
3029:./Library/stm32f4xx_rcc.c ****   {
3030:./Library/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
3031:./Library/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 3129              		.loc 1 3031 41
 3130 0016 0C4B     		ldr	r3, .L189
 3131 0018 1B78     		ldrb	r3, [r3]
 3132 001a DAB2     		uxtb	r2, r3
 3133 001c 0A49     		ldr	r1, .L189
 3134 001e FB79     		ldrb	r3, [r7, #7]
 3135 0020 1343     		orrs	r3, r3, r2
 3136 0022 DBB2     		uxtb	r3, r3
 3137 0024 0B70     		strb	r3, [r1]
3032:./Library/stm32f4xx_rcc.c ****   }
3033:./Library/stm32f4xx_rcc.c ****   else
3034:./Library/stm32f4xx_rcc.c ****   {
3035:./Library/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
3036:./Library/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
3037:./Library/stm32f4xx_rcc.c ****   }
3038:./Library/stm32f4xx_rcc.c **** }
 3138              		.loc 1 3038 1
 3139 0026 09E0     		b	.L188
 3140              	.L186:
3036:./Library/stm32f4xx_rcc.c ****   }
 3141              		.loc 1 3036 41
 3142 0028 074B     		ldr	r3, .L189
 3143 002a 1B78     		ldrb	r3, [r3]
 3144 002c DAB2     		uxtb	r2, r3
3036:./Library/stm32f4xx_rcc.c ****   }
 3145              		.loc 1 3036 44
 3146 002e FB79     		ldrb	r3, [r7, #7]
 3147 0030 DB43     		mvns	r3, r3
 3148 0032 DBB2     		uxtb	r3, r3
3036:./Library/stm32f4xx_rcc.c ****   }
 3149              		.loc 1 3036 41
 3150 0034 0449     		ldr	r1, .L189
 3151 0036 1340     		ands	r3, r3, r2
 3152 0038 DBB2     		uxtb	r3, r3
 3153 003a 0B70     		strb	r3, [r1]
 3154              	.L188:
 3155              		.loc 1 3038 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 109


 3156 003c 00BF     		nop
 3157 003e 0C37     		adds	r7, r7, #12
 3158              	.LCFI256:
 3159              		.cfi_def_cfa_offset 4
 3160 0040 BD46     		mov	sp, r7
 3161              	.LCFI257:
 3162              		.cfi_def_cfa_register 13
 3163              		@ sp needed
 3164 0042 5DF8047B 		ldr	r7, [sp], #4
 3165              	.LCFI258:
 3166              		.cfi_restore 7
 3167              		.cfi_def_cfa_offset 0
 3168 0046 7047     		bx	lr
 3169              	.L190:
 3170              		.align	2
 3171              	.L189:
 3172 0048 0D380240 		.word	1073887245
 3173              		.cfi_endproc
 3174              	.LFE166:
 3176              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 3177              		.align	1
 3178              		.global	RCC_GetFlagStatus
 3179              		.syntax unified
 3180              		.thumb
 3181              		.thumb_func
 3183              	RCC_GetFlagStatus:
 3184              	.LFB167:
3039:./Library/stm32f4xx_rcc.c **** 
3040:./Library/stm32f4xx_rcc.c **** /**
3041:./Library/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
3042:./Library/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
3043:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3044:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
3045:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
3046:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
3047:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
3048:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx/446xx/469xx/
3049:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
3050:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
3051:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
3052:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
3053:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
3054:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
3055:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
3056:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
3057:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
3058:./Library/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
3059:./Library/stm32f4xx_rcc.c ****   */
3060:./Library/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
3061:./Library/stm32f4xx_rcc.c **** {
 3185              		.loc 1 3061 1
 3186              		.cfi_startproc
 3187              		@ args = 0, pretend = 0, frame = 24
 3188              		@ frame_needed = 1, uses_anonymous_args = 0
 3189              		@ link register save eliminated.
 3190 0000 80B4     		push	{r7}
 3191              	.LCFI259:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 110


 3192              		.cfi_def_cfa_offset 4
 3193              		.cfi_offset 7, -4
 3194 0002 87B0     		sub	sp, sp, #28
 3195              	.LCFI260:
 3196              		.cfi_def_cfa_offset 32
 3197 0004 00AF     		add	r7, sp, #0
 3198              	.LCFI261:
 3199              		.cfi_def_cfa_register 7
 3200 0006 0346     		mov	r3, r0
 3201 0008 FB71     		strb	r3, [r7, #7]
3062:./Library/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 3202              		.loc 1 3062 12
 3203 000a 0023     		movs	r3, #0
 3204 000c FB60     		str	r3, [r7, #12]
3063:./Library/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 3205              		.loc 1 3063 12
 3206 000e 0023     		movs	r3, #0
 3207 0010 7B61     		str	r3, [r7, #20]
3064:./Library/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 3208              		.loc 1 3064 14
 3209 0012 0023     		movs	r3, #0
 3210 0014 FB74     		strb	r3, [r7, #19]
3065:./Library/stm32f4xx_rcc.c **** 
3066:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3067:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
3068:./Library/stm32f4xx_rcc.c **** 
3069:./Library/stm32f4xx_rcc.c ****   /* Get the RCC register index */
3070:./Library/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 3211              		.loc 1 3070 18
 3212 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3213 0018 5B09     		lsrs	r3, r3, #5
 3214 001a DBB2     		uxtb	r3, r3
 3215              		.loc 1 3070 7
 3216 001c FB60     		str	r3, [r7, #12]
3071:./Library/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 3217              		.loc 1 3071 6
 3218 001e FB68     		ldr	r3, [r7, #12]
 3219 0020 012B     		cmp	r3, #1
 3220 0022 03D1     		bne	.L192
3072:./Library/stm32f4xx_rcc.c ****   {
3073:./Library/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 3221              		.loc 1 3073 20
 3222 0024 124B     		ldr	r3, .L198
 3223              		.loc 1 3073 15
 3224 0026 1B68     		ldr	r3, [r3]
 3225 0028 7B61     		str	r3, [r7, #20]
 3226 002a 09E0     		b	.L193
 3227              	.L192:
3074:./Library/stm32f4xx_rcc.c ****   }
3075:./Library/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 3228              		.loc 1 3075 11
 3229 002c FB68     		ldr	r3, [r7, #12]
 3230 002e 022B     		cmp	r3, #2
 3231 0030 03D1     		bne	.L194
3076:./Library/stm32f4xx_rcc.c ****   {
3077:./Library/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 3232              		.loc 1 3077 20
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 111


 3233 0032 0F4B     		ldr	r3, .L198
 3234              		.loc 1 3077 15
 3235 0034 1B6F     		ldr	r3, [r3, #112]
 3236 0036 7B61     		str	r3, [r7, #20]
 3237 0038 02E0     		b	.L193
 3238              	.L194:
3078:./Library/stm32f4xx_rcc.c ****   }
3079:./Library/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
3080:./Library/stm32f4xx_rcc.c ****   {
3081:./Library/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 3239              		.loc 1 3081 20
 3240 003a 0D4B     		ldr	r3, .L198
 3241              		.loc 1 3081 15
 3242 003c 5B6F     		ldr	r3, [r3, #116]
 3243 003e 7B61     		str	r3, [r7, #20]
 3244              	.L193:
3082:./Library/stm32f4xx_rcc.c ****   }
3083:./Library/stm32f4xx_rcc.c **** 
3084:./Library/stm32f4xx_rcc.c ****   /* Get the flag position */
3085:./Library/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 3245              		.loc 1 3085 18
 3246 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3247              		.loc 1 3085 7
 3248 0042 03F01F03 		and	r3, r3, #31
 3249 0046 FB60     		str	r3, [r7, #12]
3086:./Library/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 3250              		.loc 1 3086 42
 3251 0048 7A69     		ldr	r2, [r7, #20]
 3252 004a FB68     		ldr	r3, [r7, #12]
 3253 004c 22FA03F3 		lsr	r3, r2, r3
 3254 0050 03F00103 		and	r3, r3, #1
 3255              		.loc 1 3086 6
 3256 0054 002B     		cmp	r3, #0
 3257 0056 02D0     		beq	.L195
3087:./Library/stm32f4xx_rcc.c ****   {
3088:./Library/stm32f4xx_rcc.c ****     bitstatus = SET;
 3258              		.loc 1 3088 15
 3259 0058 0123     		movs	r3, #1
 3260 005a FB74     		strb	r3, [r7, #19]
 3261 005c 01E0     		b	.L196
 3262              	.L195:
3089:./Library/stm32f4xx_rcc.c ****   }
3090:./Library/stm32f4xx_rcc.c ****   else
3091:./Library/stm32f4xx_rcc.c ****   {
3092:./Library/stm32f4xx_rcc.c ****     bitstatus = RESET;
 3263              		.loc 1 3092 15
 3264 005e 0023     		movs	r3, #0
 3265 0060 FB74     		strb	r3, [r7, #19]
 3266              	.L196:
3093:./Library/stm32f4xx_rcc.c ****   }
3094:./Library/stm32f4xx_rcc.c ****   /* Return the flag status */
3095:./Library/stm32f4xx_rcc.c ****   return bitstatus;
 3267              		.loc 1 3095 10
 3268 0062 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
3096:./Library/stm32f4xx_rcc.c **** }
 3269              		.loc 1 3096 1
 3270 0064 1846     		mov	r0, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 112


 3271 0066 1C37     		adds	r7, r7, #28
 3272              	.LCFI262:
 3273              		.cfi_def_cfa_offset 4
 3274 0068 BD46     		mov	sp, r7
 3275              	.LCFI263:
 3276              		.cfi_def_cfa_register 13
 3277              		@ sp needed
 3278 006a 5DF8047B 		ldr	r7, [sp], #4
 3279              	.LCFI264:
 3280              		.cfi_restore 7
 3281              		.cfi_def_cfa_offset 0
 3282 006e 7047     		bx	lr
 3283              	.L199:
 3284              		.align	2
 3285              	.L198:
 3286 0070 00380240 		.word	1073887232
 3287              		.cfi_endproc
 3288              	.LFE167:
 3290              		.section	.text.RCC_ClearFlag,"ax",%progbits
 3291              		.align	1
 3292              		.global	RCC_ClearFlag
 3293              		.syntax unified
 3294              		.thumb
 3295              		.thumb_func
 3297              	RCC_ClearFlag:
 3298              	.LFB168:
3097:./Library/stm32f4xx_rcc.c **** 
3098:./Library/stm32f4xx_rcc.c **** /**
3099:./Library/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
3100:./Library/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
3101:./Library/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
3102:./Library/stm32f4xx_rcc.c ****   * @param  None
3103:./Library/stm32f4xx_rcc.c ****   * @retval None
3104:./Library/stm32f4xx_rcc.c ****   */
3105:./Library/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
3106:./Library/stm32f4xx_rcc.c **** {
 3299              		.loc 1 3106 1
 3300              		.cfi_startproc
 3301              		@ args = 0, pretend = 0, frame = 0
 3302              		@ frame_needed = 1, uses_anonymous_args = 0
 3303              		@ link register save eliminated.
 3304 0000 80B4     		push	{r7}
 3305              	.LCFI265:
 3306              		.cfi_def_cfa_offset 4
 3307              		.cfi_offset 7, -4
 3308 0002 00AF     		add	r7, sp, #0
 3309              	.LCFI266:
 3310              		.cfi_def_cfa_register 7
3107:./Library/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
3108:./Library/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 3311              		.loc 1 3108 12
 3312 0004 054B     		ldr	r3, .L201
 3313 0006 5B6F     		ldr	r3, [r3, #116]
 3314 0008 044A     		ldr	r2, .L201
 3315 000a 43F08073 		orr	r3, r3, #16777216
 3316 000e 5367     		str	r3, [r2, #116]
3109:./Library/stm32f4xx_rcc.c **** }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 113


 3317              		.loc 1 3109 1
 3318 0010 00BF     		nop
 3319 0012 BD46     		mov	sp, r7
 3320              	.LCFI267:
 3321              		.cfi_def_cfa_register 13
 3322              		@ sp needed
 3323 0014 5DF8047B 		ldr	r7, [sp], #4
 3324              	.LCFI268:
 3325              		.cfi_restore 7
 3326              		.cfi_def_cfa_offset 0
 3327 0018 7047     		bx	lr
 3328              	.L202:
 3329 001a 00BF     		.align	2
 3330              	.L201:
 3331 001c 00380240 		.word	1073887232
 3332              		.cfi_endproc
 3333              	.LFE168:
 3335              		.section	.text.RCC_GetITStatus,"ax",%progbits
 3336              		.align	1
 3337              		.global	RCC_GetITStatus
 3338              		.syntax unified
 3339              		.thumb
 3340              		.thumb_func
 3342              	RCC_GetITStatus:
 3343              	.LFB169:
3110:./Library/stm32f4xx_rcc.c **** 
3111:./Library/stm32f4xx_rcc.c **** /**
3112:./Library/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
3113:./Library/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
3114:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3115:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3116:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3117:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3118:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3119:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3120:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3121:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446x
3122:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3123:./Library/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
3124:./Library/stm32f4xx_rcc.c ****   */
3125:./Library/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
3126:./Library/stm32f4xx_rcc.c **** {
 3344              		.loc 1 3126 1
 3345              		.cfi_startproc
 3346              		@ args = 0, pretend = 0, frame = 16
 3347              		@ frame_needed = 1, uses_anonymous_args = 0
 3348              		@ link register save eliminated.
 3349 0000 80B4     		push	{r7}
 3350              	.LCFI269:
 3351              		.cfi_def_cfa_offset 4
 3352              		.cfi_offset 7, -4
 3353 0002 85B0     		sub	sp, sp, #20
 3354              	.LCFI270:
 3355              		.cfi_def_cfa_offset 24
 3356 0004 00AF     		add	r7, sp, #0
 3357              	.LCFI271:
 3358              		.cfi_def_cfa_register 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 114


 3359 0006 0346     		mov	r3, r0
 3360 0008 FB71     		strb	r3, [r7, #7]
3127:./Library/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 3361              		.loc 1 3127 12
 3362 000a 0023     		movs	r3, #0
 3363 000c FB73     		strb	r3, [r7, #15]
3128:./Library/stm32f4xx_rcc.c **** 
3129:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3130:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
3131:./Library/stm32f4xx_rcc.c **** 
3132:./Library/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
3133:./Library/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 3364              		.loc 1 3133 11
 3365 000e 094B     		ldr	r3, .L207
 3366 0010 DA68     		ldr	r2, [r3, #12]
 3367              		.loc 1 3133 17
 3368 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3369 0014 1340     		ands	r3, r3, r2
 3370              		.loc 1 3133 6
 3371 0016 002B     		cmp	r3, #0
 3372 0018 02D0     		beq	.L204
3134:./Library/stm32f4xx_rcc.c ****   {
3135:./Library/stm32f4xx_rcc.c ****     bitstatus = SET;
 3373              		.loc 1 3135 15
 3374 001a 0123     		movs	r3, #1
 3375 001c FB73     		strb	r3, [r7, #15]
 3376 001e 01E0     		b	.L205
 3377              	.L204:
3136:./Library/stm32f4xx_rcc.c ****   }
3137:./Library/stm32f4xx_rcc.c ****   else
3138:./Library/stm32f4xx_rcc.c ****   {
3139:./Library/stm32f4xx_rcc.c ****     bitstatus = RESET;
 3378              		.loc 1 3139 15
 3379 0020 0023     		movs	r3, #0
 3380 0022 FB73     		strb	r3, [r7, #15]
 3381              	.L205:
3140:./Library/stm32f4xx_rcc.c ****   }
3141:./Library/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
3142:./Library/stm32f4xx_rcc.c ****   return  bitstatus;
 3382              		.loc 1 3142 11
 3383 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3143:./Library/stm32f4xx_rcc.c **** }
 3384              		.loc 1 3143 1
 3385 0026 1846     		mov	r0, r3
 3386 0028 1437     		adds	r7, r7, #20
 3387              	.LCFI272:
 3388              		.cfi_def_cfa_offset 4
 3389 002a BD46     		mov	sp, r7
 3390              	.LCFI273:
 3391              		.cfi_def_cfa_register 13
 3392              		@ sp needed
 3393 002c 5DF8047B 		ldr	r7, [sp], #4
 3394              	.LCFI274:
 3395              		.cfi_restore 7
 3396              		.cfi_def_cfa_offset 0
 3397 0030 7047     		bx	lr
 3398              	.L208:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 115


 3399 0032 00BF     		.align	2
 3400              	.L207:
 3401 0034 00380240 		.word	1073887232
 3402              		.cfi_endproc
 3403              	.LFE169:
 3405              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 3406              		.align	1
 3407              		.global	RCC_ClearITPendingBit
 3408              		.syntax unified
 3409              		.thumb
 3410              		.thumb_func
 3412              	RCC_ClearITPendingBit:
 3413              	.LFB170:
3144:./Library/stm32f4xx_rcc.c **** 
3145:./Library/stm32f4xx_rcc.c **** /**
3146:./Library/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
3147:./Library/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
3148:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3149:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3150:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3151:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3152:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3153:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3154:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
3155:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3156:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3157:./Library/stm32f4xx_rcc.c ****   * @retval None
3158:./Library/stm32f4xx_rcc.c ****   */
3159:./Library/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
3160:./Library/stm32f4xx_rcc.c **** {
 3414              		.loc 1 3160 1
 3415              		.cfi_startproc
 3416              		@ args = 0, pretend = 0, frame = 8
 3417              		@ frame_needed = 1, uses_anonymous_args = 0
 3418              		@ link register save eliminated.
 3419 0000 80B4     		push	{r7}
 3420              	.LCFI275:
 3421              		.cfi_def_cfa_offset 4
 3422              		.cfi_offset 7, -4
 3423 0002 83B0     		sub	sp, sp, #12
 3424              	.LCFI276:
 3425              		.cfi_def_cfa_offset 16
 3426 0004 00AF     		add	r7, sp, #0
 3427              	.LCFI277:
 3428              		.cfi_def_cfa_register 7
 3429 0006 0346     		mov	r3, r0
 3430 0008 FB71     		strb	r3, [r7, #7]
3161:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3162:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
3163:./Library/stm32f4xx_rcc.c **** 
3164:./Library/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
3165:./Library/stm32f4xx_rcc.c ****      pending bits */
3166:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 3431              		.loc 1 3166 3
 3432 000a 044A     		ldr	r2, .L210
 3433              		.loc 1 3166 39
 3434 000c FB79     		ldrb	r3, [r7, #7]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 116


 3435 000e 1370     		strb	r3, [r2]
3167:./Library/stm32f4xx_rcc.c **** }
 3436              		.loc 1 3167 1
 3437 0010 00BF     		nop
 3438 0012 0C37     		adds	r7, r7, #12
 3439              	.LCFI278:
 3440              		.cfi_def_cfa_offset 4
 3441 0014 BD46     		mov	sp, r7
 3442              	.LCFI279:
 3443              		.cfi_def_cfa_register 13
 3444              		@ sp needed
 3445 0016 5DF8047B 		ldr	r7, [sp], #4
 3446              	.LCFI280:
 3447              		.cfi_restore 7
 3448              		.cfi_def_cfa_offset 0
 3449 001a 7047     		bx	lr
 3450              	.L211:
 3451              		.align	2
 3452              	.L210:
 3453 001c 0E380240 		.word	1073887246
 3454              		.cfi_endproc
 3455              	.LFE170:
 3457              		.text
 3458              	.Letext0:
 3459              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 3460              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 3461              		.file 4 "./CORE/stm32f4xx.h"
 3462              		.file 5 "./Library/stm32f4xx_rcc.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 117


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:20     .data.APBAHBPrescTable:0000000000000000 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:23     .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:27     .text.RCC_DeInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:33     .text.RCC_DeInit:0000000000000000 RCC_DeInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:106    .text.RCC_DeInit:0000000000000058 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:113    .text.RCC_HSEConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:119    .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:165    .text.RCC_HSEConfig:0000000000000024 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:170    .text.RCC_WaitForHSEStartUp:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:176    .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3183   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:254    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:260    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:321    .text.RCC_AdjustHSICalibrationValue:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:326    .text.RCC_HSICmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:332    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:374    .text.RCC_HSICmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:379    .text.RCC_LSEConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:385    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:456    .text.RCC_LSEConfig:0000000000000040 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:461    .text.RCC_LSICmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:467    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:509    .text.RCC_LSICmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:514    .text.RCC_PLLConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:520    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:585    .text.RCC_PLLConfig:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:590    .text.RCC_PLLCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:596    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:638    .text.RCC_PLLCmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:643    .text.RCC_PLLI2SConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:649    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:697    .text.RCC_PLLI2SConfig:0000000000000028 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:702    .text.RCC_PLLI2SCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:708    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:750    .text.RCC_PLLI2SCmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:755    .text.RCC_PLLSAIConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:761    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:815    .text.RCC_PLLSAIConfig:0000000000000030 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:820    .text.RCC_PLLSAICmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:826    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:868    .text.RCC_PLLSAICmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:873    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:879    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:921    .text.RCC_ClockSecuritySystemCmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:926    .text.RCC_MCO1Config:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:932    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:993    .text.RCC_MCO1Config:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:998    .text.RCC_MCO2Config:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1004   .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1065   .text.RCC_MCO2Config:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1070   .text.RCC_SYSCLKConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1076   .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1133   .text.RCC_SYSCLKConfig:0000000000000034 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1138   .text.RCC_GetSYSCLKSource:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1144   .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 118


/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1179   .text.RCC_GetSYSCLKSource:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1184   .text.RCC_HCLKConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1190   .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1247   .text.RCC_HCLKConfig:0000000000000034 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1252   .text.RCC_PCLK1Config:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1258   .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1315   .text.RCC_PCLK1Config:0000000000000034 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1320   .text.RCC_PCLK2Config:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1326   .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1385   .text.RCC_PCLK2Config:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1390   .text.RCC_GetClocksFreq:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1396   .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1640   .text.RCC_GetClocksFreq:000000000000014c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1648   .text.RCC_RTCCLKConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1654   .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1731   .text.RCC_RTCCLKConfig:0000000000000058 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1736   .text.RCC_RTCCLKCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1742   .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1784   .text.RCC_RTCCLKCmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1789   .text.RCC_BackupResetCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1795   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1837   .text.RCC_BackupResetCmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1842   .text.RCC_I2SCLKConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1848   .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1888   .text.RCC_I2SCLKConfig:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1893   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1899   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1958   .text.RCC_SAIPLLI2SClkDivConfig:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1963   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:1969   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2030   .text.RCC_SAIPLLSAIClkDivConfig:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2035   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2041   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2098   .text.RCC_LTDCCLKDivConfig:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2103   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2109   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2149   .text.RCC_TIMCLKPresConfig:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2154   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2160   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2222   .text.RCC_AHB1PeriphClockCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2227   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2233   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2295   .text.RCC_AHB2PeriphClockCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2300   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2306   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2368   .text.RCC_APB1PeriphClockCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2373   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2379   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2441   .text.RCC_APB2PeriphClockCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2446   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2452   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2514   .text.RCC_AHB1PeriphResetCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2519   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2525   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2587   .text.RCC_AHB2PeriphResetCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2592   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2598   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s 			page 119


/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2660   .text.RCC_APB1PeriphResetCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2665   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2671   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2733   .text.RCC_APB2PeriphResetCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2738   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2744   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2806   .text.RCC_AHB1PeriphClockLPModeCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2811   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2817   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2879   .text.RCC_AHB2PeriphClockLPModeCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2884   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2890   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2952   .text.RCC_APB1PeriphClockLPModeCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2957   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:2963   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3025   .text.RCC_APB2PeriphClockLPModeCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3030   .text.RCC_LSEModeConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3036   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3092   .text.RCC_LSEModeConfig:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3097   .text.RCC_ITConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3103   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3172   .text.RCC_ITConfig:0000000000000048 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3177   .text.RCC_GetFlagStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3286   .text.RCC_GetFlagStatus:0000000000000070 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3291   .text.RCC_ClearFlag:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3297   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3331   .text.RCC_ClearFlag:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3336   .text.RCC_GetITStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3342   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3401   .text.RCC_GetITStatus:0000000000000034 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3406   .text.RCC_ClearITPendingBit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3412   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccvuuKlR.s:3453   .text.RCC_ClearITPendingBit:000000000000001c $d

NO UNDEFINED SYMBOLS
