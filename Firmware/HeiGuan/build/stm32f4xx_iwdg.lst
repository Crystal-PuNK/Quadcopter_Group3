ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_iwdg.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.IWDG_WriteAccessCmd,"ax",%progbits
  20              		.align	1
  21              		.global	IWDG_WriteAccessCmd
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	IWDG_WriteAccessCmd:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_iwdg.c"
   1:./Library/stm32f4xx_iwdg.c **** /**
   2:./Library/stm32f4xx_iwdg.c ****   ******************************************************************************
   3:./Library/stm32f4xx_iwdg.c ****   * @file    stm32f4xx_iwdg.c
   4:./Library/stm32f4xx_iwdg.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_iwdg.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_iwdg.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_iwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_iwdg.c ****   *          functionalities of the Independent watchdog (IWDG) peripheral:           
   9:./Library/stm32f4xx_iwdg.c ****   *           + Prescaler and Counter configuration
  10:./Library/stm32f4xx_iwdg.c ****   *           + IWDG activation
  11:./Library/stm32f4xx_iwdg.c ****   *           + Flag management
  12:./Library/stm32f4xx_iwdg.c ****   *
  13:./Library/stm32f4xx_iwdg.c ****     @verbatim    
  14:./Library/stm32f4xx_iwdg.c ****  ===============================================================================
  15:./Library/stm32f4xx_iwdg.c ****                           ##### IWDG features #####
  16:./Library/stm32f4xx_iwdg.c ****  ===============================================================================
  17:./Library/stm32f4xx_iwdg.c ****     [..]  
  18:./Library/stm32f4xx_iwdg.c ****       The IWDG can be started by either software or hardware (configurable
  19:./Library/stm32f4xx_iwdg.c ****       through option byte).
  20:./Library/stm32f4xx_iwdg.c ****               
  21:./Library/stm32f4xx_iwdg.c ****       The IWDG is clocked by its own dedicated low-speed clock (LSI) and
  22:./Library/stm32f4xx_iwdg.c ****       thus stays active even if the main clock fails.
  23:./Library/stm32f4xx_iwdg.c ****       Once the IWDG is started, the LSI is forced ON and cannot be disabled
  24:./Library/stm32f4xx_iwdg.c ****       (LSI cannot be disabled too), and the counter starts counting down from 
  25:./Library/stm32f4xx_iwdg.c ****       the reset value of 0xFFF. When it reaches the end of count value (0x000)
  26:./Library/stm32f4xx_iwdg.c ****       a system reset is generated.
  27:./Library/stm32f4xx_iwdg.c ****       The IWDG counter should be reloaded at regular intervals to prevent
  28:./Library/stm32f4xx_iwdg.c ****       an MCU reset.
  29:./Library/stm32f4xx_iwdg.c ****                              
  30:./Library/stm32f4xx_iwdg.c ****       The IWDG is implemented in the VDD voltage domain that is still functional
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 2


  31:./Library/stm32f4xx_iwdg.c ****       in STOP and STANDBY mode (IWDG reset can wake-up from STANDBY).          
  32:./Library/stm32f4xx_iwdg.c ****               
  33:./Library/stm32f4xx_iwdg.c ****       IWDGRST flag in RCC_CSR register can be used to inform when a IWDG
  34:./Library/stm32f4xx_iwdg.c ****       reset occurs.
  35:./Library/stm32f4xx_iwdg.c ****               
  36:./Library/stm32f4xx_iwdg.c ****       Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
  37:./Library/stm32f4xx_iwdg.c ****       The IWDG timeout may vary due to LSI frequency dispersion. STM32F4xx
  38:./Library/stm32f4xx_iwdg.c ****       devices provide the capability to measure the LSI frequency (LSI clock
  39:./Library/stm32f4xx_iwdg.c ****       connected internally to TIM5 CH4 input capture). The measured value
  40:./Library/stm32f4xx_iwdg.c ****       can be used to have an IWDG timeout with an acceptable accuracy. 
  41:./Library/stm32f4xx_iwdg.c ****       For more information, please refer to the STM32F4xx Reference manual
  42:./Library/stm32f4xx_iwdg.c ****             
  43:./Library/stm32f4xx_iwdg.c ****                      ##### How to use this driver #####
  44:./Library/stm32f4xx_iwdg.c ****  ===============================================================================
  45:./Library/stm32f4xx_iwdg.c ****     [..]
  46:./Library/stm32f4xx_iwdg.c ****       (#) Enable write access to IWDG_PR and IWDG_RLR registers using
  47:./Library/stm32f4xx_iwdg.c ****           IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable) function
  48:./Library/stm32f4xx_iwdg.c ****                  
  49:./Library/stm32f4xx_iwdg.c ****       (#) Configure the IWDG prescaler using IWDG_SetPrescaler() function
  50:./Library/stm32f4xx_iwdg.c ****               
  51:./Library/stm32f4xx_iwdg.c ****       (#) Configure the IWDG counter value using IWDG_SetReload() function.
  52:./Library/stm32f4xx_iwdg.c ****           This value will be loaded in the IWDG counter each time the counter
  53:./Library/stm32f4xx_iwdg.c ****           is reloaded, then the IWDG will start counting down from this value.
  54:./Library/stm32f4xx_iwdg.c ****               
  55:./Library/stm32f4xx_iwdg.c ****       (#) Start the IWDG using IWDG_Enable() function, when the IWDG is used
  56:./Library/stm32f4xx_iwdg.c ****           in software mode (no need to enable the LSI, it will be enabled
  57:./Library/stm32f4xx_iwdg.c ****           by hardware)
  58:./Library/stm32f4xx_iwdg.c ****                
  59:./Library/stm32f4xx_iwdg.c ****       (#) Then the application program must reload the IWDG counter at regular
  60:./Library/stm32f4xx_iwdg.c ****           intervals during normal operation to prevent an MCU reset, using
  61:./Library/stm32f4xx_iwdg.c ****           IWDG_ReloadCounter() function.      
  62:./Library/stm32f4xx_iwdg.c ****             
  63:./Library/stm32f4xx_iwdg.c ****     @endverbatim    
  64:./Library/stm32f4xx_iwdg.c ****   ******************************************************************************
  65:./Library/stm32f4xx_iwdg.c ****   * @attention
  66:./Library/stm32f4xx_iwdg.c ****   *
  67:./Library/stm32f4xx_iwdg.c ****   * Copyright (c) 2016 STMicroelectronics.
  68:./Library/stm32f4xx_iwdg.c ****   * All rights reserved.
  69:./Library/stm32f4xx_iwdg.c ****   *
  70:./Library/stm32f4xx_iwdg.c ****   * This software is licensed under terms that can be found in the LICENSE file
  71:./Library/stm32f4xx_iwdg.c ****   * in the root directory of this software component.
  72:./Library/stm32f4xx_iwdg.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  73:./Library/stm32f4xx_iwdg.c ****   *
  74:./Library/stm32f4xx_iwdg.c ****   ******************************************************************************
  75:./Library/stm32f4xx_iwdg.c ****   */
  76:./Library/stm32f4xx_iwdg.c **** 
  77:./Library/stm32f4xx_iwdg.c **** /* Includes ------------------------------------------------------------------*/
  78:./Library/stm32f4xx_iwdg.c **** #include "stm32f4xx_iwdg.h"
  79:./Library/stm32f4xx_iwdg.c **** 
  80:./Library/stm32f4xx_iwdg.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  81:./Library/stm32f4xx_iwdg.c ****   * @{
  82:./Library/stm32f4xx_iwdg.c ****   */
  83:./Library/stm32f4xx_iwdg.c **** 
  84:./Library/stm32f4xx_iwdg.c **** /** @defgroup IWDG 
  85:./Library/stm32f4xx_iwdg.c ****   * @brief IWDG driver modules
  86:./Library/stm32f4xx_iwdg.c ****   * @{
  87:./Library/stm32f4xx_iwdg.c ****   */ 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 3


  88:./Library/stm32f4xx_iwdg.c **** 
  89:./Library/stm32f4xx_iwdg.c **** /* Private typedef -----------------------------------------------------------*/
  90:./Library/stm32f4xx_iwdg.c **** /* Private define ------------------------------------------------------------*/
  91:./Library/stm32f4xx_iwdg.c **** 
  92:./Library/stm32f4xx_iwdg.c **** /* KR register bit mask */
  93:./Library/stm32f4xx_iwdg.c **** #define KR_KEY_RELOAD    ((uint16_t)0xAAAA)
  94:./Library/stm32f4xx_iwdg.c **** #define KR_KEY_ENABLE    ((uint16_t)0xCCCC)
  95:./Library/stm32f4xx_iwdg.c **** 
  96:./Library/stm32f4xx_iwdg.c **** /* Private macro -------------------------------------------------------------*/
  97:./Library/stm32f4xx_iwdg.c **** /* Private variables ---------------------------------------------------------*/
  98:./Library/stm32f4xx_iwdg.c **** /* Private function prototypes -----------------------------------------------*/
  99:./Library/stm32f4xx_iwdg.c **** /* Private functions ---------------------------------------------------------*/
 100:./Library/stm32f4xx_iwdg.c **** 
 101:./Library/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Private_Functions
 102:./Library/stm32f4xx_iwdg.c ****   * @{
 103:./Library/stm32f4xx_iwdg.c ****   */
 104:./Library/stm32f4xx_iwdg.c **** 
 105:./Library/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Group1 Prescaler and Counter configuration functions
 106:./Library/stm32f4xx_iwdg.c ****  *  @brief   Prescaler and Counter configuration functions
 107:./Library/stm32f4xx_iwdg.c ****  *
 108:./Library/stm32f4xx_iwdg.c **** @verbatim   
 109:./Library/stm32f4xx_iwdg.c ****  ===============================================================================
 110:./Library/stm32f4xx_iwdg.c ****               ##### Prescaler and Counter configuration functions #####
 111:./Library/stm32f4xx_iwdg.c ****  ===============================================================================  
 112:./Library/stm32f4xx_iwdg.c **** 
 113:./Library/stm32f4xx_iwdg.c **** @endverbatim
 114:./Library/stm32f4xx_iwdg.c ****   * @{
 115:./Library/stm32f4xx_iwdg.c ****   */
 116:./Library/stm32f4xx_iwdg.c **** 
 117:./Library/stm32f4xx_iwdg.c **** /**
 118:./Library/stm32f4xx_iwdg.c ****   * @brief  Enables or disables write access to IWDG_PR and IWDG_RLR registers.
 119:./Library/stm32f4xx_iwdg.c ****   * @param  IWDG_WriteAccess: new state of write access to IWDG_PR and IWDG_RLR registers.
 120:./Library/stm32f4xx_iwdg.c ****   *          This parameter can be one of the following values:
 121:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
 122:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR register
 123:./Library/stm32f4xx_iwdg.c ****   * @retval None
 124:./Library/stm32f4xx_iwdg.c ****   */
 125:./Library/stm32f4xx_iwdg.c **** void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
 126:./Library/stm32f4xx_iwdg.c **** {
  29              		.loc 1 126 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 0346     		mov	r3, r0
  45 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 127:./Library/stm32f4xx_iwdg.c ****   /* Check the parameters */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 4


 128:./Library/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
 129:./Library/stm32f4xx_iwdg.c ****   IWDG->KR = IWDG_WriteAccess;
  46              		.loc 1 129 7
  47 000a 044A     		ldr	r2, .L2
  48              		.loc 1 129 12
  49 000c FB88     		ldrh	r3, [r7, #6]
  50 000e 1360     		str	r3, [r2]
 130:./Library/stm32f4xx_iwdg.c **** }
  51              		.loc 1 130 1
  52 0010 00BF     		nop
  53 0012 0C37     		adds	r7, r7, #12
  54              	.LCFI3:
  55              		.cfi_def_cfa_offset 4
  56 0014 BD46     		mov	sp, r7
  57              	.LCFI4:
  58              		.cfi_def_cfa_register 13
  59              		@ sp needed
  60 0016 5DF8047B 		ldr	r7, [sp], #4
  61              	.LCFI5:
  62              		.cfi_restore 7
  63              		.cfi_def_cfa_offset 0
  64 001a 7047     		bx	lr
  65              	.L3:
  66              		.align	2
  67              	.L2:
  68 001c 00300040 		.word	1073754112
  69              		.cfi_endproc
  70              	.LFE123:
  72              		.section	.text.IWDG_SetPrescaler,"ax",%progbits
  73              		.align	1
  74              		.global	IWDG_SetPrescaler
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  79              	IWDG_SetPrescaler:
  80              	.LFB124:
 131:./Library/stm32f4xx_iwdg.c **** 
 132:./Library/stm32f4xx_iwdg.c **** /**
 133:./Library/stm32f4xx_iwdg.c ****   * @brief  Sets IWDG Prescaler value.
 134:./Library/stm32f4xx_iwdg.c ****   * @param  IWDG_Prescaler: specifies the IWDG Prescaler value.
 135:./Library/stm32f4xx_iwdg.c ****   *          This parameter can be one of the following values:
 136:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_4: IWDG prescaler set to 4
 137:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_8: IWDG prescaler set to 8
 138:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_16: IWDG prescaler set to 16
 139:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_32: IWDG prescaler set to 32
 140:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_64: IWDG prescaler set to 64
 141:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
 142:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
 143:./Library/stm32f4xx_iwdg.c ****   * @retval None
 144:./Library/stm32f4xx_iwdg.c ****   */
 145:./Library/stm32f4xx_iwdg.c **** void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
 146:./Library/stm32f4xx_iwdg.c **** {
  81              		.loc 1 146 1
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 8
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85              		@ link register save eliminated.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 5


  86 0000 80B4     		push	{r7}
  87              	.LCFI6:
  88              		.cfi_def_cfa_offset 4
  89              		.cfi_offset 7, -4
  90 0002 83B0     		sub	sp, sp, #12
  91              	.LCFI7:
  92              		.cfi_def_cfa_offset 16
  93 0004 00AF     		add	r7, sp, #0
  94              	.LCFI8:
  95              		.cfi_def_cfa_register 7
  96 0006 0346     		mov	r3, r0
  97 0008 FB71     		strb	r3, [r7, #7]
 147:./Library/stm32f4xx_iwdg.c ****   /* Check the parameters */
 148:./Library/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
 149:./Library/stm32f4xx_iwdg.c ****   IWDG->PR = IWDG_Prescaler;
  98              		.loc 1 149 7
  99 000a 044A     		ldr	r2, .L5
 100              		.loc 1 149 12
 101 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 102 000e 5360     		str	r3, [r2, #4]
 150:./Library/stm32f4xx_iwdg.c **** }
 103              		.loc 1 150 1
 104 0010 00BF     		nop
 105 0012 0C37     		adds	r7, r7, #12
 106              	.LCFI9:
 107              		.cfi_def_cfa_offset 4
 108 0014 BD46     		mov	sp, r7
 109              	.LCFI10:
 110              		.cfi_def_cfa_register 13
 111              		@ sp needed
 112 0016 5DF8047B 		ldr	r7, [sp], #4
 113              	.LCFI11:
 114              		.cfi_restore 7
 115              		.cfi_def_cfa_offset 0
 116 001a 7047     		bx	lr
 117              	.L6:
 118              		.align	2
 119              	.L5:
 120 001c 00300040 		.word	1073754112
 121              		.cfi_endproc
 122              	.LFE124:
 124              		.section	.text.IWDG_SetReload,"ax",%progbits
 125              		.align	1
 126              		.global	IWDG_SetReload
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	IWDG_SetReload:
 132              	.LFB125:
 151:./Library/stm32f4xx_iwdg.c **** 
 152:./Library/stm32f4xx_iwdg.c **** /**
 153:./Library/stm32f4xx_iwdg.c ****   * @brief  Sets IWDG Reload value.
 154:./Library/stm32f4xx_iwdg.c ****   * @param  Reload: specifies the IWDG Reload value.
 155:./Library/stm32f4xx_iwdg.c ****   *          This parameter must be a number between 0 and 0x0FFF.
 156:./Library/stm32f4xx_iwdg.c ****   * @retval None
 157:./Library/stm32f4xx_iwdg.c ****   */
 158:./Library/stm32f4xx_iwdg.c **** void IWDG_SetReload(uint16_t Reload)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 6


 159:./Library/stm32f4xx_iwdg.c **** {
 133              		.loc 1 159 1
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 8
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138 0000 80B4     		push	{r7}
 139              	.LCFI12:
 140              		.cfi_def_cfa_offset 4
 141              		.cfi_offset 7, -4
 142 0002 83B0     		sub	sp, sp, #12
 143              	.LCFI13:
 144              		.cfi_def_cfa_offset 16
 145 0004 00AF     		add	r7, sp, #0
 146              	.LCFI14:
 147              		.cfi_def_cfa_register 7
 148 0006 0346     		mov	r3, r0
 149 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 160:./Library/stm32f4xx_iwdg.c ****   /* Check the parameters */
 161:./Library/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_RELOAD(Reload));
 162:./Library/stm32f4xx_iwdg.c ****   IWDG->RLR = Reload;
 150              		.loc 1 162 7
 151 000a 044A     		ldr	r2, .L8
 152              		.loc 1 162 13
 153 000c FB88     		ldrh	r3, [r7, #6]
 154 000e 9360     		str	r3, [r2, #8]
 163:./Library/stm32f4xx_iwdg.c **** }
 155              		.loc 1 163 1
 156 0010 00BF     		nop
 157 0012 0C37     		adds	r7, r7, #12
 158              	.LCFI15:
 159              		.cfi_def_cfa_offset 4
 160 0014 BD46     		mov	sp, r7
 161              	.LCFI16:
 162              		.cfi_def_cfa_register 13
 163              		@ sp needed
 164 0016 5DF8047B 		ldr	r7, [sp], #4
 165              	.LCFI17:
 166              		.cfi_restore 7
 167              		.cfi_def_cfa_offset 0
 168 001a 7047     		bx	lr
 169              	.L9:
 170              		.align	2
 171              	.L8:
 172 001c 00300040 		.word	1073754112
 173              		.cfi_endproc
 174              	.LFE125:
 176              		.section	.text.IWDG_ReloadCounter,"ax",%progbits
 177              		.align	1
 178              		.global	IWDG_ReloadCounter
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 183              	IWDG_ReloadCounter:
 184              	.LFB126:
 164:./Library/stm32f4xx_iwdg.c **** 
 165:./Library/stm32f4xx_iwdg.c **** /**
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 7


 166:./Library/stm32f4xx_iwdg.c ****   * @brief  Reloads IWDG counter with value defined in the reload register
 167:./Library/stm32f4xx_iwdg.c ****   *         (write access to IWDG_PR and IWDG_RLR registers disabled).
 168:./Library/stm32f4xx_iwdg.c ****   * @param  None
 169:./Library/stm32f4xx_iwdg.c ****   * @retval None
 170:./Library/stm32f4xx_iwdg.c ****   */
 171:./Library/stm32f4xx_iwdg.c **** void IWDG_ReloadCounter(void)
 172:./Library/stm32f4xx_iwdg.c **** {
 185              		.loc 1 172 1
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 190 0000 80B4     		push	{r7}
 191              	.LCFI18:
 192              		.cfi_def_cfa_offset 4
 193              		.cfi_offset 7, -4
 194 0002 00AF     		add	r7, sp, #0
 195              	.LCFI19:
 196              		.cfi_def_cfa_register 7
 173:./Library/stm32f4xx_iwdg.c ****   IWDG->KR = KR_KEY_RELOAD;
 197              		.loc 1 173 7
 198 0004 044B     		ldr	r3, .L11
 199              		.loc 1 173 12
 200 0006 4AF6AA22 		movw	r2, #43690
 201 000a 1A60     		str	r2, [r3]
 174:./Library/stm32f4xx_iwdg.c **** }
 202              		.loc 1 174 1
 203 000c 00BF     		nop
 204 000e BD46     		mov	sp, r7
 205              	.LCFI20:
 206              		.cfi_def_cfa_register 13
 207              		@ sp needed
 208 0010 5DF8047B 		ldr	r7, [sp], #4
 209              	.LCFI21:
 210              		.cfi_restore 7
 211              		.cfi_def_cfa_offset 0
 212 0014 7047     		bx	lr
 213              	.L12:
 214 0016 00BF     		.align	2
 215              	.L11:
 216 0018 00300040 		.word	1073754112
 217              		.cfi_endproc
 218              	.LFE126:
 220              		.section	.text.IWDG_Enable,"ax",%progbits
 221              		.align	1
 222              		.global	IWDG_Enable
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 227              	IWDG_Enable:
 228              	.LFB127:
 175:./Library/stm32f4xx_iwdg.c **** 
 176:./Library/stm32f4xx_iwdg.c **** /**
 177:./Library/stm32f4xx_iwdg.c ****   * @}
 178:./Library/stm32f4xx_iwdg.c ****   */
 179:./Library/stm32f4xx_iwdg.c **** 
 180:./Library/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Group2 IWDG activation function
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 8


 181:./Library/stm32f4xx_iwdg.c ****  *  @brief   IWDG activation function 
 182:./Library/stm32f4xx_iwdg.c ****  *
 183:./Library/stm32f4xx_iwdg.c **** @verbatim   
 184:./Library/stm32f4xx_iwdg.c ****  ===============================================================================
 185:./Library/stm32f4xx_iwdg.c ****                     ##### IWDG activation function #####
 186:./Library/stm32f4xx_iwdg.c ****  ===============================================================================  
 187:./Library/stm32f4xx_iwdg.c **** 
 188:./Library/stm32f4xx_iwdg.c **** @endverbatim
 189:./Library/stm32f4xx_iwdg.c ****   * @{
 190:./Library/stm32f4xx_iwdg.c ****   */
 191:./Library/stm32f4xx_iwdg.c **** 
 192:./Library/stm32f4xx_iwdg.c **** /**
 193:./Library/stm32f4xx_iwdg.c ****   * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
 194:./Library/stm32f4xx_iwdg.c ****   * @param  None
 195:./Library/stm32f4xx_iwdg.c ****   * @retval None
 196:./Library/stm32f4xx_iwdg.c ****   */
 197:./Library/stm32f4xx_iwdg.c **** void IWDG_Enable(void)
 198:./Library/stm32f4xx_iwdg.c **** {
 229              		.loc 1 198 1
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234 0000 80B4     		push	{r7}
 235              	.LCFI22:
 236              		.cfi_def_cfa_offset 4
 237              		.cfi_offset 7, -4
 238 0002 00AF     		add	r7, sp, #0
 239              	.LCFI23:
 240              		.cfi_def_cfa_register 7
 199:./Library/stm32f4xx_iwdg.c ****   IWDG->KR = KR_KEY_ENABLE;
 241              		.loc 1 199 7
 242 0004 044B     		ldr	r3, .L14
 243              		.loc 1 199 12
 244 0006 4CF6CC42 		movw	r2, #52428
 245 000a 1A60     		str	r2, [r3]
 200:./Library/stm32f4xx_iwdg.c **** }
 246              		.loc 1 200 1
 247 000c 00BF     		nop
 248 000e BD46     		mov	sp, r7
 249              	.LCFI24:
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0010 5DF8047B 		ldr	r7, [sp], #4
 253              	.LCFI25:
 254              		.cfi_restore 7
 255              		.cfi_def_cfa_offset 0
 256 0014 7047     		bx	lr
 257              	.L15:
 258 0016 00BF     		.align	2
 259              	.L14:
 260 0018 00300040 		.word	1073754112
 261              		.cfi_endproc
 262              	.LFE127:
 264              		.section	.text.IWDG_GetFlagStatus,"ax",%progbits
 265              		.align	1
 266              		.global	IWDG_GetFlagStatus
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 9


 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 271              	IWDG_GetFlagStatus:
 272              	.LFB128:
 201:./Library/stm32f4xx_iwdg.c **** 
 202:./Library/stm32f4xx_iwdg.c **** /**
 203:./Library/stm32f4xx_iwdg.c ****   * @}
 204:./Library/stm32f4xx_iwdg.c ****   */
 205:./Library/stm32f4xx_iwdg.c **** 
 206:./Library/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Group3 Flag management function 
 207:./Library/stm32f4xx_iwdg.c ****  *  @brief  Flag management function  
 208:./Library/stm32f4xx_iwdg.c ****  *
 209:./Library/stm32f4xx_iwdg.c **** @verbatim   
 210:./Library/stm32f4xx_iwdg.c ****  ===============================================================================
 211:./Library/stm32f4xx_iwdg.c ****                     ##### Flag management function #####
 212:./Library/stm32f4xx_iwdg.c ****  ===============================================================================  
 213:./Library/stm32f4xx_iwdg.c **** 
 214:./Library/stm32f4xx_iwdg.c **** @endverbatim
 215:./Library/stm32f4xx_iwdg.c ****   * @{
 216:./Library/stm32f4xx_iwdg.c ****   */
 217:./Library/stm32f4xx_iwdg.c **** 
 218:./Library/stm32f4xx_iwdg.c **** /**
 219:./Library/stm32f4xx_iwdg.c ****   * @brief  Checks whether the specified IWDG flag is set or not.
 220:./Library/stm32f4xx_iwdg.c ****   * @param  IWDG_FLAG: specifies the flag to check.
 221:./Library/stm32f4xx_iwdg.c ****   *          This parameter can be one of the following values:
 222:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
 223:./Library/stm32f4xx_iwdg.c ****   *            @arg IWDG_FLAG_RVU: Reload Value Update on going
 224:./Library/stm32f4xx_iwdg.c ****   * @retval The new state of IWDG_FLAG (SET or RESET).
 225:./Library/stm32f4xx_iwdg.c ****   */
 226:./Library/stm32f4xx_iwdg.c **** FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
 227:./Library/stm32f4xx_iwdg.c **** {
 273              		.loc 1 227 1
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 16
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0000 80B4     		push	{r7}
 279              	.LCFI26:
 280              		.cfi_def_cfa_offset 4
 281              		.cfi_offset 7, -4
 282 0002 85B0     		sub	sp, sp, #20
 283              	.LCFI27:
 284              		.cfi_def_cfa_offset 24
 285 0004 00AF     		add	r7, sp, #0
 286              	.LCFI28:
 287              		.cfi_def_cfa_register 7
 288 0006 0346     		mov	r3, r0
 289 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 228:./Library/stm32f4xx_iwdg.c ****   FlagStatus bitstatus = RESET;
 290              		.loc 1 228 14
 291 000a 0023     		movs	r3, #0
 292 000c FB73     		strb	r3, [r7, #15]
 229:./Library/stm32f4xx_iwdg.c ****   /* Check the parameters */
 230:./Library/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_FLAG(IWDG_FLAG));
 231:./Library/stm32f4xx_iwdg.c ****   if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 293              		.loc 1 231 12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 10


 294 000e 094B     		ldr	r3, .L20
 295 0010 DA68     		ldr	r2, [r3, #12]
 296              		.loc 1 231 17
 297 0012 FB88     		ldrh	r3, [r7, #6]
 298 0014 1340     		ands	r3, r3, r2
 299              		.loc 1 231 6
 300 0016 002B     		cmp	r3, #0
 301 0018 02D0     		beq	.L17
 232:./Library/stm32f4xx_iwdg.c ****   {
 233:./Library/stm32f4xx_iwdg.c ****     bitstatus = SET;
 302              		.loc 1 233 15
 303 001a 0123     		movs	r3, #1
 304 001c FB73     		strb	r3, [r7, #15]
 305 001e 01E0     		b	.L18
 306              	.L17:
 234:./Library/stm32f4xx_iwdg.c ****   }
 235:./Library/stm32f4xx_iwdg.c ****   else
 236:./Library/stm32f4xx_iwdg.c ****   {
 237:./Library/stm32f4xx_iwdg.c ****     bitstatus = RESET;
 307              		.loc 1 237 15
 308 0020 0023     		movs	r3, #0
 309 0022 FB73     		strb	r3, [r7, #15]
 310              	.L18:
 238:./Library/stm32f4xx_iwdg.c ****   }
 239:./Library/stm32f4xx_iwdg.c ****   /* Return the flag status */
 240:./Library/stm32f4xx_iwdg.c ****   return bitstatus;
 311              		.loc 1 240 10
 312 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 241:./Library/stm32f4xx_iwdg.c **** }
 313              		.loc 1 241 1
 314 0026 1846     		mov	r0, r3
 315 0028 1437     		adds	r7, r7, #20
 316              	.LCFI29:
 317              		.cfi_def_cfa_offset 4
 318 002a BD46     		mov	sp, r7
 319              	.LCFI30:
 320              		.cfi_def_cfa_register 13
 321              		@ sp needed
 322 002c 5DF8047B 		ldr	r7, [sp], #4
 323              	.LCFI31:
 324              		.cfi_restore 7
 325              		.cfi_def_cfa_offset 0
 326 0030 7047     		bx	lr
 327              	.L21:
 328 0032 00BF     		.align	2
 329              	.L20:
 330 0034 00300040 		.word	1073754112
 331              		.cfi_endproc
 332              	.LFE128:
 334              		.text
 335              	.Letext0:
 336              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 337              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 338              		.file 4 "./CORE/stm32f4xx.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_iwdg.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:20     .text.IWDG_WriteAccessCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:26     .text.IWDG_WriteAccessCmd:0000000000000000 IWDG_WriteAccessCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:68     .text.IWDG_WriteAccessCmd:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:73     .text.IWDG_SetPrescaler:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:79     .text.IWDG_SetPrescaler:0000000000000000 IWDG_SetPrescaler
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:120    .text.IWDG_SetPrescaler:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:125    .text.IWDG_SetReload:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:131    .text.IWDG_SetReload:0000000000000000 IWDG_SetReload
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:172    .text.IWDG_SetReload:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:177    .text.IWDG_ReloadCounter:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:183    .text.IWDG_ReloadCounter:0000000000000000 IWDG_ReloadCounter
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:216    .text.IWDG_ReloadCounter:0000000000000018 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:221    .text.IWDG_Enable:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:227    .text.IWDG_Enable:0000000000000000 IWDG_Enable
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:260    .text.IWDG_Enable:0000000000000018 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:265    .text.IWDG_GetFlagStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:271    .text.IWDG_GetFlagStatus:0000000000000000 IWDG_GetFlagStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc97XNYp.s:330    .text.IWDG_GetFlagStatus:0000000000000034 $d

NO UNDEFINED SYMBOLS
