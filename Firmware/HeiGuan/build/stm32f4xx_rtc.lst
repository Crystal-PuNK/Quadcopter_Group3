ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTC_DeInit,"ax",%progbits
  20              		.align	1
  21              		.global	RTC_DeInit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	RTC_DeInit:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_rtc.c"
   1:./Library/stm32f4xx_rtc.c **** /**
   2:./Library/stm32f4xx_rtc.c ****   ******************************************************************************
   3:./Library/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:./Library/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_rtc.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_rtc.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:./Library/stm32f4xx_rtc.c ****   *           + Initialization
  10:./Library/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:./Library/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:./Library/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:./Library/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:./Library/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:./Library/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:./Library/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:./Library/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:./Library/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:./Library/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:./Library/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:./Library/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:./Library/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:./Library/stm32f4xx_rtc.c ****   *
  24:./Library/stm32f4xx_rtc.c **** @verbatim
  25:./Library/stm32f4xx_rtc.c **** 
  26:./Library/stm32f4xx_rtc.c ****  ===================================================================
  27:./Library/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:./Library/stm32f4xx_rtc.c ****  ===================================================================
  29:./Library/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:./Library/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 2


  31:./Library/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:./Library/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
  33:./Library/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:./Library/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
  35:./Library/stm32f4xx_rtc.c **** 
  36:./Library/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:./Library/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:./Library/stm32f4xx_rtc.c ****    (#) The RTC
  39:./Library/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:./Library/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:./Library/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:./Library/stm32f4xx_rtc.c ****   
  43:./Library/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:./Library/stm32f4xx_rtc.c ****       the following functions are available:
  45:./Library/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:./Library/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:./Library/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:./Library/stm32f4xx_rtc.c ****   
  49:./Library/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:./Library/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:./Library/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:./Library/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:./Library/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:./Library/stm32f4xx_rtc.c ****   
  55:./Library/stm32f4xx_rtc.c ****             
  56:./Library/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:./Library/stm32f4xx_rtc.c ****  ===================================================================
  58:./Library/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:./Library/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:./Library/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:./Library/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:./Library/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:./Library/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:./Library/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:./Library/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:./Library/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:./Library/stm32f4xx_rtc.c ****   
  68:./Library/stm32f4xx_rtc.c **** 
  69:./Library/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:./Library/stm32f4xx_rtc.c ****  ===================================================================
  71:./Library/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:./Library/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:./Library/stm32f4xx_rtc.c ****       accesses. 
  74:./Library/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:./Library/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:./Library/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:./Library/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:./Library/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:./Library/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:./Library/stm32f4xx_rtc.c ****   
  81:./Library/stm32f4xx_rtc.c ****   
  82:./Library/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:./Library/stm32f4xx_rtc.c ****  ===================================================================
  84:./Library/stm32f4xx_rtc.c ****  [..] 
  85:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:./Library/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 3


  88:./Library/stm32f4xx_rtc.c ****   
  89:./Library/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
  90:./Library/stm32f4xx_rtc.c ****  ===================================
  91:./Library/stm32f4xx_rtc.c ****  [..] 
  92:./Library/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:./Library/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:./Library/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:./Library/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:./Library/stm32f4xx_rtc.c ****   
  98:./Library/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:./Library/stm32f4xx_rtc.c ****  ===========================
 100:./Library/stm32f4xx_rtc.c ****  [..]
 101:./Library/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:./Library/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:./Library/stm32f4xx_rtc.c ****   
 106:./Library/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:./Library/stm32f4xx_rtc.c ****  ================================
 108:./Library/stm32f4xx_rtc.c ****  [..] 
 109:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:./Library/stm32f4xx_rtc.c ****        function.
 111:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:./Library/stm32f4xx_rtc.c ****        function.
 115:./Library/stm32f4xx_rtc.c ****   
 116:./Library/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:./Library/stm32f4xx_rtc.c ****  =============================
 118:./Library/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:./Library/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:./Library/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:./Library/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:./Library/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:./Library/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:./Library/stm32f4xx_rtc.c ****   
 125:./Library/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:./Library/stm32f4xx_rtc.c ****  ================================================    
 127:./Library/stm32f4xx_rtc.c ****  [..]
 128:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:./Library/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:./Library/stm32f4xx_rtc.c ****        function.
 131:./Library/stm32f4xx_rtc.c ****   
 132:./Library/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:./Library/stm32f4xx_rtc.c ****  ================================================
 134:./Library/stm32f4xx_rtc.c ****  [..]
 135:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:./Library/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:./Library/stm32f4xx_rtc.c ****   
 139:./Library/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:./Library/stm32f4xx_rtc.c ****  ===============================
 141:./Library/stm32f4xx_rtc.c ****  [..]
 142:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:./Library/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 4


 145:./Library/stm32f4xx_rtc.c ****        function.
 146:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
 147:./Library/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:./Library/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 149:./Library/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:./Library/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:./Library/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:./Library/stm32f4xx_rtc.c ****   
 153:./Library/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:./Library/stm32f4xx_rtc.c ****  ============================
 155:./Library/stm32f4xx_rtc.c ****  [..]
 156:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:./Library/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:./Library/stm32f4xx_rtc.c ****        function. 
 159:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:./Library/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:./Library/stm32f4xx_rtc.c ****        function.
 162:./Library/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:./Library/stm32f4xx_rtc.c ****        function.
 164:./Library/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:./Library/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:./Library/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:./Library/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:./Library/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:./Library/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:./Library/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:./Library/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:./Library/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:./Library/stm32f4xx_rtc.c ****   
 174:./Library/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:./Library/stm32f4xx_rtc.c ****  ===========================================
 176:./Library/stm32f4xx_rtc.c ****  [..]
 177:./Library/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:./Library/stm32f4xx_rtc.c ****        function.  
 179:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:./Library/stm32f4xx_rtc.c ****        function.
 181:./Library/stm32f4xx_rtc.c ****    
 182:./Library/stm32f4xx_rtc.c **** 
 183:./Library/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:./Library/stm32f4xx_rtc.c ****  ===================================================================
 185:./Library/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:./Library/stm32f4xx_rtc.c ****       function.
 187:./Library/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:./Library/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:./Library/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:./Library/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:./Library/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:./Library/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:./Library/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:./Library/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:./Library/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:./Library/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:./Library/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:./Library/stm32f4xx_rtc.c ****   
 199:./Library/stm32f4xx_rtc.c **** 
 200:./Library/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:./Library/stm32f4xx_rtc.c ****  ===================================================================
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 5


 202:./Library/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:./Library/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
 204:./Library/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:./Library/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 206:./Library/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:./Library/stm32f4xx_rtc.c ****  
 208:./Library/stm32f4xx_rtc.c ****  [..]   
 209:./Library/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:./Library/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:./Library/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:./Library/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:./Library/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:./Library/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:./Library/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:./Library/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:./Library/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:./Library/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:./Library/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:./Library/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:./Library/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:./Library/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:./Library/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:./Library/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:./Library/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:./Library/stm32f4xx_rtc.c **** 
 236:./Library/stm32f4xx_rtc.c ****             
 237:./Library/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:./Library/stm32f4xx_rtc.c ****  ===================================================================
 239:./Library/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:./Library/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:./Library/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:./Library/stm32f4xx_rtc.c ****  [..]
 243:./Library/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:./Library/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:./Library/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:./Library/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:./Library/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:./Library/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:./Library/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:./Library/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:./Library/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:./Library/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 6


 259:./Library/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:./Library/stm32f4xx_rtc.c ****  
 261:./Library/stm32f4xx_rtc.c ****      
 262:./Library/stm32f4xx_rtc.c **** @endverbatim
 263:./Library/stm32f4xx_rtc.c ****   
 264:./Library/stm32f4xx_rtc.c ****   ******************************************************************************
 265:./Library/stm32f4xx_rtc.c ****   * @attention
 266:./Library/stm32f4xx_rtc.c ****   *
 267:./Library/stm32f4xx_rtc.c ****   * Copyright (c) 2016 STMicroelectronics.
 268:./Library/stm32f4xx_rtc.c ****   * All rights reserved.
 269:./Library/stm32f4xx_rtc.c ****   *
 270:./Library/stm32f4xx_rtc.c ****   * This software is licensed under terms that can be found in the LICENSE file
 271:./Library/stm32f4xx_rtc.c ****   * in the root directory of this software component.
 272:./Library/stm32f4xx_rtc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 273:./Library/stm32f4xx_rtc.c ****   *
 274:./Library/stm32f4xx_rtc.c ****   ******************************************************************************
 275:./Library/stm32f4xx_rtc.c ****   */
 276:./Library/stm32f4xx_rtc.c **** 
 277:./Library/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 278:./Library/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 279:./Library/stm32f4xx_rtc.c **** 
 280:./Library/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:./Library/stm32f4xx_rtc.c ****   * @{
 282:./Library/stm32f4xx_rtc.c ****   */
 283:./Library/stm32f4xx_rtc.c **** 
 284:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:./Library/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:./Library/stm32f4xx_rtc.c ****   * @{
 287:./Library/stm32f4xx_rtc.c ****   */
 288:./Library/stm32f4xx_rtc.c **** 
 289:./Library/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:./Library/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:./Library/stm32f4xx_rtc.c **** 
 292:./Library/stm32f4xx_rtc.c **** /* Masks Definition */
 293:./Library/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:./Library/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:./Library/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:./Library/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:./Library/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 301:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 302:./Library/stm32f4xx_rtc.c **** 
 303:./Library/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 304:./Library/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 305:./Library/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 306:./Library/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 307:./Library/stm32f4xx_rtc.c **** 
 308:./Library/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 309:./Library/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 310:./Library/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 311:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 312:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 313:./Library/stm32f4xx_rtc.c **** 
 314:./Library/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 315:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 7


 316:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 317:./Library/stm32f4xx_rtc.c ****   * @{
 318:./Library/stm32f4xx_rtc.c ****   */ 
 319:./Library/stm32f4xx_rtc.c **** 
 320:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 321:./Library/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 322:./Library/stm32f4xx_rtc.c ****  *
 323:./Library/stm32f4xx_rtc.c **** @verbatim   
 324:./Library/stm32f4xx_rtc.c ****  ===============================================================================
 325:./Library/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 326:./Library/stm32f4xx_rtc.c ****  ===============================================================================
 327:./Library/stm32f4xx_rtc.c ****  
 328:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 329:./Library/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 330:./Library/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 331:./Library/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 332:./Library/stm32f4xx_rtc.c ****   
 333:./Library/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 334:./Library/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 335:./Library/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 336:./Library/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 337:./Library/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 338:./Library/stm32f4xx_rtc.c **** 
 339:./Library/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 340:./Library/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 341:./Library/stm32f4xx_rtc.c **** 
 342:./Library/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 343:./Library/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 344:./Library/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 345:./Library/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 346:./Library/stm32f4xx_rtc.c **** 
 347:./Library/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 348:./Library/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 349:./Library/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 350:./Library/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 351:./Library/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 352:./Library/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 353:./Library/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 354:./Library/stm32f4xx_rtc.c **** 
 355:./Library/stm32f4xx_rtc.c **** @endverbatim
 356:./Library/stm32f4xx_rtc.c ****   * @{
 357:./Library/stm32f4xx_rtc.c ****   */
 358:./Library/stm32f4xx_rtc.c **** 
 359:./Library/stm32f4xx_rtc.c **** /**
 360:./Library/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 361:./Library/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 362:./Library/stm32f4xx_rtc.c ****   *         registers.       
 363:./Library/stm32f4xx_rtc.c ****   * @param  None
 364:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 365:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 366:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 367:./Library/stm32f4xx_rtc.c ****   */
 368:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 369:./Library/stm32f4xx_rtc.c **** {
  29              		.loc 1 369 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 8


  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
 370:./Library/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  44              		.loc 1 370 17
  45 0006 0023     		movs	r3, #0
  46 0008 7B60     		str	r3, [r7, #4]
 371:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  47              		.loc 1 371 12
  48 000a 0023     		movs	r3, #0
  49 000c BB60     		str	r3, [r7, #8]
 372:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  50              		.loc 1 372 15
  51 000e 0023     		movs	r3, #0
  52 0010 FB73     		strb	r3, [r7, #15]
 373:./Library/stm32f4xx_rtc.c ****   
 374:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 375:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  53              		.loc 1 375 6
  54 0012 364B     		ldr	r3, .L9
  55              		.loc 1 375 12
  56 0014 CA22     		movs	r2, #202
  57 0016 5A62     		str	r2, [r3, #36]
 376:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  58              		.loc 1 376 6
  59 0018 344B     		ldr	r3, .L9
  60              		.loc 1 376 12
  61 001a 5322     		movs	r2, #83
  62 001c 5A62     		str	r2, [r3, #36]
 377:./Library/stm32f4xx_rtc.c **** 
 378:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 379:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  63              		.loc 1 379 7
  64 001e FFF7FEFF 		bl	RTC_EnterInitMode
  65 0022 0346     		mov	r3, r0
  66              		.loc 1 379 6
  67 0024 002B     		cmp	r3, #0
  68 0026 02D1     		bne	.L2
 380:./Library/stm32f4xx_rtc.c ****   {
 381:./Library/stm32f4xx_rtc.c ****     status = ERROR;
  69              		.loc 1 381 12
  70 0028 0023     		movs	r3, #0
  71 002a FB73     		strb	r3, [r7, #15]
  72 002c 55E0     		b	.L3
  73              	.L2:
 382:./Library/stm32f4xx_rtc.c ****   }  
 383:./Library/stm32f4xx_rtc.c ****   else
 384:./Library/stm32f4xx_rtc.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 9


 385:./Library/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 386:./Library/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  74              		.loc 1 386 8
  75 002e 2F4B     		ldr	r3, .L9
  76              		.loc 1 386 13
  77 0030 0022     		movs	r2, #0
  78 0032 1A60     		str	r2, [r3]
 387:./Library/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  79              		.loc 1 387 8
  80 0034 2D4B     		ldr	r3, .L9
  81              		.loc 1 387 13
  82 0036 42F20112 		movw	r2, #8449
  83 003a 5A60     		str	r2, [r3, #4]
 388:./Library/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 389:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  84              		.loc 1 389 13
  85 003c 2B4B     		ldr	r3, .L9
  86 003e 9B68     		ldr	r3, [r3, #8]
  87 0040 2A4A     		ldr	r2, .L9
  88 0042 03F00703 		and	r3, r3, #7
  89 0046 9360     		str	r3, [r2, #8]
  90              	.L5:
 390:./Library/stm32f4xx_rtc.c ****   
 391:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 392:./Library/stm32f4xx_rtc.c ****     do
 393:./Library/stm32f4xx_rtc.c ****     {
 394:./Library/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  91              		.loc 1 394 24 discriminator 2
  92 0048 284B     		ldr	r3, .L9
  93 004a DB68     		ldr	r3, [r3, #12]
  94              		.loc 1 394 19 discriminator 2
  95 004c 03F00403 		and	r3, r3, #4
  96 0050 BB60     		str	r3, [r7, #8]
 395:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
  97              		.loc 1 395 17 discriminator 2
  98 0052 7B68     		ldr	r3, [r7, #4]
  99 0054 0133     		adds	r3, r3, #1
 100 0056 7B60     		str	r3, [r7, #4]
 396:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 101              		.loc 1 396 25 discriminator 2
 102 0058 7B68     		ldr	r3, [r7, #4]
 103              		.loc 1 396 5 discriminator 2
 104 005a B3F5803F 		cmp	r3, #65536
 105 005e 02D0     		beq	.L4
 106              		.loc 1 396 46 discriminator 1
 107 0060 BB68     		ldr	r3, [r7, #8]
 108 0062 002B     		cmp	r3, #0
 109 0064 F0D0     		beq	.L5
 110              	.L4:
 397:./Library/stm32f4xx_rtc.c ****     
 398:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 111              		.loc 1 398 13
 112 0066 214B     		ldr	r3, .L9
 113 0068 DB68     		ldr	r3, [r3, #12]
 114              		.loc 1 398 19
 115 006a 03F00403 		and	r3, r3, #4
 116              		.loc 1 398 8
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 10


 117 006e 002B     		cmp	r3, #0
 118 0070 02D1     		bne	.L6
 399:./Library/stm32f4xx_rtc.c ****     {
 400:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 119              		.loc 1 400 14
 120 0072 0023     		movs	r3, #0
 121 0074 FB73     		strb	r3, [r7, #15]
 122 0076 30E0     		b	.L3
 123              	.L6:
 401:./Library/stm32f4xx_rtc.c ****     }
 402:./Library/stm32f4xx_rtc.c ****     else
 403:./Library/stm32f4xx_rtc.c ****     {
 404:./Library/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 405:./Library/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 124              		.loc 1 405 15
 125 0078 1C4B     		ldr	r3, .L9
 126 007a 9B68     		ldr	r3, [r3, #8]
 127 007c 1B4B     		ldr	r3, .L9
 128 007e 0022     		movs	r2, #0
 129 0080 9A60     		str	r2, [r3, #8]
 406:./Library/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 130              		.loc 1 406 10
 131 0082 1A4B     		ldr	r3, .L9
 132              		.loc 1 406 17
 133 0084 4FF6FF72 		movw	r2, #65535
 134 0088 5A61     		str	r2, [r3, #20]
 407:./Library/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 135              		.loc 1 407 10
 136 008a 184B     		ldr	r3, .L9
 137              		.loc 1 407 17
 138 008c 184A     		ldr	r2, .L9+4
 139 008e 1A61     		str	r2, [r3, #16]
 408:./Library/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 140              		.loc 1 408 10
 141 0090 164B     		ldr	r3, .L9
 142              		.loc 1 408 19
 143 0092 0022     		movs	r2, #0
 144 0094 9A61     		str	r2, [r3, #24]
 409:./Library/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 145              		.loc 1 409 10
 146 0096 154B     		ldr	r3, .L9
 147              		.loc 1 409 19
 148 0098 0022     		movs	r2, #0
 149 009a DA61     		str	r2, [r3, #28]
 410:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 150              		.loc 1 410 10
 151 009c 134B     		ldr	r3, .L9
 152              		.loc 1 410 19
 153 009e 0022     		movs	r2, #0
 154 00a0 1A62     		str	r2, [r3, #32]
 411:./Library/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 155              		.loc 1 411 10
 156 00a2 124B     		ldr	r3, .L9
 157              		.loc 1 411 19
 158 00a4 0022     		movs	r2, #0
 159 00a6 DA62     		str	r2, [r3, #44]
 412:./Library/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 11


 160              		.loc 1 412 10
 161 00a8 104B     		ldr	r3, .L9
 162              		.loc 1 412 17
 163 00aa 0022     		movs	r2, #0
 164 00ac DA63     		str	r2, [r3, #60]
 413:./Library/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 165              		.loc 1 413 10
 166 00ae 0F4B     		ldr	r3, .L9
 167              		.loc 1 413 21
 168 00b0 0022     		movs	r2, #0
 169 00b2 5A64     		str	r2, [r3, #68]
 414:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 170              		.loc 1 414 10
 171 00b4 0D4B     		ldr	r3, .L9
 172              		.loc 1 414 21
 173 00b6 0022     		movs	r2, #0
 174 00b8 9A64     		str	r2, [r3, #72]
 415:./Library/stm32f4xx_rtc.c ****       
 416:./Library/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 417:./Library/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 175              		.loc 1 417 10
 176 00ba 0C4B     		ldr	r3, .L9
 177              		.loc 1 417 16
 178 00bc 0022     		movs	r2, #0
 179 00be DA60     		str	r2, [r3, #12]
 418:./Library/stm32f4xx_rtc.c ****       
 419:./Library/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 420:./Library/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 180              		.loc 1 420 10
 181 00c0 0A4B     		ldr	r3, .L9
 182              		.loc 1 420 18
 183 00c2 0022     		movs	r2, #0
 184 00c4 1A64     		str	r2, [r3, #64]
 421:./Library/stm32f4xx_rtc.c ****   
 422:./Library/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 185              		.loc 1 422 10
 186 00c6 FFF7FEFF 		bl	RTC_WaitForSynchro
 187 00ca 0346     		mov	r3, r0
 188              		.loc 1 422 9
 189 00cc 002B     		cmp	r3, #0
 190 00ce 02D1     		bne	.L7
 423:./Library/stm32f4xx_rtc.c ****       {
 424:./Library/stm32f4xx_rtc.c ****         status = ERROR;
 191              		.loc 1 424 16
 192 00d0 0023     		movs	r3, #0
 193 00d2 FB73     		strb	r3, [r7, #15]
 194 00d4 01E0     		b	.L3
 195              	.L7:
 425:./Library/stm32f4xx_rtc.c ****       }
 426:./Library/stm32f4xx_rtc.c ****       else
 427:./Library/stm32f4xx_rtc.c ****       {
 428:./Library/stm32f4xx_rtc.c ****         status = SUCCESS;      
 196              		.loc 1 428 16
 197 00d6 0123     		movs	r3, #1
 198 00d8 FB73     		strb	r3, [r7, #15]
 199              	.L3:
 429:./Library/stm32f4xx_rtc.c ****       }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 12


 430:./Library/stm32f4xx_rtc.c ****     }
 431:./Library/stm32f4xx_rtc.c ****   }
 432:./Library/stm32f4xx_rtc.c ****   
 433:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 434:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 200              		.loc 1 434 6
 201 00da 044B     		ldr	r3, .L9
 202              		.loc 1 434 12
 203 00dc FF22     		movs	r2, #255
 204 00de 5A62     		str	r2, [r3, #36]
 435:./Library/stm32f4xx_rtc.c ****   
 436:./Library/stm32f4xx_rtc.c ****   return status;
 205              		.loc 1 436 10
 206 00e0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 437:./Library/stm32f4xx_rtc.c **** }
 207              		.loc 1 437 1
 208 00e2 1846     		mov	r0, r3
 209 00e4 1037     		adds	r7, r7, #16
 210              	.LCFI3:
 211              		.cfi_def_cfa_offset 8
 212 00e6 BD46     		mov	sp, r7
 213              	.LCFI4:
 214              		.cfi_def_cfa_register 13
 215              		@ sp needed
 216 00e8 80BD     		pop	{r7, pc}
 217              	.L10:
 218 00ea 00BF     		.align	2
 219              	.L9:
 220 00ec 00280040 		.word	1073752064
 221 00f0 FF007F00 		.word	8323327
 222              		.cfi_endproc
 223              	.LFE123:
 225              		.section	.text.RTC_Init,"ax",%progbits
 226              		.align	1
 227              		.global	RTC_Init
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 232              	RTC_Init:
 233              	.LFB124:
 438:./Library/stm32f4xx_rtc.c **** 
 439:./Library/stm32f4xx_rtc.c **** /**
 440:./Library/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 441:./Library/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 442:./Library/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 443:./Library/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 444:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 445:./Library/stm32f4xx_rtc.c ****   *         initialization mode only.  
 446:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 447:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 448:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 449:./Library/stm32f4xx_rtc.c ****   */
 450:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 451:./Library/stm32f4xx_rtc.c **** {
 234              		.loc 1 451 1
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 13


 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238 0000 80B5     		push	{r7, lr}
 239              	.LCFI5:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 7, -8
 242              		.cfi_offset 14, -4
 243 0002 84B0     		sub	sp, sp, #16
 244              	.LCFI6:
 245              		.cfi_def_cfa_offset 24
 246 0004 00AF     		add	r7, sp, #0
 247              	.LCFI7:
 248              		.cfi_def_cfa_register 7
 249 0006 7860     		str	r0, [r7, #4]
 452:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 250              		.loc 1 452 15
 251 0008 0023     		movs	r3, #0
 252 000a FB73     		strb	r3, [r7, #15]
 453:./Library/stm32f4xx_rtc.c ****   
 454:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 455:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 456:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 457:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 458:./Library/stm32f4xx_rtc.c **** 
 459:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 460:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 253              		.loc 1 460 6
 254 000c 194B     		ldr	r3, .L15
 255              		.loc 1 460 12
 256 000e CA22     		movs	r2, #202
 257 0010 5A62     		str	r2, [r3, #36]
 461:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 258              		.loc 1 461 6
 259 0012 184B     		ldr	r3, .L15
 260              		.loc 1 461 12
 261 0014 5322     		movs	r2, #83
 262 0016 5A62     		str	r2, [r3, #36]
 462:./Library/stm32f4xx_rtc.c **** 
 463:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 464:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 263              		.loc 1 464 7
 264 0018 FFF7FEFF 		bl	RTC_EnterInitMode
 265 001c 0346     		mov	r3, r0
 266              		.loc 1 464 6
 267 001e 002B     		cmp	r3, #0
 268 0020 02D1     		bne	.L12
 465:./Library/stm32f4xx_rtc.c ****   {
 466:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 269              		.loc 1 466 12
 270 0022 0023     		movs	r3, #0
 271 0024 FB73     		strb	r3, [r7, #15]
 272 0026 1CE0     		b	.L13
 273              	.L12:
 467:./Library/stm32f4xx_rtc.c ****   } 
 468:./Library/stm32f4xx_rtc.c ****   else
 469:./Library/stm32f4xx_rtc.c ****   {
 470:./Library/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 471:./Library/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 14


 274              		.loc 1 471 13
 275 0028 124B     		ldr	r3, .L15
 276 002a 9B68     		ldr	r3, [r3, #8]
 277 002c 114A     		ldr	r2, .L15
 278 002e 23F04003 		bic	r3, r3, #64
 279 0032 9360     		str	r3, [r2, #8]
 472:./Library/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 473:./Library/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 280              		.loc 1 473 13
 281 0034 0F4B     		ldr	r3, .L15
 282 0036 9A68     		ldr	r2, [r3, #8]
 283              		.loc 1 473 43
 284 0038 7B68     		ldr	r3, [r7, #4]
 285 003a 1B68     		ldr	r3, [r3]
 286              		.loc 1 473 13
 287 003c 0D49     		ldr	r1, .L15
 288 003e 1343     		orrs	r3, r3, r2
 289 0040 8B60     		str	r3, [r1, #8]
 474:./Library/stm32f4xx_rtc.c ****   
 475:./Library/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 476:./Library/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 290              		.loc 1 476 8
 291 0042 0C4A     		ldr	r2, .L15
 292              		.loc 1 476 42
 293 0044 7B68     		ldr	r3, [r7, #4]
 294 0046 9B68     		ldr	r3, [r3, #8]
 295              		.loc 1 476 15
 296 0048 1361     		str	r3, [r2, #16]
 477:./Library/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 297              		.loc 1 477 15
 298 004a 0A4B     		ldr	r3, .L15
 299 004c 1A69     		ldr	r2, [r3, #16]
 300              		.loc 1 477 43
 301 004e 7B68     		ldr	r3, [r7, #4]
 302 0050 5B68     		ldr	r3, [r3, #4]
 303              		.loc 1 477 62
 304 0052 1B04     		lsls	r3, r3, #16
 305              		.loc 1 477 15
 306 0054 0749     		ldr	r1, .L15
 307 0056 1343     		orrs	r3, r3, r2
 308 0058 0B61     		str	r3, [r1, #16]
 478:./Library/stm32f4xx_rtc.c **** 
 479:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 480:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 309              		.loc 1 480 5
 310 005a FFF7FEFF 		bl	RTC_ExitInitMode
 481:./Library/stm32f4xx_rtc.c **** 
 482:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
 311              		.loc 1 482 12
 312 005e 0123     		movs	r3, #1
 313 0060 FB73     		strb	r3, [r7, #15]
 314              	.L13:
 483:./Library/stm32f4xx_rtc.c ****   }
 484:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 485:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 315              		.loc 1 485 6
 316 0062 044B     		ldr	r3, .L15
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 15


 317              		.loc 1 485 12
 318 0064 FF22     		movs	r2, #255
 319 0066 5A62     		str	r2, [r3, #36]
 486:./Library/stm32f4xx_rtc.c ****   
 487:./Library/stm32f4xx_rtc.c ****   return status;
 320              		.loc 1 487 10
 321 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 488:./Library/stm32f4xx_rtc.c **** }
 322              		.loc 1 488 1
 323 006a 1846     		mov	r0, r3
 324 006c 1037     		adds	r7, r7, #16
 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 8
 327 006e BD46     		mov	sp, r7
 328              	.LCFI9:
 329              		.cfi_def_cfa_register 13
 330              		@ sp needed
 331 0070 80BD     		pop	{r7, pc}
 332              	.L16:
 333 0072 00BF     		.align	2
 334              	.L15:
 335 0074 00280040 		.word	1073752064
 336              		.cfi_endproc
 337              	.LFE124:
 339              		.section	.text.RTC_StructInit,"ax",%progbits
 340              		.align	1
 341              		.global	RTC_StructInit
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	RTC_StructInit:
 347              	.LFB125:
 489:./Library/stm32f4xx_rtc.c **** 
 490:./Library/stm32f4xx_rtc.c **** /**
 491:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 492:./Library/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 493:./Library/stm32f4xx_rtc.c ****   *         initialized.
 494:./Library/stm32f4xx_rtc.c ****   * @retval None
 495:./Library/stm32f4xx_rtc.c ****   */
 496:./Library/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 497:./Library/stm32f4xx_rtc.c **** {
 348              		.loc 1 497 1
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              	.LCFI10:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 0002 83B0     		sub	sp, sp, #12
 358              	.LCFI11:
 359              		.cfi_def_cfa_offset 16
 360 0004 00AF     		add	r7, sp, #0
 361              	.LCFI12:
 362              		.cfi_def_cfa_register 7
 363 0006 7860     		str	r0, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 16


 498:./Library/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 499:./Library/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 364              		.loc 1 499 34
 365 0008 7B68     		ldr	r3, [r7, #4]
 366 000a 0022     		movs	r2, #0
 367 000c 1A60     		str	r2, [r3]
 500:./Library/stm32f4xx_rtc.c ****     
 501:./Library/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 502:./Library/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 368              		.loc 1 502 36
 369 000e 7B68     		ldr	r3, [r7, #4]
 370 0010 7F22     		movs	r2, #127
 371 0012 5A60     		str	r2, [r3, #4]
 503:./Library/stm32f4xx_rtc.c **** 
 504:./Library/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 505:./Library/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 372              		.loc 1 505 35
 373 0014 7B68     		ldr	r3, [r7, #4]
 374 0016 FF22     		movs	r2, #255
 375 0018 9A60     		str	r2, [r3, #8]
 506:./Library/stm32f4xx_rtc.c **** }
 376              		.loc 1 506 1
 377 001a 00BF     		nop
 378 001c 0C37     		adds	r7, r7, #12
 379              	.LCFI13:
 380              		.cfi_def_cfa_offset 4
 381 001e BD46     		mov	sp, r7
 382              	.LCFI14:
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 0020 5DF8047B 		ldr	r7, [sp], #4
 386              	.LCFI15:
 387              		.cfi_restore 7
 388              		.cfi_def_cfa_offset 0
 389 0024 7047     		bx	lr
 390              		.cfi_endproc
 391              	.LFE125:
 393              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 394              		.align	1
 395              		.global	RTC_WriteProtectionCmd
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 400              	RTC_WriteProtectionCmd:
 401              	.LFB126:
 507:./Library/stm32f4xx_rtc.c **** 
 508:./Library/stm32f4xx_rtc.c **** /**
 509:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 510:./Library/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 511:./Library/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 512:./Library/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 513:./Library/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 514:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 515:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:./Library/stm32f4xx_rtc.c ****   * @retval None
 517:./Library/stm32f4xx_rtc.c ****   */
 518:./Library/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 17


 519:./Library/stm32f4xx_rtc.c **** {
 402              		.loc 1 519 1
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 8
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407 0000 80B4     		push	{r7}
 408              	.LCFI16:
 409              		.cfi_def_cfa_offset 4
 410              		.cfi_offset 7, -4
 411 0002 83B0     		sub	sp, sp, #12
 412              	.LCFI17:
 413              		.cfi_def_cfa_offset 16
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI18:
 416              		.cfi_def_cfa_register 7
 417 0006 0346     		mov	r3, r0
 418 0008 FB71     		strb	r3, [r7, #7]
 520:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 521:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:./Library/stm32f4xx_rtc.c ****     
 523:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 419              		.loc 1 523 6
 420 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 421 000c 002B     		cmp	r3, #0
 422 000e 03D0     		beq	.L19
 524:./Library/stm32f4xx_rtc.c ****   {
 525:./Library/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 526:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 423              		.loc 1 526 8
 424 0010 074B     		ldr	r3, .L22
 425              		.loc 1 526 14
 426 0012 FF22     		movs	r2, #255
 427 0014 5A62     		str	r2, [r3, #36]
 527:./Library/stm32f4xx_rtc.c ****   }
 528:./Library/stm32f4xx_rtc.c ****   else
 529:./Library/stm32f4xx_rtc.c ****   {
 530:./Library/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 531:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 532:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 533:./Library/stm32f4xx_rtc.c ****   }
 534:./Library/stm32f4xx_rtc.c **** }
 428              		.loc 1 534 1
 429 0016 05E0     		b	.L21
 430              	.L19:
 531:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 431              		.loc 1 531 8
 432 0018 054B     		ldr	r3, .L22
 531:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 433              		.loc 1 531 14
 434 001a CA22     		movs	r2, #202
 435 001c 5A62     		str	r2, [r3, #36]
 532:./Library/stm32f4xx_rtc.c ****   }
 436              		.loc 1 532 8
 437 001e 044B     		ldr	r3, .L22
 532:./Library/stm32f4xx_rtc.c ****   }
 438              		.loc 1 532 14
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 18


 439 0020 5322     		movs	r2, #83
 440 0022 5A62     		str	r2, [r3, #36]
 441              	.L21:
 442              		.loc 1 534 1
 443 0024 00BF     		nop
 444 0026 0C37     		adds	r7, r7, #12
 445              	.LCFI19:
 446              		.cfi_def_cfa_offset 4
 447 0028 BD46     		mov	sp, r7
 448              	.LCFI20:
 449              		.cfi_def_cfa_register 13
 450              		@ sp needed
 451 002a 5DF8047B 		ldr	r7, [sp], #4
 452              	.LCFI21:
 453              		.cfi_restore 7
 454              		.cfi_def_cfa_offset 0
 455 002e 7047     		bx	lr
 456              	.L23:
 457              		.align	2
 458              	.L22:
 459 0030 00280040 		.word	1073752064
 460              		.cfi_endproc
 461              	.LFE126:
 463              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 464              		.align	1
 465              		.global	RTC_EnterInitMode
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 470              	RTC_EnterInitMode:
 471              	.LFB127:
 535:./Library/stm32f4xx_rtc.c **** 
 536:./Library/stm32f4xx_rtc.c **** /**
 537:./Library/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 538:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 539:./Library/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 540:./Library/stm32f4xx_rtc.c ****   * @param  None
 541:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 542:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 543:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 544:./Library/stm32f4xx_rtc.c ****   */
 545:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 546:./Library/stm32f4xx_rtc.c **** {
 472              		.loc 1 546 1
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 16
 475              		@ frame_needed = 1, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 477 0000 80B4     		push	{r7}
 478              	.LCFI22:
 479              		.cfi_def_cfa_offset 4
 480              		.cfi_offset 7, -4
 481 0002 85B0     		sub	sp, sp, #20
 482              	.LCFI23:
 483              		.cfi_def_cfa_offset 24
 484 0004 00AF     		add	r7, sp, #0
 485              	.LCFI24:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 19


 486              		.cfi_def_cfa_register 7
 547:./Library/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 487              		.loc 1 547 17
 488 0006 0023     		movs	r3, #0
 489 0008 7B60     		str	r3, [r7, #4]
 548:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 490              		.loc 1 548 15
 491 000a 0023     		movs	r3, #0
 492 000c FB73     		strb	r3, [r7, #15]
 549:./Library/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 493              		.loc 1 549 12
 494 000e 0023     		movs	r3, #0
 495 0010 BB60     		str	r3, [r7, #8]
 550:./Library/stm32f4xx_rtc.c ****      
 551:./Library/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 552:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 496              		.loc 1 552 11
 497 0012 174B     		ldr	r3, .L31
 498 0014 DB68     		ldr	r3, [r3, #12]
 499              		.loc 1 552 17
 500 0016 03F04003 		and	r3, r3, #64
 501              		.loc 1 552 6
 502 001a 002B     		cmp	r3, #0
 503 001c 1ED1     		bne	.L25
 553:./Library/stm32f4xx_rtc.c ****   {
 554:./Library/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 555:./Library/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 504              		.loc 1 555 8
 505 001e 144B     		ldr	r3, .L31
 506              		.loc 1 555 14
 507 0020 4FF0FF32 		mov	r2, #-1
 508 0024 DA60     		str	r2, [r3, #12]
 509              	.L27:
 556:./Library/stm32f4xx_rtc.c ****     
 557:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 558:./Library/stm32f4xx_rtc.c ****     do
 559:./Library/stm32f4xx_rtc.c ****     {
 560:./Library/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 510              		.loc 1 560 23 discriminator 2
 511 0026 124B     		ldr	r3, .L31
 512 0028 DB68     		ldr	r3, [r3, #12]
 513              		.loc 1 560 18 discriminator 2
 514 002a 03F04003 		and	r3, r3, #64
 515 002e BB60     		str	r3, [r7, #8]
 561:./Library/stm32f4xx_rtc.c ****       initcounter++;  
 516              		.loc 1 561 18 discriminator 2
 517 0030 7B68     		ldr	r3, [r7, #4]
 518 0032 0133     		adds	r3, r3, #1
 519 0034 7B60     		str	r3, [r7, #4]
 562:./Library/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 520              		.loc 1 562 26 discriminator 2
 521 0036 7B68     		ldr	r3, [r7, #4]
 522              		.loc 1 562 5 discriminator 2
 523 0038 B3F5803F 		cmp	r3, #65536
 524 003c 02D0     		beq	.L26
 525              		.loc 1 562 47 discriminator 1
 526 003e BB68     		ldr	r3, [r7, #8]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 20


 527 0040 002B     		cmp	r3, #0
 528 0042 F0D0     		beq	.L27
 529              	.L26:
 563:./Library/stm32f4xx_rtc.c ****     
 564:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 530              		.loc 1 564 13
 531 0044 0A4B     		ldr	r3, .L31
 532 0046 DB68     		ldr	r3, [r3, #12]
 533              		.loc 1 564 19
 534 0048 03F04003 		and	r3, r3, #64
 535              		.loc 1 564 8
 536 004c 002B     		cmp	r3, #0
 537 004e 02D0     		beq	.L28
 565:./Library/stm32f4xx_rtc.c ****     {
 566:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 538              		.loc 1 566 14
 539 0050 0123     		movs	r3, #1
 540 0052 FB73     		strb	r3, [r7, #15]
 541 0054 04E0     		b	.L29
 542              	.L28:
 567:./Library/stm32f4xx_rtc.c ****     }
 568:./Library/stm32f4xx_rtc.c ****     else
 569:./Library/stm32f4xx_rtc.c ****     {
 570:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 543              		.loc 1 570 14
 544 0056 0023     		movs	r3, #0
 545 0058 FB73     		strb	r3, [r7, #15]
 546 005a 01E0     		b	.L29
 547              	.L25:
 571:./Library/stm32f4xx_rtc.c ****     }        
 572:./Library/stm32f4xx_rtc.c ****   }
 573:./Library/stm32f4xx_rtc.c ****   else
 574:./Library/stm32f4xx_rtc.c ****   {
 575:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;  
 548              		.loc 1 575 12
 549 005c 0123     		movs	r3, #1
 550 005e FB73     		strb	r3, [r7, #15]
 551              	.L29:
 576:./Library/stm32f4xx_rtc.c ****   } 
 577:./Library/stm32f4xx_rtc.c ****     
 578:./Library/stm32f4xx_rtc.c ****   return (status);  
 552              		.loc 1 578 10
 553 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 579:./Library/stm32f4xx_rtc.c **** }
 554              		.loc 1 579 1
 555 0062 1846     		mov	r0, r3
 556 0064 1437     		adds	r7, r7, #20
 557              	.LCFI25:
 558              		.cfi_def_cfa_offset 4
 559 0066 BD46     		mov	sp, r7
 560              	.LCFI26:
 561              		.cfi_def_cfa_register 13
 562              		@ sp needed
 563 0068 5DF8047B 		ldr	r7, [sp], #4
 564              	.LCFI27:
 565              		.cfi_restore 7
 566              		.cfi_def_cfa_offset 0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 21


 567 006c 7047     		bx	lr
 568              	.L32:
 569 006e 00BF     		.align	2
 570              	.L31:
 571 0070 00280040 		.word	1073752064
 572              		.cfi_endproc
 573              	.LFE127:
 575              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 576              		.align	1
 577              		.global	RTC_ExitInitMode
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 582              	RTC_ExitInitMode:
 583              	.LFB128:
 580:./Library/stm32f4xx_rtc.c **** 
 581:./Library/stm32f4xx_rtc.c **** /**
 582:./Library/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 583:./Library/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 584:./Library/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 585:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 586:./Library/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 587:./Library/stm32f4xx_rtc.c ****   * @param  None
 588:./Library/stm32f4xx_rtc.c ****   * @retval None
 589:./Library/stm32f4xx_rtc.c ****   */
 590:./Library/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 591:./Library/stm32f4xx_rtc.c **** { 
 584              		.loc 1 591 1
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 1, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589 0000 80B4     		push	{r7}
 590              	.LCFI28:
 591              		.cfi_def_cfa_offset 4
 592              		.cfi_offset 7, -4
 593 0002 00AF     		add	r7, sp, #0
 594              	.LCFI29:
 595              		.cfi_def_cfa_register 7
 592:./Library/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 593:./Library/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 596              		.loc 1 593 12
 597 0004 054B     		ldr	r3, .L34
 598 0006 DB68     		ldr	r3, [r3, #12]
 599 0008 044A     		ldr	r2, .L34
 600 000a 23F08003 		bic	r3, r3, #128
 601 000e D360     		str	r3, [r2, #12]
 594:./Library/stm32f4xx_rtc.c **** }
 602              		.loc 1 594 1
 603 0010 00BF     		nop
 604 0012 BD46     		mov	sp, r7
 605              	.LCFI30:
 606              		.cfi_def_cfa_register 13
 607              		@ sp needed
 608 0014 5DF8047B 		ldr	r7, [sp], #4
 609              	.LCFI31:
 610              		.cfi_restore 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 22


 611              		.cfi_def_cfa_offset 0
 612 0018 7047     		bx	lr
 613              	.L35:
 614 001a 00BF     		.align	2
 615              	.L34:
 616 001c 00280040 		.word	1073752064
 617              		.cfi_endproc
 618              	.LFE128:
 620              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 621              		.align	1
 622              		.global	RTC_WaitForSynchro
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 627              	RTC_WaitForSynchro:
 628              	.LFB129:
 595:./Library/stm32f4xx_rtc.c **** 
 596:./Library/stm32f4xx_rtc.c **** /**
 597:./Library/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 598:./Library/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 599:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 600:./Library/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 601:./Library/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 602:./Library/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 603:./Library/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 604:./Library/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 605:./Library/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 606:./Library/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 607:./Library/stm32f4xx_rtc.c ****   * @param  None
 608:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 609:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 610:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 611:./Library/stm32f4xx_rtc.c ****   */
 612:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 613:./Library/stm32f4xx_rtc.c **** {
 629              		.loc 1 613 1
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 16
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634 0000 80B4     		push	{r7}
 635              	.LCFI32:
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 7, -4
 638 0002 85B0     		sub	sp, sp, #20
 639              	.LCFI33:
 640              		.cfi_def_cfa_offset 24
 641 0004 00AF     		add	r7, sp, #0
 642              	.LCFI34:
 643              		.cfi_def_cfa_register 7
 614:./Library/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 644              		.loc 1 614 17
 645 0006 0023     		movs	r3, #0
 646 0008 7B60     		str	r3, [r7, #4]
 615:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 647              		.loc 1 615 15
 648 000a 0023     		movs	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 23


 649 000c FB73     		strb	r3, [r7, #15]
 616:./Library/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 650              		.loc 1 616 12
 651 000e 0023     		movs	r3, #0
 652 0010 BB60     		str	r3, [r7, #8]
 617:./Library/stm32f4xx_rtc.c **** 
 618:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 619:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 653              		.loc 1 619 6
 654 0012 184B     		ldr	r3, .L42
 655              		.loc 1 619 12
 656 0014 CA22     		movs	r2, #202
 657 0016 5A62     		str	r2, [r3, #36]
 620:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 658              		.loc 1 620 6
 659 0018 164B     		ldr	r3, .L42
 660              		.loc 1 620 12
 661 001a 5322     		movs	r2, #83
 662 001c 5A62     		str	r2, [r3, #36]
 621:./Library/stm32f4xx_rtc.c ****     
 622:./Library/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 623:./Library/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 663              		.loc 1 623 12
 664 001e 154B     		ldr	r3, .L42
 665 0020 DB68     		ldr	r3, [r3, #12]
 666 0022 144A     		ldr	r2, .L42
 667 0024 23F0A003 		bic	r3, r3, #160
 668 0028 D360     		str	r3, [r2, #12]
 669              	.L38:
 624:./Library/stm32f4xx_rtc.c ****     
 625:./Library/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 626:./Library/stm32f4xx_rtc.c ****   do
 627:./Library/stm32f4xx_rtc.c ****   {
 628:./Library/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 670              		.loc 1 628 24 discriminator 2
 671 002a 124B     		ldr	r3, .L42
 672 002c DB68     		ldr	r3, [r3, #12]
 673              		.loc 1 628 19 discriminator 2
 674 002e 03F02003 		and	r3, r3, #32
 675 0032 BB60     		str	r3, [r7, #8]
 629:./Library/stm32f4xx_rtc.c ****     synchrocounter++;  
 676              		.loc 1 629 19 discriminator 2
 677 0034 7B68     		ldr	r3, [r7, #4]
 678 0036 0133     		adds	r3, r3, #1
 679 0038 7B60     		str	r3, [r7, #4]
 630:./Library/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 680              		.loc 1 630 27 discriminator 2
 681 003a 7B68     		ldr	r3, [r7, #4]
 682              		.loc 1 630 3 discriminator 2
 683 003c B3F5003F 		cmp	r3, #131072
 684 0040 02D0     		beq	.L37
 685              		.loc 1 630 47 discriminator 1
 686 0042 BB68     		ldr	r3, [r7, #8]
 687 0044 002B     		cmp	r3, #0
 688 0046 F0D0     		beq	.L38
 689              	.L37:
 631:./Library/stm32f4xx_rtc.c ****     
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 24


 632:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 690              		.loc 1 632 11
 691 0048 0A4B     		ldr	r3, .L42
 692 004a DB68     		ldr	r3, [r3, #12]
 693              		.loc 1 632 17
 694 004c 03F02003 		and	r3, r3, #32
 695              		.loc 1 632 6
 696 0050 002B     		cmp	r3, #0
 697 0052 02D0     		beq	.L39
 633:./Library/stm32f4xx_rtc.c ****   {
 634:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
 698              		.loc 1 634 12
 699 0054 0123     		movs	r3, #1
 700 0056 FB73     		strb	r3, [r7, #15]
 701 0058 01E0     		b	.L40
 702              	.L39:
 635:./Library/stm32f4xx_rtc.c ****   }
 636:./Library/stm32f4xx_rtc.c ****   else
 637:./Library/stm32f4xx_rtc.c ****   {
 638:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 703              		.loc 1 638 12
 704 005a 0023     		movs	r3, #0
 705 005c FB73     		strb	r3, [r7, #15]
 706              	.L40:
 639:./Library/stm32f4xx_rtc.c ****   }        
 640:./Library/stm32f4xx_rtc.c **** 
 641:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 642:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 707              		.loc 1 642 6
 708 005e 054B     		ldr	r3, .L42
 709              		.loc 1 642 12
 710 0060 FF22     		movs	r2, #255
 711 0062 5A62     		str	r2, [r3, #36]
 643:./Library/stm32f4xx_rtc.c ****     
 644:./Library/stm32f4xx_rtc.c ****   return (status); 
 712              		.loc 1 644 10
 713 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 645:./Library/stm32f4xx_rtc.c **** }
 714              		.loc 1 645 1
 715 0066 1846     		mov	r0, r3
 716 0068 1437     		adds	r7, r7, #20
 717              	.LCFI35:
 718              		.cfi_def_cfa_offset 4
 719 006a BD46     		mov	sp, r7
 720              	.LCFI36:
 721              		.cfi_def_cfa_register 13
 722              		@ sp needed
 723 006c 5DF8047B 		ldr	r7, [sp], #4
 724              	.LCFI37:
 725              		.cfi_restore 7
 726              		.cfi_def_cfa_offset 0
 727 0070 7047     		bx	lr
 728              	.L43:
 729 0072 00BF     		.align	2
 730              	.L42:
 731 0074 00280040 		.word	1073752064
 732              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 25


 733              	.LFE129:
 735              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 736              		.align	1
 737              		.global	RTC_RefClockCmd
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 742              	RTC_RefClockCmd:
 743              	.LFB130:
 646:./Library/stm32f4xx_rtc.c **** 
 647:./Library/stm32f4xx_rtc.c **** /**
 648:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 649:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 650:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 651:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 652:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 653:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 654:./Library/stm32f4xx_rtc.c ****   */
 655:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 656:./Library/stm32f4xx_rtc.c **** { 
 744              		.loc 1 656 1
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 16
 747              		@ frame_needed = 1, uses_anonymous_args = 0
 748 0000 80B5     		push	{r7, lr}
 749              	.LCFI38:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 7, -8
 752              		.cfi_offset 14, -4
 753 0002 84B0     		sub	sp, sp, #16
 754              	.LCFI39:
 755              		.cfi_def_cfa_offset 24
 756 0004 00AF     		add	r7, sp, #0
 757              	.LCFI40:
 758              		.cfi_def_cfa_register 7
 759 0006 0346     		mov	r3, r0
 760 0008 FB71     		strb	r3, [r7, #7]
 657:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 761              		.loc 1 657 15
 762 000a 0023     		movs	r3, #0
 763 000c FB73     		strb	r3, [r7, #15]
 658:./Library/stm32f4xx_rtc.c ****   
 659:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 660:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 661:./Library/stm32f4xx_rtc.c ****   
 662:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 663:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 764              		.loc 1 663 6
 765 000e 154B     		ldr	r3, .L50
 766              		.loc 1 663 12
 767 0010 CA22     		movs	r2, #202
 768 0012 5A62     		str	r2, [r3, #36]
 664:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 769              		.loc 1 664 6
 770 0014 134B     		ldr	r3, .L50
 771              		.loc 1 664 12
 772 0016 5322     		movs	r2, #83
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 26


 773 0018 5A62     		str	r2, [r3, #36]
 665:./Library/stm32f4xx_rtc.c ****     
 666:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 667:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 774              		.loc 1 667 7
 775 001a FFF7FEFF 		bl	RTC_EnterInitMode
 776 001e 0346     		mov	r3, r0
 777              		.loc 1 667 6
 778 0020 002B     		cmp	r3, #0
 779 0022 02D1     		bne	.L45
 668:./Library/stm32f4xx_rtc.c ****   {
 669:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 780              		.loc 1 669 12
 781 0024 0023     		movs	r3, #0
 782 0026 FB73     		strb	r3, [r7, #15]
 783 0028 13E0     		b	.L46
 784              	.L45:
 670:./Library/stm32f4xx_rtc.c ****   } 
 671:./Library/stm32f4xx_rtc.c ****   else
 672:./Library/stm32f4xx_rtc.c ****   {  
 673:./Library/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 785              		.loc 1 673 8
 786 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 787 002c 002B     		cmp	r3, #0
 788 002e 06D0     		beq	.L47
 674:./Library/stm32f4xx_rtc.c ****     {
 675:./Library/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 676:./Library/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 789              		.loc 1 676 15
 790 0030 0C4B     		ldr	r3, .L50
 791 0032 9B68     		ldr	r3, [r3, #8]
 792 0034 0B4A     		ldr	r2, .L50
 793 0036 43F01003 		orr	r3, r3, #16
 794 003a 9360     		str	r3, [r2, #8]
 795 003c 05E0     		b	.L48
 796              	.L47:
 677:./Library/stm32f4xx_rtc.c ****     }
 678:./Library/stm32f4xx_rtc.c ****     else
 679:./Library/stm32f4xx_rtc.c ****     {
 680:./Library/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 681:./Library/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 797              		.loc 1 681 15
 798 003e 094B     		ldr	r3, .L50
 799 0040 9B68     		ldr	r3, [r3, #8]
 800 0042 084A     		ldr	r2, .L50
 801 0044 23F01003 		bic	r3, r3, #16
 802 0048 9360     		str	r3, [r2, #8]
 803              	.L48:
 682:./Library/stm32f4xx_rtc.c ****     }
 683:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 684:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 804              		.loc 1 684 5
 805 004a FFF7FEFF 		bl	RTC_ExitInitMode
 685:./Library/stm32f4xx_rtc.c ****     
 686:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
 806              		.loc 1 686 12
 807 004e 0123     		movs	r3, #1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 27


 808 0050 FB73     		strb	r3, [r7, #15]
 809              	.L46:
 687:./Library/stm32f4xx_rtc.c ****   }
 688:./Library/stm32f4xx_rtc.c ****   
 689:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 690:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 810              		.loc 1 690 6
 811 0052 044B     		ldr	r3, .L50
 812              		.loc 1 690 12
 813 0054 FF22     		movs	r2, #255
 814 0056 5A62     		str	r2, [r3, #36]
 691:./Library/stm32f4xx_rtc.c ****   
 692:./Library/stm32f4xx_rtc.c ****   return status; 
 815              		.loc 1 692 10
 816 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 693:./Library/stm32f4xx_rtc.c **** }
 817              		.loc 1 693 1
 818 005a 1846     		mov	r0, r3
 819 005c 1037     		adds	r7, r7, #16
 820              	.LCFI41:
 821              		.cfi_def_cfa_offset 8
 822 005e BD46     		mov	sp, r7
 823              	.LCFI42:
 824              		.cfi_def_cfa_register 13
 825              		@ sp needed
 826 0060 80BD     		pop	{r7, pc}
 827              	.L51:
 828 0062 00BF     		.align	2
 829              	.L50:
 830 0064 00280040 		.word	1073752064
 831              		.cfi_endproc
 832              	.LFE130:
 834              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 835              		.align	1
 836              		.global	RTC_BypassShadowCmd
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 841              	RTC_BypassShadowCmd:
 842              	.LFB131:
 694:./Library/stm32f4xx_rtc.c **** 
 695:./Library/stm32f4xx_rtc.c **** /**
 696:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 697:./Library/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 698:./Library/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 699:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 700:./Library/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 701:./Library/stm32f4xx_rtc.c ****   * @retval None
 702:./Library/stm32f4xx_rtc.c **** */
 703:./Library/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 704:./Library/stm32f4xx_rtc.c **** {
 843              		.loc 1 704 1
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 8
 846              		@ frame_needed = 1, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 848 0000 80B4     		push	{r7}
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 28


 849              	.LCFI43:
 850              		.cfi_def_cfa_offset 4
 851              		.cfi_offset 7, -4
 852 0002 83B0     		sub	sp, sp, #12
 853              	.LCFI44:
 854              		.cfi_def_cfa_offset 16
 855 0004 00AF     		add	r7, sp, #0
 856              	.LCFI45:
 857              		.cfi_def_cfa_register 7
 858 0006 0346     		mov	r3, r0
 859 0008 FB71     		strb	r3, [r7, #7]
 705:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 706:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707:./Library/stm32f4xx_rtc.c **** 
 708:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 709:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 860              		.loc 1 709 6
 861 000a 0F4B     		ldr	r3, .L55
 862              		.loc 1 709 12
 863 000c CA22     		movs	r2, #202
 864 000e 5A62     		str	r2, [r3, #36]
 710:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 865              		.loc 1 710 6
 866 0010 0D4B     		ldr	r3, .L55
 867              		.loc 1 710 12
 868 0012 5322     		movs	r2, #83
 869 0014 5A62     		str	r2, [r3, #36]
 711:./Library/stm32f4xx_rtc.c ****   
 712:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 870              		.loc 1 712 6
 871 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 872 0018 002B     		cmp	r3, #0
 873 001a 06D0     		beq	.L53
 713:./Library/stm32f4xx_rtc.c ****   {
 714:./Library/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 715:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 874              		.loc 1 715 13
 875 001c 0A4B     		ldr	r3, .L55
 876 001e 9B68     		ldr	r3, [r3, #8]
 877 0020 094A     		ldr	r2, .L55
 878 0022 43F02003 		orr	r3, r3, #32
 879 0026 9360     		str	r3, [r2, #8]
 880 0028 05E0     		b	.L54
 881              	.L53:
 716:./Library/stm32f4xx_rtc.c ****   }
 717:./Library/stm32f4xx_rtc.c ****   else
 718:./Library/stm32f4xx_rtc.c ****   {
 719:./Library/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 720:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 882              		.loc 1 720 13
 883 002a 074B     		ldr	r3, .L55
 884 002c 9B68     		ldr	r3, [r3, #8]
 885 002e 064A     		ldr	r2, .L55
 886 0030 03F0DF03 		and	r3, r3, #223
 887 0034 9360     		str	r3, [r2, #8]
 888              	.L54:
 721:./Library/stm32f4xx_rtc.c ****   }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 29


 722:./Library/stm32f4xx_rtc.c **** 
 723:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 724:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 889              		.loc 1 724 6
 890 0036 044B     		ldr	r3, .L55
 891              		.loc 1 724 12
 892 0038 FF22     		movs	r2, #255
 893 003a 5A62     		str	r2, [r3, #36]
 725:./Library/stm32f4xx_rtc.c **** }
 894              		.loc 1 725 1
 895 003c 00BF     		nop
 896 003e 0C37     		adds	r7, r7, #12
 897              	.LCFI46:
 898              		.cfi_def_cfa_offset 4
 899 0040 BD46     		mov	sp, r7
 900              	.LCFI47:
 901              		.cfi_def_cfa_register 13
 902              		@ sp needed
 903 0042 5DF8047B 		ldr	r7, [sp], #4
 904              	.LCFI48:
 905              		.cfi_restore 7
 906              		.cfi_def_cfa_offset 0
 907 0046 7047     		bx	lr
 908              	.L56:
 909              		.align	2
 910              	.L55:
 911 0048 00280040 		.word	1073752064
 912              		.cfi_endproc
 913              	.LFE131:
 915              		.section	.text.RTC_SetTime,"ax",%progbits
 916              		.align	1
 917              		.global	RTC_SetTime
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 922              	RTC_SetTime:
 923              	.LFB132:
 726:./Library/stm32f4xx_rtc.c **** 
 727:./Library/stm32f4xx_rtc.c **** /**
 728:./Library/stm32f4xx_rtc.c ****   * @}
 729:./Library/stm32f4xx_rtc.c ****   */
 730:./Library/stm32f4xx_rtc.c **** 
 731:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 732:./Library/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 733:./Library/stm32f4xx_rtc.c ****  *
 734:./Library/stm32f4xx_rtc.c **** @verbatim   
 735:./Library/stm32f4xx_rtc.c ****  ===============================================================================
 736:./Library/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 737:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
 738:./Library/stm32f4xx_rtc.c ****  
 739:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 740:./Library/stm32f4xx_rtc.c ****       (Time and Date).
 741:./Library/stm32f4xx_rtc.c **** 
 742:./Library/stm32f4xx_rtc.c **** @endverbatim
 743:./Library/stm32f4xx_rtc.c ****   * @{
 744:./Library/stm32f4xx_rtc.c ****   */
 745:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 30


 746:./Library/stm32f4xx_rtc.c **** /**
 747:./Library/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 748:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 749:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 750:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 751:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 752:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 753:./Library/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 754:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 755:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 756:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 757:./Library/stm32f4xx_rtc.c ****   */
 758:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 759:./Library/stm32f4xx_rtc.c **** {
 924              		.loc 1 759 1
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 16
 927              		@ frame_needed = 1, uses_anonymous_args = 0
 928 0000 90B5     		push	{r4, r7, lr}
 929              	.LCFI49:
 930              		.cfi_def_cfa_offset 12
 931              		.cfi_offset 4, -12
 932              		.cfi_offset 7, -8
 933              		.cfi_offset 14, -4
 934 0002 85B0     		sub	sp, sp, #20
 935              	.LCFI50:
 936              		.cfi_def_cfa_offset 32
 937 0004 00AF     		add	r7, sp, #0
 938              	.LCFI51:
 939              		.cfi_def_cfa_register 7
 940 0006 7860     		str	r0, [r7, #4]
 941 0008 3960     		str	r1, [r7]
 760:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 942              		.loc 1 760 12
 943 000a 0023     		movs	r3, #0
 944 000c FB60     		str	r3, [r7, #12]
 761:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 945              		.loc 1 761 15
 946 000e 0023     		movs	r3, #0
 947 0010 FB72     		strb	r3, [r7, #11]
 762:./Library/stm32f4xx_rtc.c ****     
 763:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 764:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 765:./Library/stm32f4xx_rtc.c ****   
 766:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 948              		.loc 1 766 6
 949 0012 7B68     		ldr	r3, [r7, #4]
 950 0014 002B     		cmp	r3, #0
 951 0016 09D1     		bne	.L58
 767:./Library/stm32f4xx_rtc.c ****   {
 768:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 952              		.loc 1 768 13
 953 0018 3D4B     		ldr	r3, .L68
 954 001a 9B68     		ldr	r3, [r3, #8]
 955              		.loc 1 768 18
 956 001c 03F04003 		and	r3, r3, #64
 957              		.loc 1 768 8
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 31


 958 0020 002B     		cmp	r3, #0
 959 0022 14D1     		bne	.L59
 769:./Library/stm32f4xx_rtc.c ****     {
 770:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 771:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 772:./Library/stm32f4xx_rtc.c ****     } 
 773:./Library/stm32f4xx_rtc.c ****     else
 774:./Library/stm32f4xx_rtc.c ****     {
 775:./Library/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 960              		.loc 1 775 31
 961 0024 3B68     		ldr	r3, [r7]
 962 0026 0022     		movs	r2, #0
 963 0028 DA70     		strb	r2, [r3, #3]
 964 002a 10E0     		b	.L59
 965              	.L58:
 776:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 777:./Library/stm32f4xx_rtc.c ****     }
 778:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 779:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 780:./Library/stm32f4xx_rtc.c ****   }
 781:./Library/stm32f4xx_rtc.c ****   else
 782:./Library/stm32f4xx_rtc.c ****   {
 783:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 966              		.loc 1 783 13
 967 002c 384B     		ldr	r3, .L68
 968 002e 9B68     		ldr	r3, [r3, #8]
 969              		.loc 1 783 18
 970 0030 03F04003 		and	r3, r3, #64
 971              		.loc 1 783 8
 972 0034 002B     		cmp	r3, #0
 973 0036 07D0     		beq	.L60
 784:./Library/stm32f4xx_rtc.c ****     {
 785:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 974              		.loc 1 785 16
 975 0038 3B68     		ldr	r3, [r7]
 976 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 977 003c 1846     		mov	r0, r3
 978 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 979 0042 0346     		mov	r3, r0
 980              		.loc 1 785 14
 981 0044 FB60     		str	r3, [r7, #12]
 982 0046 02E0     		b	.L59
 983              	.L60:
 786:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 787:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 788:./Library/stm32f4xx_rtc.c ****     } 
 789:./Library/stm32f4xx_rtc.c ****     else
 790:./Library/stm32f4xx_rtc.c ****     {
 791:./Library/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 984              		.loc 1 791 31
 985 0048 3B68     		ldr	r3, [r7]
 986 004a 0022     		movs	r2, #0
 987 004c DA70     		strb	r2, [r3, #3]
 988              	.L59:
 792:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 793:./Library/stm32f4xx_rtc.c ****     }
 794:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 32


 795:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 796:./Library/stm32f4xx_rtc.c ****   }
 797:./Library/stm32f4xx_rtc.c ****   
 798:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 799:./Library/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 989              		.loc 1 799 6
 990 004e 7B68     		ldr	r3, [r7, #4]
 991 0050 002B     		cmp	r3, #0
 992 0052 0FD0     		beq	.L61
 800:./Library/stm32f4xx_rtc.c ****   {
 801:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 993              		.loc 1 801 41
 994 0054 3B68     		ldr	r3, [r7]
 995 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 996              		.loc 1 801 54
 997 0058 1A04     		lsls	r2, r3, #16
 802:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 998              		.loc 1 802 40
 999 005a 3B68     		ldr	r3, [r7]
 1000 005c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1001              		.loc 1 802 55
 1002 005e 1B02     		lsls	r3, r3, #8
 801:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1003              		.loc 1 801 61
 1004 0060 1343     		orrs	r3, r3, r2
 803:./Library/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 1005              		.loc 1 803 39
 1006 0062 3A68     		ldr	r2, [r7]
 1007 0064 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 802:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1008              		.loc 1 802 61
 1009 0066 1A43     		orrs	r2, r2, r3
 804:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 1010              		.loc 1 804 40
 1011 0068 3B68     		ldr	r3, [r7]
 1012 006a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1013              		.loc 1 804 51
 1014 006c 1B04     		lsls	r3, r3, #16
 801:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1015              		.loc 1 801 12
 1016 006e 1343     		orrs	r3, r3, r2
 1017 0070 FB60     		str	r3, [r7, #12]
 1018 0072 1BE0     		b	.L62
 1019              	.L61:
 805:./Library/stm32f4xx_rtc.c ****   }  
 806:./Library/stm32f4xx_rtc.c ****   else
 807:./Library/stm32f4xx_rtc.c ****   {
 808:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 1020              		.loc 1 808 36
 1021 0074 3B68     		ldr	r3, [r7]
 1022 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1023 0078 1846     		mov	r0, r3
 1024 007a FFF7FEFF 		bl	RTC_ByteToBcd2
 1025 007e 0346     		mov	r3, r0
 1026              		.loc 1 808 78
 1027 0080 1C04     		lsls	r4, r3, #16
 809:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 33


 1028              		.loc 1 809 31
 1029 0082 3B68     		ldr	r3, [r7]
 1030 0084 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1031 0086 1846     		mov	r0, r3
 1032 0088 FFF7FEFF 		bl	RTC_ByteToBcd2
 1033 008c 0346     		mov	r3, r0
 1034              		.loc 1 809 75
 1035 008e 1B02     		lsls	r3, r3, #8
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1036              		.loc 1 808 85
 1037 0090 1C43     		orrs	r4, r4, r3
 810:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 1038              		.loc 1 810 31
 1039 0092 3B68     		ldr	r3, [r7]
 1040 0094 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1041 0096 1846     		mov	r0, r3
 1042 0098 FFF7FEFF 		bl	RTC_ByteToBcd2
 1043 009c 0346     		mov	r3, r0
 809:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1044              		.loc 1 809 81
 1045 009e 44EA0302 		orr	r2, r4, r3
 811:./Library/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 1046              		.loc 1 811 46
 1047 00a2 3B68     		ldr	r3, [r7]
 1048 00a4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1049              		.loc 1 811 57
 1050 00a6 1B04     		lsls	r3, r3, #16
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1051              		.loc 1 808 12
 1052 00a8 1343     		orrs	r3, r3, r2
 1053 00aa FB60     		str	r3, [r7, #12]
 1054              	.L62:
 812:./Library/stm32f4xx_rtc.c ****   }  
 813:./Library/stm32f4xx_rtc.c **** 
 814:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 815:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1055              		.loc 1 815 6
 1056 00ac 184B     		ldr	r3, .L68
 1057              		.loc 1 815 12
 1058 00ae CA22     		movs	r2, #202
 1059 00b0 5A62     		str	r2, [r3, #36]
 816:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1060              		.loc 1 816 6
 1061 00b2 174B     		ldr	r3, .L68
 1062              		.loc 1 816 12
 1063 00b4 5322     		movs	r2, #83
 1064 00b6 5A62     		str	r2, [r3, #36]
 817:./Library/stm32f4xx_rtc.c **** 
 818:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 819:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1065              		.loc 1 819 7
 1066 00b8 FFF7FEFF 		bl	RTC_EnterInitMode
 1067 00bc 0346     		mov	r3, r0
 1068              		.loc 1 819 6
 1069 00be 002B     		cmp	r3, #0
 1070 00c0 02D1     		bne	.L63
 820:./Library/stm32f4xx_rtc.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 34


 821:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 1071              		.loc 1 821 12
 1072 00c2 0023     		movs	r3, #0
 1073 00c4 FB72     		strb	r3, [r7, #11]
 1074 00c6 1BE0     		b	.L64
 1075              	.L63:
 822:./Library/stm32f4xx_rtc.c ****   } 
 823:./Library/stm32f4xx_rtc.c ****   else
 824:./Library/stm32f4xx_rtc.c ****   {
 825:./Library/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 826:./Library/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 1076              		.loc 1 826 8
 1077 00c8 114A     		ldr	r2, .L68
 1078              		.loc 1 826 15
 1079 00ca FB68     		ldr	r3, [r7, #12]
 1080 00cc 03F07F33 		and	r3, r3, #2139062143
 1081 00d0 23F0FE43 		bic	r3, r3, #2130706432
 1082              		.loc 1 826 13
 1083 00d4 1360     		str	r3, [r2]
 827:./Library/stm32f4xx_rtc.c **** 
 828:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 829:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1084              		.loc 1 829 5
 1085 00d6 FFF7FEFF 		bl	RTC_ExitInitMode
 830:./Library/stm32f4xx_rtc.c **** 
 831:./Library/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 832:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1086              		.loc 1 832 13
 1087 00da 0D4B     		ldr	r3, .L68
 1088 00dc 9B68     		ldr	r3, [r3, #8]
 1089              		.loc 1 832 18
 1090 00de 03F02003 		and	r3, r3, #32
 1091              		.loc 1 832 8
 1092 00e2 002B     		cmp	r3, #0
 1093 00e4 0AD1     		bne	.L65
 833:./Library/stm32f4xx_rtc.c ****     {
 834:./Library/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1094              		.loc 1 834 8
 1095 00e6 FFF7FEFF 		bl	RTC_WaitForSynchro
 1096 00ea 0346     		mov	r3, r0
 1097              		.loc 1 834 7
 1098 00ec 002B     		cmp	r3, #0
 1099 00ee 02D1     		bne	.L66
 835:./Library/stm32f4xx_rtc.c ****     {
 836:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 1100              		.loc 1 836 14
 1101 00f0 0023     		movs	r3, #0
 1102 00f2 FB72     		strb	r3, [r7, #11]
 1103 00f4 04E0     		b	.L64
 1104              	.L66:
 837:./Library/stm32f4xx_rtc.c ****     }
 838:./Library/stm32f4xx_rtc.c ****     else
 839:./Library/stm32f4xx_rtc.c ****     {
 840:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 1105              		.loc 1 840 14
 1106 00f6 0123     		movs	r3, #1
 1107 00f8 FB72     		strb	r3, [r7, #11]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 35


 1108 00fa 01E0     		b	.L64
 1109              	.L65:
 841:./Library/stm32f4xx_rtc.c ****     }
 842:./Library/stm32f4xx_rtc.c ****   }
 843:./Library/stm32f4xx_rtc.c ****     else
 844:./Library/stm32f4xx_rtc.c ****     {
 845:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 1110              		.loc 1 845 14
 1111 00fc 0123     		movs	r3, #1
 1112 00fe FB72     		strb	r3, [r7, #11]
 1113              	.L64:
 846:./Library/stm32f4xx_rtc.c ****     }
 847:./Library/stm32f4xx_rtc.c ****   }
 848:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 849:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1114              		.loc 1 849 6
 1115 0100 034B     		ldr	r3, .L68
 1116              		.loc 1 849 12
 1117 0102 FF22     		movs	r2, #255
 1118 0104 5A62     		str	r2, [r3, #36]
 850:./Library/stm32f4xx_rtc.c ****     
 851:./Library/stm32f4xx_rtc.c ****   return status;
 1119              		.loc 1 851 10
 1120 0106 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 852:./Library/stm32f4xx_rtc.c **** }
 1121              		.loc 1 852 1
 1122 0108 1846     		mov	r0, r3
 1123 010a 1437     		adds	r7, r7, #20
 1124              	.LCFI52:
 1125              		.cfi_def_cfa_offset 12
 1126 010c BD46     		mov	sp, r7
 1127              	.LCFI53:
 1128              		.cfi_def_cfa_register 13
 1129              		@ sp needed
 1130 010e 90BD     		pop	{r4, r7, pc}
 1131              	.L69:
 1132              		.align	2
 1133              	.L68:
 1134 0110 00280040 		.word	1073752064
 1135              		.cfi_endproc
 1136              	.LFE132:
 1138              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 1139              		.align	1
 1140              		.global	RTC_TimeStructInit
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1145              	RTC_TimeStructInit:
 1146              	.LFB133:
 853:./Library/stm32f4xx_rtc.c **** 
 854:./Library/stm32f4xx_rtc.c **** /**
 855:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 856:./Library/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 857:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 858:./Library/stm32f4xx_rtc.c ****   *         initialized.
 859:./Library/stm32f4xx_rtc.c ****   * @retval None
 860:./Library/stm32f4xx_rtc.c ****   */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 36


 861:./Library/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 862:./Library/stm32f4xx_rtc.c **** {
 1147              		.loc 1 862 1
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 8
 1150              		@ frame_needed = 1, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 1152 0000 80B4     		push	{r7}
 1153              	.LCFI54:
 1154              		.cfi_def_cfa_offset 4
 1155              		.cfi_offset 7, -4
 1156 0002 83B0     		sub	sp, sp, #12
 1157              	.LCFI55:
 1158              		.cfi_def_cfa_offset 16
 1159 0004 00AF     		add	r7, sp, #0
 1160              	.LCFI56:
 1161              		.cfi_def_cfa_register 7
 1162 0006 7860     		str	r0, [r7, #4]
 863:./Library/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 864:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1163              		.loc 1 864 27
 1164 0008 7B68     		ldr	r3, [r7, #4]
 1165 000a 0022     		movs	r2, #0
 1166 000c DA70     		strb	r2, [r3, #3]
 865:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1167              		.loc 1 865 29
 1168 000e 7B68     		ldr	r3, [r7, #4]
 1169 0010 0022     		movs	r2, #0
 1170 0012 1A70     		strb	r2, [r3]
 866:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1171              		.loc 1 866 31
 1172 0014 7B68     		ldr	r3, [r7, #4]
 1173 0016 0022     		movs	r2, #0
 1174 0018 5A70     		strb	r2, [r3, #1]
 867:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1175              		.loc 1 867 31
 1176 001a 7B68     		ldr	r3, [r7, #4]
 1177 001c 0022     		movs	r2, #0
 1178 001e 9A70     		strb	r2, [r3, #2]
 868:./Library/stm32f4xx_rtc.c **** }
 1179              		.loc 1 868 1
 1180 0020 00BF     		nop
 1181 0022 0C37     		adds	r7, r7, #12
 1182              	.LCFI57:
 1183              		.cfi_def_cfa_offset 4
 1184 0024 BD46     		mov	sp, r7
 1185              	.LCFI58:
 1186              		.cfi_def_cfa_register 13
 1187              		@ sp needed
 1188 0026 5DF8047B 		ldr	r7, [sp], #4
 1189              	.LCFI59:
 1190              		.cfi_restore 7
 1191              		.cfi_def_cfa_offset 0
 1192 002a 7047     		bx	lr
 1193              		.cfi_endproc
 1194              	.LFE133:
 1196              		.section	.text.RTC_GetTime,"ax",%progbits
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 37


 1197              		.align	1
 1198              		.global	RTC_GetTime
 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1203              	RTC_GetTime:
 1204              	.LFB134:
 869:./Library/stm32f4xx_rtc.c **** 
 870:./Library/stm32f4xx_rtc.c **** /**
 871:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 872:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 873:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 874:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 875:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 876:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 877:./Library/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 878:./Library/stm32f4xx_rtc.c ****   * @retval None
 879:./Library/stm32f4xx_rtc.c ****   */
 880:./Library/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 881:./Library/stm32f4xx_rtc.c **** {
 1205              		.loc 1 881 1
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 16
 1208              		@ frame_needed = 1, uses_anonymous_args = 0
 1209 0000 80B5     		push	{r7, lr}
 1210              	.LCFI60:
 1211              		.cfi_def_cfa_offset 8
 1212              		.cfi_offset 7, -8
 1213              		.cfi_offset 14, -4
 1214 0002 84B0     		sub	sp, sp, #16
 1215              	.LCFI61:
 1216              		.cfi_def_cfa_offset 24
 1217 0004 00AF     		add	r7, sp, #0
 1218              	.LCFI62:
 1219              		.cfi_def_cfa_register 7
 1220 0006 7860     		str	r0, [r7, #4]
 1221 0008 3960     		str	r1, [r7]
 882:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1222              		.loc 1 882 12
 1223 000a 0023     		movs	r3, #0
 1224 000c FB60     		str	r3, [r7, #12]
 883:./Library/stm32f4xx_rtc.c **** 
 884:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 885:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 886:./Library/stm32f4xx_rtc.c **** 
 887:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 888:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1225              		.loc 1 888 26
 1226 000e 244B     		ldr	r3, .L74
 1227 0010 1B68     		ldr	r3, [r3]
 1228              		.loc 1 888 10
 1229 0012 03F07F33 		and	r3, r3, #2139062143
 1230 0016 23F0FE43 		bic	r3, r3, #2130706432
 1231 001a FB60     		str	r3, [r7, #12]
 889:./Library/stm32f4xx_rtc.c ****   
 890:./Library/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 891:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 38


 1232              		.loc 1 891 76
 1233 001c FB68     		ldr	r3, [r7, #12]
 1234 001e 1B0C     		lsrs	r3, r3, #16
 1235              		.loc 1 891 31
 1236 0020 DBB2     		uxtb	r3, r3
 1237 0022 03F03F03 		and	r3, r3, #63
 1238 0026 DAB2     		uxtb	r2, r3
 1239              		.loc 1 891 29
 1240 0028 3B68     		ldr	r3, [r7]
 1241 002a 1A70     		strb	r2, [r3]
 892:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1242              		.loc 1 892 80
 1243 002c FB68     		ldr	r3, [r7, #12]
 1244 002e 1B0A     		lsrs	r3, r3, #8
 1245              		.loc 1 892 33
 1246 0030 DBB2     		uxtb	r3, r3
 1247 0032 03F07F03 		and	r3, r3, #127
 1248 0036 DAB2     		uxtb	r2, r3
 1249              		.loc 1 892 31
 1250 0038 3B68     		ldr	r3, [r7]
 1251 003a 5A70     		strb	r2, [r3, #1]
 893:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1252              		.loc 1 893 33
 1253 003c FB68     		ldr	r3, [r7, #12]
 1254 003e DBB2     		uxtb	r3, r3
 1255 0040 03F07F03 		and	r3, r3, #127
 1256 0044 DAB2     		uxtb	r2, r3
 1257              		.loc 1 893 31
 1258 0046 3B68     		ldr	r3, [r7]
 1259 0048 9A70     		strb	r2, [r3, #2]
 894:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1260              		.loc 1 894 62
 1261 004a FB68     		ldr	r3, [r7, #12]
 1262 004c 1B0C     		lsrs	r3, r3, #16
 1263              		.loc 1 894 29
 1264 004e DBB2     		uxtb	r3, r3
 1265 0050 03F04003 		and	r3, r3, #64
 1266 0054 DAB2     		uxtb	r2, r3
 1267              		.loc 1 894 27
 1268 0056 3B68     		ldr	r3, [r7]
 1269 0058 DA70     		strb	r2, [r3, #3]
 895:./Library/stm32f4xx_rtc.c **** 
 896:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 897:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1270              		.loc 1 897 6
 1271 005a 7B68     		ldr	r3, [r7, #4]
 1272 005c 002B     		cmp	r3, #0
 1273 005e 1AD1     		bne	.L73
 898:./Library/stm32f4xx_rtc.c ****   {
 899:./Library/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 900:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1274              		.loc 1 900 42
 1275 0060 3B68     		ldr	r3, [r7]
 1276 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1277 0064 1846     		mov	r0, r3
 1278 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1279 006a 0346     		mov	r3, r0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 39


 1280 006c 1A46     		mov	r2, r3
 1281              		.loc 1 900 31
 1282 006e 3B68     		ldr	r3, [r7]
 1283 0070 1A70     		strb	r2, [r3]
 901:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1284              		.loc 1 901 44
 1285 0072 3B68     		ldr	r3, [r7]
 1286 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1287 0076 1846     		mov	r0, r3
 1288 0078 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1289 007c 0346     		mov	r3, r0
 1290 007e 1A46     		mov	r2, r3
 1291              		.loc 1 901 33
 1292 0080 3B68     		ldr	r3, [r7]
 1293 0082 5A70     		strb	r2, [r3, #1]
 902:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1294              		.loc 1 902 44
 1295 0084 3B68     		ldr	r3, [r7]
 1296 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1297 0088 1846     		mov	r0, r3
 1298 008a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1299 008e 0346     		mov	r3, r0
 1300 0090 1A46     		mov	r2, r3
 1301              		.loc 1 902 33
 1302 0092 3B68     		ldr	r3, [r7]
 1303 0094 9A70     		strb	r2, [r3, #2]
 1304              	.L73:
 903:./Library/stm32f4xx_rtc.c ****   }
 904:./Library/stm32f4xx_rtc.c **** }
 1305              		.loc 1 904 1
 1306 0096 00BF     		nop
 1307 0098 1037     		adds	r7, r7, #16
 1308              	.LCFI63:
 1309              		.cfi_def_cfa_offset 8
 1310 009a BD46     		mov	sp, r7
 1311              	.LCFI64:
 1312              		.cfi_def_cfa_register 13
 1313              		@ sp needed
 1314 009c 80BD     		pop	{r7, pc}
 1315              	.L75:
 1316 009e 00BF     		.align	2
 1317              	.L74:
 1318 00a0 00280040 		.word	1073752064
 1319              		.cfi_endproc
 1320              	.LFE134:
 1322              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1323              		.align	1
 1324              		.global	RTC_GetSubSecond
 1325              		.syntax unified
 1326              		.thumb
 1327              		.thumb_func
 1329              	RTC_GetSubSecond:
 1330              	.LFB135:
 905:./Library/stm32f4xx_rtc.c **** 
 906:./Library/stm32f4xx_rtc.c **** /**
 907:./Library/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 908:./Library/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 40


 909:./Library/stm32f4xx_rtc.c ****   *         SSR register.
 910:./Library/stm32f4xx_rtc.c ****   * @param  None
 911:./Library/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 912:./Library/stm32f4xx_rtc.c ****   */
 913:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 914:./Library/stm32f4xx_rtc.c **** {
 1331              		.loc 1 914 1
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 8
 1334              		@ frame_needed = 1, uses_anonymous_args = 0
 1335              		@ link register save eliminated.
 1336 0000 80B4     		push	{r7}
 1337              	.LCFI65:
 1338              		.cfi_def_cfa_offset 4
 1339              		.cfi_offset 7, -4
 1340 0002 83B0     		sub	sp, sp, #12
 1341              	.LCFI66:
 1342              		.cfi_def_cfa_offset 16
 1343 0004 00AF     		add	r7, sp, #0
 1344              	.LCFI67:
 1345              		.cfi_def_cfa_register 7
 915:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1346              		.loc 1 915 12
 1347 0006 0023     		movs	r3, #0
 1348 0008 7B60     		str	r3, [r7, #4]
 916:./Library/stm32f4xx_rtc.c ****   
 917:./Library/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 918:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1349              		.loc 1 918 26
 1350 000a 064B     		ldr	r3, .L78
 1351              		.loc 1 918 10
 1352 000c 9B6A     		ldr	r3, [r3, #40]
 1353 000e 7B60     		str	r3, [r7, #4]
 919:./Library/stm32f4xx_rtc.c ****   
 920:./Library/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 921:./Library/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1354              		.loc 1 921 14
 1355 0010 044B     		ldr	r3, .L78
 1356              		.loc 1 921 3
 1357 0012 5B68     		ldr	r3, [r3, #4]
 922:./Library/stm32f4xx_rtc.c ****   
 923:./Library/stm32f4xx_rtc.c ****   return (tmpreg);
 1358              		.loc 1 923 10
 1359 0014 7B68     		ldr	r3, [r7, #4]
 924:./Library/stm32f4xx_rtc.c **** }
 1360              		.loc 1 924 1
 1361 0016 1846     		mov	r0, r3
 1362 0018 0C37     		adds	r7, r7, #12
 1363              	.LCFI68:
 1364              		.cfi_def_cfa_offset 4
 1365 001a BD46     		mov	sp, r7
 1366              	.LCFI69:
 1367              		.cfi_def_cfa_register 13
 1368              		@ sp needed
 1369 001c 5DF8047B 		ldr	r7, [sp], #4
 1370              	.LCFI70:
 1371              		.cfi_restore 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 41


 1372              		.cfi_def_cfa_offset 0
 1373 0020 7047     		bx	lr
 1374              	.L79:
 1375 0022 00BF     		.align	2
 1376              	.L78:
 1377 0024 00280040 		.word	1073752064
 1378              		.cfi_endproc
 1379              	.LFE135:
 1381              		.section	.text.RTC_SetDate,"ax",%progbits
 1382              		.align	1
 1383              		.global	RTC_SetDate
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1388              	RTC_SetDate:
 1389              	.LFB136:
 925:./Library/stm32f4xx_rtc.c **** 
 926:./Library/stm32f4xx_rtc.c **** /**
 927:./Library/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 928:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 929:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 930:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 931:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 932:./Library/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 933:./Library/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 934:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 935:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 936:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 937:./Library/stm32f4xx_rtc.c ****   */
 938:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 939:./Library/stm32f4xx_rtc.c **** {
 1390              		.loc 1 939 1
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 16
 1393              		@ frame_needed = 1, uses_anonymous_args = 0
 1394 0000 90B5     		push	{r4, r7, lr}
 1395              	.LCFI71:
 1396              		.cfi_def_cfa_offset 12
 1397              		.cfi_offset 4, -12
 1398              		.cfi_offset 7, -8
 1399              		.cfi_offset 14, -4
 1400 0002 85B0     		sub	sp, sp, #20
 1401              	.LCFI72:
 1402              		.cfi_def_cfa_offset 32
 1403 0004 00AF     		add	r7, sp, #0
 1404              	.LCFI73:
 1405              		.cfi_def_cfa_register 7
 1406 0006 7860     		str	r0, [r7, #4]
 1407 0008 3960     		str	r1, [r7]
 940:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1408              		.loc 1 940 12
 1409 000a 0023     		movs	r3, #0
 1410 000c FB60     		str	r3, [r7, #12]
 941:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1411              		.loc 1 941 15
 1412 000e 0023     		movs	r3, #0
 1413 0010 FB72     		strb	r3, [r7, #11]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 42


 942:./Library/stm32f4xx_rtc.c ****   
 943:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 944:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 945:./Library/stm32f4xx_rtc.c **** 
 946:./Library/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1414              		.loc 1 946 6
 1415 0012 7B68     		ldr	r3, [r7, #4]
 1416 0014 002B     		cmp	r3, #0
 1417 0016 0ED1     		bne	.L81
 1418              		.loc 1 946 57 discriminator 1
 1419 0018 3B68     		ldr	r3, [r7]
 1420 001a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1421              		.loc 1 946 69 discriminator 1
 1422 001c 03F01003 		and	r3, r3, #16
 1423              		.loc 1 946 38 discriminator 1
 1424 0020 002B     		cmp	r3, #0
 1425 0022 08D0     		beq	.L81
 947:./Library/stm32f4xx_rtc.c ****   {
 948:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1426              		.loc 1 948 48
 1427 0024 3B68     		ldr	r3, [r7]
 1428 0026 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1429              		.loc 1 948 60
 1430 0028 23F01003 		bic	r3, r3, #16
 1431 002c DBB2     		uxtb	r3, r3
 1432              		.loc 1 948 81
 1433 002e 0A33     		adds	r3, r3, #10
 1434 0030 DAB2     		uxtb	r2, r3
 1435              		.loc 1 948 31
 1436 0032 3B68     		ldr	r3, [r7]
 1437 0034 5A70     		strb	r2, [r3, #1]
 1438              	.L81:
 949:./Library/stm32f4xx_rtc.c ****   }  
 950:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1439              		.loc 1 950 6
 1440 0036 7B68     		ldr	r3, [r7, #4]
 1441 0038 002B     		cmp	r3, #0
 1442 003a 0DD0     		beq	.L82
 951:./Library/stm32f4xx_rtc.c ****   {
 952:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 953:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 954:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 955:./Library/stm32f4xx_rtc.c ****   }
 956:./Library/stm32f4xx_rtc.c ****   else
 957:./Library/stm32f4xx_rtc.c ****   {
 958:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 959:./Library/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1443              		.loc 1 959 14
 1444 003c 3B68     		ldr	r3, [r7]
 1445 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1446 0040 1846     		mov	r0, r3
 1447 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1448 0046 0346     		mov	r3, r0
 1449              		.loc 1 959 12
 1450 0048 FB60     		str	r3, [r7, #12]
 960:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 961:./Library/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 43


 1451              		.loc 1 961 14
 1452 004a 3B68     		ldr	r3, [r7]
 1453 004c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1454 004e 1846     		mov	r0, r3
 1455 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1456 0054 0346     		mov	r3, r0
 1457              		.loc 1 961 12
 1458 0056 FB60     		str	r3, [r7, #12]
 1459              	.L82:
 962:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 963:./Library/stm32f4xx_rtc.c ****   }
 964:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 965:./Library/stm32f4xx_rtc.c **** 
 966:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 967:./Library/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1460              		.loc 1 967 6
 1461 0058 7B68     		ldr	r3, [r7, #4]
 1462 005a 002B     		cmp	r3, #0
 1463 005c 0FD0     		beq	.L83
 968:./Library/stm32f4xx_rtc.c ****   {
 969:./Library/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1464              		.loc 1 969 41
 1465 005e 3B68     		ldr	r3, [r7]
 1466 0060 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1467              		.loc 1 969 53
 1468 0062 1A04     		lsls	r2, r3, #16
 970:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1469              		.loc 1 970 41
 1470 0064 3B68     		ldr	r3, [r7]
 1471 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1472              		.loc 1 970 54
 1473 0068 1B02     		lsls	r3, r3, #8
 969:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1474              		.loc 1 969 60
 1475 006a 1343     		orrs	r3, r3, r2
 971:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1476              		.loc 1 971 40
 1477 006c 3A68     		ldr	r2, [r7]
 1478 006e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 970:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1479              		.loc 1 970 60
 1480 0070 1A43     		orrs	r2, r2, r3
 972:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1481              		.loc 1 972 41
 1482 0072 3B68     		ldr	r3, [r7]
 1483 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1484              		.loc 1 972 56
 1485 0076 5B03     		lsls	r3, r3, #13
 969:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1486              		.loc 1 969 12
 1487 0078 1343     		orrs	r3, r3, r2
 1488 007a FB60     		str	r3, [r7, #12]
 1489 007c 1BE0     		b	.L84
 1490              	.L83:
 973:./Library/stm32f4xx_rtc.c ****   }  
 974:./Library/stm32f4xx_rtc.c ****   else
 975:./Library/stm32f4xx_rtc.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 44


 976:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1491              		.loc 1 976 26
 1492 007e 3B68     		ldr	r3, [r7]
 1493 0080 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1494 0082 1846     		mov	r0, r3
 1495 0084 FFF7FEFF 		bl	RTC_ByteToBcd2
 1496 0088 0346     		mov	r3, r0
 1497              		.loc 1 976 67
 1498 008a 1C04     		lsls	r4, r3, #16
 977:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1499              		.loc 1 977 26
 1500 008c 3B68     		ldr	r3, [r7]
 1501 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1502 0090 1846     		mov	r0, r3
 1503 0092 FFF7FEFF 		bl	RTC_ByteToBcd2
 1504 0096 0346     		mov	r3, r0
 1505              		.loc 1 977 68
 1506 0098 1B02     		lsls	r3, r3, #8
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1507              		.loc 1 976 74
 1508 009a 1C43     		orrs	r4, r4, r3
 978:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1509              		.loc 1 978 26
 1510 009c 3B68     		ldr	r3, [r7]
 1511 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1512 00a0 1846     		mov	r0, r3
 1513 00a2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1514 00a6 0346     		mov	r3, r0
 977:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1515              		.loc 1 977 74
 1516 00a8 44EA0302 		orr	r2, r4, r3
 979:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1517              		.loc 1 979 40
 1518 00ac 3B68     		ldr	r3, [r7]
 1519 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1520              		.loc 1 979 54
 1521 00b0 5B03     		lsls	r3, r3, #13
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1522              		.loc 1 976 12
 1523 00b2 1343     		orrs	r3, r3, r2
 1524 00b4 FB60     		str	r3, [r7, #12]
 1525              	.L84:
 980:./Library/stm32f4xx_rtc.c ****   }
 981:./Library/stm32f4xx_rtc.c **** 
 982:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 983:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1526              		.loc 1 983 6
 1527 00b6 194B     		ldr	r3, .L90
 1528              		.loc 1 983 12
 1529 00b8 CA22     		movs	r2, #202
 1530 00ba 5A62     		str	r2, [r3, #36]
 984:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1531              		.loc 1 984 6
 1532 00bc 174B     		ldr	r3, .L90
 1533              		.loc 1 984 12
 1534 00be 5322     		movs	r2, #83
 1535 00c0 5A62     		str	r2, [r3, #36]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 45


 985:./Library/stm32f4xx_rtc.c **** 
 986:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 987:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1536              		.loc 1 987 7
 1537 00c2 FFF7FEFF 		bl	RTC_EnterInitMode
 1538 00c6 0346     		mov	r3, r0
 1539              		.loc 1 987 6
 1540 00c8 002B     		cmp	r3, #0
 1541 00ca 02D1     		bne	.L85
 988:./Library/stm32f4xx_rtc.c ****   {
 989:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 1542              		.loc 1 989 12
 1543 00cc 0023     		movs	r3, #0
 1544 00ce FB72     		strb	r3, [r7, #11]
 1545 00d0 1BE0     		b	.L86
 1546              	.L85:
 990:./Library/stm32f4xx_rtc.c ****   } 
 991:./Library/stm32f4xx_rtc.c ****   else
 992:./Library/stm32f4xx_rtc.c ****   {
 993:./Library/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 994:./Library/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1547              		.loc 1 994 8
 1548 00d2 124A     		ldr	r2, .L90
 1549              		.loc 1 994 15
 1550 00d4 FB68     		ldr	r3, [r7, #12]
 1551 00d6 23F07F43 		bic	r3, r3, #-16777216
 1552 00da 23F0C003 		bic	r3, r3, #192
 1553              		.loc 1 994 13
 1554 00de 5360     		str	r3, [r2, #4]
 995:./Library/stm32f4xx_rtc.c **** 
 996:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 997:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1555              		.loc 1 997 5
 1556 00e0 FFF7FEFF 		bl	RTC_ExitInitMode
 998:./Library/stm32f4xx_rtc.c **** 
 999:./Library/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1000:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1557              		.loc 1 1000 13
 1558 00e4 0D4B     		ldr	r3, .L90
 1559 00e6 9B68     		ldr	r3, [r3, #8]
 1560              		.loc 1 1000 18
 1561 00e8 03F02003 		and	r3, r3, #32
 1562              		.loc 1 1000 8
 1563 00ec 002B     		cmp	r3, #0
 1564 00ee 0AD1     		bne	.L87
1001:./Library/stm32f4xx_rtc.c ****     {
1002:./Library/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1565              		.loc 1 1002 8
 1566 00f0 FFF7FEFF 		bl	RTC_WaitForSynchro
 1567 00f4 0346     		mov	r3, r0
 1568              		.loc 1 1002 7
 1569 00f6 002B     		cmp	r3, #0
 1570 00f8 02D1     		bne	.L88
1003:./Library/stm32f4xx_rtc.c ****     {
1004:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 1571              		.loc 1 1004 14
 1572 00fa 0023     		movs	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 46


 1573 00fc FB72     		strb	r3, [r7, #11]
 1574 00fe 04E0     		b	.L86
 1575              	.L88:
1005:./Library/stm32f4xx_rtc.c ****     }
1006:./Library/stm32f4xx_rtc.c ****     else
1007:./Library/stm32f4xx_rtc.c ****     {
1008:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 1576              		.loc 1 1008 14
 1577 0100 0123     		movs	r3, #1
 1578 0102 FB72     		strb	r3, [r7, #11]
 1579 0104 01E0     		b	.L86
 1580              	.L87:
1009:./Library/stm32f4xx_rtc.c ****     }
1010:./Library/stm32f4xx_rtc.c ****   }
1011:./Library/stm32f4xx_rtc.c ****     else
1012:./Library/stm32f4xx_rtc.c ****     {
1013:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 1581              		.loc 1 1013 14
 1582 0106 0123     		movs	r3, #1
 1583 0108 FB72     		strb	r3, [r7, #11]
 1584              	.L86:
1014:./Library/stm32f4xx_rtc.c ****     }
1015:./Library/stm32f4xx_rtc.c ****   }
1016:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1017:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1585              		.loc 1 1017 6
 1586 010a 044B     		ldr	r3, .L90
 1587              		.loc 1 1017 12
 1588 010c FF22     		movs	r2, #255
 1589 010e 5A62     		str	r2, [r3, #36]
1018:./Library/stm32f4xx_rtc.c ****   
1019:./Library/stm32f4xx_rtc.c ****   return status;
 1590              		.loc 1 1019 10
 1591 0110 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1020:./Library/stm32f4xx_rtc.c **** }
 1592              		.loc 1 1020 1
 1593 0112 1846     		mov	r0, r3
 1594 0114 1437     		adds	r7, r7, #20
 1595              	.LCFI74:
 1596              		.cfi_def_cfa_offset 12
 1597 0116 BD46     		mov	sp, r7
 1598              	.LCFI75:
 1599              		.cfi_def_cfa_register 13
 1600              		@ sp needed
 1601 0118 90BD     		pop	{r4, r7, pc}
 1602              	.L91:
 1603 011a 00BF     		.align	2
 1604              	.L90:
 1605 011c 00280040 		.word	1073752064
 1606              		.cfi_endproc
 1607              	.LFE136:
 1609              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1610              		.align	1
 1611              		.global	RTC_DateStructInit
 1612              		.syntax unified
 1613              		.thumb
 1614              		.thumb_func
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 47


 1616              	RTC_DateStructInit:
 1617              	.LFB137:
1021:./Library/stm32f4xx_rtc.c **** 
1022:./Library/stm32f4xx_rtc.c **** /**
1023:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1024:./Library/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1025:./Library/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1026:./Library/stm32f4xx_rtc.c ****   *         initialized.
1027:./Library/stm32f4xx_rtc.c ****   * @retval None
1028:./Library/stm32f4xx_rtc.c ****   */
1029:./Library/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1030:./Library/stm32f4xx_rtc.c **** {
 1618              		.loc 1 1030 1
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 8
 1621              		@ frame_needed = 1, uses_anonymous_args = 0
 1622              		@ link register save eliminated.
 1623 0000 80B4     		push	{r7}
 1624              	.LCFI76:
 1625              		.cfi_def_cfa_offset 4
 1626              		.cfi_offset 7, -4
 1627 0002 83B0     		sub	sp, sp, #12
 1628              	.LCFI77:
 1629              		.cfi_def_cfa_offset 16
 1630 0004 00AF     		add	r7, sp, #0
 1631              	.LCFI78:
 1632              		.cfi_def_cfa_register 7
 1633 0006 7860     		str	r0, [r7, #4]
1031:./Library/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1032:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1634              		.loc 1 1032 31
 1635 0008 7B68     		ldr	r3, [r7, #4]
 1636 000a 0122     		movs	r2, #1
 1637 000c 1A70     		strb	r2, [r3]
1033:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1638              		.loc 1 1033 28
 1639 000e 7B68     		ldr	r3, [r7, #4]
 1640 0010 0122     		movs	r2, #1
 1641 0012 9A70     		strb	r2, [r3, #2]
1034:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1642              		.loc 1 1034 29
 1643 0014 7B68     		ldr	r3, [r7, #4]
 1644 0016 0122     		movs	r2, #1
 1645 0018 5A70     		strb	r2, [r3, #1]
1035:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1646              		.loc 1 1035 28
 1647 001a 7B68     		ldr	r3, [r7, #4]
 1648 001c 0022     		movs	r2, #0
 1649 001e DA70     		strb	r2, [r3, #3]
1036:./Library/stm32f4xx_rtc.c **** }
 1650              		.loc 1 1036 1
 1651 0020 00BF     		nop
 1652 0022 0C37     		adds	r7, r7, #12
 1653              	.LCFI79:
 1654              		.cfi_def_cfa_offset 4
 1655 0024 BD46     		mov	sp, r7
 1656              	.LCFI80:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 48


 1657              		.cfi_def_cfa_register 13
 1658              		@ sp needed
 1659 0026 5DF8047B 		ldr	r7, [sp], #4
 1660              	.LCFI81:
 1661              		.cfi_restore 7
 1662              		.cfi_def_cfa_offset 0
 1663 002a 7047     		bx	lr
 1664              		.cfi_endproc
 1665              	.LFE137:
 1667              		.section	.text.RTC_GetDate,"ax",%progbits
 1668              		.align	1
 1669              		.global	RTC_GetDate
 1670              		.syntax unified
 1671              		.thumb
 1672              		.thumb_func
 1674              	RTC_GetDate:
 1675              	.LFB138:
1037:./Library/stm32f4xx_rtc.c **** 
1038:./Library/stm32f4xx_rtc.c **** /**
1039:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1040:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1041:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1042:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1043:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1044:./Library/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1045:./Library/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1046:./Library/stm32f4xx_rtc.c ****   * @retval None
1047:./Library/stm32f4xx_rtc.c ****   */
1048:./Library/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1049:./Library/stm32f4xx_rtc.c **** {
 1676              		.loc 1 1049 1
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 16
 1679              		@ frame_needed = 1, uses_anonymous_args = 0
 1680 0000 80B5     		push	{r7, lr}
 1681              	.LCFI82:
 1682              		.cfi_def_cfa_offset 8
 1683              		.cfi_offset 7, -8
 1684              		.cfi_offset 14, -4
 1685 0002 84B0     		sub	sp, sp, #16
 1686              	.LCFI83:
 1687              		.cfi_def_cfa_offset 24
 1688 0004 00AF     		add	r7, sp, #0
 1689              	.LCFI84:
 1690              		.cfi_def_cfa_register 7
 1691 0006 7860     		str	r0, [r7, #4]
 1692 0008 3960     		str	r1, [r7]
1050:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1693              		.loc 1 1050 12
 1694 000a 0023     		movs	r3, #0
 1695 000c FB60     		str	r3, [r7, #12]
1051:./Library/stm32f4xx_rtc.c **** 
1052:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1053:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1054:./Library/stm32f4xx_rtc.c ****   
1055:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1056:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 49


 1696              		.loc 1 1056 26
 1697 000e 224B     		ldr	r3, .L96
 1698 0010 5B68     		ldr	r3, [r3, #4]
 1699              		.loc 1 1056 10
 1700 0012 23F07F43 		bic	r3, r3, #-16777216
 1701 0016 23F0C003 		bic	r3, r3, #192
 1702 001a FB60     		str	r3, [r7, #12]
1057:./Library/stm32f4xx_rtc.c **** 
1058:./Library/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1059:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1703              		.loc 1 1059 75
 1704 001c FB68     		ldr	r3, [r7, #12]
 1705 001e 1B0C     		lsrs	r3, r3, #16
 1706              		.loc 1 1059 30
 1707 0020 DAB2     		uxtb	r2, r3
 1708              		.loc 1 1059 28
 1709 0022 3B68     		ldr	r3, [r7]
 1710 0024 DA70     		strb	r2, [r3, #3]
1060:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1711              		.loc 1 1060 76
 1712 0026 FB68     		ldr	r3, [r7, #12]
 1713 0028 1B0A     		lsrs	r3, r3, #8
 1714              		.loc 1 1060 31
 1715 002a DBB2     		uxtb	r3, r3
 1716 002c 03F01F03 		and	r3, r3, #31
 1717 0030 DAB2     		uxtb	r2, r3
 1718              		.loc 1 1060 29
 1719 0032 3B68     		ldr	r3, [r7]
 1720 0034 5A70     		strb	r2, [r3, #1]
1061:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1721              		.loc 1 1061 30
 1722 0036 FB68     		ldr	r3, [r7, #12]
 1723 0038 DBB2     		uxtb	r3, r3
 1724 003a 03F03F03 		and	r3, r3, #63
 1725 003e DAB2     		uxtb	r2, r3
 1726              		.loc 1 1061 28
 1727 0040 3B68     		ldr	r3, [r7]
 1728 0042 9A70     		strb	r2, [r3, #2]
1062:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1729              		.loc 1 1062 67
 1730 0044 FB68     		ldr	r3, [r7, #12]
 1731 0046 5B0B     		lsrs	r3, r3, #13
 1732              		.loc 1 1062 33
 1733 0048 DBB2     		uxtb	r3, r3
 1734 004a 03F00703 		and	r3, r3, #7
 1735 004e DAB2     		uxtb	r2, r3
 1736              		.loc 1 1062 31
 1737 0050 3B68     		ldr	r3, [r7]
 1738 0052 1A70     		strb	r2, [r3]
1063:./Library/stm32f4xx_rtc.c **** 
1064:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1065:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1739              		.loc 1 1065 6
 1740 0054 7B68     		ldr	r3, [r7, #4]
 1741 0056 002B     		cmp	r3, #0
 1742 0058 1AD1     		bne	.L95
1066:./Library/stm32f4xx_rtc.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 50


1067:./Library/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1068:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1743              		.loc 1 1068 41
 1744 005a 3B68     		ldr	r3, [r7]
 1745 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1746 005e 1846     		mov	r0, r3
 1747 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1748 0064 0346     		mov	r3, r0
 1749 0066 1A46     		mov	r2, r3
 1750              		.loc 1 1068 30
 1751 0068 3B68     		ldr	r3, [r7]
 1752 006a DA70     		strb	r2, [r3, #3]
1069:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1753              		.loc 1 1069 42
 1754 006c 3B68     		ldr	r3, [r7]
 1755 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1756 0070 1846     		mov	r0, r3
 1757 0072 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1758 0076 0346     		mov	r3, r0
 1759 0078 1A46     		mov	r2, r3
 1760              		.loc 1 1069 31
 1761 007a 3B68     		ldr	r3, [r7]
 1762 007c 5A70     		strb	r2, [r3, #1]
1070:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1763              		.loc 1 1070 41
 1764 007e 3B68     		ldr	r3, [r7]
 1765 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1766 0082 1846     		mov	r0, r3
 1767 0084 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1768 0088 0346     		mov	r3, r0
 1769 008a 1A46     		mov	r2, r3
 1770              		.loc 1 1070 30
 1771 008c 3B68     		ldr	r3, [r7]
 1772 008e 9A70     		strb	r2, [r3, #2]
 1773              	.L95:
1071:./Library/stm32f4xx_rtc.c ****   }
1072:./Library/stm32f4xx_rtc.c **** }
 1774              		.loc 1 1072 1
 1775 0090 00BF     		nop
 1776 0092 1037     		adds	r7, r7, #16
 1777              	.LCFI85:
 1778              		.cfi_def_cfa_offset 8
 1779 0094 BD46     		mov	sp, r7
 1780              	.LCFI86:
 1781              		.cfi_def_cfa_register 13
 1782              		@ sp needed
 1783 0096 80BD     		pop	{r7, pc}
 1784              	.L97:
 1785              		.align	2
 1786              	.L96:
 1787 0098 00280040 		.word	1073752064
 1788              		.cfi_endproc
 1789              	.LFE138:
 1791              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1792              		.align	1
 1793              		.global	RTC_SetAlarm
 1794              		.syntax unified
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 51


 1795              		.thumb
 1796              		.thumb_func
 1798              	RTC_SetAlarm:
 1799              	.LFB139:
1073:./Library/stm32f4xx_rtc.c **** 
1074:./Library/stm32f4xx_rtc.c **** /**
1075:./Library/stm32f4xx_rtc.c ****   * @}
1076:./Library/stm32f4xx_rtc.c ****   */
1077:./Library/stm32f4xx_rtc.c **** 
1078:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1079:./Library/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1080:./Library/stm32f4xx_rtc.c ****  *
1081:./Library/stm32f4xx_rtc.c **** @verbatim   
1082:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1083:./Library/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1084:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1085:./Library/stm32f4xx_rtc.c ****  
1086:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1087:./Library/stm32f4xx_rtc.c **** 
1088:./Library/stm32f4xx_rtc.c **** @endverbatim
1089:./Library/stm32f4xx_rtc.c ****   * @{
1090:./Library/stm32f4xx_rtc.c ****   */
1091:./Library/stm32f4xx_rtc.c **** 
1092:./Library/stm32f4xx_rtc.c **** /**
1093:./Library/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1094:./Library/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1095:./Library/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1096:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1097:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1098:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1099:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1100:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1101:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1102:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1103:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1104:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1105:./Library/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1106:./Library/stm32f4xx_rtc.c ****   * @retval None
1107:./Library/stm32f4xx_rtc.c ****   */
1108:./Library/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1109:./Library/stm32f4xx_rtc.c **** {
 1800              		.loc 1 1109 1
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 24
 1803              		@ frame_needed = 1, uses_anonymous_args = 0
 1804 0000 90B5     		push	{r4, r7, lr}
 1805              	.LCFI87:
 1806              		.cfi_def_cfa_offset 12
 1807              		.cfi_offset 4, -12
 1808              		.cfi_offset 7, -8
 1809              		.cfi_offset 14, -4
 1810 0002 87B0     		sub	sp, sp, #28
 1811              	.LCFI88:
 1812              		.cfi_def_cfa_offset 40
 1813 0004 00AF     		add	r7, sp, #0
 1814              	.LCFI89:
 1815              		.cfi_def_cfa_register 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 52


 1816 0006 F860     		str	r0, [r7, #12]
 1817 0008 B960     		str	r1, [r7, #8]
 1818 000a 7A60     		str	r2, [r7, #4]
1110:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1819              		.loc 1 1110 12
 1820 000c 0023     		movs	r3, #0
 1821 000e 7B61     		str	r3, [r7, #20]
1111:./Library/stm32f4xx_rtc.c ****   
1112:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1113:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1114:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1115:./Library/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1116:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1117:./Library/stm32f4xx_rtc.c **** 
1118:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1822              		.loc 1 1118 6
 1823 0010 FB68     		ldr	r3, [r7, #12]
 1824 0012 002B     		cmp	r3, #0
 1825 0014 09D1     		bne	.L99
1119:./Library/stm32f4xx_rtc.c ****   {
1120:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1826              		.loc 1 1120 13
 1827 0016 474B     		ldr	r3, .L109
 1828 0018 9B68     		ldr	r3, [r3, #8]
 1829              		.loc 1 1120 18
 1830 001a 03F04003 		and	r3, r3, #64
 1831              		.loc 1 1120 8
 1832 001e 002B     		cmp	r3, #0
 1833 0020 27D1     		bne	.L101
1121:./Library/stm32f4xx_rtc.c ****     {
1122:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1123:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1124:./Library/stm32f4xx_rtc.c ****     } 
1125:./Library/stm32f4xx_rtc.c ****     else
1126:./Library/stm32f4xx_rtc.c ****     {
1127:./Library/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1834              		.loc 1 1127 46
 1835 0022 7B68     		ldr	r3, [r7, #4]
 1836 0024 0022     		movs	r2, #0
 1837 0026 DA70     		strb	r2, [r3, #3]
 1838 0028 23E0     		b	.L101
 1839              	.L99:
1128:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1129:./Library/stm32f4xx_rtc.c ****     }
1130:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1131:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1132:./Library/stm32f4xx_rtc.c ****     
1133:./Library/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1134:./Library/stm32f4xx_rtc.c ****     {
1135:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1136:./Library/stm32f4xx_rtc.c ****     }
1137:./Library/stm32f4xx_rtc.c ****     else
1138:./Library/stm32f4xx_rtc.c ****     {
1139:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1140:./Library/stm32f4xx_rtc.c ****     }
1141:./Library/stm32f4xx_rtc.c ****   }
1142:./Library/stm32f4xx_rtc.c ****   else
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 53


1143:./Library/stm32f4xx_rtc.c ****   {
1144:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1840              		.loc 1 1144 13
 1841 002a 424B     		ldr	r3, .L109
 1842 002c 9B68     		ldr	r3, [r3, #8]
 1843              		.loc 1 1144 18
 1844 002e 03F04003 		and	r3, r3, #64
 1845              		.loc 1 1144 8
 1846 0032 002B     		cmp	r3, #0
 1847 0034 07D0     		beq	.L102
1145:./Library/stm32f4xx_rtc.c ****     {
1146:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1848              		.loc 1 1146 16
 1849 0036 7B68     		ldr	r3, [r7, #4]
 1850 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1851 003a 1846     		mov	r0, r3
 1852 003c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1853 0040 0346     		mov	r3, r0
 1854              		.loc 1 1146 14
 1855 0042 7B61     		str	r3, [r7, #20]
 1856 0044 02E0     		b	.L103
 1857              	.L102:
1147:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1148:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1149:./Library/stm32f4xx_rtc.c ****     } 
1150:./Library/stm32f4xx_rtc.c ****     else
1151:./Library/stm32f4xx_rtc.c ****     {
1152:./Library/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1858              		.loc 1 1152 46
 1859 0046 7B68     		ldr	r3, [r7, #4]
 1860 0048 0022     		movs	r2, #0
 1861 004a DA70     		strb	r2, [r3, #3]
 1862              	.L103:
1153:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1154:./Library/stm32f4xx_rtc.c ****     }
1155:./Library/stm32f4xx_rtc.c ****     
1156:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1157:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1158:./Library/stm32f4xx_rtc.c ****     
1159:./Library/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1863              		.loc 1 1159 23
 1864 004c 7B68     		ldr	r3, [r7, #4]
 1865 004e 9B68     		ldr	r3, [r3, #8]
 1866              		.loc 1 1159 7
 1867 0050 002B     		cmp	r3, #0
 1868 0052 07D1     		bne	.L104
1160:./Library/stm32f4xx_rtc.c ****     {
1161:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1869              		.loc 1 1161 16
 1870 0054 7B68     		ldr	r3, [r7, #4]
 1871 0056 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1872 0058 1846     		mov	r0, r3
 1873 005a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1874 005e 0346     		mov	r3, r0
 1875              		.loc 1 1161 14
 1876 0060 7B61     		str	r3, [r7, #20]
 1877 0062 06E0     		b	.L101
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 54


 1878              	.L104:
1162:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1163:./Library/stm32f4xx_rtc.c ****     }
1164:./Library/stm32f4xx_rtc.c ****     else
1165:./Library/stm32f4xx_rtc.c ****     {
1166:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1879              		.loc 1 1166 16
 1880 0064 7B68     		ldr	r3, [r7, #4]
 1881 0066 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1882 0068 1846     		mov	r0, r3
 1883 006a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1884 006e 0346     		mov	r3, r0
 1885              		.loc 1 1166 14
 1886 0070 7B61     		str	r3, [r7, #20]
 1887              	.L101:
1167:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1168:./Library/stm32f4xx_rtc.c ****     }    
1169:./Library/stm32f4xx_rtc.c ****   }
1170:./Library/stm32f4xx_rtc.c **** 
1171:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1172:./Library/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1888              		.loc 1 1172 6
 1889 0072 FB68     		ldr	r3, [r7, #12]
 1890 0074 002B     		cmp	r3, #0
 1891 0076 19D0     		beq	.L105
1173:./Library/stm32f4xx_rtc.c ****   {
1174:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1892              		.loc 1 1174 57
 1893 0078 7B68     		ldr	r3, [r7, #4]
 1894 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1895              		.loc 1 1174 69
 1896 007c 1A04     		lsls	r2, r3, #16
1175:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1897              		.loc 1 1175 57
 1898 007e 7B68     		ldr	r3, [r7, #4]
 1899 0080 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1900              		.loc 1 1175 71
 1901 0082 1B02     		lsls	r3, r3, #8
1174:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1902              		.loc 1 1174 76
 1903 0084 1343     		orrs	r3, r3, r2
1176:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1904              		.loc 1 1176 56
 1905 0086 7A68     		ldr	r2, [r7, #4]
 1906 0088 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1175:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1907              		.loc 1 1175 77
 1908 008a 1A43     		orrs	r2, r2, r3
1177:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1909              		.loc 1 1177 57
 1910 008c 7B68     		ldr	r3, [r7, #4]
 1911 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1912              		.loc 1 1177 67
 1913 0090 1B04     		lsls	r3, r3, #16
1176:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1914              		.loc 1 1176 70
 1915 0092 1A43     		orrs	r2, r2, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 55


1178:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1916              		.loc 1 1178 42
 1917 0094 7B68     		ldr	r3, [r7, #4]
 1918 0096 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1919              		.loc 1 1178 66
 1920 0098 1B06     		lsls	r3, r3, #24
1177:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1921              		.loc 1 1177 74
 1922 009a 1A43     		orrs	r2, r2, r3
1179:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1923              		.loc 1 1179 41
 1924 009c 7B68     		ldr	r3, [r7, #4]
 1925 009e 9B68     		ldr	r3, [r3, #8]
1178:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1926              		.loc 1 1178 73
 1927 00a0 1A43     		orrs	r2, r2, r3
1180:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1928              		.loc 1 1180 41
 1929 00a2 7B68     		ldr	r3, [r7, #4]
 1930 00a4 5B68     		ldr	r3, [r3, #4]
1174:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1931              		.loc 1 1174 12
 1932 00a6 1343     		orrs	r3, r3, r2
 1933 00a8 7B61     		str	r3, [r7, #20]
 1934 00aa 2BE0     		b	.L106
 1935              	.L105:
1181:./Library/stm32f4xx_rtc.c ****   }  
1182:./Library/stm32f4xx_rtc.c ****   else
1183:./Library/stm32f4xx_rtc.c ****   {
1184:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1936              		.loc 1 1184 26
 1937 00ac 7B68     		ldr	r3, [r7, #4]
 1938 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1939 00b0 1846     		mov	r0, r3
 1940 00b2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1941 00b6 0346     		mov	r3, r0
 1942              		.loc 1 1184 83
 1943 00b8 1C04     		lsls	r4, r3, #16
1185:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1944              		.loc 1 1185 26
 1945 00ba 7B68     		ldr	r3, [r7, #4]
 1946 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1947 00be 1846     		mov	r0, r3
 1948 00c0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1949 00c4 0346     		mov	r3, r0
 1950              		.loc 1 1185 85
 1951 00c6 1B02     		lsls	r3, r3, #8
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1952              		.loc 1 1184 90
 1953 00c8 1C43     		orrs	r4, r4, r3
1186:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1954              		.loc 1 1186 26
 1955 00ca 7B68     		ldr	r3, [r7, #4]
 1956 00cc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1957 00ce 1846     		mov	r0, r3
 1958 00d0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1959 00d4 0346     		mov	r3, r0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 56


1185:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1960              		.loc 1 1185 91
 1961 00d6 44EA0302 		orr	r2, r4, r3
1187:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1962              		.loc 1 1187 57
 1963 00da 7B68     		ldr	r3, [r7, #4]
 1964 00dc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1965              		.loc 1 1187 67
 1966 00de 1B04     		lsls	r3, r3, #16
1186:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1967              		.loc 1 1186 86
 1968 00e0 42EA0304 		orr	r4, r2, r3
1188:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1969              		.loc 1 1188 26
 1970 00e4 7B68     		ldr	r3, [r7, #4]
 1971 00e6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1972 00e8 1846     		mov	r0, r3
 1973 00ea FFF7FEFF 		bl	RTC_ByteToBcd2
 1974 00ee 0346     		mov	r3, r0
 1975              		.loc 1 1188 80
 1976 00f0 1B06     		lsls	r3, r3, #24
1187:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1977              		.loc 1 1187 74
 1978 00f2 44EA0302 		orr	r2, r4, r3
1189:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1979              		.loc 1 1189 41
 1980 00f6 7B68     		ldr	r3, [r7, #4]
 1981 00f8 9B68     		ldr	r3, [r3, #8]
1188:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1982              		.loc 1 1188 87
 1983 00fa 1A43     		orrs	r2, r2, r3
1190:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1984              		.loc 1 1190 41
 1985 00fc 7B68     		ldr	r3, [r7, #4]
 1986 00fe 5B68     		ldr	r3, [r3, #4]
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1987              		.loc 1 1184 12
 1988 0100 1343     		orrs	r3, r3, r2
 1989 0102 7B61     		str	r3, [r7, #20]
 1990              	.L106:
1191:./Library/stm32f4xx_rtc.c ****   } 
1192:./Library/stm32f4xx_rtc.c **** 
1193:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1194:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1991              		.loc 1 1194 6
 1992 0104 0B4B     		ldr	r3, .L109
 1993              		.loc 1 1194 12
 1994 0106 CA22     		movs	r2, #202
 1995 0108 5A62     		str	r2, [r3, #36]
1195:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1996              		.loc 1 1195 6
 1997 010a 0A4B     		ldr	r3, .L109
 1998              		.loc 1 1195 12
 1999 010c 5322     		movs	r2, #83
 2000 010e 5A62     		str	r2, [r3, #36]
1196:./Library/stm32f4xx_rtc.c **** 
1197:./Library/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 57


1198:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2001              		.loc 1 1198 6
 2002 0110 BB68     		ldr	r3, [r7, #8]
 2003 0112 B3F5807F 		cmp	r3, #256
 2004 0116 03D1     		bne	.L107
1199:./Library/stm32f4xx_rtc.c ****   {
1200:./Library/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 2005              		.loc 1 1200 8
 2006 0118 064A     		ldr	r2, .L109
 2007              		.loc 1 1200 17
 2008 011a 7B69     		ldr	r3, [r7, #20]
 2009 011c D361     		str	r3, [r2, #28]
 2010 011e 02E0     		b	.L108
 2011              	.L107:
1201:./Library/stm32f4xx_rtc.c ****   }
1202:./Library/stm32f4xx_rtc.c ****   else
1203:./Library/stm32f4xx_rtc.c ****   {
1204:./Library/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 2012              		.loc 1 1204 8
 2013 0120 044A     		ldr	r2, .L109
 2014              		.loc 1 1204 17
 2015 0122 7B69     		ldr	r3, [r7, #20]
 2016 0124 1362     		str	r3, [r2, #32]
 2017              	.L108:
1205:./Library/stm32f4xx_rtc.c ****   }
1206:./Library/stm32f4xx_rtc.c **** 
1207:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1208:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 2018              		.loc 1 1208 6
 2019 0126 034B     		ldr	r3, .L109
 2020              		.loc 1 1208 12
 2021 0128 FF22     		movs	r2, #255
 2022 012a 5A62     		str	r2, [r3, #36]
1209:./Library/stm32f4xx_rtc.c **** }
 2023              		.loc 1 1209 1
 2024 012c 00BF     		nop
 2025 012e 1C37     		adds	r7, r7, #28
 2026              	.LCFI90:
 2027              		.cfi_def_cfa_offset 12
 2028 0130 BD46     		mov	sp, r7
 2029              	.LCFI91:
 2030              		.cfi_def_cfa_register 13
 2031              		@ sp needed
 2032 0132 90BD     		pop	{r4, r7, pc}
 2033              	.L110:
 2034              		.align	2
 2035              	.L109:
 2036 0134 00280040 		.word	1073752064
 2037              		.cfi_endproc
 2038              	.LFE139:
 2040              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 2041              		.align	1
 2042              		.global	RTC_AlarmStructInit
 2043              		.syntax unified
 2044              		.thumb
 2045              		.thumb_func
 2047              	RTC_AlarmStructInit:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 58


 2048              	.LFB140:
1210:./Library/stm32f4xx_rtc.c **** 
1211:./Library/stm32f4xx_rtc.c **** /**
1212:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1213:./Library/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1214:./Library/stm32f4xx_rtc.c ****   *         all fields are masked).
1215:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1216:./Library/stm32f4xx_rtc.c ****   *         will be initialized.
1217:./Library/stm32f4xx_rtc.c ****   * @retval None
1218:./Library/stm32f4xx_rtc.c ****   */
1219:./Library/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1220:./Library/stm32f4xx_rtc.c **** {
 2049              		.loc 1 1220 1
 2050              		.cfi_startproc
 2051              		@ args = 0, pretend = 0, frame = 8
 2052              		@ frame_needed = 1, uses_anonymous_args = 0
 2053              		@ link register save eliminated.
 2054 0000 80B4     		push	{r7}
 2055              	.LCFI92:
 2056              		.cfi_def_cfa_offset 4
 2057              		.cfi_offset 7, -4
 2058 0002 83B0     		sub	sp, sp, #12
 2059              	.LCFI93:
 2060              		.cfi_def_cfa_offset 16
 2061 0004 00AF     		add	r7, sp, #0
 2062              	.LCFI94:
 2063              		.cfi_def_cfa_register 7
 2064 0006 7860     		str	r0, [r7, #4]
1221:./Library/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1222:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 2065              		.loc 1 1222 42
 2066 0008 7B68     		ldr	r3, [r7, #4]
 2067 000a 0022     		movs	r2, #0
 2068 000c DA70     		strb	r2, [r3, #3]
1223:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 2069              		.loc 1 1223 44
 2070 000e 7B68     		ldr	r3, [r7, #4]
 2071 0010 0022     		movs	r2, #0
 2072 0012 1A70     		strb	r2, [r3]
1224:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 2073              		.loc 1 1224 46
 2074 0014 7B68     		ldr	r3, [r7, #4]
 2075 0016 0022     		movs	r2, #0
 2076 0018 5A70     		strb	r2, [r3, #1]
1225:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 2077              		.loc 1 1225 46
 2078 001a 7B68     		ldr	r3, [r7, #4]
 2079 001c 0022     		movs	r2, #0
 2080 001e 9A70     		strb	r2, [r3, #2]
1226:./Library/stm32f4xx_rtc.c **** 
1227:./Library/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1228:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 2081              		.loc 1 1228 44
 2082 0020 7B68     		ldr	r3, [r7, #4]
 2083 0022 0022     		movs	r2, #0
 2084 0024 9A60     		str	r2, [r3, #8]
1229:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 59


 2085              		.loc 1 1229 41
 2086 0026 7B68     		ldr	r3, [r7, #4]
 2087 0028 0122     		movs	r2, #1
 2088 002a 1A73     		strb	r2, [r3, #12]
1230:./Library/stm32f4xx_rtc.c **** 
1231:./Library/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1232:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 2089              		.loc 1 1232 34
 2090 002c 7B68     		ldr	r3, [r7, #4]
 2091 002e 0022     		movs	r2, #0
 2092 0030 5A60     		str	r2, [r3, #4]
1233:./Library/stm32f4xx_rtc.c **** }
 2093              		.loc 1 1233 1
 2094 0032 00BF     		nop
 2095 0034 0C37     		adds	r7, r7, #12
 2096              	.LCFI95:
 2097              		.cfi_def_cfa_offset 4
 2098 0036 BD46     		mov	sp, r7
 2099              	.LCFI96:
 2100              		.cfi_def_cfa_register 13
 2101              		@ sp needed
 2102 0038 5DF8047B 		ldr	r7, [sp], #4
 2103              	.LCFI97:
 2104              		.cfi_restore 7
 2105              		.cfi_def_cfa_offset 0
 2106 003c 7047     		bx	lr
 2107              		.cfi_endproc
 2108              	.LFE140:
 2110              		.section	.text.RTC_GetAlarm,"ax",%progbits
 2111              		.align	1
 2112              		.global	RTC_GetAlarm
 2113              		.syntax unified
 2114              		.thumb
 2115              		.thumb_func
 2117              	RTC_GetAlarm:
 2118              	.LFB141:
1234:./Library/stm32f4xx_rtc.c **** 
1235:./Library/stm32f4xx_rtc.c **** /**
1236:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1237:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1238:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1239:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1240:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1241:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1242:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1243:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1244:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1245:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1246:./Library/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1247:./Library/stm32f4xx_rtc.c ****   * @retval None
1248:./Library/stm32f4xx_rtc.c ****   */
1249:./Library/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1250:./Library/stm32f4xx_rtc.c **** {
 2119              		.loc 1 1250 1
 2120              		.cfi_startproc
 2121              		@ args = 0, pretend = 0, frame = 24
 2122              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 60


 2123 0000 80B5     		push	{r7, lr}
 2124              	.LCFI98:
 2125              		.cfi_def_cfa_offset 8
 2126              		.cfi_offset 7, -8
 2127              		.cfi_offset 14, -4
 2128 0002 86B0     		sub	sp, sp, #24
 2129              	.LCFI99:
 2130              		.cfi_def_cfa_offset 32
 2131 0004 00AF     		add	r7, sp, #0
 2132              	.LCFI100:
 2133              		.cfi_def_cfa_register 7
 2134 0006 F860     		str	r0, [r7, #12]
 2135 0008 B960     		str	r1, [r7, #8]
 2136 000a 7A60     		str	r2, [r7, #4]
1251:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2137              		.loc 1 1251 12
 2138 000c 0023     		movs	r3, #0
 2139 000e 7B61     		str	r3, [r7, #20]
1252:./Library/stm32f4xx_rtc.c **** 
1253:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1254:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1255:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1256:./Library/stm32f4xx_rtc.c **** 
1257:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1258:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2140              		.loc 1 1258 6
 2141 0010 BB68     		ldr	r3, [r7, #8]
 2142 0012 B3F5807F 		cmp	r3, #256
 2143 0016 03D1     		bne	.L113
1259:./Library/stm32f4xx_rtc.c ****   {
1260:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 2144              		.loc 1 1260 28
 2145 0018 314B     		ldr	r3, .L117
 2146              		.loc 1 1260 12
 2147 001a DB69     		ldr	r3, [r3, #28]
 2148 001c 7B61     		str	r3, [r7, #20]
 2149 001e 02E0     		b	.L114
 2150              	.L113:
1261:./Library/stm32f4xx_rtc.c ****   }
1262:./Library/stm32f4xx_rtc.c ****   else
1263:./Library/stm32f4xx_rtc.c ****   {
1264:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 2151              		.loc 1 1264 28
 2152 0020 2F4B     		ldr	r3, .L117
 2153              		.loc 1 1264 12
 2154 0022 1B6A     		ldr	r3, [r3, #32]
 2155 0024 7B61     		str	r3, [r7, #20]
 2156              	.L114:
1265:./Library/stm32f4xx_rtc.c ****   }
1266:./Library/stm32f4xx_rtc.c **** 
1267:./Library/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1268:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 2157              		.loc 1 1268 46
 2158 0026 7B69     		ldr	r3, [r7, #20]
 2159 0028 1B0C     		lsrs	r3, r3, #16
 2160 002a DBB2     		uxtb	r3, r3
 2161 002c 03F03F03 		and	r3, r3, #63
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 61


 2162 0030 DAB2     		uxtb	r2, r3
 2163              		.loc 1 1268 44
 2164 0032 7B68     		ldr	r3, [r7, #4]
 2165 0034 1A70     		strb	r2, [r3]
1269:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1270:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 2166              		.loc 1 1270 48
 2167 0036 7B69     		ldr	r3, [r7, #20]
 2168 0038 1B0A     		lsrs	r3, r3, #8
 2169 003a DBB2     		uxtb	r3, r3
 2170 003c 03F07F03 		and	r3, r3, #127
 2171 0040 DAB2     		uxtb	r2, r3
 2172              		.loc 1 1270 46
 2173 0042 7B68     		ldr	r3, [r7, #4]
 2174 0044 5A70     		strb	r2, [r3, #1]
1271:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1272:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 2175              		.loc 1 1272 48
 2176 0046 7B69     		ldr	r3, [r7, #20]
 2177 0048 DBB2     		uxtb	r3, r3
 2178 004a 03F07F03 		and	r3, r3, #127
 2179 004e DAB2     		uxtb	r2, r3
 2180              		.loc 1 1272 46
 2181 0050 7B68     		ldr	r3, [r7, #4]
 2182 0052 9A70     		strb	r2, [r3, #2]
1273:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1274:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2183              		.loc 1 1274 44
 2184 0054 7B69     		ldr	r3, [r7, #20]
 2185 0056 1B0C     		lsrs	r3, r3, #16
 2186 0058 DBB2     		uxtb	r3, r3
 2187 005a 03F04003 		and	r3, r3, #64
 2188 005e DAB2     		uxtb	r2, r3
 2189              		.loc 1 1274 42
 2190 0060 7B68     		ldr	r3, [r7, #4]
 2191 0062 DA70     		strb	r2, [r3, #3]
1275:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 2192              		.loc 1 1275 43
 2193 0064 7B69     		ldr	r3, [r7, #20]
 2194 0066 1B0E     		lsrs	r3, r3, #24
 2195 0068 DBB2     		uxtb	r3, r3
 2196 006a 03F03F03 		and	r3, r3, #63
 2197 006e DAB2     		uxtb	r2, r3
 2198              		.loc 1 1275 41
 2199 0070 7B68     		ldr	r3, [r7, #4]
 2200 0072 1A73     		strb	r2, [r3, #12]
1276:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2201              		.loc 1 1276 46
 2202 0074 7B69     		ldr	r3, [r7, #20]
 2203 0076 03F08042 		and	r2, r3, #1073741824
 2204              		.loc 1 1276 44
 2205 007a 7B68     		ldr	r3, [r7, #4]
 2206 007c 9A60     		str	r2, [r3, #8]
1277:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 2207              		.loc 1 1277 36
 2208 007e 7B69     		ldr	r3, [r7, #20]
 2209 0080 03F08032 		and	r2, r3, #-2139062144
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 62


 2210              		.loc 1 1277 34
 2211 0084 7B68     		ldr	r3, [r7, #4]
 2212 0086 5A60     		str	r2, [r3, #4]
1278:./Library/stm32f4xx_rtc.c **** 
1279:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2213              		.loc 1 1279 6
 2214 0088 FB68     		ldr	r3, [r7, #12]
 2215 008a 002B     		cmp	r3, #0
 2216 008c 23D1     		bne	.L116
1280:./Library/stm32f4xx_rtc.c ****   {
1281:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2217              		.loc 1 1281 48
 2218 008e 7B68     		ldr	r3, [r7, #4]
 2219 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2220 0092 1846     		mov	r0, r3
 2221 0094 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2222 0098 0346     		mov	r3, r0
 2223 009a 1A46     		mov	r2, r3
 2224              		.loc 1 1281 46
 2225 009c 7B68     		ldr	r3, [r7, #4]
 2226 009e 1A70     		strb	r2, [r3]
1282:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1283:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2227              		.loc 1 1283 50
 2228 00a0 7B68     		ldr	r3, [r7, #4]
 2229 00a2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2230 00a4 1846     		mov	r0, r3
 2231 00a6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2232 00aa 0346     		mov	r3, r0
 2233 00ac 1A46     		mov	r2, r3
 2234              		.loc 1 1283 48
 2235 00ae 7B68     		ldr	r3, [r7, #4]
 2236 00b0 5A70     		strb	r2, [r3, #1]
1284:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1285:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2237              		.loc 1 1285 50
 2238 00b2 7B68     		ldr	r3, [r7, #4]
 2239 00b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2240 00b6 1846     		mov	r0, r3
 2241 00b8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2242 00bc 0346     		mov	r3, r0
 2243 00be 1A46     		mov	r2, r3
 2244              		.loc 1 1285 48
 2245 00c0 7B68     		ldr	r3, [r7, #4]
 2246 00c2 9A70     		strb	r2, [r3, #2]
1286:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1287:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 2247              		.loc 1 1287 45
 2248 00c4 7B68     		ldr	r3, [r7, #4]
 2249 00c6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2250 00c8 1846     		mov	r0, r3
 2251 00ca FFF7FEFF 		bl	RTC_Bcd2ToByte
 2252 00ce 0346     		mov	r3, r0
 2253 00d0 1A46     		mov	r2, r3
 2254              		.loc 1 1287 43
 2255 00d2 7B68     		ldr	r3, [r7, #4]
 2256 00d4 1A73     		strb	r2, [r3, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 63


 2257              	.L116:
1288:./Library/stm32f4xx_rtc.c ****   }  
1289:./Library/stm32f4xx_rtc.c **** }
 2258              		.loc 1 1289 1
 2259 00d6 00BF     		nop
 2260 00d8 1837     		adds	r7, r7, #24
 2261              	.LCFI101:
 2262              		.cfi_def_cfa_offset 8
 2263 00da BD46     		mov	sp, r7
 2264              	.LCFI102:
 2265              		.cfi_def_cfa_register 13
 2266              		@ sp needed
 2267 00dc 80BD     		pop	{r7, pc}
 2268              	.L118:
 2269 00de 00BF     		.align	2
 2270              	.L117:
 2271 00e0 00280040 		.word	1073752064
 2272              		.cfi_endproc
 2273              	.LFE141:
 2275              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 2276              		.align	1
 2277              		.global	RTC_AlarmCmd
 2278              		.syntax unified
 2279              		.thumb
 2280              		.thumb_func
 2282              	RTC_AlarmCmd:
 2283              	.LFB142:
1290:./Library/stm32f4xx_rtc.c **** 
1291:./Library/stm32f4xx_rtc.c **** /**
1292:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1293:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1294:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1295:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1296:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1297:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1298:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1299:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1300:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1301:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1302:./Library/stm32f4xx_rtc.c ****   */
1303:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1304:./Library/stm32f4xx_rtc.c **** {
 2284              		.loc 1 1304 1
 2285              		.cfi_startproc
 2286              		@ args = 0, pretend = 0, frame = 24
 2287              		@ frame_needed = 1, uses_anonymous_args = 0
 2288              		@ link register save eliminated.
 2289 0000 80B4     		push	{r7}
 2290              	.LCFI103:
 2291              		.cfi_def_cfa_offset 4
 2292              		.cfi_offset 7, -4
 2293 0002 87B0     		sub	sp, sp, #28
 2294              	.LCFI104:
 2295              		.cfi_def_cfa_offset 32
 2296 0004 00AF     		add	r7, sp, #0
 2297              	.LCFI105:
 2298              		.cfi_def_cfa_register 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 64


 2299 0006 7860     		str	r0, [r7, #4]
 2300 0008 0B46     		mov	r3, r1
 2301 000a FB70     		strb	r3, [r7, #3]
1305:./Library/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 2302              		.loc 1 1305 17
 2303 000c 0023     		movs	r3, #0
 2304 000e FB60     		str	r3, [r7, #12]
1306:./Library/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 2305              		.loc 1 1306 12
 2306 0010 0023     		movs	r3, #0
 2307 0012 3B61     		str	r3, [r7, #16]
1307:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2308              		.loc 1 1307 15
 2309 0014 0023     		movs	r3, #0
 2310 0016 FB75     		strb	r3, [r7, #23]
1308:./Library/stm32f4xx_rtc.c ****     
1309:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1310:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1311:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1312:./Library/stm32f4xx_rtc.c **** 
1313:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1314:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2311              		.loc 1 1314 6
 2312 0018 1F4B     		ldr	r3, .L126
 2313              		.loc 1 1314 12
 2314 001a CA22     		movs	r2, #202
 2315 001c 5A62     		str	r2, [r3, #36]
1315:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2316              		.loc 1 1315 6
 2317 001e 1E4B     		ldr	r3, .L126
 2318              		.loc 1 1315 12
 2319 0020 5322     		movs	r2, #83
 2320 0022 5A62     		str	r2, [r3, #36]
1316:./Library/stm32f4xx_rtc.c **** 
1317:./Library/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1318:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2321              		.loc 1 1318 6
 2322 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2323 0026 002B     		cmp	r3, #0
 2324 0028 08D0     		beq	.L120
1319:./Library/stm32f4xx_rtc.c ****   {
1320:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 2325              		.loc 1 1320 13
 2326 002a 1B4B     		ldr	r3, .L126
 2327 002c 9A68     		ldr	r2, [r3, #8]
 2328 002e 1A49     		ldr	r1, .L126
 2329 0030 7B68     		ldr	r3, [r7, #4]
 2330 0032 1343     		orrs	r3, r3, r2
 2331 0034 8B60     		str	r3, [r1, #8]
1321:./Library/stm32f4xx_rtc.c **** 
1322:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2332              		.loc 1 1322 12
 2333 0036 0123     		movs	r3, #1
 2334 0038 FB75     		strb	r3, [r7, #23]
 2335 003a 22E0     		b	.L121
 2336              	.L120:
1323:./Library/stm32f4xx_rtc.c ****   }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 65


1324:./Library/stm32f4xx_rtc.c ****   else
1325:./Library/stm32f4xx_rtc.c ****   { 
1326:./Library/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1327:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2337              		.loc 1 1327 13
 2338 003c 164B     		ldr	r3, .L126
 2339 003e 9A68     		ldr	r2, [r3, #8]
 2340              		.loc 1 1327 26
 2341 0040 7B68     		ldr	r3, [r7, #4]
 2342 0042 DB43     		mvns	r3, r3
 2343              		.loc 1 1327 13
 2344 0044 1449     		ldr	r1, .L126
 2345 0046 1340     		ands	r3, r3, r2
 2346 0048 8B60     		str	r3, [r1, #8]
 2347              	.L123:
1328:./Library/stm32f4xx_rtc.c ****    
1329:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1330:./Library/stm32f4xx_rtc.c ****     do
1331:./Library/stm32f4xx_rtc.c ****     {
1332:./Library/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2348              		.loc 1 1332 24 discriminator 2
 2349 004a 134B     		ldr	r3, .L126
 2350 004c DA68     		ldr	r2, [r3, #12]
 2351              		.loc 1 1332 43 discriminator 2
 2352 004e 7B68     		ldr	r3, [r7, #4]
 2353 0050 1B0A     		lsrs	r3, r3, #8
 2354              		.loc 1 1332 19 discriminator 2
 2355 0052 1340     		ands	r3, r3, r2
 2356 0054 3B61     		str	r3, [r7, #16]
1333:./Library/stm32f4xx_rtc.c ****       alarmcounter++;  
 2357              		.loc 1 1333 19 discriminator 2
 2358 0056 FB68     		ldr	r3, [r7, #12]
 2359 0058 0133     		adds	r3, r3, #1
 2360 005a FB60     		str	r3, [r7, #12]
1334:./Library/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2361              		.loc 1 1334 27 discriminator 2
 2362 005c FB68     		ldr	r3, [r7, #12]
 2363              		.loc 1 1334 5 discriminator 2
 2364 005e B3F5803F 		cmp	r3, #65536
 2365 0062 02D0     		beq	.L122
 2366              		.loc 1 1334 48 discriminator 1
 2367 0064 3B69     		ldr	r3, [r7, #16]
 2368 0066 002B     		cmp	r3, #0
 2369 0068 EFD0     		beq	.L123
 2370              	.L122:
1335:./Library/stm32f4xx_rtc.c ****     
1336:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2371              		.loc 1 1336 13
 2372 006a 0B4B     		ldr	r3, .L126
 2373 006c DA68     		ldr	r2, [r3, #12]
 2374              		.loc 1 1336 32
 2375 006e 7B68     		ldr	r3, [r7, #4]
 2376 0070 1B0A     		lsrs	r3, r3, #8
 2377              		.loc 1 1336 19
 2378 0072 1340     		ands	r3, r3, r2
 2379              		.loc 1 1336 8
 2380 0074 002B     		cmp	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 66


 2381 0076 02D1     		bne	.L124
1337:./Library/stm32f4xx_rtc.c ****     {
1338:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 2382              		.loc 1 1338 14
 2383 0078 0023     		movs	r3, #0
 2384 007a FB75     		strb	r3, [r7, #23]
 2385 007c 01E0     		b	.L121
 2386              	.L124:
1339:./Library/stm32f4xx_rtc.c ****     } 
1340:./Library/stm32f4xx_rtc.c ****     else
1341:./Library/stm32f4xx_rtc.c ****     {
1342:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 2387              		.loc 1 1342 14
 2388 007e 0123     		movs	r3, #1
 2389 0080 FB75     		strb	r3, [r7, #23]
 2390              	.L121:
1343:./Library/stm32f4xx_rtc.c ****     }        
1344:./Library/stm32f4xx_rtc.c ****   } 
1345:./Library/stm32f4xx_rtc.c **** 
1346:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1347:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2391              		.loc 1 1347 6
 2392 0082 054B     		ldr	r3, .L126
 2393              		.loc 1 1347 12
 2394 0084 FF22     		movs	r2, #255
 2395 0086 5A62     		str	r2, [r3, #36]
1348:./Library/stm32f4xx_rtc.c ****   
1349:./Library/stm32f4xx_rtc.c ****   return status;
 2396              		.loc 1 1349 10
 2397 0088 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1350:./Library/stm32f4xx_rtc.c **** }
 2398              		.loc 1 1350 1
 2399 008a 1846     		mov	r0, r3
 2400 008c 1C37     		adds	r7, r7, #28
 2401              	.LCFI106:
 2402              		.cfi_def_cfa_offset 4
 2403 008e BD46     		mov	sp, r7
 2404              	.LCFI107:
 2405              		.cfi_def_cfa_register 13
 2406              		@ sp needed
 2407 0090 5DF8047B 		ldr	r7, [sp], #4
 2408              	.LCFI108:
 2409              		.cfi_restore 7
 2410              		.cfi_def_cfa_offset 0
 2411 0094 7047     		bx	lr
 2412              	.L127:
 2413 0096 00BF     		.align	2
 2414              	.L126:
 2415 0098 00280040 		.word	1073752064
 2416              		.cfi_endproc
 2417              	.LFE142:
 2419              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2420              		.align	1
 2421              		.global	RTC_AlarmSubSecondConfig
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 67


 2426              	RTC_AlarmSubSecondConfig:
 2427              	.LFB143:
1351:./Library/stm32f4xx_rtc.c **** 
1352:./Library/stm32f4xx_rtc.c **** /**
1353:./Library/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1354:./Library/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1355:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1356:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1357:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1358:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1359:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1360:./Library/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1361:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1362:./Library/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1363:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1364:./Library/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1365:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1366:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1367:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1368:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1369:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1370:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1371:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1372:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1373:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1374:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1375:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1376:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1377:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1378:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1379:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1380:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1381:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1382:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1383:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1384:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1385:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1386:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1387:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1388:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1389:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1390:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1391:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1392:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1393:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1394:./Library/stm32f4xx_rtc.c ****   *                                          to activate alarm
1395:./Library/stm32f4xx_rtc.c ****   * @retval None
1396:./Library/stm32f4xx_rtc.c ****   */
1397:./Library/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1398:./Library/stm32f4xx_rtc.c **** {
 2428              		.loc 1 1398 1
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 24
 2431              		@ frame_needed = 1, uses_anonymous_args = 0
 2432              		@ link register save eliminated.
 2433 0000 80B4     		push	{r7}
 2434              	.LCFI109:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 68


 2435              		.cfi_def_cfa_offset 4
 2436              		.cfi_offset 7, -4
 2437 0002 87B0     		sub	sp, sp, #28
 2438              	.LCFI110:
 2439              		.cfi_def_cfa_offset 32
 2440 0004 00AF     		add	r7, sp, #0
 2441              	.LCFI111:
 2442              		.cfi_def_cfa_register 7
 2443 0006 F860     		str	r0, [r7, #12]
 2444 0008 B960     		str	r1, [r7, #8]
 2445 000a 7A60     		str	r2, [r7, #4]
1399:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2446              		.loc 1 1399 12
 2447 000c 0023     		movs	r3, #0
 2448 000e 7B61     		str	r3, [r7, #20]
1400:./Library/stm32f4xx_rtc.c **** 
1401:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1402:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1403:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1404:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1405:./Library/stm32f4xx_rtc.c ****   
1406:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1407:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2449              		.loc 1 1407 6
 2450 0010 0E4B     		ldr	r3, .L131
 2451              		.loc 1 1407 12
 2452 0012 CA22     		movs	r2, #202
 2453 0014 5A62     		str	r2, [r3, #36]
1408:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2454              		.loc 1 1408 6
 2455 0016 0D4B     		ldr	r3, .L131
 2456              		.loc 1 1408 12
 2457 0018 5322     		movs	r2, #83
 2458 001a 5A62     		str	r2, [r3, #36]
1409:./Library/stm32f4xx_rtc.c ****   
1410:./Library/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1411:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2459              		.loc 1 1411 10
 2460 001c BA68     		ldr	r2, [r7, #8]
 2461 001e 7B68     		ldr	r3, [r7, #4]
 2462 0020 1343     		orrs	r3, r3, r2
 2463 0022 7B61     		str	r3, [r7, #20]
1412:./Library/stm32f4xx_rtc.c ****   
1413:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2464              		.loc 1 1413 6
 2465 0024 FB68     		ldr	r3, [r7, #12]
 2466 0026 B3F5807F 		cmp	r3, #256
 2467 002a 03D1     		bne	.L129
1414:./Library/stm32f4xx_rtc.c ****   {
1415:./Library/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1416:./Library/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2468              		.loc 1 1416 8
 2469 002c 074A     		ldr	r2, .L131
 2470              		.loc 1 1416 19
 2471 002e 7B69     		ldr	r3, [r7, #20]
 2472 0030 5364     		str	r3, [r2, #68]
 2473 0032 02E0     		b	.L130
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 69


 2474              	.L129:
1417:./Library/stm32f4xx_rtc.c ****   }
1418:./Library/stm32f4xx_rtc.c ****   else
1419:./Library/stm32f4xx_rtc.c ****   {
1420:./Library/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1421:./Library/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2475              		.loc 1 1421 8
 2476 0034 054A     		ldr	r2, .L131
 2477              		.loc 1 1421 19
 2478 0036 7B69     		ldr	r3, [r7, #20]
 2479 0038 9364     		str	r3, [r2, #72]
 2480              	.L130:
1422:./Library/stm32f4xx_rtc.c ****   }
1423:./Library/stm32f4xx_rtc.c **** 
1424:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1425:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2481              		.loc 1 1425 6
 2482 003a 044B     		ldr	r3, .L131
 2483              		.loc 1 1425 12
 2484 003c FF22     		movs	r2, #255
 2485 003e 5A62     		str	r2, [r3, #36]
1426:./Library/stm32f4xx_rtc.c **** 
1427:./Library/stm32f4xx_rtc.c **** }
 2486              		.loc 1 1427 1
 2487 0040 00BF     		nop
 2488 0042 1C37     		adds	r7, r7, #28
 2489              	.LCFI112:
 2490              		.cfi_def_cfa_offset 4
 2491 0044 BD46     		mov	sp, r7
 2492              	.LCFI113:
 2493              		.cfi_def_cfa_register 13
 2494              		@ sp needed
 2495 0046 5DF8047B 		ldr	r7, [sp], #4
 2496              	.LCFI114:
 2497              		.cfi_restore 7
 2498              		.cfi_def_cfa_offset 0
 2499 004a 7047     		bx	lr
 2500              	.L132:
 2501              		.align	2
 2502              	.L131:
 2503 004c 00280040 		.word	1073752064
 2504              		.cfi_endproc
 2505              	.LFE143:
 2507              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2508              		.align	1
 2509              		.global	RTC_GetAlarmSubSecond
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2514              	RTC_GetAlarmSubSecond:
 2515              	.LFB144:
1428:./Library/stm32f4xx_rtc.c **** 
1429:./Library/stm32f4xx_rtc.c **** /**
1430:./Library/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1431:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1432:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1433:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 70


1434:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1435:./Library/stm32f4xx_rtc.c ****   * @param  None
1436:./Library/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1437:./Library/stm32f4xx_rtc.c ****   */
1438:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1439:./Library/stm32f4xx_rtc.c **** {
 2516              		.loc 1 1439 1
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 16
 2519              		@ frame_needed = 1, uses_anonymous_args = 0
 2520              		@ link register save eliminated.
 2521 0000 80B4     		push	{r7}
 2522              	.LCFI115:
 2523              		.cfi_def_cfa_offset 4
 2524              		.cfi_offset 7, -4
 2525 0002 85B0     		sub	sp, sp, #20
 2526              	.LCFI116:
 2527              		.cfi_def_cfa_offset 24
 2528 0004 00AF     		add	r7, sp, #0
 2529              	.LCFI117:
 2530              		.cfi_def_cfa_register 7
 2531 0006 7860     		str	r0, [r7, #4]
1440:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2532              		.loc 1 1440 12
 2533 0008 0023     		movs	r3, #0
 2534 000a FB60     		str	r3, [r7, #12]
1441:./Library/stm32f4xx_rtc.c ****   
1442:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1443:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2535              		.loc 1 1443 6
 2536 000c 7B68     		ldr	r3, [r7, #4]
 2537 000e B3F5807F 		cmp	r3, #256
 2538 0012 05D1     		bne	.L134
1444:./Library/stm32f4xx_rtc.c ****   {
1445:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2539              		.loc 1 1445 29
 2540 0014 084B     		ldr	r3, .L137
 2541 0016 5B6C     		ldr	r3, [r3, #68]
 2542              		.loc 1 1445 12
 2543 0018 C3F30E03 		ubfx	r3, r3, #0, #15
 2544 001c FB60     		str	r3, [r7, #12]
 2545 001e 04E0     		b	.L135
 2546              	.L134:
1446:./Library/stm32f4xx_rtc.c ****   }
1447:./Library/stm32f4xx_rtc.c ****   else
1448:./Library/stm32f4xx_rtc.c ****   {
1449:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2547              		.loc 1 1449 29
 2548 0020 054B     		ldr	r3, .L137
 2549 0022 9B6C     		ldr	r3, [r3, #72]
 2550              		.loc 1 1449 12
 2551 0024 C3F30E03 		ubfx	r3, r3, #0, #15
 2552 0028 FB60     		str	r3, [r7, #12]
 2553              	.L135:
1450:./Library/stm32f4xx_rtc.c ****   } 
1451:./Library/stm32f4xx_rtc.c ****   
1452:./Library/stm32f4xx_rtc.c ****   return (tmpreg);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 71


 2554              		.loc 1 1452 10
 2555 002a FB68     		ldr	r3, [r7, #12]
1453:./Library/stm32f4xx_rtc.c **** }
 2556              		.loc 1 1453 1
 2557 002c 1846     		mov	r0, r3
 2558 002e 1437     		adds	r7, r7, #20
 2559              	.LCFI118:
 2560              		.cfi_def_cfa_offset 4
 2561 0030 BD46     		mov	sp, r7
 2562              	.LCFI119:
 2563              		.cfi_def_cfa_register 13
 2564              		@ sp needed
 2565 0032 5DF8047B 		ldr	r7, [sp], #4
 2566              	.LCFI120:
 2567              		.cfi_restore 7
 2568              		.cfi_def_cfa_offset 0
 2569 0036 7047     		bx	lr
 2570              	.L138:
 2571              		.align	2
 2572              	.L137:
 2573 0038 00280040 		.word	1073752064
 2574              		.cfi_endproc
 2575              	.LFE144:
 2577              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2578              		.align	1
 2579              		.global	RTC_WakeUpClockConfig
 2580              		.syntax unified
 2581              		.thumb
 2582              		.thumb_func
 2584              	RTC_WakeUpClockConfig:
 2585              	.LFB145:
1454:./Library/stm32f4xx_rtc.c **** 
1455:./Library/stm32f4xx_rtc.c **** /**
1456:./Library/stm32f4xx_rtc.c ****   * @}
1457:./Library/stm32f4xx_rtc.c ****   */
1458:./Library/stm32f4xx_rtc.c **** 
1459:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1460:./Library/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1461:./Library/stm32f4xx_rtc.c ****  *
1462:./Library/stm32f4xx_rtc.c **** @verbatim   
1463:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1464:./Library/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1465:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1466:./Library/stm32f4xx_rtc.c **** 
1467:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1468:./Library/stm32f4xx_rtc.c **** 
1469:./Library/stm32f4xx_rtc.c **** @endverbatim
1470:./Library/stm32f4xx_rtc.c ****   * @{
1471:./Library/stm32f4xx_rtc.c ****   */
1472:./Library/stm32f4xx_rtc.c **** 
1473:./Library/stm32f4xx_rtc.c **** /**
1474:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1475:./Library/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1476:./Library/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1477:./Library/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1478:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1479:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 72


1480:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1481:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1482:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1483:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1484:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1485:./Library/stm32f4xx_rtc.c ****   * @retval None
1486:./Library/stm32f4xx_rtc.c ****   */
1487:./Library/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1488:./Library/stm32f4xx_rtc.c **** {
 2586              		.loc 1 1488 1
 2587              		.cfi_startproc
 2588              		@ args = 0, pretend = 0, frame = 8
 2589              		@ frame_needed = 1, uses_anonymous_args = 0
 2590              		@ link register save eliminated.
 2591 0000 80B4     		push	{r7}
 2592              	.LCFI121:
 2593              		.cfi_def_cfa_offset 4
 2594              		.cfi_offset 7, -4
 2595 0002 83B0     		sub	sp, sp, #12
 2596              	.LCFI122:
 2597              		.cfi_def_cfa_offset 16
 2598 0004 00AF     		add	r7, sp, #0
 2599              	.LCFI123:
 2600              		.cfi_def_cfa_register 7
 2601 0006 7860     		str	r0, [r7, #4]
1489:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1490:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1491:./Library/stm32f4xx_rtc.c **** 
1492:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1493:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2602              		.loc 1 1493 6
 2603 0008 0D4B     		ldr	r3, .L140
 2604              		.loc 1 1493 12
 2605 000a CA22     		movs	r2, #202
 2606 000c 5A62     		str	r2, [r3, #36]
1494:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2607              		.loc 1 1494 6
 2608 000e 0C4B     		ldr	r3, .L140
 2609              		.loc 1 1494 12
 2610 0010 5322     		movs	r2, #83
 2611 0012 5A62     		str	r2, [r3, #36]
1495:./Library/stm32f4xx_rtc.c **** 
1496:./Library/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1497:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2612              		.loc 1 1497 11
 2613 0014 0A4B     		ldr	r3, .L140
 2614 0016 9B68     		ldr	r3, [r3, #8]
 2615 0018 094A     		ldr	r2, .L140
 2616 001a 23F00703 		bic	r3, r3, #7
 2617 001e 9360     		str	r3, [r2, #8]
1498:./Library/stm32f4xx_rtc.c **** 
1499:./Library/stm32f4xx_rtc.c ****   /* Configure the clock source */
1500:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2618              		.loc 1 1500 11
 2619 0020 074B     		ldr	r3, .L140
 2620 0022 9A68     		ldr	r2, [r3, #8]
 2621 0024 0649     		ldr	r1, .L140
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 73


 2622 0026 7B68     		ldr	r3, [r7, #4]
 2623 0028 1343     		orrs	r3, r3, r2
 2624 002a 8B60     		str	r3, [r1, #8]
1501:./Library/stm32f4xx_rtc.c ****   
1502:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1503:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2625              		.loc 1 1503 6
 2626 002c 044B     		ldr	r3, .L140
 2627              		.loc 1 1503 12
 2628 002e FF22     		movs	r2, #255
 2629 0030 5A62     		str	r2, [r3, #36]
1504:./Library/stm32f4xx_rtc.c **** }
 2630              		.loc 1 1504 1
 2631 0032 00BF     		nop
 2632 0034 0C37     		adds	r7, r7, #12
 2633              	.LCFI124:
 2634              		.cfi_def_cfa_offset 4
 2635 0036 BD46     		mov	sp, r7
 2636              	.LCFI125:
 2637              		.cfi_def_cfa_register 13
 2638              		@ sp needed
 2639 0038 5DF8047B 		ldr	r7, [sp], #4
 2640              	.LCFI126:
 2641              		.cfi_restore 7
 2642              		.cfi_def_cfa_offset 0
 2643 003c 7047     		bx	lr
 2644              	.L141:
 2645 003e 00BF     		.align	2
 2646              	.L140:
 2647 0040 00280040 		.word	1073752064
 2648              		.cfi_endproc
 2649              	.LFE145:
 2651              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2652              		.align	1
 2653              		.global	RTC_SetWakeUpCounter
 2654              		.syntax unified
 2655              		.thumb
 2656              		.thumb_func
 2658              	RTC_SetWakeUpCounter:
 2659              	.LFB146:
1505:./Library/stm32f4xx_rtc.c **** 
1506:./Library/stm32f4xx_rtc.c **** /**
1507:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1508:./Library/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1509:./Library/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1510:./Library/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1511:./Library/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1512:./Library/stm32f4xx_rtc.c ****   * @retval None
1513:./Library/stm32f4xx_rtc.c ****   */
1514:./Library/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1515:./Library/stm32f4xx_rtc.c **** {
 2660              		.loc 1 1515 1
 2661              		.cfi_startproc
 2662              		@ args = 0, pretend = 0, frame = 8
 2663              		@ frame_needed = 1, uses_anonymous_args = 0
 2664              		@ link register save eliminated.
 2665 0000 80B4     		push	{r7}
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 74


 2666              	.LCFI127:
 2667              		.cfi_def_cfa_offset 4
 2668              		.cfi_offset 7, -4
 2669 0002 83B0     		sub	sp, sp, #12
 2670              	.LCFI128:
 2671              		.cfi_def_cfa_offset 16
 2672 0004 00AF     		add	r7, sp, #0
 2673              	.LCFI129:
 2674              		.cfi_def_cfa_register 7
 2675 0006 7860     		str	r0, [r7, #4]
1516:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1517:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1518:./Library/stm32f4xx_rtc.c ****   
1519:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1520:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2676              		.loc 1 1520 6
 2677 0008 084B     		ldr	r3, .L143
 2678              		.loc 1 1520 12
 2679 000a CA22     		movs	r2, #202
 2680 000c 5A62     		str	r2, [r3, #36]
1521:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2681              		.loc 1 1521 6
 2682 000e 074B     		ldr	r3, .L143
 2683              		.loc 1 1521 12
 2684 0010 5322     		movs	r2, #83
 2685 0012 5A62     		str	r2, [r3, #36]
1522:./Library/stm32f4xx_rtc.c ****   
1523:./Library/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1524:./Library/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2686              		.loc 1 1524 6
 2687 0014 054A     		ldr	r2, .L143
 2688              		.loc 1 1524 13
 2689 0016 7B68     		ldr	r3, [r7, #4]
 2690 0018 5361     		str	r3, [r2, #20]
1525:./Library/stm32f4xx_rtc.c ****   
1526:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1527:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2691              		.loc 1 1527 6
 2692 001a 044B     		ldr	r3, .L143
 2693              		.loc 1 1527 12
 2694 001c FF22     		movs	r2, #255
 2695 001e 5A62     		str	r2, [r3, #36]
1528:./Library/stm32f4xx_rtc.c **** }
 2696              		.loc 1 1528 1
 2697 0020 00BF     		nop
 2698 0022 0C37     		adds	r7, r7, #12
 2699              	.LCFI130:
 2700              		.cfi_def_cfa_offset 4
 2701 0024 BD46     		mov	sp, r7
 2702              	.LCFI131:
 2703              		.cfi_def_cfa_register 13
 2704              		@ sp needed
 2705 0026 5DF8047B 		ldr	r7, [sp], #4
 2706              	.LCFI132:
 2707              		.cfi_restore 7
 2708              		.cfi_def_cfa_offset 0
 2709 002a 7047     		bx	lr
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 75


 2710              	.L144:
 2711              		.align	2
 2712              	.L143:
 2713 002c 00280040 		.word	1073752064
 2714              		.cfi_endproc
 2715              	.LFE146:
 2717              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2718              		.align	1
 2719              		.global	RTC_GetWakeUpCounter
 2720              		.syntax unified
 2721              		.thumb
 2722              		.thumb_func
 2724              	RTC_GetWakeUpCounter:
 2725              	.LFB147:
1529:./Library/stm32f4xx_rtc.c **** 
1530:./Library/stm32f4xx_rtc.c **** /**
1531:./Library/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1532:./Library/stm32f4xx_rtc.c ****   * @param  None
1533:./Library/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1534:./Library/stm32f4xx_rtc.c ****   */
1535:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1536:./Library/stm32f4xx_rtc.c **** {
 2726              		.loc 1 1536 1
 2727              		.cfi_startproc
 2728              		@ args = 0, pretend = 0, frame = 0
 2729              		@ frame_needed = 1, uses_anonymous_args = 0
 2730              		@ link register save eliminated.
 2731 0000 80B4     		push	{r7}
 2732              	.LCFI133:
 2733              		.cfi_def_cfa_offset 4
 2734              		.cfi_offset 7, -4
 2735 0002 00AF     		add	r7, sp, #0
 2736              	.LCFI134:
 2737              		.cfi_def_cfa_register 7
1537:./Library/stm32f4xx_rtc.c ****   /* Get the counter value */
1538:./Library/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2738              		.loc 1 1538 25
 2739 0004 034B     		ldr	r3, .L147
 2740 0006 5B69     		ldr	r3, [r3, #20]
 2741              		.loc 1 1538 11
 2742 0008 9BB2     		uxth	r3, r3
1539:./Library/stm32f4xx_rtc.c **** }
 2743              		.loc 1 1539 1
 2744 000a 1846     		mov	r0, r3
 2745 000c BD46     		mov	sp, r7
 2746              	.LCFI135:
 2747              		.cfi_def_cfa_register 13
 2748              		@ sp needed
 2749 000e 5DF8047B 		ldr	r7, [sp], #4
 2750              	.LCFI136:
 2751              		.cfi_restore 7
 2752              		.cfi_def_cfa_offset 0
 2753 0012 7047     		bx	lr
 2754              	.L148:
 2755              		.align	2
 2756              	.L147:
 2757 0014 00280040 		.word	1073752064
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 76


 2758              		.cfi_endproc
 2759              	.LFE147:
 2761              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2762              		.align	1
 2763              		.global	RTC_WakeUpCmd
 2764              		.syntax unified
 2765              		.thumb
 2766              		.thumb_func
 2768              	RTC_WakeUpCmd:
 2769              	.LFB148:
1540:./Library/stm32f4xx_rtc.c **** 
1541:./Library/stm32f4xx_rtc.c **** /**
1542:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1543:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1544:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1545:./Library/stm32f4xx_rtc.c ****   * @retval None
1546:./Library/stm32f4xx_rtc.c ****   */
1547:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1548:./Library/stm32f4xx_rtc.c **** {
 2770              		.loc 1 1548 1
 2771              		.cfi_startproc
 2772              		@ args = 0, pretend = 0, frame = 24
 2773              		@ frame_needed = 1, uses_anonymous_args = 0
 2774              		@ link register save eliminated.
 2775 0000 80B4     		push	{r7}
 2776              	.LCFI137:
 2777              		.cfi_def_cfa_offset 4
 2778              		.cfi_offset 7, -4
 2779 0002 87B0     		sub	sp, sp, #28
 2780              	.LCFI138:
 2781              		.cfi_def_cfa_offset 32
 2782 0004 00AF     		add	r7, sp, #0
 2783              	.LCFI139:
 2784              		.cfi_def_cfa_register 7
 2785 0006 0346     		mov	r3, r0
 2786 0008 FB71     		strb	r3, [r7, #7]
1549:./Library/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2787              		.loc 1 1549 17
 2788 000a 0023     		movs	r3, #0
 2789 000c FB60     		str	r3, [r7, #12]
1550:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2790              		.loc 1 1550 12
 2791 000e 0023     		movs	r3, #0
 2792 0010 3B61     		str	r3, [r7, #16]
1551:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2793              		.loc 1 1551 15
 2794 0012 0023     		movs	r3, #0
 2795 0014 FB75     		strb	r3, [r7, #23]
1552:./Library/stm32f4xx_rtc.c ****   
1553:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1554:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1555:./Library/stm32f4xx_rtc.c **** 
1556:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2796              		.loc 1 1557 6
 2797 0016 1E4B     		ldr	r3, .L156
 2798              		.loc 1 1557 12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 77


 2799 0018 CA22     		movs	r2, #202
 2800 001a 5A62     		str	r2, [r3, #36]
1558:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2801              		.loc 1 1558 6
 2802 001c 1C4B     		ldr	r3, .L156
 2803              		.loc 1 1558 12
 2804 001e 5322     		movs	r2, #83
 2805 0020 5A62     		str	r2, [r3, #36]
1559:./Library/stm32f4xx_rtc.c **** 
1560:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2806              		.loc 1 1560 6
 2807 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2808 0024 002B     		cmp	r3, #0
 2809 0026 08D0     		beq	.L150
1561:./Library/stm32f4xx_rtc.c ****   {
1562:./Library/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1563:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2810              		.loc 1 1563 13
 2811 0028 194B     		ldr	r3, .L156
 2812 002a 9B68     		ldr	r3, [r3, #8]
 2813 002c 184A     		ldr	r2, .L156
 2814 002e 43F48063 		orr	r3, r3, #1024
 2815 0032 9360     		str	r3, [r2, #8]
1564:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2816              		.loc 1 1564 12
 2817 0034 0123     		movs	r3, #1
 2818 0036 FB75     		strb	r3, [r7, #23]
 2819 0038 1FE0     		b	.L151
 2820              	.L150:
1565:./Library/stm32f4xx_rtc.c ****   }
1566:./Library/stm32f4xx_rtc.c ****   else
1567:./Library/stm32f4xx_rtc.c ****   {
1568:./Library/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1569:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2821              		.loc 1 1569 13
 2822 003a 154B     		ldr	r3, .L156
 2823 003c 9B68     		ldr	r3, [r3, #8]
 2824 003e 144A     		ldr	r2, .L156
 2825 0040 23F48063 		bic	r3, r3, #1024
 2826 0044 9360     		str	r3, [r2, #8]
 2827              	.L153:
1570:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1571:./Library/stm32f4xx_rtc.c ****     do
1572:./Library/stm32f4xx_rtc.c ****     {
1573:./Library/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2828              		.loc 1 1573 24 discriminator 2
 2829 0046 124B     		ldr	r3, .L156
 2830 0048 DB68     		ldr	r3, [r3, #12]
 2831              		.loc 1 1573 19 discriminator 2
 2832 004a 03F00403 		and	r3, r3, #4
 2833 004e 3B61     		str	r3, [r7, #16]
1574:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 2834              		.loc 1 1574 17 discriminator 2
 2835 0050 FB68     		ldr	r3, [r7, #12]
 2836 0052 0133     		adds	r3, r3, #1
 2837 0054 FB60     		str	r3, [r7, #12]
1575:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 78


 2838              		.loc 1 1575 25 discriminator 2
 2839 0056 FB68     		ldr	r3, [r7, #12]
 2840              		.loc 1 1575 5 discriminator 2
 2841 0058 B3F5803F 		cmp	r3, #65536
 2842 005c 02D0     		beq	.L152
 2843              		.loc 1 1575 46 discriminator 1
 2844 005e 3B69     		ldr	r3, [r7, #16]
 2845 0060 002B     		cmp	r3, #0
 2846 0062 F0D0     		beq	.L153
 2847              	.L152:
1576:./Library/stm32f4xx_rtc.c ****     
1577:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2848              		.loc 1 1577 13
 2849 0064 0A4B     		ldr	r3, .L156
 2850 0066 DB68     		ldr	r3, [r3, #12]
 2851              		.loc 1 1577 19
 2852 0068 03F00403 		and	r3, r3, #4
 2853              		.loc 1 1577 8
 2854 006c 002B     		cmp	r3, #0
 2855 006e 02D1     		bne	.L154
1578:./Library/stm32f4xx_rtc.c ****     {
1579:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 2856              		.loc 1 1579 14
 2857 0070 0023     		movs	r3, #0
 2858 0072 FB75     		strb	r3, [r7, #23]
 2859 0074 01E0     		b	.L151
 2860              	.L154:
1580:./Library/stm32f4xx_rtc.c ****     }
1581:./Library/stm32f4xx_rtc.c ****     else
1582:./Library/stm32f4xx_rtc.c ****     {
1583:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 2861              		.loc 1 1583 14
 2862 0076 0123     		movs	r3, #1
 2863 0078 FB75     		strb	r3, [r7, #23]
 2864              	.L151:
1584:./Library/stm32f4xx_rtc.c ****     }    
1585:./Library/stm32f4xx_rtc.c ****   }
1586:./Library/stm32f4xx_rtc.c **** 
1587:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1588:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2865              		.loc 1 1588 6
 2866 007a 054B     		ldr	r3, .L156
 2867              		.loc 1 1588 12
 2868 007c FF22     		movs	r2, #255
 2869 007e 5A62     		str	r2, [r3, #36]
1589:./Library/stm32f4xx_rtc.c ****   
1590:./Library/stm32f4xx_rtc.c ****   return status;
 2870              		.loc 1 1590 10
 2871 0080 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1591:./Library/stm32f4xx_rtc.c **** }
 2872              		.loc 1 1591 1
 2873 0082 1846     		mov	r0, r3
 2874 0084 1C37     		adds	r7, r7, #28
 2875              	.LCFI140:
 2876              		.cfi_def_cfa_offset 4
 2877 0086 BD46     		mov	sp, r7
 2878              	.LCFI141:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 79


 2879              		.cfi_def_cfa_register 13
 2880              		@ sp needed
 2881 0088 5DF8047B 		ldr	r7, [sp], #4
 2882              	.LCFI142:
 2883              		.cfi_restore 7
 2884              		.cfi_def_cfa_offset 0
 2885 008c 7047     		bx	lr
 2886              	.L157:
 2887 008e 00BF     		.align	2
 2888              	.L156:
 2889 0090 00280040 		.word	1073752064
 2890              		.cfi_endproc
 2891              	.LFE148:
 2893              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2894              		.align	1
 2895              		.global	RTC_DayLightSavingConfig
 2896              		.syntax unified
 2897              		.thumb
 2898              		.thumb_func
 2900              	RTC_DayLightSavingConfig:
 2901              	.LFB149:
1592:./Library/stm32f4xx_rtc.c **** 
1593:./Library/stm32f4xx_rtc.c **** /**
1594:./Library/stm32f4xx_rtc.c ****   * @}
1595:./Library/stm32f4xx_rtc.c ****   */
1596:./Library/stm32f4xx_rtc.c **** 
1597:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1598:./Library/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1599:./Library/stm32f4xx_rtc.c ****  *
1600:./Library/stm32f4xx_rtc.c **** @verbatim   
1601:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1602:./Library/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1603:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1604:./Library/stm32f4xx_rtc.c **** 
1605:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1606:./Library/stm32f4xx_rtc.c **** 
1607:./Library/stm32f4xx_rtc.c **** @endverbatim
1608:./Library/stm32f4xx_rtc.c ****   * @{
1609:./Library/stm32f4xx_rtc.c ****   */
1610:./Library/stm32f4xx_rtc.c **** 
1611:./Library/stm32f4xx_rtc.c **** /**
1612:./Library/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1613:./Library/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1614:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1615:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1616:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1617:./Library/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1618:./Library/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1619:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1620:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1621:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1622:./Library/stm32f4xx_rtc.c ****   * @retval None
1623:./Library/stm32f4xx_rtc.c ****   */
1624:./Library/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1625:./Library/stm32f4xx_rtc.c **** {
 2902              		.loc 1 1625 1
 2903              		.cfi_startproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 80


 2904              		@ args = 0, pretend = 0, frame = 8
 2905              		@ frame_needed = 1, uses_anonymous_args = 0
 2906              		@ link register save eliminated.
 2907 0000 80B4     		push	{r7}
 2908              	.LCFI143:
 2909              		.cfi_def_cfa_offset 4
 2910              		.cfi_offset 7, -4
 2911 0002 83B0     		sub	sp, sp, #12
 2912              	.LCFI144:
 2913              		.cfi_def_cfa_offset 16
 2914 0004 00AF     		add	r7, sp, #0
 2915              	.LCFI145:
 2916              		.cfi_def_cfa_register 7
 2917 0006 7860     		str	r0, [r7, #4]
 2918 0008 3960     		str	r1, [r7]
1626:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1627:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1628:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1629:./Library/stm32f4xx_rtc.c **** 
1630:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1631:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2919              		.loc 1 1631 6
 2920 000a 0E4B     		ldr	r3, .L159
 2921              		.loc 1 1631 12
 2922 000c CA22     		movs	r2, #202
 2923 000e 5A62     		str	r2, [r3, #36]
1632:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2924              		.loc 1 1632 6
 2925 0010 0C4B     		ldr	r3, .L159
 2926              		.loc 1 1632 12
 2927 0012 5322     		movs	r2, #83
 2928 0014 5A62     		str	r2, [r3, #36]
1633:./Library/stm32f4xx_rtc.c **** 
1634:./Library/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1635:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2929              		.loc 1 1635 11
 2930 0016 0B4B     		ldr	r3, .L159
 2931 0018 9B68     		ldr	r3, [r3, #8]
 2932 001a 0A4A     		ldr	r2, .L159
 2933 001c 23F48023 		bic	r3, r3, #262144
 2934 0020 9360     		str	r3, [r2, #8]
1636:./Library/stm32f4xx_rtc.c **** 
1637:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1638:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2935              		.loc 1 1638 11
 2936 0022 084B     		ldr	r3, .L159
 2937 0024 9A68     		ldr	r2, [r3, #8]
 2938              		.loc 1 1638 44
 2939 0026 7968     		ldr	r1, [r7, #4]
 2940 0028 3B68     		ldr	r3, [r7]
 2941 002a 0B43     		orrs	r3, r3, r1
 2942              		.loc 1 1638 11
 2943 002c 0549     		ldr	r1, .L159
 2944 002e 1343     		orrs	r3, r3, r2
 2945 0030 8B60     		str	r3, [r1, #8]
1639:./Library/stm32f4xx_rtc.c **** 
1640:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 81


1641:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2946              		.loc 1 1641 6
 2947 0032 044B     		ldr	r3, .L159
 2948              		.loc 1 1641 12
 2949 0034 FF22     		movs	r2, #255
 2950 0036 5A62     		str	r2, [r3, #36]
1642:./Library/stm32f4xx_rtc.c **** }
 2951              		.loc 1 1642 1
 2952 0038 00BF     		nop
 2953 003a 0C37     		adds	r7, r7, #12
 2954              	.LCFI146:
 2955              		.cfi_def_cfa_offset 4
 2956 003c BD46     		mov	sp, r7
 2957              	.LCFI147:
 2958              		.cfi_def_cfa_register 13
 2959              		@ sp needed
 2960 003e 5DF8047B 		ldr	r7, [sp], #4
 2961              	.LCFI148:
 2962              		.cfi_restore 7
 2963              		.cfi_def_cfa_offset 0
 2964 0042 7047     		bx	lr
 2965              	.L160:
 2966              		.align	2
 2967              	.L159:
 2968 0044 00280040 		.word	1073752064
 2969              		.cfi_endproc
 2970              	.LFE149:
 2972              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2973              		.align	1
 2974              		.global	RTC_GetStoreOperation
 2975              		.syntax unified
 2976              		.thumb
 2977              		.thumb_func
 2979              	RTC_GetStoreOperation:
 2980              	.LFB150:
1643:./Library/stm32f4xx_rtc.c **** 
1644:./Library/stm32f4xx_rtc.c **** /**
1645:./Library/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1646:./Library/stm32f4xx_rtc.c ****   * @param  None
1647:./Library/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1648:./Library/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1649:./Library/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1650:./Library/stm32f4xx_rtc.c ****   */
1651:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1652:./Library/stm32f4xx_rtc.c **** {
 2981              		.loc 1 1652 1
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 1, uses_anonymous_args = 0
 2985              		@ link register save eliminated.
 2986 0000 80B4     		push	{r7}
 2987              	.LCFI149:
 2988              		.cfi_def_cfa_offset 4
 2989              		.cfi_offset 7, -4
 2990 0002 00AF     		add	r7, sp, #0
 2991              	.LCFI150:
 2992              		.cfi_def_cfa_register 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 82


1653:./Library/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2993              		.loc 1 1653 14
 2994 0004 044B     		ldr	r3, .L163
 2995 0006 9B68     		ldr	r3, [r3, #8]
 2996              		.loc 1 1653 19
 2997 0008 03F48023 		and	r3, r3, #262144
1654:./Library/stm32f4xx_rtc.c **** }
 2998              		.loc 1 1654 1
 2999 000c 1846     		mov	r0, r3
 3000 000e BD46     		mov	sp, r7
 3001              	.LCFI151:
 3002              		.cfi_def_cfa_register 13
 3003              		@ sp needed
 3004 0010 5DF8047B 		ldr	r7, [sp], #4
 3005              	.LCFI152:
 3006              		.cfi_restore 7
 3007              		.cfi_def_cfa_offset 0
 3008 0014 7047     		bx	lr
 3009              	.L164:
 3010 0016 00BF     		.align	2
 3011              	.L163:
 3012 0018 00280040 		.word	1073752064
 3013              		.cfi_endproc
 3014              	.LFE150:
 3016              		.section	.text.RTC_OutputConfig,"ax",%progbits
 3017              		.align	1
 3018              		.global	RTC_OutputConfig
 3019              		.syntax unified
 3020              		.thumb
 3021              		.thumb_func
 3023              	RTC_OutputConfig:
 3024              	.LFB151:
1655:./Library/stm32f4xx_rtc.c **** 
1656:./Library/stm32f4xx_rtc.c **** /**
1657:./Library/stm32f4xx_rtc.c ****   * @}
1658:./Library/stm32f4xx_rtc.c ****   */
1659:./Library/stm32f4xx_rtc.c **** 
1660:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1661:./Library/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1662:./Library/stm32f4xx_rtc.c ****  *
1663:./Library/stm32f4xx_rtc.c **** @verbatim   
1664:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1665:./Library/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1666:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1667:./Library/stm32f4xx_rtc.c **** 
1668:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1669:./Library/stm32f4xx_rtc.c **** 
1670:./Library/stm32f4xx_rtc.c **** @endverbatim
1671:./Library/stm32f4xx_rtc.c ****   * @{
1672:./Library/stm32f4xx_rtc.c ****   */
1673:./Library/stm32f4xx_rtc.c **** 
1674:./Library/stm32f4xx_rtc.c **** /**
1675:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1676:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1677:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1678:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1679:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 83


1680:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1681:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1682:./Library/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1683:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1684:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1685:./Library/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1686:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1687:./Library/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1688:./Library/stm32f4xx_rtc.c ****   * @retval None
1689:./Library/stm32f4xx_rtc.c ****   */
1690:./Library/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1691:./Library/stm32f4xx_rtc.c **** {
 3025              		.loc 1 1691 1
 3026              		.cfi_startproc
 3027              		@ args = 0, pretend = 0, frame = 8
 3028              		@ frame_needed = 1, uses_anonymous_args = 0
 3029              		@ link register save eliminated.
 3030 0000 80B4     		push	{r7}
 3031              	.LCFI153:
 3032              		.cfi_def_cfa_offset 4
 3033              		.cfi_offset 7, -4
 3034 0002 83B0     		sub	sp, sp, #12
 3035              	.LCFI154:
 3036              		.cfi_def_cfa_offset 16
 3037 0004 00AF     		add	r7, sp, #0
 3038              	.LCFI155:
 3039              		.cfi_def_cfa_register 7
 3040 0006 7860     		str	r0, [r7, #4]
 3041 0008 3960     		str	r1, [r7]
1692:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1693:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1694:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1695:./Library/stm32f4xx_rtc.c **** 
1696:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1697:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3042              		.loc 1 1697 6
 3043 000a 0E4B     		ldr	r3, .L166
 3044              		.loc 1 1697 12
 3045 000c CA22     		movs	r2, #202
 3046 000e 5A62     		str	r2, [r3, #36]
1698:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3047              		.loc 1 1698 6
 3048 0010 0C4B     		ldr	r3, .L166
 3049              		.loc 1 1698 12
 3050 0012 5322     		movs	r2, #83
 3051 0014 5A62     		str	r2, [r3, #36]
1699:./Library/stm32f4xx_rtc.c **** 
1700:./Library/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1701:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 3052              		.loc 1 1701 11
 3053 0016 0B4B     		ldr	r3, .L166
 3054 0018 9B68     		ldr	r3, [r3, #8]
 3055 001a 0A4A     		ldr	r2, .L166
 3056 001c 23F4E003 		bic	r3, r3, #7340032
 3057 0020 9360     		str	r3, [r2, #8]
1702:./Library/stm32f4xx_rtc.c **** 
1703:./Library/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 84


1704:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 3058              		.loc 1 1704 11
 3059 0022 084B     		ldr	r3, .L166
 3060 0024 9A68     		ldr	r2, [r3, #8]
 3061              		.loc 1 1704 36
 3062 0026 7968     		ldr	r1, [r7, #4]
 3063 0028 3B68     		ldr	r3, [r7]
 3064 002a 0B43     		orrs	r3, r3, r1
 3065              		.loc 1 1704 11
 3066 002c 0549     		ldr	r1, .L166
 3067 002e 1343     		orrs	r3, r3, r2
 3068 0030 8B60     		str	r3, [r1, #8]
1705:./Library/stm32f4xx_rtc.c **** 
1706:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1707:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3069              		.loc 1 1707 6
 3070 0032 044B     		ldr	r3, .L166
 3071              		.loc 1 1707 12
 3072 0034 FF22     		movs	r2, #255
 3073 0036 5A62     		str	r2, [r3, #36]
1708:./Library/stm32f4xx_rtc.c **** }
 3074              		.loc 1 1708 1
 3075 0038 00BF     		nop
 3076 003a 0C37     		adds	r7, r7, #12
 3077              	.LCFI156:
 3078              		.cfi_def_cfa_offset 4
 3079 003c BD46     		mov	sp, r7
 3080              	.LCFI157:
 3081              		.cfi_def_cfa_register 13
 3082              		@ sp needed
 3083 003e 5DF8047B 		ldr	r7, [sp], #4
 3084              	.LCFI158:
 3085              		.cfi_restore 7
 3086              		.cfi_def_cfa_offset 0
 3087 0042 7047     		bx	lr
 3088              	.L167:
 3089              		.align	2
 3090              	.L166:
 3091 0044 00280040 		.word	1073752064
 3092              		.cfi_endproc
 3093              	.LFE151:
 3095              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 3096              		.align	1
 3097              		.global	RTC_CoarseCalibConfig
 3098              		.syntax unified
 3099              		.thumb
 3100              		.thumb_func
 3102              	RTC_CoarseCalibConfig:
 3103              	.LFB152:
1709:./Library/stm32f4xx_rtc.c **** 
1710:./Library/stm32f4xx_rtc.c **** /**
1711:./Library/stm32f4xx_rtc.c ****   * @}
1712:./Library/stm32f4xx_rtc.c ****   */
1713:./Library/stm32f4xx_rtc.c **** 
1714:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1715:./Library/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1716:./Library/stm32f4xx_rtc.c ****  *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 85


1717:./Library/stm32f4xx_rtc.c **** @verbatim   
1718:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1719:./Library/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1720:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1721:./Library/stm32f4xx_rtc.c **** 
1722:./Library/stm32f4xx_rtc.c **** @endverbatim
1723:./Library/stm32f4xx_rtc.c ****   * @{
1724:./Library/stm32f4xx_rtc.c ****   */
1725:./Library/stm32f4xx_rtc.c **** 
1726:./Library/stm32f4xx_rtc.c **** /**
1727:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1728:./Library/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1729:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1730:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1731:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1732:./Library/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1733:./Library/stm32f4xx_rtc.c ****   *    
1734:./Library/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1735:./Library/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1736:./Library/stm32f4xx_rtc.c ****   *           
1737:./Library/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1738:./Library/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1739:./Library/stm32f4xx_rtc.c ****   *           
1740:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1741:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1742:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1743:./Library/stm32f4xx_rtc.c ****   */
1744:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1745:./Library/stm32f4xx_rtc.c **** {
 3104              		.loc 1 1745 1
 3105              		.cfi_startproc
 3106              		@ args = 0, pretend = 0, frame = 16
 3107              		@ frame_needed = 1, uses_anonymous_args = 0
 3108 0000 80B5     		push	{r7, lr}
 3109              	.LCFI159:
 3110              		.cfi_def_cfa_offset 8
 3111              		.cfi_offset 7, -8
 3112              		.cfi_offset 14, -4
 3113 0002 84B0     		sub	sp, sp, #16
 3114              	.LCFI160:
 3115              		.cfi_def_cfa_offset 24
 3116 0004 00AF     		add	r7, sp, #0
 3117              	.LCFI161:
 3118              		.cfi_def_cfa_register 7
 3119 0006 7860     		str	r0, [r7, #4]
 3120 0008 3960     		str	r1, [r7]
1746:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3121              		.loc 1 1746 15
 3122 000a 0023     		movs	r3, #0
 3123 000c FB73     		strb	r3, [r7, #15]
1747:./Library/stm32f4xx_rtc.c ****    
1748:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1749:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1750:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1751:./Library/stm32f4xx_rtc.c **** 
1752:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1753:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 86


 3124              		.loc 1 1753 6
 3125 000e 0F4B     		ldr	r3, .L172
 3126              		.loc 1 1753 12
 3127 0010 CA22     		movs	r2, #202
 3128 0012 5A62     		str	r2, [r3, #36]
1754:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3129              		.loc 1 1754 6
 3130 0014 0D4B     		ldr	r3, .L172
 3131              		.loc 1 1754 12
 3132 0016 5322     		movs	r2, #83
 3133 0018 5A62     		str	r2, [r3, #36]
1755:./Library/stm32f4xx_rtc.c **** 
1756:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1757:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 3134              		.loc 1 1757 7
 3135 001a FFF7FEFF 		bl	RTC_EnterInitMode
 3136 001e 0346     		mov	r3, r0
 3137              		.loc 1 1757 6
 3138 0020 002B     		cmp	r3, #0
 3139 0022 02D1     		bne	.L169
1758:./Library/stm32f4xx_rtc.c ****   {
1759:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 3140              		.loc 1 1759 12
 3141 0024 0023     		movs	r3, #0
 3142 0026 FB73     		strb	r3, [r7, #15]
 3143 0028 08E0     		b	.L170
 3144              	.L169:
1760:./Library/stm32f4xx_rtc.c ****   } 
1761:./Library/stm32f4xx_rtc.c ****   else
1762:./Library/stm32f4xx_rtc.c ****   {
1763:./Library/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1764:./Library/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 3145              		.loc 1 1764 8
 3146 002a 0849     		ldr	r1, .L172
 3147              		.loc 1 1764 44
 3148 002c 7A68     		ldr	r2, [r7, #4]
 3149 002e 3B68     		ldr	r3, [r7]
 3150 0030 1343     		orrs	r3, r3, r2
 3151              		.loc 1 1764 17
 3152 0032 8B61     		str	r3, [r1, #24]
1765:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1766:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 3153              		.loc 1 1766 5
 3154 0034 FFF7FEFF 		bl	RTC_ExitInitMode
1767:./Library/stm32f4xx_rtc.c ****     
1768:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
 3155              		.loc 1 1768 12
 3156 0038 0123     		movs	r3, #1
 3157 003a FB73     		strb	r3, [r7, #15]
 3158              	.L170:
1769:./Library/stm32f4xx_rtc.c ****   } 
1770:./Library/stm32f4xx_rtc.c **** 
1771:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1772:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3159              		.loc 1 1772 6
 3160 003c 034B     		ldr	r3, .L172
 3161              		.loc 1 1772 12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 87


 3162 003e FF22     		movs	r2, #255
 3163 0040 5A62     		str	r2, [r3, #36]
1773:./Library/stm32f4xx_rtc.c ****   
1774:./Library/stm32f4xx_rtc.c ****   return status;
 3164              		.loc 1 1774 10
 3165 0042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1775:./Library/stm32f4xx_rtc.c **** }
 3166              		.loc 1 1775 1
 3167 0044 1846     		mov	r0, r3
 3168 0046 1037     		adds	r7, r7, #16
 3169              	.LCFI162:
 3170              		.cfi_def_cfa_offset 8
 3171 0048 BD46     		mov	sp, r7
 3172              	.LCFI163:
 3173              		.cfi_def_cfa_register 13
 3174              		@ sp needed
 3175 004a 80BD     		pop	{r7, pc}
 3176              	.L173:
 3177              		.align	2
 3178              	.L172:
 3179 004c 00280040 		.word	1073752064
 3180              		.cfi_endproc
 3181              	.LFE152:
 3183              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 3184              		.align	1
 3185              		.global	RTC_CoarseCalibCmd
 3186              		.syntax unified
 3187              		.thumb
 3188              		.thumb_func
 3190              	RTC_CoarseCalibCmd:
 3191              	.LFB153:
1776:./Library/stm32f4xx_rtc.c **** 
1777:./Library/stm32f4xx_rtc.c **** /**
1778:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1779:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1780:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1781:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1782:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1783:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1784:./Library/stm32f4xx_rtc.c ****   */
1785:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1786:./Library/stm32f4xx_rtc.c **** {
 3192              		.loc 1 1786 1
 3193              		.cfi_startproc
 3194              		@ args = 0, pretend = 0, frame = 16
 3195              		@ frame_needed = 1, uses_anonymous_args = 0
 3196 0000 80B5     		push	{r7, lr}
 3197              	.LCFI164:
 3198              		.cfi_def_cfa_offset 8
 3199              		.cfi_offset 7, -8
 3200              		.cfi_offset 14, -4
 3201 0002 84B0     		sub	sp, sp, #16
 3202              	.LCFI165:
 3203              		.cfi_def_cfa_offset 24
 3204 0004 00AF     		add	r7, sp, #0
 3205              	.LCFI166:
 3206              		.cfi_def_cfa_register 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 88


 3207 0006 0346     		mov	r3, r0
 3208 0008 FB71     		strb	r3, [r7, #7]
1787:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3209              		.loc 1 1787 15
 3210 000a 0023     		movs	r3, #0
 3211 000c FB73     		strb	r3, [r7, #15]
1788:./Library/stm32f4xx_rtc.c ****   
1789:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1790:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1791:./Library/stm32f4xx_rtc.c **** 
1792:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1793:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3212              		.loc 1 1793 6
 3213 000e 154B     		ldr	r3, .L180
 3214              		.loc 1 1793 12
 3215 0010 CA22     		movs	r2, #202
 3216 0012 5A62     		str	r2, [r3, #36]
1794:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3217              		.loc 1 1794 6
 3218 0014 134B     		ldr	r3, .L180
 3219              		.loc 1 1794 12
 3220 0016 5322     		movs	r2, #83
 3221 0018 5A62     		str	r2, [r3, #36]
1795:./Library/stm32f4xx_rtc.c ****   
1796:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1797:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 3222              		.loc 1 1797 7
 3223 001a FFF7FEFF 		bl	RTC_EnterInitMode
 3224 001e 0346     		mov	r3, r0
 3225              		.loc 1 1797 6
 3226 0020 002B     		cmp	r3, #0
 3227 0022 02D1     		bne	.L175
1798:./Library/stm32f4xx_rtc.c ****   {
1799:./Library/stm32f4xx_rtc.c ****     status =  ERROR;
 3228              		.loc 1 1799 12
 3229 0024 0023     		movs	r3, #0
 3230 0026 FB73     		strb	r3, [r7, #15]
 3231 0028 13E0     		b	.L176
 3232              	.L175:
1800:./Library/stm32f4xx_rtc.c ****   }
1801:./Library/stm32f4xx_rtc.c ****   else
1802:./Library/stm32f4xx_rtc.c ****   {
1803:./Library/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 3233              		.loc 1 1803 8
 3234 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3235 002c 002B     		cmp	r3, #0
 3236 002e 06D0     		beq	.L177
1804:./Library/stm32f4xx_rtc.c ****     {
1805:./Library/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1806:./Library/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 3237              		.loc 1 1806 15
 3238 0030 0C4B     		ldr	r3, .L180
 3239 0032 9B68     		ldr	r3, [r3, #8]
 3240 0034 0B4A     		ldr	r2, .L180
 3241 0036 43F08003 		orr	r3, r3, #128
 3242 003a 9360     		str	r3, [r2, #8]
 3243 003c 05E0     		b	.L178
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 89


 3244              	.L177:
1807:./Library/stm32f4xx_rtc.c ****     }
1808:./Library/stm32f4xx_rtc.c ****     else
1809:./Library/stm32f4xx_rtc.c ****     { 
1810:./Library/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1811:./Library/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 3245              		.loc 1 1811 15
 3246 003e 094B     		ldr	r3, .L180
 3247 0040 9B68     		ldr	r3, [r3, #8]
 3248 0042 084A     		ldr	r2, .L180
 3249 0044 23F08003 		bic	r3, r3, #128
 3250 0048 9360     		str	r3, [r2, #8]
 3251              	.L178:
1812:./Library/stm32f4xx_rtc.c ****     }
1813:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1814:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 3252              		.loc 1 1814 5
 3253 004a FFF7FEFF 		bl	RTC_ExitInitMode
1815:./Library/stm32f4xx_rtc.c ****     
1816:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
 3254              		.loc 1 1816 12
 3255 004e 0123     		movs	r3, #1
 3256 0050 FB73     		strb	r3, [r7, #15]
 3257              	.L176:
1817:./Library/stm32f4xx_rtc.c ****   } 
1818:./Library/stm32f4xx_rtc.c ****   
1819:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1820:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3258              		.loc 1 1820 6
 3259 0052 044B     		ldr	r3, .L180
 3260              		.loc 1 1820 12
 3261 0054 FF22     		movs	r2, #255
 3262 0056 5A62     		str	r2, [r3, #36]
1821:./Library/stm32f4xx_rtc.c ****   
1822:./Library/stm32f4xx_rtc.c ****   return status;
 3263              		.loc 1 1822 10
 3264 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1823:./Library/stm32f4xx_rtc.c **** }
 3265              		.loc 1 1823 1
 3266 005a 1846     		mov	r0, r3
 3267 005c 1037     		adds	r7, r7, #16
 3268              	.LCFI167:
 3269              		.cfi_def_cfa_offset 8
 3270 005e BD46     		mov	sp, r7
 3271              	.LCFI168:
 3272              		.cfi_def_cfa_register 13
 3273              		@ sp needed
 3274 0060 80BD     		pop	{r7, pc}
 3275              	.L181:
 3276 0062 00BF     		.align	2
 3277              	.L180:
 3278 0064 00280040 		.word	1073752064
 3279              		.cfi_endproc
 3280              	.LFE153:
 3282              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 3283              		.align	1
 3284              		.global	RTC_CalibOutputCmd
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 90


 3285              		.syntax unified
 3286              		.thumb
 3287              		.thumb_func
 3289              	RTC_CalibOutputCmd:
 3290              	.LFB154:
1824:./Library/stm32f4xx_rtc.c **** 
1825:./Library/stm32f4xx_rtc.c **** /**
1826:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1827:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1828:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1829:./Library/stm32f4xx_rtc.c ****   * @retval None
1830:./Library/stm32f4xx_rtc.c ****   */
1831:./Library/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1832:./Library/stm32f4xx_rtc.c **** {
 3291              		.loc 1 1832 1
 3292              		.cfi_startproc
 3293              		@ args = 0, pretend = 0, frame = 8
 3294              		@ frame_needed = 1, uses_anonymous_args = 0
 3295              		@ link register save eliminated.
 3296 0000 80B4     		push	{r7}
 3297              	.LCFI169:
 3298              		.cfi_def_cfa_offset 4
 3299              		.cfi_offset 7, -4
 3300 0002 83B0     		sub	sp, sp, #12
 3301              	.LCFI170:
 3302              		.cfi_def_cfa_offset 16
 3303 0004 00AF     		add	r7, sp, #0
 3304              	.LCFI171:
 3305              		.cfi_def_cfa_register 7
 3306 0006 0346     		mov	r3, r0
 3307 0008 FB71     		strb	r3, [r7, #7]
1833:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1834:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1835:./Library/stm32f4xx_rtc.c ****   
1836:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1837:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3308              		.loc 1 1837 6
 3309 000a 0F4B     		ldr	r3, .L185
 3310              		.loc 1 1837 12
 3311 000c CA22     		movs	r2, #202
 3312 000e 5A62     		str	r2, [r3, #36]
1838:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3313              		.loc 1 1838 6
 3314 0010 0D4B     		ldr	r3, .L185
 3315              		.loc 1 1838 12
 3316 0012 5322     		movs	r2, #83
 3317 0014 5A62     		str	r2, [r3, #36]
1839:./Library/stm32f4xx_rtc.c ****   
1840:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3318              		.loc 1 1840 6
 3319 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3320 0018 002B     		cmp	r3, #0
 3321 001a 06D0     		beq	.L183
1841:./Library/stm32f4xx_rtc.c ****   {
1842:./Library/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1843:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 3322              		.loc 1 1843 13
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 91


 3323 001c 0A4B     		ldr	r3, .L185
 3324 001e 9B68     		ldr	r3, [r3, #8]
 3325 0020 094A     		ldr	r2, .L185
 3326 0022 43F40003 		orr	r3, r3, #8388608
 3327 0026 9360     		str	r3, [r2, #8]
 3328 0028 05E0     		b	.L184
 3329              	.L183:
1844:./Library/stm32f4xx_rtc.c ****   }
1845:./Library/stm32f4xx_rtc.c ****   else
1846:./Library/stm32f4xx_rtc.c ****   { 
1847:./Library/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1848:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 3330              		.loc 1 1848 13
 3331 002a 074B     		ldr	r3, .L185
 3332 002c 9B68     		ldr	r3, [r3, #8]
 3333 002e 064A     		ldr	r2, .L185
 3334 0030 23F40003 		bic	r3, r3, #8388608
 3335 0034 9360     		str	r3, [r2, #8]
 3336              	.L184:
1849:./Library/stm32f4xx_rtc.c ****   }
1850:./Library/stm32f4xx_rtc.c ****   
1851:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1852:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3337              		.loc 1 1852 6
 3338 0036 044B     		ldr	r3, .L185
 3339              		.loc 1 1852 12
 3340 0038 FF22     		movs	r2, #255
 3341 003a 5A62     		str	r2, [r3, #36]
1853:./Library/stm32f4xx_rtc.c **** }
 3342              		.loc 1 1853 1
 3343 003c 00BF     		nop
 3344 003e 0C37     		adds	r7, r7, #12
 3345              	.LCFI172:
 3346              		.cfi_def_cfa_offset 4
 3347 0040 BD46     		mov	sp, r7
 3348              	.LCFI173:
 3349              		.cfi_def_cfa_register 13
 3350              		@ sp needed
 3351 0042 5DF8047B 		ldr	r7, [sp], #4
 3352              	.LCFI174:
 3353              		.cfi_restore 7
 3354              		.cfi_def_cfa_offset 0
 3355 0046 7047     		bx	lr
 3356              	.L186:
 3357              		.align	2
 3358              	.L185:
 3359 0048 00280040 		.word	1073752064
 3360              		.cfi_endproc
 3361              	.LFE154:
 3363              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 3364              		.align	1
 3365              		.global	RTC_CalibOutputConfig
 3366              		.syntax unified
 3367              		.thumb
 3368              		.thumb_func
 3370              	RTC_CalibOutputConfig:
 3371              	.LFB155:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 92


1854:./Library/stm32f4xx_rtc.c **** 
1855:./Library/stm32f4xx_rtc.c **** /**
1856:./Library/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1857:./Library/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1858:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1859:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1860:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1861:./Library/stm32f4xx_rtc.c ****   * @retval None
1862:./Library/stm32f4xx_rtc.c **** */
1863:./Library/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1864:./Library/stm32f4xx_rtc.c **** {
 3372              		.loc 1 1864 1
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 1, uses_anonymous_args = 0
 3376              		@ link register save eliminated.
 3377 0000 80B4     		push	{r7}
 3378              	.LCFI175:
 3379              		.cfi_def_cfa_offset 4
 3380              		.cfi_offset 7, -4
 3381 0002 83B0     		sub	sp, sp, #12
 3382              	.LCFI176:
 3383              		.cfi_def_cfa_offset 16
 3384 0004 00AF     		add	r7, sp, #0
 3385              	.LCFI177:
 3386              		.cfi_def_cfa_register 7
 3387 0006 7860     		str	r0, [r7, #4]
1865:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1866:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1867:./Library/stm32f4xx_rtc.c **** 
1868:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1869:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3388              		.loc 1 1869 6
 3389 0008 0D4B     		ldr	r3, .L188
 3390              		.loc 1 1869 12
 3391 000a CA22     		movs	r2, #202
 3392 000c 5A62     		str	r2, [r3, #36]
1870:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3393              		.loc 1 1870 6
 3394 000e 0C4B     		ldr	r3, .L188
 3395              		.loc 1 1870 12
 3396 0010 5322     		movs	r2, #83
 3397 0012 5A62     		str	r2, [r3, #36]
1871:./Library/stm32f4xx_rtc.c ****   
1872:./Library/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1873:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 3398              		.loc 1 1873 11
 3399 0014 0A4B     		ldr	r3, .L188
 3400 0016 9B68     		ldr	r3, [r3, #8]
 3401 0018 094A     		ldr	r2, .L188
 3402 001a 23F40023 		bic	r3, r3, #524288
 3403 001e 9360     		str	r3, [r2, #8]
1874:./Library/stm32f4xx_rtc.c **** 
1875:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1876:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 3404              		.loc 1 1876 11
 3405 0020 074B     		ldr	r3, .L188
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 93


 3406 0022 9A68     		ldr	r2, [r3, #8]
 3407 0024 0649     		ldr	r1, .L188
 3408 0026 7B68     		ldr	r3, [r7, #4]
 3409 0028 1343     		orrs	r3, r3, r2
 3410 002a 8B60     		str	r3, [r1, #8]
1877:./Library/stm32f4xx_rtc.c **** 
1878:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1879:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3411              		.loc 1 1879 6
 3412 002c 044B     		ldr	r3, .L188
 3413              		.loc 1 1879 12
 3414 002e FF22     		movs	r2, #255
 3415 0030 5A62     		str	r2, [r3, #36]
1880:./Library/stm32f4xx_rtc.c **** }
 3416              		.loc 1 1880 1
 3417 0032 00BF     		nop
 3418 0034 0C37     		adds	r7, r7, #12
 3419              	.LCFI178:
 3420              		.cfi_def_cfa_offset 4
 3421 0036 BD46     		mov	sp, r7
 3422              	.LCFI179:
 3423              		.cfi_def_cfa_register 13
 3424              		@ sp needed
 3425 0038 5DF8047B 		ldr	r7, [sp], #4
 3426              	.LCFI180:
 3427              		.cfi_restore 7
 3428              		.cfi_def_cfa_offset 0
 3429 003c 7047     		bx	lr
 3430              	.L189:
 3431 003e 00BF     		.align	2
 3432              	.L188:
 3433 0040 00280040 		.word	1073752064
 3434              		.cfi_endproc
 3435              	.LFE155:
 3437              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 3438              		.align	1
 3439              		.global	RTC_SmoothCalibConfig
 3440              		.syntax unified
 3441              		.thumb
 3442              		.thumb_func
 3444              	RTC_SmoothCalibConfig:
 3445              	.LFB156:
1881:./Library/stm32f4xx_rtc.c **** 
1882:./Library/stm32f4xx_rtc.c **** /**
1883:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1884:./Library/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1885:./Library/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1886:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1887:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1888:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibration period is 8s.
1889:./Library/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1890:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1891:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK pulse every 2**11 pulses.
1892:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1893:./Library/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1894:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1895:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 94


1896:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1897:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1898:./Library/stm32f4xx_rtc.c **** */
1899:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1900:./Library/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1901:./Library/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1902:./Library/stm32f4xx_rtc.c **** {
 3446              		.loc 1 1902 1
 3447              		.cfi_startproc
 3448              		@ args = 0, pretend = 0, frame = 24
 3449              		@ frame_needed = 1, uses_anonymous_args = 0
 3450              		@ link register save eliminated.
 3451 0000 80B4     		push	{r7}
 3452              	.LCFI181:
 3453              		.cfi_def_cfa_offset 4
 3454              		.cfi_offset 7, -4
 3455 0002 87B0     		sub	sp, sp, #28
 3456              	.LCFI182:
 3457              		.cfi_def_cfa_offset 32
 3458 0004 00AF     		add	r7, sp, #0
 3459              	.LCFI183:
 3460              		.cfi_def_cfa_register 7
 3461 0006 F860     		str	r0, [r7, #12]
 3462 0008 B960     		str	r1, [r7, #8]
 3463 000a 7A60     		str	r2, [r7, #4]
1903:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3464              		.loc 1 1903 15
 3465 000c 0023     		movs	r3, #0
 3466 000e FB75     		strb	r3, [r7, #23]
1904:./Library/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 3467              		.loc 1 1904 12
 3468 0010 0023     		movs	r3, #0
 3469 0012 3B61     		str	r3, [r7, #16]
1905:./Library/stm32f4xx_rtc.c **** 
1906:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1907:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1908:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1909:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1910:./Library/stm32f4xx_rtc.c **** 
1911:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1912:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3470              		.loc 1 1912 6
 3471 0014 1A4B     		ldr	r3, .L197
 3472              		.loc 1 1912 12
 3473 0016 CA22     		movs	r2, #202
 3474 0018 5A62     		str	r2, [r3, #36]
1913:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3475              		.loc 1 1913 6
 3476 001a 194B     		ldr	r3, .L197
 3477              		.loc 1 1913 12
 3478 001c 5322     		movs	r2, #83
 3479 001e 5A62     		str	r2, [r3, #36]
1914:./Library/stm32f4xx_rtc.c ****   
1915:./Library/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1916:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 3480              		.loc 1 1916 11
 3481 0020 174B     		ldr	r3, .L197
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 95


 3482 0022 DB68     		ldr	r3, [r3, #12]
 3483              		.loc 1 1916 17
 3484 0024 03F48033 		and	r3, r3, #65536
 3485              		.loc 1 1916 6
 3486 0028 002B     		cmp	r3, #0
 3487 002a 0DD0     		beq	.L191
1917:./Library/stm32f4xx_rtc.c ****   {
1918:./Library/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1919:./Library/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3488              		.loc 1 1919 11
 3489 002c 02E0     		b	.L192
 3490              	.L193:
1920:./Library/stm32f4xx_rtc.c ****     {
1921:./Library/stm32f4xx_rtc.c ****       recalpfcount++;
 3491              		.loc 1 1921 19
 3492 002e 3B69     		ldr	r3, [r7, #16]
 3493 0030 0133     		adds	r3, r3, #1
 3494 0032 3B61     		str	r3, [r7, #16]
 3495              	.L192:
1919:./Library/stm32f4xx_rtc.c ****     {
 3496              		.loc 1 1919 17
 3497 0034 124B     		ldr	r3, .L197
 3498 0036 DB68     		ldr	r3, [r3, #12]
1919:./Library/stm32f4xx_rtc.c ****     {
 3499              		.loc 1 1919 23
 3500 0038 03F48033 		and	r3, r3, #65536
1919:./Library/stm32f4xx_rtc.c ****     {
 3501              		.loc 1 1919 11
 3502 003c 002B     		cmp	r3, #0
 3503 003e 03D0     		beq	.L191
1919:./Library/stm32f4xx_rtc.c ****     {
 3504              		.loc 1 1919 52 discriminator 1
 3505 0040 3B69     		ldr	r3, [r7, #16]
 3506 0042 B3F5003F 		cmp	r3, #131072
 3507 0046 F2D1     		bne	.L193
 3508              	.L191:
1922:./Library/stm32f4xx_rtc.c ****     }
1923:./Library/stm32f4xx_rtc.c ****   }
1924:./Library/stm32f4xx_rtc.c **** 
1925:./Library/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1926:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3509              		.loc 1 1926 11
 3510 0048 0D4B     		ldr	r3, .L197
 3511 004a DB68     		ldr	r3, [r3, #12]
 3512              		.loc 1 1926 17
 3513 004c 03F48033 		and	r3, r3, #65536
 3514              		.loc 1 1926 6
 3515 0050 002B     		cmp	r3, #0
 3516 0052 09D1     		bne	.L194
1927:./Library/stm32f4xx_rtc.c ****   {
1928:./Library/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1929:./Library/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3517              		.loc 1 1929 60
 3518 0054 FA68     		ldr	r2, [r7, #12]
 3519 0056 BB68     		ldr	r3, [r7, #8]
 3520 0058 1A43     		orrs	r2, r2, r3
 3521              		.loc 1 1929 8
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 96


 3522 005a 0949     		ldr	r1, .L197
 3523              		.loc 1 1929 17
 3524 005c 7B68     		ldr	r3, [r7, #4]
 3525 005e 1343     		orrs	r3, r3, r2
 3526              		.loc 1 1929 15
 3527 0060 CB63     		str	r3, [r1, #60]
1930:./Library/stm32f4xx_rtc.c **** 
1931:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
 3528              		.loc 1 1931 12
 3529 0062 0123     		movs	r3, #1
 3530 0064 FB75     		strb	r3, [r7, #23]
 3531 0066 01E0     		b	.L195
 3532              	.L194:
1932:./Library/stm32f4xx_rtc.c ****   }
1933:./Library/stm32f4xx_rtc.c ****   else
1934:./Library/stm32f4xx_rtc.c ****   {
1935:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 3533              		.loc 1 1935 12
 3534 0068 0023     		movs	r3, #0
 3535 006a FB75     		strb	r3, [r7, #23]
 3536              	.L195:
1936:./Library/stm32f4xx_rtc.c ****   }
1937:./Library/stm32f4xx_rtc.c **** 
1938:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1939:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3537              		.loc 1 1939 6
 3538 006c 044B     		ldr	r3, .L197
 3539              		.loc 1 1939 12
 3540 006e FF22     		movs	r2, #255
 3541 0070 5A62     		str	r2, [r3, #36]
1940:./Library/stm32f4xx_rtc.c ****   
1941:./Library/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3542              		.loc 1 1941 10
 3543 0072 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1942:./Library/stm32f4xx_rtc.c **** }
 3544              		.loc 1 1942 1
 3545 0074 1846     		mov	r0, r3
 3546 0076 1C37     		adds	r7, r7, #28
 3547              	.LCFI184:
 3548              		.cfi_def_cfa_offset 4
 3549 0078 BD46     		mov	sp, r7
 3550              	.LCFI185:
 3551              		.cfi_def_cfa_register 13
 3552              		@ sp needed
 3553 007a 5DF8047B 		ldr	r7, [sp], #4
 3554              	.LCFI186:
 3555              		.cfi_restore 7
 3556              		.cfi_def_cfa_offset 0
 3557 007e 7047     		bx	lr
 3558              	.L198:
 3559              		.align	2
 3560              	.L197:
 3561 0080 00280040 		.word	1073752064
 3562              		.cfi_endproc
 3563              	.LFE156:
 3565              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3566              		.align	1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 97


 3567              		.global	RTC_TimeStampCmd
 3568              		.syntax unified
 3569              		.thumb
 3570              		.thumb_func
 3572              	RTC_TimeStampCmd:
 3573              	.LFB157:
1943:./Library/stm32f4xx_rtc.c **** 
1944:./Library/stm32f4xx_rtc.c **** /**
1945:./Library/stm32f4xx_rtc.c ****   * @}
1946:./Library/stm32f4xx_rtc.c ****   */
1947:./Library/stm32f4xx_rtc.c **** 
1948:./Library/stm32f4xx_rtc.c **** 
1949:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1950:./Library/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1951:./Library/stm32f4xx_rtc.c ****  *
1952:./Library/stm32f4xx_rtc.c **** @verbatim   
1953:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1954:./Library/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1955:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1956:./Library/stm32f4xx_rtc.c **** 
1957:./Library/stm32f4xx_rtc.c **** @endverbatim
1958:./Library/stm32f4xx_rtc.c ****   * @{
1959:./Library/stm32f4xx_rtc.c ****   */
1960:./Library/stm32f4xx_rtc.c **** 
1961:./Library/stm32f4xx_rtc.c **** /**
1962:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1963:./Library/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1964:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1965:./Library/stm32f4xx_rtc.c ****   *         activated.
1966:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1967:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1968:./Library/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1969:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1970:./Library/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1971:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1972:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1973:./Library/stm32f4xx_rtc.c ****   * @retval None
1974:./Library/stm32f4xx_rtc.c ****   */
1975:./Library/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1976:./Library/stm32f4xx_rtc.c **** {
 3574              		.loc 1 1976 1
 3575              		.cfi_startproc
 3576              		@ args = 0, pretend = 0, frame = 16
 3577              		@ frame_needed = 1, uses_anonymous_args = 0
 3578              		@ link register save eliminated.
 3579 0000 80B4     		push	{r7}
 3580              	.LCFI187:
 3581              		.cfi_def_cfa_offset 4
 3582              		.cfi_offset 7, -4
 3583 0002 85B0     		sub	sp, sp, #20
 3584              	.LCFI188:
 3585              		.cfi_def_cfa_offset 24
 3586 0004 00AF     		add	r7, sp, #0
 3587              	.LCFI189:
 3588              		.cfi_def_cfa_register 7
 3589 0006 7860     		str	r0, [r7, #4]
 3590 0008 0B46     		mov	r3, r1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 98


 3591 000a FB70     		strb	r3, [r7, #3]
1977:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3592              		.loc 1 1977 12
 3593 000c 0023     		movs	r3, #0
 3594 000e FB60     		str	r3, [r7, #12]
1978:./Library/stm32f4xx_rtc.c **** 
1979:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1980:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1981:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1982:./Library/stm32f4xx_rtc.c **** 
1983:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1984:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3595              		.loc 1 1984 26
 3596 0010 134B     		ldr	r3, .L202
 3597 0012 9B68     		ldr	r3, [r3, #8]
 3598              		.loc 1 1984 10
 3599 0014 23F40063 		bic	r3, r3, #2048
 3600 0018 23F00803 		bic	r3, r3, #8
 3601 001c FB60     		str	r3, [r7, #12]
1985:./Library/stm32f4xx_rtc.c **** 
1986:./Library/stm32f4xx_rtc.c ****   /* Get the new configuration */
1987:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3602              		.loc 1 1987 6
 3603 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3604 0020 002B     		cmp	r3, #0
 3605 0022 06D0     		beq	.L200
1988:./Library/stm32f4xx_rtc.c ****   {
1989:./Library/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3606              		.loc 1 1989 12
 3607 0024 7A68     		ldr	r2, [r7, #4]
 3608 0026 FB68     		ldr	r3, [r7, #12]
 3609 0028 1343     		orrs	r3, r3, r2
 3610 002a 43F40063 		orr	r3, r3, #2048
 3611 002e FB60     		str	r3, [r7, #12]
 3612 0030 03E0     		b	.L201
 3613              	.L200:
1990:./Library/stm32f4xx_rtc.c ****   }
1991:./Library/stm32f4xx_rtc.c ****   else
1992:./Library/stm32f4xx_rtc.c ****   {
1993:./Library/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3614              		.loc 1 1993 12
 3615 0032 FA68     		ldr	r2, [r7, #12]
 3616 0034 7B68     		ldr	r3, [r7, #4]
 3617 0036 1343     		orrs	r3, r3, r2
 3618 0038 FB60     		str	r3, [r7, #12]
 3619              	.L201:
1994:./Library/stm32f4xx_rtc.c ****   }
1995:./Library/stm32f4xx_rtc.c **** 
1996:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1997:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3620              		.loc 1 1997 6
 3621 003a 094B     		ldr	r3, .L202
 3622              		.loc 1 1997 12
 3623 003c CA22     		movs	r2, #202
 3624 003e 5A62     		str	r2, [r3, #36]
1998:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3625              		.loc 1 1998 6
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 99


 3626 0040 074B     		ldr	r3, .L202
 3627              		.loc 1 1998 12
 3628 0042 5322     		movs	r2, #83
 3629 0044 5A62     		str	r2, [r3, #36]
1999:./Library/stm32f4xx_rtc.c **** 
2000:./Library/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2001:./Library/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3630              		.loc 1 2001 6
 3631 0046 064A     		ldr	r2, .L202
 3632              		.loc 1 2001 11
 3633 0048 FB68     		ldr	r3, [r7, #12]
 3634 004a 9360     		str	r3, [r2, #8]
2002:./Library/stm32f4xx_rtc.c **** 
2003:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2004:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3635              		.loc 1 2004 6
 3636 004c 044B     		ldr	r3, .L202
 3637              		.loc 1 2004 12
 3638 004e FF22     		movs	r2, #255
 3639 0050 5A62     		str	r2, [r3, #36]
2005:./Library/stm32f4xx_rtc.c **** }
 3640              		.loc 1 2005 1
 3641 0052 00BF     		nop
 3642 0054 1437     		adds	r7, r7, #20
 3643              	.LCFI190:
 3644              		.cfi_def_cfa_offset 4
 3645 0056 BD46     		mov	sp, r7
 3646              	.LCFI191:
 3647              		.cfi_def_cfa_register 13
 3648              		@ sp needed
 3649 0058 5DF8047B 		ldr	r7, [sp], #4
 3650              	.LCFI192:
 3651              		.cfi_restore 7
 3652              		.cfi_def_cfa_offset 0
 3653 005c 7047     		bx	lr
 3654              	.L203:
 3655 005e 00BF     		.align	2
 3656              	.L202:
 3657 0060 00280040 		.word	1073752064
 3658              		.cfi_endproc
 3659              	.LFE157:
 3661              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3662              		.align	1
 3663              		.global	RTC_GetTimeStamp
 3664              		.syntax unified
 3665              		.thumb
 3666              		.thumb_func
 3668              	RTC_GetTimeStamp:
 3669              	.LFB158:
2006:./Library/stm32f4xx_rtc.c **** 
2007:./Library/stm32f4xx_rtc.c **** /**
2008:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2009:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2010:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2011:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2012:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2013:./Library/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 100


2014:./Library/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2015:./Library/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2016:./Library/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2017:./Library/stm32f4xx_rtc.c ****   * @retval None
2018:./Library/stm32f4xx_rtc.c ****   */
2019:./Library/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2020:./Library/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2021:./Library/stm32f4xx_rtc.c **** {
 3670              		.loc 1 2021 1
 3671              		.cfi_startproc
 3672              		@ args = 0, pretend = 0, frame = 24
 3673              		@ frame_needed = 1, uses_anonymous_args = 0
 3674 0000 80B5     		push	{r7, lr}
 3675              	.LCFI193:
 3676              		.cfi_def_cfa_offset 8
 3677              		.cfi_offset 7, -8
 3678              		.cfi_offset 14, -4
 3679 0002 86B0     		sub	sp, sp, #24
 3680              	.LCFI194:
 3681              		.cfi_def_cfa_offset 32
 3682 0004 00AF     		add	r7, sp, #0
 3683              	.LCFI195:
 3684              		.cfi_def_cfa_register 7
 3685 0006 F860     		str	r0, [r7, #12]
 3686 0008 B960     		str	r1, [r7, #8]
 3687 000a 7A60     		str	r2, [r7, #4]
2022:./Library/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3688              		.loc 1 2022 12
 3689 000c 0023     		movs	r3, #0
 3690 000e 7B61     		str	r3, [r7, #20]
 3691              		.loc 1 2022 25
 3692 0010 0023     		movs	r3, #0
 3693 0012 3B61     		str	r3, [r7, #16]
2023:./Library/stm32f4xx_rtc.c **** 
2024:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2025:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2026:./Library/stm32f4xx_rtc.c **** 
2027:./Library/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2028:./Library/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3694              		.loc 1 2028 27
 3695 0014 414B     		ldr	r3, .L207
 3696 0016 1B6B     		ldr	r3, [r3, #48]
 3697              		.loc 1 2028 11
 3698 0018 03F07F33 		and	r3, r3, #2139062143
 3699 001c 23F0FE43 		bic	r3, r3, #2130706432
 3700 0020 7B61     		str	r3, [r7, #20]
2029:./Library/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3701              		.loc 1 2029 27
 3702 0022 3E4B     		ldr	r3, .L207
 3703 0024 5B6B     		ldr	r3, [r3, #52]
 3704              		.loc 1 2029 11
 3705 0026 23F07F43 		bic	r3, r3, #-16777216
 3706 002a 23F0C003 		bic	r3, r3, #192
 3707 002e 3B61     		str	r3, [r7, #16]
2030:./Library/stm32f4xx_rtc.c **** 
2031:./Library/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2032:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 101


 3708              		.loc 1 2032 82
 3709 0030 7B69     		ldr	r3, [r7, #20]
 3710 0032 1B0C     		lsrs	r3, r3, #16
 3711              		.loc 1 2032 36
 3712 0034 DBB2     		uxtb	r3, r3
 3713 0036 03F03F03 		and	r3, r3, #63
 3714 003a DAB2     		uxtb	r2, r3
 3715              		.loc 1 2032 34
 3716 003c BB68     		ldr	r3, [r7, #8]
 3717 003e 1A70     		strb	r2, [r3]
2033:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3718              		.loc 1 2033 86
 3719 0040 7B69     		ldr	r3, [r7, #20]
 3720 0042 1B0A     		lsrs	r3, r3, #8
 3721              		.loc 1 2033 38
 3722 0044 DBB2     		uxtb	r3, r3
 3723 0046 03F07F03 		and	r3, r3, #127
 3724 004a DAB2     		uxtb	r2, r3
 3725              		.loc 1 2033 36
 3726 004c BB68     		ldr	r3, [r7, #8]
 3727 004e 5A70     		strb	r2, [r3, #1]
2034:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3728              		.loc 1 2034 38
 3729 0050 7B69     		ldr	r3, [r7, #20]
 3730 0052 DBB2     		uxtb	r3, r3
 3731 0054 03F07F03 		and	r3, r3, #127
 3732 0058 DAB2     		uxtb	r2, r3
 3733              		.loc 1 2034 36
 3734 005a BB68     		ldr	r3, [r7, #8]
 3735 005c 9A70     		strb	r2, [r3, #2]
2035:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3736              		.loc 1 2035 68
 3737 005e 7B69     		ldr	r3, [r7, #20]
 3738 0060 1B0C     		lsrs	r3, r3, #16
 3739              		.loc 1 2035 34
 3740 0062 DBB2     		uxtb	r3, r3
 3741 0064 03F04003 		and	r3, r3, #64
 3742 0068 DAB2     		uxtb	r2, r3
 3743              		.loc 1 2035 32
 3744 006a BB68     		ldr	r3, [r7, #8]
 3745 006c DA70     		strb	r2, [r3, #3]
2036:./Library/stm32f4xx_rtc.c **** 
2037:./Library/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2038:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3746              		.loc 1 2038 33
 3747 006e 7B68     		ldr	r3, [r7, #4]
 3748 0070 0022     		movs	r2, #0
 3749 0072 DA70     		strb	r2, [r3, #3]
2039:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3750              		.loc 1 2039 82
 3751 0074 3B69     		ldr	r3, [r7, #16]
 3752 0076 1B0A     		lsrs	r3, r3, #8
 3753              		.loc 1 2039 36
 3754 0078 DBB2     		uxtb	r3, r3
 3755 007a 03F01F03 		and	r3, r3, #31
 3756 007e DAB2     		uxtb	r2, r3
 3757              		.loc 1 2039 34
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 102


 3758 0080 7B68     		ldr	r3, [r7, #4]
 3759 0082 5A70     		strb	r2, [r3, #1]
2040:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3760              		.loc 1 2040 35
 3761 0084 3B69     		ldr	r3, [r7, #16]
 3762 0086 DBB2     		uxtb	r3, r3
 3763 0088 03F03F03 		and	r3, r3, #63
 3764 008c DAB2     		uxtb	r2, r3
 3765              		.loc 1 2040 33
 3766 008e 7B68     		ldr	r3, [r7, #4]
 3767 0090 9A70     		strb	r2, [r3, #2]
2041:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3768              		.loc 1 2041 73
 3769 0092 3B69     		ldr	r3, [r7, #16]
 3770 0094 5B0B     		lsrs	r3, r3, #13
 3771              		.loc 1 2041 38
 3772 0096 DBB2     		uxtb	r3, r3
 3773 0098 03F00703 		and	r3, r3, #7
 3774 009c DAB2     		uxtb	r2, r3
 3775              		.loc 1 2041 36
 3776 009e 7B68     		ldr	r3, [r7, #4]
 3777 00a0 1A70     		strb	r2, [r3]
2042:./Library/stm32f4xx_rtc.c **** 
2043:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2044:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3778              		.loc 1 2044 6
 3779 00a2 FB68     		ldr	r3, [r7, #12]
 3780 00a4 002B     		cmp	r3, #0
 3781 00a6 35D1     		bne	.L206
2045:./Library/stm32f4xx_rtc.c ****   {
2046:./Library/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2047:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3782              		.loc 1 2047 47
 3783 00a8 BB68     		ldr	r3, [r7, #8]
 3784 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3785 00ac 1846     		mov	r0, r3
 3786 00ae FFF7FEFF 		bl	RTC_Bcd2ToByte
 3787 00b2 0346     		mov	r3, r0
 3788 00b4 1A46     		mov	r2, r3
 3789              		.loc 1 2047 36
 3790 00b6 BB68     		ldr	r3, [r7, #8]
 3791 00b8 1A70     		strb	r2, [r3]
2048:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3792              		.loc 1 2048 49
 3793 00ba BB68     		ldr	r3, [r7, #8]
 3794 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3795 00be 1846     		mov	r0, r3
 3796 00c0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3797 00c4 0346     		mov	r3, r0
 3798 00c6 1A46     		mov	r2, r3
 3799              		.loc 1 2048 38
 3800 00c8 BB68     		ldr	r3, [r7, #8]
 3801 00ca 5A70     		strb	r2, [r3, #1]
2049:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3802              		.loc 1 2049 49
 3803 00cc BB68     		ldr	r3, [r7, #8]
 3804 00ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 103


 3805 00d0 1846     		mov	r0, r3
 3806 00d2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3807 00d6 0346     		mov	r3, r0
 3808 00d8 1A46     		mov	r2, r3
 3809              		.loc 1 2049 38
 3810 00da BB68     		ldr	r3, [r7, #8]
 3811 00dc 9A70     		strb	r2, [r3, #2]
2050:./Library/stm32f4xx_rtc.c **** 
2051:./Library/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2052:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3812              		.loc 1 2052 47
 3813 00de 7B68     		ldr	r3, [r7, #4]
 3814 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3815 00e2 1846     		mov	r0, r3
 3816 00e4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3817 00e8 0346     		mov	r3, r0
 3818 00ea 1A46     		mov	r2, r3
 3819              		.loc 1 2052 36
 3820 00ec 7B68     		ldr	r3, [r7, #4]
 3821 00ee 5A70     		strb	r2, [r3, #1]
2053:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3822              		.loc 1 2053 46
 3823 00f0 7B68     		ldr	r3, [r7, #4]
 3824 00f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3825 00f4 1846     		mov	r0, r3
 3826 00f6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3827 00fa 0346     		mov	r3, r0
 3828 00fc 1A46     		mov	r2, r3
 3829              		.loc 1 2053 35
 3830 00fe 7B68     		ldr	r3, [r7, #4]
 3831 0100 9A70     		strb	r2, [r3, #2]
2054:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3832              		.loc 1 2054 49
 3833 0102 7B68     		ldr	r3, [r7, #4]
 3834 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3835 0106 1846     		mov	r0, r3
 3836 0108 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3837 010c 0346     		mov	r3, r0
 3838 010e 1A46     		mov	r2, r3
 3839              		.loc 1 2054 38
 3840 0110 7B68     		ldr	r3, [r7, #4]
 3841 0112 1A70     		strb	r2, [r3]
 3842              	.L206:
2055:./Library/stm32f4xx_rtc.c ****   }
2056:./Library/stm32f4xx_rtc.c **** }
 3843              		.loc 1 2056 1
 3844 0114 00BF     		nop
 3845 0116 1837     		adds	r7, r7, #24
 3846              	.LCFI196:
 3847              		.cfi_def_cfa_offset 8
 3848 0118 BD46     		mov	sp, r7
 3849              	.LCFI197:
 3850              		.cfi_def_cfa_register 13
 3851              		@ sp needed
 3852 011a 80BD     		pop	{r7, pc}
 3853              	.L208:
 3854              		.align	2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 104


 3855              	.L207:
 3856 011c 00280040 		.word	1073752064
 3857              		.cfi_endproc
 3858              	.LFE158:
 3860              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3861              		.align	1
 3862              		.global	RTC_GetTimeStampSubSecond
 3863              		.syntax unified
 3864              		.thumb
 3865              		.thumb_func
 3867              	RTC_GetTimeStampSubSecond:
 3868              	.LFB159:
2057:./Library/stm32f4xx_rtc.c **** 
2058:./Library/stm32f4xx_rtc.c **** /**
2059:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2060:./Library/stm32f4xx_rtc.c ****   * @param  None
2061:./Library/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2062:./Library/stm32f4xx_rtc.c ****   */
2063:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2064:./Library/stm32f4xx_rtc.c **** {
 3869              		.loc 1 2064 1
 3870              		.cfi_startproc
 3871              		@ args = 0, pretend = 0, frame = 0
 3872              		@ frame_needed = 1, uses_anonymous_args = 0
 3873              		@ link register save eliminated.
 3874 0000 80B4     		push	{r7}
 3875              	.LCFI198:
 3876              		.cfi_def_cfa_offset 4
 3877              		.cfi_offset 7, -4
 3878 0002 00AF     		add	r7, sp, #0
 3879              	.LCFI199:
 3880              		.cfi_def_cfa_register 7
2065:./Library/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2066:./Library/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3881              		.loc 1 2066 24
 3882 0004 034B     		ldr	r3, .L211
 3883              		.loc 1 2066 10
 3884 0006 9B6B     		ldr	r3, [r3, #56]
2067:./Library/stm32f4xx_rtc.c **** }
 3885              		.loc 1 2067 1
 3886 0008 1846     		mov	r0, r3
 3887 000a BD46     		mov	sp, r7
 3888              	.LCFI200:
 3889              		.cfi_def_cfa_register 13
 3890              		@ sp needed
 3891 000c 5DF8047B 		ldr	r7, [sp], #4
 3892              	.LCFI201:
 3893              		.cfi_restore 7
 3894              		.cfi_def_cfa_offset 0
 3895 0010 7047     		bx	lr
 3896              	.L212:
 3897 0012 00BF     		.align	2
 3898              	.L211:
 3899 0014 00280040 		.word	1073752064
 3900              		.cfi_endproc
 3901              	.LFE159:
 3903              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 105


 3904              		.align	1
 3905              		.global	RTC_TamperTriggerConfig
 3906              		.syntax unified
 3907              		.thumb
 3908              		.thumb_func
 3910              	RTC_TamperTriggerConfig:
 3911              	.LFB160:
2068:./Library/stm32f4xx_rtc.c **** 
2069:./Library/stm32f4xx_rtc.c **** /**
2070:./Library/stm32f4xx_rtc.c ****   * @}
2071:./Library/stm32f4xx_rtc.c ****   */
2072:./Library/stm32f4xx_rtc.c **** 
2073:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2074:./Library/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2075:./Library/stm32f4xx_rtc.c ****  *
2076:./Library/stm32f4xx_rtc.c **** @verbatim   
2077:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2078:./Library/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2079:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2080:./Library/stm32f4xx_rtc.c **** 
2081:./Library/stm32f4xx_rtc.c **** @endverbatim
2082:./Library/stm32f4xx_rtc.c ****   * @{
2083:./Library/stm32f4xx_rtc.c ****   */
2084:./Library/stm32f4xx_rtc.c **** 
2085:./Library/stm32f4xx_rtc.c **** /**
2086:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2087:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2088:./Library/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper 2
2089:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2090:./Library/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2091:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2092:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2093:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2094:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2095:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2096:./Library/stm32f4xx_rtc.c ****   * @retval None
2097:./Library/stm32f4xx_rtc.c ****   */
2098:./Library/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2099:./Library/stm32f4xx_rtc.c **** {
 3912              		.loc 1 2099 1
 3913              		.cfi_startproc
 3914              		@ args = 0, pretend = 0, frame = 8
 3915              		@ frame_needed = 1, uses_anonymous_args = 0
 3916              		@ link register save eliminated.
 3917 0000 80B4     		push	{r7}
 3918              	.LCFI202:
 3919              		.cfi_def_cfa_offset 4
 3920              		.cfi_offset 7, -4
 3921 0002 83B0     		sub	sp, sp, #12
 3922              	.LCFI203:
 3923              		.cfi_def_cfa_offset 16
 3924 0004 00AF     		add	r7, sp, #0
 3925              	.LCFI204:
 3926              		.cfi_def_cfa_register 7
 3927 0006 7860     		str	r0, [r7, #4]
 3928 0008 3960     		str	r1, [r7]
2100:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 106


2101:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2102:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2103:./Library/stm32f4xx_rtc.c ****  
2104:./Library/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3929              		.loc 1 2104 6
 3930 000a 3B68     		ldr	r3, [r7]
 3931 000c 002B     		cmp	r3, #0
 3932 000e 08D1     		bne	.L214
2105:./Library/stm32f4xx_rtc.c ****   {  
2106:./Library/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2107:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3933              		.loc 1 2107 16
 3934 0010 0A4B     		ldr	r3, .L217
 3935 0012 1A6C     		ldr	r2, [r3, #64]
 3936              		.loc 1 2107 53
 3937 0014 7B68     		ldr	r3, [r7, #4]
 3938 0016 5B00     		lsls	r3, r3, #1
 3939              		.loc 1 2107 40
 3940 0018 DB43     		mvns	r3, r3
 3941              		.loc 1 2107 16
 3942 001a 0849     		ldr	r1, .L217
 3943 001c 1340     		ands	r3, r3, r2
 3944 001e 0B64     		str	r3, [r1, #64]
2108:./Library/stm32f4xx_rtc.c ****   }
2109:./Library/stm32f4xx_rtc.c ****   else
2110:./Library/stm32f4xx_rtc.c ****   { 
2111:./Library/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2112:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2113:./Library/stm32f4xx_rtc.c ****   }  
2114:./Library/stm32f4xx_rtc.c **** }
 3945              		.loc 1 2114 1
 3946 0020 06E0     		b	.L216
 3947              	.L214:
2112:./Library/stm32f4xx_rtc.c ****   }  
 3948              		.loc 1 2112 16
 3949 0022 064B     		ldr	r3, .L217
 3950 0024 1A6C     		ldr	r2, [r3, #64]
2112:./Library/stm32f4xx_rtc.c ****   }  
 3951              		.loc 1 2112 41
 3952 0026 7B68     		ldr	r3, [r7, #4]
 3953 0028 5B00     		lsls	r3, r3, #1
2112:./Library/stm32f4xx_rtc.c ****   }  
 3954              		.loc 1 2112 16
 3955 002a 0449     		ldr	r1, .L217
 3956 002c 1343     		orrs	r3, r3, r2
 3957 002e 0B64     		str	r3, [r1, #64]
 3958              	.L216:
 3959              		.loc 1 2114 1
 3960 0030 00BF     		nop
 3961 0032 0C37     		adds	r7, r7, #12
 3962              	.LCFI205:
 3963              		.cfi_def_cfa_offset 4
 3964 0034 BD46     		mov	sp, r7
 3965              	.LCFI206:
 3966              		.cfi_def_cfa_register 13
 3967              		@ sp needed
 3968 0036 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 107


 3969              	.LCFI207:
 3970              		.cfi_restore 7
 3971              		.cfi_def_cfa_offset 0
 3972 003a 7047     		bx	lr
 3973              	.L218:
 3974              		.align	2
 3975              	.L217:
 3976 003c 00280040 		.word	1073752064
 3977              		.cfi_endproc
 3978              	.LFE160:
 3980              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3981              		.align	1
 3982              		.global	RTC_TamperCmd
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3987              	RTC_TamperCmd:
 3988              	.LFB161:
2115:./Library/stm32f4xx_rtc.c **** 
2116:./Library/stm32f4xx_rtc.c **** /**
2117:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2118:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2119:./Library/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper_2
2120:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2121:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2122:./Library/stm32f4xx_rtc.c ****   * @retval None
2123:./Library/stm32f4xx_rtc.c ****   */
2124:./Library/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2125:./Library/stm32f4xx_rtc.c **** {
 3989              		.loc 1 2125 1
 3990              		.cfi_startproc
 3991              		@ args = 0, pretend = 0, frame = 8
 3992              		@ frame_needed = 1, uses_anonymous_args = 0
 3993              		@ link register save eliminated.
 3994 0000 80B4     		push	{r7}
 3995              	.LCFI208:
 3996              		.cfi_def_cfa_offset 4
 3997              		.cfi_offset 7, -4
 3998 0002 83B0     		sub	sp, sp, #12
 3999              	.LCFI209:
 4000              		.cfi_def_cfa_offset 16
 4001 0004 00AF     		add	r7, sp, #0
 4002              	.LCFI210:
 4003              		.cfi_def_cfa_register 7
 4004 0006 7860     		str	r0, [r7, #4]
 4005 0008 0B46     		mov	r3, r1
 4006 000a FB70     		strb	r3, [r7, #3]
2126:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2127:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2128:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2129:./Library/stm32f4xx_rtc.c ****   
2130:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4007              		.loc 1 2130 6
 4008 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4009 000e 002B     		cmp	r3, #0
 4010 0010 06D0     		beq	.L220
2131:./Library/stm32f4xx_rtc.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 108


2132:./Library/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2133:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 4011              		.loc 1 2133 16
 4012 0012 0A4B     		ldr	r3, .L223
 4013 0014 1A6C     		ldr	r2, [r3, #64]
 4014 0016 0949     		ldr	r1, .L223
 4015 0018 7B68     		ldr	r3, [r7, #4]
 4016 001a 1343     		orrs	r3, r3, r2
 4017 001c 0B64     		str	r3, [r1, #64]
2134:./Library/stm32f4xx_rtc.c ****   }
2135:./Library/stm32f4xx_rtc.c ****   else
2136:./Library/stm32f4xx_rtc.c ****   {
2137:./Library/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2138:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2139:./Library/stm32f4xx_rtc.c ****   }  
2140:./Library/stm32f4xx_rtc.c **** }
 4018              		.loc 1 2140 1
 4019 001e 06E0     		b	.L222
 4020              	.L220:
2138:./Library/stm32f4xx_rtc.c ****   }  
 4021              		.loc 1 2138 16
 4022 0020 064B     		ldr	r3, .L223
 4023 0022 1A6C     		ldr	r2, [r3, #64]
2138:./Library/stm32f4xx_rtc.c ****   }  
 4024              		.loc 1 2138 29
 4025 0024 7B68     		ldr	r3, [r7, #4]
 4026 0026 DB43     		mvns	r3, r3
2138:./Library/stm32f4xx_rtc.c ****   }  
 4027              		.loc 1 2138 16
 4028 0028 0449     		ldr	r1, .L223
 4029 002a 1340     		ands	r3, r3, r2
 4030 002c 0B64     		str	r3, [r1, #64]
 4031              	.L222:
 4032              		.loc 1 2140 1
 4033 002e 00BF     		nop
 4034 0030 0C37     		adds	r7, r7, #12
 4035              	.LCFI211:
 4036              		.cfi_def_cfa_offset 4
 4037 0032 BD46     		mov	sp, r7
 4038              	.LCFI212:
 4039              		.cfi_def_cfa_register 13
 4040              		@ sp needed
 4041 0034 5DF8047B 		ldr	r7, [sp], #4
 4042              	.LCFI213:
 4043              		.cfi_restore 7
 4044              		.cfi_def_cfa_offset 0
 4045 0038 7047     		bx	lr
 4046              	.L224:
 4047 003a 00BF     		.align	2
 4048              	.L223:
 4049 003c 00280040 		.word	1073752064
 4050              		.cfi_endproc
 4051              	.LFE161:
 4053              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 4054              		.align	1
 4055              		.global	RTC_TamperFilterConfig
 4056              		.syntax unified
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 109


 4057              		.thumb
 4058              		.thumb_func
 4060              	RTC_TamperFilterConfig:
 4061              	.LFB162:
2141:./Library/stm32f4xx_rtc.c **** 
2142:./Library/stm32f4xx_rtc.c **** /**
2143:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2144:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2145:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2146:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2147:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2148:./Library/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2149:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2150:./Library/stm32f4xx_rtc.c ****   *                                    samples at the active level
2151:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2152:./Library/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2153:./Library/stm32f4xx_rtc.c ****   * @retval None
2154:./Library/stm32f4xx_rtc.c ****   */
2155:./Library/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2156:./Library/stm32f4xx_rtc.c **** {
 4062              		.loc 1 2156 1
 4063              		.cfi_startproc
 4064              		@ args = 0, pretend = 0, frame = 8
 4065              		@ frame_needed = 1, uses_anonymous_args = 0
 4066              		@ link register save eliminated.
 4067 0000 80B4     		push	{r7}
 4068              	.LCFI214:
 4069              		.cfi_def_cfa_offset 4
 4070              		.cfi_offset 7, -4
 4071 0002 83B0     		sub	sp, sp, #12
 4072              	.LCFI215:
 4073              		.cfi_def_cfa_offset 16
 4074 0004 00AF     		add	r7, sp, #0
 4075              	.LCFI216:
 4076              		.cfi_def_cfa_register 7
 4077 0006 7860     		str	r0, [r7, #4]
2157:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2158:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2159:./Library/stm32f4xx_rtc.c ****    
2160:./Library/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2161:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 4078              		.loc 1 2161 14
 4079 0008 084B     		ldr	r3, .L226
 4080 000a 1B6C     		ldr	r3, [r3, #64]
 4081 000c 074A     		ldr	r2, .L226
 4082 000e 23F4C053 		bic	r3, r3, #6144
 4083 0012 1364     		str	r3, [r2, #64]
2162:./Library/stm32f4xx_rtc.c **** 
2163:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2164:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 4084              		.loc 1 2164 14
 4085 0014 054B     		ldr	r3, .L226
 4086 0016 1A6C     		ldr	r2, [r3, #64]
 4087 0018 0449     		ldr	r1, .L226
 4088 001a 7B68     		ldr	r3, [r7, #4]
 4089 001c 1343     		orrs	r3, r3, r2
 4090 001e 0B64     		str	r3, [r1, #64]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 110


2165:./Library/stm32f4xx_rtc.c **** }
 4091              		.loc 1 2165 1
 4092 0020 00BF     		nop
 4093 0022 0C37     		adds	r7, r7, #12
 4094              	.LCFI217:
 4095              		.cfi_def_cfa_offset 4
 4096 0024 BD46     		mov	sp, r7
 4097              	.LCFI218:
 4098              		.cfi_def_cfa_register 13
 4099              		@ sp needed
 4100 0026 5DF8047B 		ldr	r7, [sp], #4
 4101              	.LCFI219:
 4102              		.cfi_restore 7
 4103              		.cfi_def_cfa_offset 0
 4104 002a 7047     		bx	lr
 4105              	.L227:
 4106              		.align	2
 4107              	.L226:
 4108 002c 00280040 		.word	1073752064
 4109              		.cfi_endproc
 4110              	.LFE162:
 4112              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 4113              		.align	1
 4114              		.global	RTC_TamperSamplingFreqConfig
 4115              		.syntax unified
 4116              		.thumb
 4117              		.thumb_func
 4119              	RTC_TamperSamplingFreqConfig:
 4120              	.LFB163:
2166:./Library/stm32f4xx_rtc.c **** 
2167:./Library/stm32f4xx_rtc.c **** /**
2168:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2169:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2170:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2171:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2172:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2173:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2174:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2175:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2176:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2177:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2178:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2179:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2180:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2181:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2182:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2183:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2184:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2185:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2186:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2187:./Library/stm32f4xx_rtc.c ****   * @retval None
2188:./Library/stm32f4xx_rtc.c ****   */
2189:./Library/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2190:./Library/stm32f4xx_rtc.c **** {
 4121              		.loc 1 2190 1
 4122              		.cfi_startproc
 4123              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 111


 4124              		@ frame_needed = 1, uses_anonymous_args = 0
 4125              		@ link register save eliminated.
 4126 0000 80B4     		push	{r7}
 4127              	.LCFI220:
 4128              		.cfi_def_cfa_offset 4
 4129              		.cfi_offset 7, -4
 4130 0002 83B0     		sub	sp, sp, #12
 4131              	.LCFI221:
 4132              		.cfi_def_cfa_offset 16
 4133 0004 00AF     		add	r7, sp, #0
 4134              	.LCFI222:
 4135              		.cfi_def_cfa_register 7
 4136 0006 7860     		str	r0, [r7, #4]
2191:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2192:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2193:./Library/stm32f4xx_rtc.c ****  
2194:./Library/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2195:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 4137              		.loc 1 2195 14
 4138 0008 084B     		ldr	r3, .L229
 4139 000a 1B6C     		ldr	r3, [r3, #64]
 4140 000c 074A     		ldr	r2, .L229
 4141 000e 23F4E063 		bic	r3, r3, #1792
 4142 0012 1364     		str	r3, [r2, #64]
2196:./Library/stm32f4xx_rtc.c **** 
2197:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2198:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 4143              		.loc 1 2198 14
 4144 0014 054B     		ldr	r3, .L229
 4145 0016 1A6C     		ldr	r2, [r3, #64]
 4146 0018 0449     		ldr	r1, .L229
 4147 001a 7B68     		ldr	r3, [r7, #4]
 4148 001c 1343     		orrs	r3, r3, r2
 4149 001e 0B64     		str	r3, [r1, #64]
2199:./Library/stm32f4xx_rtc.c **** }
 4150              		.loc 1 2199 1
 4151 0020 00BF     		nop
 4152 0022 0C37     		adds	r7, r7, #12
 4153              	.LCFI223:
 4154              		.cfi_def_cfa_offset 4
 4155 0024 BD46     		mov	sp, r7
 4156              	.LCFI224:
 4157              		.cfi_def_cfa_register 13
 4158              		@ sp needed
 4159 0026 5DF8047B 		ldr	r7, [sp], #4
 4160              	.LCFI225:
 4161              		.cfi_restore 7
 4162              		.cfi_def_cfa_offset 0
 4163 002a 7047     		bx	lr
 4164              	.L230:
 4165              		.align	2
 4166              	.L229:
 4167 002c 00280040 		.word	1073752064
 4168              		.cfi_endproc
 4169              	.LFE163:
 4171              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 4172              		.align	1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 112


 4173              		.global	RTC_TamperPinsPrechargeDuration
 4174              		.syntax unified
 4175              		.thumb
 4176              		.thumb_func
 4178              	RTC_TamperPinsPrechargeDuration:
 4179              	.LFB164:
2200:./Library/stm32f4xx_rtc.c **** 
2201:./Library/stm32f4xx_rtc.c **** /**
2202:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2203:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2204:./Library/stm32f4xx_rtc.c ****   *         Precharge Duration.
2205:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2206:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2207:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2208:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2209:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2210:./Library/stm32f4xx_rtc.c ****   * @retval None
2211:./Library/stm32f4xx_rtc.c ****   */
2212:./Library/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2213:./Library/stm32f4xx_rtc.c **** {
 4180              		.loc 1 2213 1
 4181              		.cfi_startproc
 4182              		@ args = 0, pretend = 0, frame = 8
 4183              		@ frame_needed = 1, uses_anonymous_args = 0
 4184              		@ link register save eliminated.
 4185 0000 80B4     		push	{r7}
 4186              	.LCFI226:
 4187              		.cfi_def_cfa_offset 4
 4188              		.cfi_offset 7, -4
 4189 0002 83B0     		sub	sp, sp, #12
 4190              	.LCFI227:
 4191              		.cfi_def_cfa_offset 16
 4192 0004 00AF     		add	r7, sp, #0
 4193              	.LCFI228:
 4194              		.cfi_def_cfa_register 7
 4195 0006 7860     		str	r0, [r7, #4]
2214:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2216:./Library/stm32f4xx_rtc.c ****    
2217:./Library/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2218:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 4196              		.loc 1 2218 14
 4197 0008 084B     		ldr	r3, .L232
 4198 000a 1B6C     		ldr	r3, [r3, #64]
 4199 000c 074A     		ldr	r2, .L232
 4200 000e 23F4C043 		bic	r3, r3, #24576
 4201 0012 1364     		str	r3, [r2, #64]
2219:./Library/stm32f4xx_rtc.c **** 
2220:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2221:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 4202              		.loc 1 2221 14
 4203 0014 054B     		ldr	r3, .L232
 4204 0016 1A6C     		ldr	r2, [r3, #64]
 4205 0018 0449     		ldr	r1, .L232
 4206 001a 7B68     		ldr	r3, [r7, #4]
 4207 001c 1343     		orrs	r3, r3, r2
 4208 001e 0B64     		str	r3, [r1, #64]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 113


2222:./Library/stm32f4xx_rtc.c **** }
 4209              		.loc 1 2222 1
 4210 0020 00BF     		nop
 4211 0022 0C37     		adds	r7, r7, #12
 4212              	.LCFI229:
 4213              		.cfi_def_cfa_offset 4
 4214 0024 BD46     		mov	sp, r7
 4215              	.LCFI230:
 4216              		.cfi_def_cfa_register 13
 4217              		@ sp needed
 4218 0026 5DF8047B 		ldr	r7, [sp], #4
 4219              	.LCFI231:
 4220              		.cfi_restore 7
 4221              		.cfi_def_cfa_offset 0
 4222 002a 7047     		bx	lr
 4223              	.L233:
 4224              		.align	2
 4225              	.L232:
 4226 002c 00280040 		.word	1073752064
 4227              		.cfi_endproc
 4228              	.LFE164:
 4230              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 4231              		.align	1
 4232              		.global	RTC_TimeStampOnTamperDetectionCmd
 4233              		.syntax unified
 4234              		.thumb
 4235              		.thumb_func
 4237              	RTC_TimeStampOnTamperDetectionCmd:
 4238              	.LFB165:
2223:./Library/stm32f4xx_rtc.c **** 
2224:./Library/stm32f4xx_rtc.c **** /**
2225:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2226:./Library/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2227:./Library/stm32f4xx_rtc.c ****   *         is reset.   
2228:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2229:./Library/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2230:./Library/stm32f4xx_rtc.c ****   * @retval None
2231:./Library/stm32f4xx_rtc.c ****   */
2232:./Library/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2233:./Library/stm32f4xx_rtc.c **** {
 4239              		.loc 1 2233 1
 4240              		.cfi_startproc
 4241              		@ args = 0, pretend = 0, frame = 8
 4242              		@ frame_needed = 1, uses_anonymous_args = 0
 4243              		@ link register save eliminated.
 4244 0000 80B4     		push	{r7}
 4245              	.LCFI232:
 4246              		.cfi_def_cfa_offset 4
 4247              		.cfi_offset 7, -4
 4248 0002 83B0     		sub	sp, sp, #12
 4249              	.LCFI233:
 4250              		.cfi_def_cfa_offset 16
 4251 0004 00AF     		add	r7, sp, #0
 4252              	.LCFI234:
 4253              		.cfi_def_cfa_register 7
 4254 0006 0346     		mov	r3, r0
 4255 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 114


2234:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2235:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2236:./Library/stm32f4xx_rtc.c ****    
2237:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4256              		.loc 1 2237 6
 4257 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4258 000c 002B     		cmp	r3, #0
 4259 000e 06D0     		beq	.L235
2238:./Library/stm32f4xx_rtc.c ****   {
2239:./Library/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2240:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 4260              		.loc 1 2240 16
 4261 0010 094B     		ldr	r3, .L238
 4262 0012 1B6C     		ldr	r3, [r3, #64]
 4263 0014 084A     		ldr	r2, .L238
 4264 0016 43F08003 		orr	r3, r3, #128
 4265 001a 1364     		str	r3, [r2, #64]
2241:./Library/stm32f4xx_rtc.c ****   }
2242:./Library/stm32f4xx_rtc.c ****   else
2243:./Library/stm32f4xx_rtc.c ****   {
2244:./Library/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2245:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2246:./Library/stm32f4xx_rtc.c ****   }
2247:./Library/stm32f4xx_rtc.c **** }
 4266              		.loc 1 2247 1
 4267 001c 05E0     		b	.L237
 4268              	.L235:
2245:./Library/stm32f4xx_rtc.c ****   }
 4269              		.loc 1 2245 16
 4270 001e 064B     		ldr	r3, .L238
 4271 0020 1B6C     		ldr	r3, [r3, #64]
 4272 0022 054A     		ldr	r2, .L238
 4273 0024 23F08003 		bic	r3, r3, #128
 4274 0028 1364     		str	r3, [r2, #64]
 4275              	.L237:
 4276              		.loc 1 2247 1
 4277 002a 00BF     		nop
 4278 002c 0C37     		adds	r7, r7, #12
 4279              	.LCFI235:
 4280              		.cfi_def_cfa_offset 4
 4281 002e BD46     		mov	sp, r7
 4282              	.LCFI236:
 4283              		.cfi_def_cfa_register 13
 4284              		@ sp needed
 4285 0030 5DF8047B 		ldr	r7, [sp], #4
 4286              	.LCFI237:
 4287              		.cfi_restore 7
 4288              		.cfi_def_cfa_offset 0
 4289 0034 7047     		bx	lr
 4290              	.L239:
 4291 0036 00BF     		.align	2
 4292              	.L238:
 4293 0038 00280040 		.word	1073752064
 4294              		.cfi_endproc
 4295              	.LFE165:
 4297              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 4298              		.align	1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 115


 4299              		.global	RTC_TamperPullUpCmd
 4300              		.syntax unified
 4301              		.thumb
 4302              		.thumb_func
 4304              	RTC_TamperPullUpCmd:
 4305              	.LFB166:
2248:./Library/stm32f4xx_rtc.c **** 
2249:./Library/stm32f4xx_rtc.c **** /**
2250:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2251:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2252:./Library/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2253:./Library/stm32f4xx_rtc.c ****   * @retval None
2254:./Library/stm32f4xx_rtc.c ****   */
2255:./Library/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2256:./Library/stm32f4xx_rtc.c **** {
 4306              		.loc 1 2256 1
 4307              		.cfi_startproc
 4308              		@ args = 0, pretend = 0, frame = 8
 4309              		@ frame_needed = 1, uses_anonymous_args = 0
 4310              		@ link register save eliminated.
 4311 0000 80B4     		push	{r7}
 4312              	.LCFI238:
 4313              		.cfi_def_cfa_offset 4
 4314              		.cfi_offset 7, -4
 4315 0002 83B0     		sub	sp, sp, #12
 4316              	.LCFI239:
 4317              		.cfi_def_cfa_offset 16
 4318 0004 00AF     		add	r7, sp, #0
 4319              	.LCFI240:
 4320              		.cfi_def_cfa_register 7
 4321 0006 0346     		mov	r3, r0
 4322 0008 FB71     		strb	r3, [r7, #7]
2257:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2258:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2259:./Library/stm32f4xx_rtc.c ****   
2260:./Library/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 4323              		.loc 1 2260 5
 4324 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4325 000c 002B     		cmp	r3, #0
 4326 000e 06D0     		beq	.L241
2261:./Library/stm32f4xx_rtc.c ****   {
2262:./Library/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2263:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 4327              		.loc 1 2263 16
 4328 0010 094B     		ldr	r3, .L244
 4329 0012 1B6C     		ldr	r3, [r3, #64]
 4330 0014 084A     		ldr	r2, .L244
 4331 0016 23F40043 		bic	r3, r3, #32768
 4332 001a 1364     		str	r3, [r2, #64]
2264:./Library/stm32f4xx_rtc.c ****   }
2265:./Library/stm32f4xx_rtc.c ****   else
2266:./Library/stm32f4xx_rtc.c ****   {
2267:./Library/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2268:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2269:./Library/stm32f4xx_rtc.c ****   } 
2270:./Library/stm32f4xx_rtc.c **** }
 4333              		.loc 1 2270 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 116


 4334 001c 05E0     		b	.L243
 4335              	.L241:
2268:./Library/stm32f4xx_rtc.c ****   } 
 4336              		.loc 1 2268 16
 4337 001e 064B     		ldr	r3, .L244
 4338 0020 1B6C     		ldr	r3, [r3, #64]
 4339 0022 054A     		ldr	r2, .L244
 4340 0024 43F40043 		orr	r3, r3, #32768
 4341 0028 1364     		str	r3, [r2, #64]
 4342              	.L243:
 4343              		.loc 1 2270 1
 4344 002a 00BF     		nop
 4345 002c 0C37     		adds	r7, r7, #12
 4346              	.LCFI241:
 4347              		.cfi_def_cfa_offset 4
 4348 002e BD46     		mov	sp, r7
 4349              	.LCFI242:
 4350              		.cfi_def_cfa_register 13
 4351              		@ sp needed
 4352 0030 5DF8047B 		ldr	r7, [sp], #4
 4353              	.LCFI243:
 4354              		.cfi_restore 7
 4355              		.cfi_def_cfa_offset 0
 4356 0034 7047     		bx	lr
 4357              	.L245:
 4358 0036 00BF     		.align	2
 4359              	.L244:
 4360 0038 00280040 		.word	1073752064
 4361              		.cfi_endproc
 4362              	.LFE166:
 4364              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 4365              		.align	1
 4366              		.global	RTC_WriteBackupRegister
 4367              		.syntax unified
 4368              		.thumb
 4369              		.thumb_func
 4371              	RTC_WriteBackupRegister:
 4372              	.LFB167:
2271:./Library/stm32f4xx_rtc.c **** 
2272:./Library/stm32f4xx_rtc.c **** /**
2273:./Library/stm32f4xx_rtc.c ****   * @}
2274:./Library/stm32f4xx_rtc.c ****   */
2275:./Library/stm32f4xx_rtc.c **** 
2276:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2277:./Library/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2278:./Library/stm32f4xx_rtc.c ****  *
2279:./Library/stm32f4xx_rtc.c **** @verbatim   
2280:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2281:./Library/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2282:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2283:./Library/stm32f4xx_rtc.c **** 
2284:./Library/stm32f4xx_rtc.c **** @endverbatim
2285:./Library/stm32f4xx_rtc.c ****   * @{
2286:./Library/stm32f4xx_rtc.c ****   */
2287:./Library/stm32f4xx_rtc.c **** 
2288:./Library/stm32f4xx_rtc.c **** /**
2289:./Library/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 117


2290:./Library/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2291:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2292:./Library/stm32f4xx_rtc.c ****   *                          specify the register.
2293:./Library/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2294:./Library/stm32f4xx_rtc.c ****   * @retval None
2295:./Library/stm32f4xx_rtc.c ****   */
2296:./Library/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2297:./Library/stm32f4xx_rtc.c **** {
 4373              		.loc 1 2297 1
 4374              		.cfi_startproc
 4375              		@ args = 0, pretend = 0, frame = 16
 4376              		@ frame_needed = 1, uses_anonymous_args = 0
 4377              		@ link register save eliminated.
 4378 0000 80B4     		push	{r7}
 4379              	.LCFI244:
 4380              		.cfi_def_cfa_offset 4
 4381              		.cfi_offset 7, -4
 4382 0002 85B0     		sub	sp, sp, #20
 4383              	.LCFI245:
 4384              		.cfi_def_cfa_offset 24
 4385 0004 00AF     		add	r7, sp, #0
 4386              	.LCFI246:
 4387              		.cfi_def_cfa_register 7
 4388 0006 7860     		str	r0, [r7, #4]
 4389 0008 3960     		str	r1, [r7]
2298:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 4390              		.loc 1 2298 17
 4391 000a 0023     		movs	r3, #0
 4392 000c FB60     		str	r3, [r7, #12]
2299:./Library/stm32f4xx_rtc.c ****   
2300:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2301:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2302:./Library/stm32f4xx_rtc.c **** 
2303:./Library/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 4393              		.loc 1 2303 7
 4394 000e 084B     		ldr	r3, .L247
 4395 0010 FB60     		str	r3, [r7, #12]
2304:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 4396              		.loc 1 2304 22
 4397 0012 7B68     		ldr	r3, [r7, #4]
 4398 0014 9A00     		lsls	r2, r3, #2
 4399              		.loc 1 2304 7
 4400 0016 FB68     		ldr	r3, [r7, #12]
 4401 0018 1344     		add	r3, r3, r2
 4402 001a FB60     		str	r3, [r7, #12]
2305:./Library/stm32f4xx_rtc.c **** 
2306:./Library/stm32f4xx_rtc.c ****   /* Write the specified register */
2307:./Library/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 4403              		.loc 1 2307 4
 4404 001c FB68     		ldr	r3, [r7, #12]
 4405 001e 1A46     		mov	r2, r3
 4406              		.loc 1 2307 25
 4407 0020 3B68     		ldr	r3, [r7]
 4408 0022 1360     		str	r3, [r2]
2308:./Library/stm32f4xx_rtc.c **** }
 4409              		.loc 1 2308 1
 4410 0024 00BF     		nop
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 118


 4411 0026 1437     		adds	r7, r7, #20
 4412              	.LCFI247:
 4413              		.cfi_def_cfa_offset 4
 4414 0028 BD46     		mov	sp, r7
 4415              	.LCFI248:
 4416              		.cfi_def_cfa_register 13
 4417              		@ sp needed
 4418 002a 5DF8047B 		ldr	r7, [sp], #4
 4419              	.LCFI249:
 4420              		.cfi_restore 7
 4421              		.cfi_def_cfa_offset 0
 4422 002e 7047     		bx	lr
 4423              	.L248:
 4424              		.align	2
 4425              	.L247:
 4426 0030 50280040 		.word	1073752144
 4427              		.cfi_endproc
 4428              	.LFE167:
 4430              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 4431              		.align	1
 4432              		.global	RTC_ReadBackupRegister
 4433              		.syntax unified
 4434              		.thumb
 4435              		.thumb_func
 4437              	RTC_ReadBackupRegister:
 4438              	.LFB168:
2309:./Library/stm32f4xx_rtc.c **** 
2310:./Library/stm32f4xx_rtc.c **** /**
2311:./Library/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2312:./Library/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2313:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2314:./Library/stm32f4xx_rtc.c ****   *                          specify the register.                   
2315:./Library/stm32f4xx_rtc.c ****   * @retval None
2316:./Library/stm32f4xx_rtc.c ****   */
2317:./Library/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2318:./Library/stm32f4xx_rtc.c **** {
 4439              		.loc 1 2318 1
 4440              		.cfi_startproc
 4441              		@ args = 0, pretend = 0, frame = 16
 4442              		@ frame_needed = 1, uses_anonymous_args = 0
 4443              		@ link register save eliminated.
 4444 0000 80B4     		push	{r7}
 4445              	.LCFI250:
 4446              		.cfi_def_cfa_offset 4
 4447              		.cfi_offset 7, -4
 4448 0002 85B0     		sub	sp, sp, #20
 4449              	.LCFI251:
 4450              		.cfi_def_cfa_offset 24
 4451 0004 00AF     		add	r7, sp, #0
 4452              	.LCFI252:
 4453              		.cfi_def_cfa_register 7
 4454 0006 7860     		str	r0, [r7, #4]
2319:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 4455              		.loc 1 2319 17
 4456 0008 0023     		movs	r3, #0
 4457 000a FB60     		str	r3, [r7, #12]
2320:./Library/stm32f4xx_rtc.c ****   
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 119


2321:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2322:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2323:./Library/stm32f4xx_rtc.c **** 
2324:./Library/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 4458              		.loc 1 2324 7
 4459 000c 074B     		ldr	r3, .L251
 4460 000e FB60     		str	r3, [r7, #12]
2325:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 4461              		.loc 1 2325 22
 4462 0010 7B68     		ldr	r3, [r7, #4]
 4463 0012 9A00     		lsls	r2, r3, #2
 4464              		.loc 1 2325 7
 4465 0014 FB68     		ldr	r3, [r7, #12]
 4466 0016 1344     		add	r3, r3, r2
 4467 0018 FB60     		str	r3, [r7, #12]
2326:./Library/stm32f4xx_rtc.c ****   
2327:./Library/stm32f4xx_rtc.c ****   /* Read the specified register */
2328:./Library/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 4468              		.loc 1 2328 12
 4469 001a FB68     		ldr	r3, [r7, #12]
 4470              		.loc 1 2328 11
 4471 001c 1B68     		ldr	r3, [r3]
2329:./Library/stm32f4xx_rtc.c **** }
 4472              		.loc 1 2329 1
 4473 001e 1846     		mov	r0, r3
 4474 0020 1437     		adds	r7, r7, #20
 4475              	.LCFI253:
 4476              		.cfi_def_cfa_offset 4
 4477 0022 BD46     		mov	sp, r7
 4478              	.LCFI254:
 4479              		.cfi_def_cfa_register 13
 4480              		@ sp needed
 4481 0024 5DF8047B 		ldr	r7, [sp], #4
 4482              	.LCFI255:
 4483              		.cfi_restore 7
 4484              		.cfi_def_cfa_offset 0
 4485 0028 7047     		bx	lr
 4486              	.L252:
 4487 002a 00BF     		.align	2
 4488              	.L251:
 4489 002c 50280040 		.word	1073752144
 4490              		.cfi_endproc
 4491              	.LFE168:
 4493              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 4494              		.align	1
 4495              		.global	RTC_TamperPinSelection
 4496              		.syntax unified
 4497              		.thumb
 4498              		.thumb_func
 4500              	RTC_TamperPinSelection:
 4501              	.LFB169:
2330:./Library/stm32f4xx_rtc.c **** 
2331:./Library/stm32f4xx_rtc.c **** /**
2332:./Library/stm32f4xx_rtc.c ****   * @}
2333:./Library/stm32f4xx_rtc.c ****   */
2334:./Library/stm32f4xx_rtc.c **** 
2335:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 120


2336:./Library/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2337:./Library/stm32f4xx_rtc.c ****  *           configuration functions  
2338:./Library/stm32f4xx_rtc.c ****  *
2339:./Library/stm32f4xx_rtc.c **** @verbatim   
2340:./Library/stm32f4xx_rtc.c ****  ==================================================================================================
2341:./Library/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2342:./Library/stm32f4xx_rtc.c ****  ==================================================================================================
2343:./Library/stm32f4xx_rtc.c **** 
2344:./Library/stm32f4xx_rtc.c **** @endverbatim
2345:./Library/stm32f4xx_rtc.c ****   * @{
2346:./Library/stm32f4xx_rtc.c ****   */
2347:./Library/stm32f4xx_rtc.c **** 
2348:./Library/stm32f4xx_rtc.c **** /**
2349:./Library/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2350:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2351:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2352:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Default: RTC_AF1 is used as RTC Tamper Pin.
2353:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Pos1: RTC_AF2 is selected as RTC Tamper Pin.    
2354:./Library/stm32f4xx_rtc.c ****   * @retval None
2355:./Library/stm32f4xx_rtc.c ****   */
2356:./Library/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2357:./Library/stm32f4xx_rtc.c **** {
 4502              		.loc 1 2357 1
 4503              		.cfi_startproc
 4504              		@ args = 0, pretend = 0, frame = 8
 4505              		@ frame_needed = 1, uses_anonymous_args = 0
 4506              		@ link register save eliminated.
 4507 0000 80B4     		push	{r7}
 4508              	.LCFI256:
 4509              		.cfi_def_cfa_offset 4
 4510              		.cfi_offset 7, -4
 4511 0002 83B0     		sub	sp, sp, #12
 4512              	.LCFI257:
 4513              		.cfi_def_cfa_offset 16
 4514 0004 00AF     		add	r7, sp, #0
 4515              	.LCFI258:
 4516              		.cfi_def_cfa_register 7
 4517 0006 7860     		str	r0, [r7, #4]
2358:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2359:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2360:./Library/stm32f4xx_rtc.c ****   
2361:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 4518              		.loc 1 2361 14
 4519 0008 084B     		ldr	r3, .L254
 4520 000a 1B6C     		ldr	r3, [r3, #64]
 4521 000c 074A     		ldr	r2, .L254
 4522 000e 23F48033 		bic	r3, r3, #65536
 4523 0012 1364     		str	r3, [r2, #64]
2362:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 4524              		.loc 1 2362 14
 4525 0014 054B     		ldr	r3, .L254
 4526 0016 1A6C     		ldr	r2, [r3, #64]
 4527 0018 0449     		ldr	r1, .L254
 4528 001a 7B68     		ldr	r3, [r7, #4]
 4529 001c 1343     		orrs	r3, r3, r2
 4530 001e 0B64     		str	r3, [r1, #64]
2363:./Library/stm32f4xx_rtc.c **** }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 121


 4531              		.loc 1 2363 1
 4532 0020 00BF     		nop
 4533 0022 0C37     		adds	r7, r7, #12
 4534              	.LCFI259:
 4535              		.cfi_def_cfa_offset 4
 4536 0024 BD46     		mov	sp, r7
 4537              	.LCFI260:
 4538              		.cfi_def_cfa_register 13
 4539              		@ sp needed
 4540 0026 5DF8047B 		ldr	r7, [sp], #4
 4541              	.LCFI261:
 4542              		.cfi_restore 7
 4543              		.cfi_def_cfa_offset 0
 4544 002a 7047     		bx	lr
 4545              	.L255:
 4546              		.align	2
 4547              	.L254:
 4548 002c 00280040 		.word	1073752064
 4549              		.cfi_endproc
 4550              	.LFE169:
 4552              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 4553              		.align	1
 4554              		.global	RTC_TimeStampPinSelection
 4555              		.syntax unified
 4556              		.thumb
 4557              		.thumb_func
 4559              	RTC_TimeStampPinSelection:
 4560              	.LFB170:
2364:./Library/stm32f4xx_rtc.c **** 
2365:./Library/stm32f4xx_rtc.c **** /**
2366:./Library/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2367:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2368:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2369:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2370:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2371:./Library/stm32f4xx_rtc.c ****   * @retval None
2372:./Library/stm32f4xx_rtc.c ****   */
2373:./Library/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2374:./Library/stm32f4xx_rtc.c **** {
 4561              		.loc 1 2374 1
 4562              		.cfi_startproc
 4563              		@ args = 0, pretend = 0, frame = 8
 4564              		@ frame_needed = 1, uses_anonymous_args = 0
 4565              		@ link register save eliminated.
 4566 0000 80B4     		push	{r7}
 4567              	.LCFI262:
 4568              		.cfi_def_cfa_offset 4
 4569              		.cfi_offset 7, -4
 4570 0002 83B0     		sub	sp, sp, #12
 4571              	.LCFI263:
 4572              		.cfi_def_cfa_offset 16
 4573 0004 00AF     		add	r7, sp, #0
 4574              	.LCFI264:
 4575              		.cfi_def_cfa_register 7
 4576 0006 7860     		str	r0, [r7, #4]
2375:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 122


2377:./Library/stm32f4xx_rtc.c ****   
2378:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 4577              		.loc 1 2378 14
 4578 0008 084B     		ldr	r3, .L257
 4579 000a 1B6C     		ldr	r3, [r3, #64]
 4580 000c 074A     		ldr	r2, .L257
 4581 000e 23F40033 		bic	r3, r3, #131072
 4582 0012 1364     		str	r3, [r2, #64]
2379:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 4583              		.loc 1 2379 14
 4584 0014 054B     		ldr	r3, .L257
 4585 0016 1A6C     		ldr	r2, [r3, #64]
 4586 0018 0449     		ldr	r1, .L257
 4587 001a 7B68     		ldr	r3, [r7, #4]
 4588 001c 1343     		orrs	r3, r3, r2
 4589 001e 0B64     		str	r3, [r1, #64]
2380:./Library/stm32f4xx_rtc.c **** }
 4590              		.loc 1 2380 1
 4591 0020 00BF     		nop
 4592 0022 0C37     		adds	r7, r7, #12
 4593              	.LCFI265:
 4594              		.cfi_def_cfa_offset 4
 4595 0024 BD46     		mov	sp, r7
 4596              	.LCFI266:
 4597              		.cfi_def_cfa_register 13
 4598              		@ sp needed
 4599 0026 5DF8047B 		ldr	r7, [sp], #4
 4600              	.LCFI267:
 4601              		.cfi_restore 7
 4602              		.cfi_def_cfa_offset 0
 4603 002a 7047     		bx	lr
 4604              	.L258:
 4605              		.align	2
 4606              	.L257:
 4607 002c 00280040 		.word	1073752064
 4608              		.cfi_endproc
 4609              	.LFE170:
 4611              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 4612              		.align	1
 4613              		.global	RTC_OutputTypeConfig
 4614              		.syntax unified
 4615              		.thumb
 4616              		.thumb_func
 4618              	RTC_OutputTypeConfig:
 4619              	.LFB171:
2381:./Library/stm32f4xx_rtc.c **** 
2382:./Library/stm32f4xx_rtc.c **** /**
2383:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2384:./Library/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2385:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2386:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2387:./Library/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2388:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2389:./Library/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2390:./Library/stm32f4xx_rtc.c ****   * @retval None
2391:./Library/stm32f4xx_rtc.c ****   */
2392:./Library/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 123


2393:./Library/stm32f4xx_rtc.c **** {
 4620              		.loc 1 2393 1
 4621              		.cfi_startproc
 4622              		@ args = 0, pretend = 0, frame = 8
 4623              		@ frame_needed = 1, uses_anonymous_args = 0
 4624              		@ link register save eliminated.
 4625 0000 80B4     		push	{r7}
 4626              	.LCFI268:
 4627              		.cfi_def_cfa_offset 4
 4628              		.cfi_offset 7, -4
 4629 0002 83B0     		sub	sp, sp, #12
 4630              	.LCFI269:
 4631              		.cfi_def_cfa_offset 16
 4632 0004 00AF     		add	r7, sp, #0
 4633              	.LCFI270:
 4634              		.cfi_def_cfa_register 7
 4635 0006 7860     		str	r0, [r7, #4]
2394:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2395:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2396:./Library/stm32f4xx_rtc.c ****   
2397:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 4636              		.loc 1 2397 14
 4637 0008 084B     		ldr	r3, .L260
 4638 000a 1B6C     		ldr	r3, [r3, #64]
 4639 000c 074A     		ldr	r2, .L260
 4640 000e 23F48023 		bic	r3, r3, #262144
 4641 0012 1364     		str	r3, [r2, #64]
2398:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 4642              		.loc 1 2398 14
 4643 0014 054B     		ldr	r3, .L260
 4644 0016 1A6C     		ldr	r2, [r3, #64]
 4645 0018 0449     		ldr	r1, .L260
 4646 001a 7B68     		ldr	r3, [r7, #4]
 4647 001c 1343     		orrs	r3, r3, r2
 4648 001e 0B64     		str	r3, [r1, #64]
2399:./Library/stm32f4xx_rtc.c **** }
 4649              		.loc 1 2399 1
 4650 0020 00BF     		nop
 4651 0022 0C37     		adds	r7, r7, #12
 4652              	.LCFI271:
 4653              		.cfi_def_cfa_offset 4
 4654 0024 BD46     		mov	sp, r7
 4655              	.LCFI272:
 4656              		.cfi_def_cfa_register 13
 4657              		@ sp needed
 4658 0026 5DF8047B 		ldr	r7, [sp], #4
 4659              	.LCFI273:
 4660              		.cfi_restore 7
 4661              		.cfi_def_cfa_offset 0
 4662 002a 7047     		bx	lr
 4663              	.L261:
 4664              		.align	2
 4665              	.L260:
 4666 002c 00280040 		.word	1073752064
 4667              		.cfi_endproc
 4668              	.LFE171:
 4670              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 124


 4671              		.align	1
 4672              		.global	RTC_SynchroShiftConfig
 4673              		.syntax unified
 4674              		.thumb
 4675              		.thumb_func
 4677              	RTC_SynchroShiftConfig:
 4678              	.LFB172:
2400:./Library/stm32f4xx_rtc.c **** 
2401:./Library/stm32f4xx_rtc.c **** /**
2402:./Library/stm32f4xx_rtc.c ****   * @}
2403:./Library/stm32f4xx_rtc.c ****   */
2404:./Library/stm32f4xx_rtc.c **** 
2405:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2406:./Library/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2407:./Library/stm32f4xx_rtc.c ****  *
2408:./Library/stm32f4xx_rtc.c **** @verbatim   
2409:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2410:./Library/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2411:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2412:./Library/stm32f4xx_rtc.c **** 
2413:./Library/stm32f4xx_rtc.c **** @endverbatim
2414:./Library/stm32f4xx_rtc.c ****   * @{
2415:./Library/stm32f4xx_rtc.c ****   */
2416:./Library/stm32f4xx_rtc.c **** 
2417:./Library/stm32f4xx_rtc.c **** /**
2418:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2419:./Library/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2420:./Library/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2421:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2422:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2423:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2424:./Library/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2425:./Library/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2426:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2427:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2428:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2429:./Library/stm32f4xx_rtc.c **** */
2430:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2431:./Library/stm32f4xx_rtc.c **** {
 4679              		.loc 1 2431 1
 4680              		.cfi_startproc
 4681              		@ args = 0, pretend = 0, frame = 16
 4682              		@ frame_needed = 1, uses_anonymous_args = 0
 4683 0000 80B5     		push	{r7, lr}
 4684              	.LCFI274:
 4685              		.cfi_def_cfa_offset 8
 4686              		.cfi_offset 7, -8
 4687              		.cfi_offset 14, -4
 4688 0002 84B0     		sub	sp, sp, #16
 4689              	.LCFI275:
 4690              		.cfi_def_cfa_offset 24
 4691 0004 00AF     		add	r7, sp, #0
 4692              	.LCFI276:
 4693              		.cfi_def_cfa_register 7
 4694 0006 7860     		str	r0, [r7, #4]
 4695 0008 3960     		str	r1, [r7]
2432:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 125


 4696              		.loc 1 2432 15
 4697 000a 0023     		movs	r3, #0
 4698 000c FB73     		strb	r3, [r7, #15]
2433:./Library/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 4699              		.loc 1 2433 12
 4700 000e 0023     		movs	r3, #0
 4701 0010 BB60     		str	r3, [r7, #8]
2434:./Library/stm32f4xx_rtc.c **** 
2435:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2436:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2437:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2438:./Library/stm32f4xx_rtc.c **** 
2439:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2440:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4702              		.loc 1 2440 6
 4703 0012 214B     		ldr	r3, .L271
 4704              		.loc 1 2440 12
 4705 0014 CA22     		movs	r2, #202
 4706 0016 5A62     		str	r2, [r3, #36]
2441:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4707              		.loc 1 2441 6
 4708 0018 1F4B     		ldr	r3, .L271
 4709              		.loc 1 2441 12
 4710 001a 5322     		movs	r2, #83
 4711 001c 5A62     		str	r2, [r3, #36]
2442:./Library/stm32f4xx_rtc.c ****   
2443:./Library/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2444:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 4712              		.loc 1 2444 11
 4713 001e 1E4B     		ldr	r3, .L271
 4714 0020 DB68     		ldr	r3, [r3, #12]
 4715              		.loc 1 2444 17
 4716 0022 03F00803 		and	r3, r3, #8
 4717              		.loc 1 2444 6
 4718 0026 002B     		cmp	r3, #0
 4719 0028 0DD0     		beq	.L263
2445:./Library/stm32f4xx_rtc.c ****   {
2446:./Library/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2447:./Library/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4720              		.loc 1 2447 11
 4721 002a 02E0     		b	.L264
 4722              	.L265:
2448:./Library/stm32f4xx_rtc.c ****     {
2449:./Library/stm32f4xx_rtc.c ****       shpfcount++;
 4723              		.loc 1 2449 16
 4724 002c BB68     		ldr	r3, [r7, #8]
 4725 002e 0133     		adds	r3, r3, #1
 4726 0030 BB60     		str	r3, [r7, #8]
 4727              	.L264:
2447:./Library/stm32f4xx_rtc.c ****     {
 4728              		.loc 1 2447 17
 4729 0032 194B     		ldr	r3, .L271
 4730 0034 DB68     		ldr	r3, [r3, #12]
2447:./Library/stm32f4xx_rtc.c ****     {
 4731              		.loc 1 2447 23
 4732 0036 03F00803 		and	r3, r3, #8
2447:./Library/stm32f4xx_rtc.c ****     {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 126


 4733              		.loc 1 2447 11
 4734 003a 002B     		cmp	r3, #0
 4735 003c 03D0     		beq	.L263
2447:./Library/stm32f4xx_rtc.c ****     {
 4736              		.loc 1 2447 49 discriminator 1
 4737 003e BB68     		ldr	r3, [r7, #8]
 4738 0040 B3F5805F 		cmp	r3, #4096
 4739 0044 F2D1     		bne	.L265
 4740              	.L263:
2450:./Library/stm32f4xx_rtc.c ****     }
2451:./Library/stm32f4xx_rtc.c ****   }
2452:./Library/stm32f4xx_rtc.c **** 
2453:./Library/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2454:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 4741              		.loc 1 2454 11
 4742 0046 144B     		ldr	r3, .L271
 4743 0048 DB68     		ldr	r3, [r3, #12]
 4744              		.loc 1 2454 17
 4745 004a 03F00803 		and	r3, r3, #8
 4746              		.loc 1 2454 6
 4747 004e 002B     		cmp	r3, #0
 4748 0050 18D1     		bne	.L266
2455:./Library/stm32f4xx_rtc.c ****   {
2456:./Library/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2457:./Library/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4749              		.loc 1 2457 12
 4750 0052 114B     		ldr	r3, .L271
 4751 0054 9B68     		ldr	r3, [r3, #8]
 4752              		.loc 1 2457 17
 4753 0056 03F01003 		and	r3, r3, #16
 4754              		.loc 1 2457 7
 4755 005a 002B     		cmp	r3, #0
 4756 005c 0FD1     		bne	.L267
2458:./Library/stm32f4xx_rtc.c ****     {
2459:./Library/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2460:./Library/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4757              		.loc 1 2460 10
 4758 005e 0E49     		ldr	r1, .L271
 4759              		.loc 1 2460 58
 4760 0060 3A68     		ldr	r2, [r7]
 4761 0062 7B68     		ldr	r3, [r7, #4]
 4762 0064 1343     		orrs	r3, r3, r2
 4763              		.loc 1 2460 19
 4764 0066 CB62     		str	r3, [r1, #44]
2461:./Library/stm32f4xx_rtc.c ****     
2462:./Library/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4765              		.loc 1 2462 10
 4766 0068 FFF7FEFF 		bl	RTC_WaitForSynchro
 4767 006c 0346     		mov	r3, r0
 4768              		.loc 1 2462 9
 4769 006e 002B     		cmp	r3, #0
 4770 0070 02D1     		bne	.L268
2463:./Library/stm32f4xx_rtc.c ****       {
2464:./Library/stm32f4xx_rtc.c ****         status = ERROR;
 4771              		.loc 1 2464 16
 4772 0072 0023     		movs	r3, #0
 4773 0074 FB73     		strb	r3, [r7, #15]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 127


 4774 0076 07E0     		b	.L269
 4775              	.L268:
2465:./Library/stm32f4xx_rtc.c ****       }
2466:./Library/stm32f4xx_rtc.c ****       else
2467:./Library/stm32f4xx_rtc.c ****       {
2468:./Library/stm32f4xx_rtc.c ****         status = SUCCESS;
 4776              		.loc 1 2468 16
 4777 0078 0123     		movs	r3, #1
 4778 007a FB73     		strb	r3, [r7, #15]
 4779 007c 04E0     		b	.L269
 4780              	.L267:
2469:./Library/stm32f4xx_rtc.c ****       }
2470:./Library/stm32f4xx_rtc.c ****     }
2471:./Library/stm32f4xx_rtc.c ****     else
2472:./Library/stm32f4xx_rtc.c ****     {
2473:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 4781              		.loc 1 2473 14
 4782 007e 0023     		movs	r3, #0
 4783 0080 FB73     		strb	r3, [r7, #15]
 4784 0082 01E0     		b	.L269
 4785              	.L266:
2474:./Library/stm32f4xx_rtc.c ****     }
2475:./Library/stm32f4xx_rtc.c ****   }
2476:./Library/stm32f4xx_rtc.c ****   else
2477:./Library/stm32f4xx_rtc.c ****   {
2478:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 4786              		.loc 1 2478 12
 4787 0084 0023     		movs	r3, #0
 4788 0086 FB73     		strb	r3, [r7, #15]
 4789              	.L269:
2479:./Library/stm32f4xx_rtc.c ****   }
2480:./Library/stm32f4xx_rtc.c **** 
2481:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2482:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4790              		.loc 1 2482 6
 4791 0088 034B     		ldr	r3, .L271
 4792              		.loc 1 2482 12
 4793 008a FF22     		movs	r2, #255
 4794 008c 5A62     		str	r2, [r3, #36]
2483:./Library/stm32f4xx_rtc.c ****   
2484:./Library/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4795              		.loc 1 2484 10
 4796 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2485:./Library/stm32f4xx_rtc.c **** }
 4797              		.loc 1 2485 1
 4798 0090 1846     		mov	r0, r3
 4799 0092 1037     		adds	r7, r7, #16
 4800              	.LCFI277:
 4801              		.cfi_def_cfa_offset 8
 4802 0094 BD46     		mov	sp, r7
 4803              	.LCFI278:
 4804              		.cfi_def_cfa_register 13
 4805              		@ sp needed
 4806 0096 80BD     		pop	{r7, pc}
 4807              	.L272:
 4808              		.align	2
 4809              	.L271:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 128


 4810 0098 00280040 		.word	1073752064
 4811              		.cfi_endproc
 4812              	.LFE172:
 4814              		.section	.text.RTC_ITConfig,"ax",%progbits
 4815              		.align	1
 4816              		.global	RTC_ITConfig
 4817              		.syntax unified
 4818              		.thumb
 4819              		.thumb_func
 4821              	RTC_ITConfig:
 4822              	.LFB173:
2486:./Library/stm32f4xx_rtc.c **** 
2487:./Library/stm32f4xx_rtc.c **** /**
2488:./Library/stm32f4xx_rtc.c ****   * @}
2489:./Library/stm32f4xx_rtc.c ****   */
2490:./Library/stm32f4xx_rtc.c **** 
2491:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2492:./Library/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2493:./Library/stm32f4xx_rtc.c ****  *
2494:./Library/stm32f4xx_rtc.c **** @verbatim   
2495:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2496:./Library/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2497:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2498:./Library/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2499:./Library/stm32f4xx_rtc.c ****  
2500:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2501:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2502:./Library/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2503:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2504:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2505:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2506:./Library/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2507:./Library/stm32f4xx_rtc.c **** 
2508:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2509:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2510:./Library/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2511:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2512:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2513:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2514:./Library/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2515:./Library/stm32f4xx_rtc.c ****             functions.
2516:./Library/stm32f4xx_rtc.c **** 
2517:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2518:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2519:./Library/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2520:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2521:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2522:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2523:./Library/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2524:./Library/stm32f4xx_rtc.c **** 
2525:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2526:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2527:./Library/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2528:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2529:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2530:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2531:./Library/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 129


2532:./Library/stm32f4xx_rtc.c **** 
2533:./Library/stm32f4xx_rtc.c **** @endverbatim
2534:./Library/stm32f4xx_rtc.c ****   * @{
2535:./Library/stm32f4xx_rtc.c ****   */
2536:./Library/stm32f4xx_rtc.c **** 
2537:./Library/stm32f4xx_rtc.c **** /**
2538:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2539:./Library/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2540:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2541:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2542:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2543:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2544:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2545:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2546:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2547:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2548:./Library/stm32f4xx_rtc.c ****   * @retval None
2549:./Library/stm32f4xx_rtc.c ****   */
2550:./Library/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2551:./Library/stm32f4xx_rtc.c **** {
 4823              		.loc 1 2551 1
 4824              		.cfi_startproc
 4825              		@ args = 0, pretend = 0, frame = 8
 4826              		@ frame_needed = 1, uses_anonymous_args = 0
 4827              		@ link register save eliminated.
 4828 0000 80B4     		push	{r7}
 4829              	.LCFI279:
 4830              		.cfi_def_cfa_offset 4
 4831              		.cfi_offset 7, -4
 4832 0002 83B0     		sub	sp, sp, #12
 4833              	.LCFI280:
 4834              		.cfi_def_cfa_offset 16
 4835 0004 00AF     		add	r7, sp, #0
 4836              	.LCFI281:
 4837              		.cfi_def_cfa_register 7
 4838 0006 7860     		str	r0, [r7, #4]
 4839 0008 0B46     		mov	r3, r1
 4840 000a FB70     		strb	r3, [r7, #3]
2552:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2553:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2554:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2555:./Library/stm32f4xx_rtc.c **** 
2556:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4841              		.loc 1 2557 6
 4842 000c 1A4B     		ldr	r3, .L276
 4843              		.loc 1 2557 12
 4844 000e CA22     		movs	r2, #202
 4845 0010 5A62     		str	r2, [r3, #36]
2558:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4846              		.loc 1 2558 6
 4847 0012 194B     		ldr	r3, .L276
 4848              		.loc 1 2558 12
 4849 0014 5322     		movs	r2, #83
 4850 0016 5A62     		str	r2, [r3, #36]
2559:./Library/stm32f4xx_rtc.c **** 
2560:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 130


 4851              		.loc 1 2560 6
 4852 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4853 001a 002B     		cmp	r3, #0
 4854 001c 10D0     		beq	.L274
2561:./Library/stm32f4xx_rtc.c ****   {
2562:./Library/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2563:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4855              		.loc 1 2563 13
 4856 001e 164B     		ldr	r3, .L276
 4857 0020 9A68     		ldr	r2, [r3, #8]
 4858              		.loc 1 2563 16
 4859 0022 7B68     		ldr	r3, [r7, #4]
 4860 0024 23F00403 		bic	r3, r3, #4
 4861              		.loc 1 2563 13
 4862 0028 1349     		ldr	r1, .L276
 4863 002a 1343     		orrs	r3, r3, r2
 4864 002c 8B60     		str	r3, [r1, #8]
2564:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2565:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4865              		.loc 1 2565 16
 4866 002e 124B     		ldr	r3, .L276
 4867 0030 1A6C     		ldr	r2, [r3, #64]
 4868              		.loc 1 2565 19
 4869 0032 7B68     		ldr	r3, [r7, #4]
 4870 0034 03F00403 		and	r3, r3, #4
 4871              		.loc 1 2565 16
 4872 0038 0F49     		ldr	r1, .L276
 4873 003a 1343     		orrs	r3, r3, r2
 4874 003c 0B64     		str	r3, [r1, #64]
 4875 003e 11E0     		b	.L275
 4876              	.L274:
2566:./Library/stm32f4xx_rtc.c ****   }
2567:./Library/stm32f4xx_rtc.c ****   else
2568:./Library/stm32f4xx_rtc.c ****   {
2569:./Library/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4877              		.loc 1 2570 13
 4878 0040 0D4B     		ldr	r3, .L276
 4879 0042 9A68     		ldr	r2, [r3, #8]
 4880              		.loc 1 2570 35
 4881 0044 7B68     		ldr	r3, [r7, #4]
 4882 0046 23F00403 		bic	r3, r3, #4
 4883              		.loc 1 2570 16
 4884 004a DB43     		mvns	r3, r3
 4885              		.loc 1 2570 13
 4886 004c 0A49     		ldr	r1, .L276
 4887 004e 1340     		ands	r3, r3, r2
 4888 0050 8B60     		str	r3, [r1, #8]
2571:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4889              		.loc 1 2572 16
 4890 0052 094B     		ldr	r3, .L276
 4891 0054 1A6C     		ldr	r2, [r3, #64]
 4892              		.loc 1 2572 38
 4893 0056 7B68     		ldr	r3, [r7, #4]
 4894 0058 03F00403 		and	r3, r3, #4
 4895              		.loc 1 2572 19
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 131


 4896 005c DB43     		mvns	r3, r3
 4897              		.loc 1 2572 16
 4898 005e 0649     		ldr	r1, .L276
 4899 0060 1340     		ands	r3, r3, r2
 4900 0062 0B64     		str	r3, [r1, #64]
 4901              	.L275:
2573:./Library/stm32f4xx_rtc.c ****   }
2574:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2575:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4902              		.loc 1 2575 6
 4903 0064 044B     		ldr	r3, .L276
 4904              		.loc 1 2575 12
 4905 0066 FF22     		movs	r2, #255
 4906 0068 5A62     		str	r2, [r3, #36]
2576:./Library/stm32f4xx_rtc.c **** }
 4907              		.loc 1 2576 1
 4908 006a 00BF     		nop
 4909 006c 0C37     		adds	r7, r7, #12
 4910              	.LCFI282:
 4911              		.cfi_def_cfa_offset 4
 4912 006e BD46     		mov	sp, r7
 4913              	.LCFI283:
 4914              		.cfi_def_cfa_register 13
 4915              		@ sp needed
 4916 0070 5DF8047B 		ldr	r7, [sp], #4
 4917              	.LCFI284:
 4918              		.cfi_restore 7
 4919              		.cfi_def_cfa_offset 0
 4920 0074 7047     		bx	lr
 4921              	.L277:
 4922 0076 00BF     		.align	2
 4923              	.L276:
 4924 0078 00280040 		.word	1073752064
 4925              		.cfi_endproc
 4926              	.LFE173:
 4928              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4929              		.align	1
 4930              		.global	RTC_GetFlagStatus
 4931              		.syntax unified
 4932              		.thumb
 4933              		.thumb_func
 4935              	RTC_GetFlagStatus:
 4936              	.LFB174:
2577:./Library/stm32f4xx_rtc.c **** 
2578:./Library/stm32f4xx_rtc.c **** /**
2579:./Library/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2580:./Library/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2581:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2582:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2583:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2584:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2585:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2586:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2587:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2588:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2589:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2590:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 132


2591:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2592:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2593:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2594:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2595:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2596:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2597:./Library/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2598:./Library/stm32f4xx_rtc.c ****   */
2599:./Library/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2600:./Library/stm32f4xx_rtc.c **** {
 4937              		.loc 1 2600 1
 4938              		.cfi_startproc
 4939              		@ args = 0, pretend = 0, frame = 16
 4940              		@ frame_needed = 1, uses_anonymous_args = 0
 4941              		@ link register save eliminated.
 4942 0000 80B4     		push	{r7}
 4943              	.LCFI285:
 4944              		.cfi_def_cfa_offset 4
 4945              		.cfi_offset 7, -4
 4946 0002 85B0     		sub	sp, sp, #20
 4947              	.LCFI286:
 4948              		.cfi_def_cfa_offset 24
 4949 0004 00AF     		add	r7, sp, #0
 4950              	.LCFI287:
 4951              		.cfi_def_cfa_register 7
 4952 0006 7860     		str	r0, [r7, #4]
2601:./Library/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4953              		.loc 1 2601 14
 4954 0008 0023     		movs	r3, #0
 4955 000a FB73     		strb	r3, [r7, #15]
2602:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4956              		.loc 1 2602 12
 4957 000c 0023     		movs	r3, #0
 4958 000e BB60     		str	r3, [r7, #8]
2603:./Library/stm32f4xx_rtc.c ****   
2604:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2605:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2606:./Library/stm32f4xx_rtc.c ****   
2607:./Library/stm32f4xx_rtc.c ****   /* Get all the flags */
2608:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4959              		.loc 1 2608 26
 4960 0010 0A4B     		ldr	r3, .L282
 4961 0012 DA68     		ldr	r2, [r3, #12]
 4962              		.loc 1 2608 10
 4963 0014 0A4B     		ldr	r3, .L282+4
 4964 0016 1340     		ands	r3, r3, r2
 4965 0018 BB60     		str	r3, [r7, #8]
2609:./Library/stm32f4xx_rtc.c ****   
2610:./Library/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2611:./Library/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4966              		.loc 1 2611 15
 4967 001a BA68     		ldr	r2, [r7, #8]
 4968 001c 7B68     		ldr	r3, [r7, #4]
 4969 001e 1340     		ands	r3, r3, r2
 4970              		.loc 1 2611 6
 4971 0020 002B     		cmp	r3, #0
 4972 0022 02D0     		beq	.L279
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 133


2612:./Library/stm32f4xx_rtc.c ****   {
2613:./Library/stm32f4xx_rtc.c ****     bitstatus = SET;
 4973              		.loc 1 2613 15
 4974 0024 0123     		movs	r3, #1
 4975 0026 FB73     		strb	r3, [r7, #15]
 4976 0028 01E0     		b	.L280
 4977              	.L279:
2614:./Library/stm32f4xx_rtc.c ****   }
2615:./Library/stm32f4xx_rtc.c ****   else
2616:./Library/stm32f4xx_rtc.c ****   {
2617:./Library/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4978              		.loc 1 2617 15
 4979 002a 0023     		movs	r3, #0
 4980 002c FB73     		strb	r3, [r7, #15]
 4981              	.L280:
2618:./Library/stm32f4xx_rtc.c ****   }
2619:./Library/stm32f4xx_rtc.c ****   return bitstatus;
 4982              		.loc 1 2619 10
 4983 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2620:./Library/stm32f4xx_rtc.c **** }
 4984              		.loc 1 2620 1
 4985 0030 1846     		mov	r0, r3
 4986 0032 1437     		adds	r7, r7, #20
 4987              	.LCFI288:
 4988              		.cfi_def_cfa_offset 4
 4989 0034 BD46     		mov	sp, r7
 4990              	.LCFI289:
 4991              		.cfi_def_cfa_register 13
 4992              		@ sp needed
 4993 0036 5DF8047B 		ldr	r7, [sp], #4
 4994              	.LCFI290:
 4995              		.cfi_restore 7
 4996              		.cfi_def_cfa_offset 0
 4997 003a 7047     		bx	lr
 4998              	.L283:
 4999              		.align	2
 5000              	.L282:
 5001 003c 00280040 		.word	1073752064
 5002 0040 7F7F0100 		.word	98175
 5003              		.cfi_endproc
 5004              	.LFE174:
 5006              		.section	.text.RTC_ClearFlag,"ax",%progbits
 5007              		.align	1
 5008              		.global	RTC_ClearFlag
 5009              		.syntax unified
 5010              		.thumb
 5011              		.thumb_func
 5013              	RTC_ClearFlag:
 5014              	.LFB175:
2621:./Library/stm32f4xx_rtc.c **** 
2622:./Library/stm32f4xx_rtc.c **** /**
2623:./Library/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2624:./Library/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2625:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2626:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2627:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2628:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 134


2629:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2630:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2631:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2632:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2633:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2634:./Library/stm32f4xx_rtc.c ****   * @retval None
2635:./Library/stm32f4xx_rtc.c ****   */
2636:./Library/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2637:./Library/stm32f4xx_rtc.c **** {
 5015              		.loc 1 2637 1
 5016              		.cfi_startproc
 5017              		@ args = 0, pretend = 0, frame = 8
 5018              		@ frame_needed = 1, uses_anonymous_args = 0
 5019              		@ link register save eliminated.
 5020 0000 80B4     		push	{r7}
 5021              	.LCFI291:
 5022              		.cfi_def_cfa_offset 4
 5023              		.cfi_offset 7, -4
 5024 0002 83B0     		sub	sp, sp, #12
 5025              	.LCFI292:
 5026              		.cfi_def_cfa_offset 16
 5027 0004 00AF     		add	r7, sp, #0
 5028              	.LCFI293:
 5029              		.cfi_def_cfa_register 7
 5030 0006 7860     		str	r0, [r7, #4]
2638:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2640:./Library/stm32f4xx_rtc.c **** 
2641:./Library/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2642:./Library/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 5031              		.loc 1 2642 63
 5032 0008 7B68     		ldr	r3, [r7, #4]
 5033 000a 9BB2     		uxth	r3, r3
 5034 000c 43F08003 		orr	r3, r3, #128
 5035              		.loc 1 2642 36
 5036 0010 DA43     		mvns	r2, r3
 5037              		.loc 1 2642 93
 5038 0012 064B     		ldr	r3, .L285
 5039 0014 DB68     		ldr	r3, [r3, #12]
 5040              		.loc 1 2642 79
 5041 0016 03F08003 		and	r3, r3, #128
 5042              		.loc 1 2642 6
 5043 001a 0449     		ldr	r1, .L285
 5044              		.loc 1 2642 14
 5045 001c 1343     		orrs	r3, r3, r2
 5046              		.loc 1 2642 12
 5047 001e CB60     		str	r3, [r1, #12]
2643:./Library/stm32f4xx_rtc.c **** }
 5048              		.loc 1 2643 1
 5049 0020 00BF     		nop
 5050 0022 0C37     		adds	r7, r7, #12
 5051              	.LCFI294:
 5052              		.cfi_def_cfa_offset 4
 5053 0024 BD46     		mov	sp, r7
 5054              	.LCFI295:
 5055              		.cfi_def_cfa_register 13
 5056              		@ sp needed
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 135


 5057 0026 5DF8047B 		ldr	r7, [sp], #4
 5058              	.LCFI296:
 5059              		.cfi_restore 7
 5060              		.cfi_def_cfa_offset 0
 5061 002a 7047     		bx	lr
 5062              	.L286:
 5063              		.align	2
 5064              	.L285:
 5065 002c 00280040 		.word	1073752064
 5066              		.cfi_endproc
 5067              	.LFE175:
 5069              		.section	.text.RTC_GetITStatus,"ax",%progbits
 5070              		.align	1
 5071              		.global	RTC_GetITStatus
 5072              		.syntax unified
 5073              		.thumb
 5074              		.thumb_func
 5076              	RTC_GetITStatus:
 5077              	.LFB176:
2644:./Library/stm32f4xx_rtc.c **** 
2645:./Library/stm32f4xx_rtc.c **** /**
2646:./Library/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2647:./Library/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2648:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2649:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2650:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2651:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2652:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2653:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2654:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
2655:./Library/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2656:./Library/stm32f4xx_rtc.c ****   */
2657:./Library/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2658:./Library/stm32f4xx_rtc.c **** {
 5078              		.loc 1 2658 1
 5079              		.cfi_startproc
 5080              		@ args = 0, pretend = 0, frame = 24
 5081              		@ frame_needed = 1, uses_anonymous_args = 0
 5082              		@ link register save eliminated.
 5083 0000 80B4     		push	{r7}
 5084              	.LCFI297:
 5085              		.cfi_def_cfa_offset 4
 5086              		.cfi_offset 7, -4
 5087 0002 87B0     		sub	sp, sp, #28
 5088              	.LCFI298:
 5089              		.cfi_def_cfa_offset 32
 5090 0004 00AF     		add	r7, sp, #0
 5091              	.LCFI299:
 5092              		.cfi_def_cfa_register 7
 5093 0006 7860     		str	r0, [r7, #4]
2659:./Library/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 5094              		.loc 1 2659 12
 5095 0008 0023     		movs	r3, #0
 5096 000a FB75     		strb	r3, [r7, #23]
2660:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 5097              		.loc 1 2660 12
 5098 000c 0023     		movs	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 136


 5099 000e 3B61     		str	r3, [r7, #16]
 5100              		.loc 1 2660 24
 5101 0010 0023     		movs	r3, #0
 5102 0012 FB60     		str	r3, [r7, #12]
2661:./Library/stm32f4xx_rtc.c ****  
2662:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2663:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2664:./Library/stm32f4xx_rtc.c ****   
2665:./Library/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2666:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 5103              		.loc 1 2666 26
 5104 0014 164B     		ldr	r3, .L291
 5105 0016 1B6C     		ldr	r3, [r3, #64]
 5106              		.loc 1 2666 10
 5107 0018 03F00403 		and	r3, r3, #4
 5108 001c 3B61     		str	r3, [r7, #16]
2667:./Library/stm32f4xx_rtc.c ****  
2668:./Library/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2669:./Library/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 1
 5109              		.loc 1 2669 33
 5110 001e 144B     		ldr	r3, .L291
 5111 0020 9A68     		ldr	r2, [r3, #8]
 5112              		.loc 1 2669 38
 5113 0022 7B68     		ldr	r3, [r7, #4]
 5114 0024 1A40     		ands	r2, r2, r3
 5115              		.loc 1 2669 68
 5116 0026 7B68     		ldr	r3, [r7, #4]
 5117 0028 D90B     		lsrs	r1, r3, #15
 5118              		.loc 1 2669 58
 5119 002a 3B69     		ldr	r3, [r7, #16]
 5120 002c 0B40     		ands	r3, r3, r1
 5121              		.loc 1 2669 48
 5122 002e 1A43     		orrs	r2, r2, r3
 5123              		.loc 1 2669 96
 5124 0030 7B68     		ldr	r3, [r7, #4]
 5125 0032 190C     		lsrs	r1, r3, #16
 5126              		.loc 1 2669 86
 5127 0034 3B69     		ldr	r3, [r7, #16]
 5128 0036 0B40     		ands	r3, r3, r1
 5129              		.loc 1 2669 16
 5130 0038 1343     		orrs	r3, r3, r2
 5131 003a FB60     		str	r3, [r7, #12]
2670:./Library/stm32f4xx_rtc.c ****   
2671:./Library/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2672:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 5132              		.loc 1 2672 27
 5133 003c 0C4B     		ldr	r3, .L291
 5134 003e DA68     		ldr	r2, [r3, #12]
 5135              		.loc 1 2672 53
 5136 0040 7B68     		ldr	r3, [r7, #4]
 5137 0042 1B09     		lsrs	r3, r3, #4
 5138              		.loc 1 2672 10
 5139 0044 1340     		ands	r3, r3, r2
 5140 0046 3B61     		str	r3, [r7, #16]
2673:./Library/stm32f4xx_rtc.c ****   
2674:./Library/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2675:./Library/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 137


 5141              		.loc 1 2675 6
 5142 0048 FB68     		ldr	r3, [r7, #12]
 5143 004a 002B     		cmp	r3, #0
 5144 004c 06D0     		beq	.L288
 5145              		.loc 1 2675 53 discriminator 1
 5146 004e 3B69     		ldr	r3, [r7, #16]
 5147 0050 9BB2     		uxth	r3, r3
 5148              		.loc 1 2675 41 discriminator 1
 5149 0052 002B     		cmp	r3, #0
 5150 0054 02D0     		beq	.L288
2676:./Library/stm32f4xx_rtc.c ****   {
2677:./Library/stm32f4xx_rtc.c ****     bitstatus = SET;
 5151              		.loc 1 2677 15
 5152 0056 0123     		movs	r3, #1
 5153 0058 FB75     		strb	r3, [r7, #23]
 5154 005a 01E0     		b	.L289
 5155              	.L288:
2678:./Library/stm32f4xx_rtc.c ****   }
2679:./Library/stm32f4xx_rtc.c ****   else
2680:./Library/stm32f4xx_rtc.c ****   {
2681:./Library/stm32f4xx_rtc.c ****     bitstatus = RESET;
 5156              		.loc 1 2681 15
 5157 005c 0023     		movs	r3, #0
 5158 005e FB75     		strb	r3, [r7, #23]
 5159              	.L289:
2682:./Library/stm32f4xx_rtc.c ****   }
2683:./Library/stm32f4xx_rtc.c ****   return bitstatus;
 5160              		.loc 1 2683 10
 5161 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2684:./Library/stm32f4xx_rtc.c **** }
 5162              		.loc 1 2684 1
 5163 0062 1846     		mov	r0, r3
 5164 0064 1C37     		adds	r7, r7, #28
 5165              	.LCFI300:
 5166              		.cfi_def_cfa_offset 4
 5167 0066 BD46     		mov	sp, r7
 5168              	.LCFI301:
 5169              		.cfi_def_cfa_register 13
 5170              		@ sp needed
 5171 0068 5DF8047B 		ldr	r7, [sp], #4
 5172              	.LCFI302:
 5173              		.cfi_restore 7
 5174              		.cfi_def_cfa_offset 0
 5175 006c 7047     		bx	lr
 5176              	.L292:
 5177 006e 00BF     		.align	2
 5178              	.L291:
 5179 0070 00280040 		.word	1073752064
 5180              		.cfi_endproc
 5181              	.LFE176:
 5183              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 5184              		.align	1
 5185              		.global	RTC_ClearITPendingBit
 5186              		.syntax unified
 5187              		.thumb
 5188              		.thumb_func
 5190              	RTC_ClearITPendingBit:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 138


 5191              	.LFB177:
2685:./Library/stm32f4xx_rtc.c **** 
2686:./Library/stm32f4xx_rtc.c **** /**
2687:./Library/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2688:./Library/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2689:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2690:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2691:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2692:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2693:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2694:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2695:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
2696:./Library/stm32f4xx_rtc.c ****   * @retval None
2697:./Library/stm32f4xx_rtc.c ****   */
2698:./Library/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2699:./Library/stm32f4xx_rtc.c **** {
 5192              		.loc 1 2699 1
 5193              		.cfi_startproc
 5194              		@ args = 0, pretend = 0, frame = 16
 5195              		@ frame_needed = 1, uses_anonymous_args = 0
 5196              		@ link register save eliminated.
 5197 0000 80B4     		push	{r7}
 5198              	.LCFI303:
 5199              		.cfi_def_cfa_offset 4
 5200              		.cfi_offset 7, -4
 5201 0002 85B0     		sub	sp, sp, #20
 5202              	.LCFI304:
 5203              		.cfi_def_cfa_offset 24
 5204 0004 00AF     		add	r7, sp, #0
 5205              	.LCFI305:
 5206              		.cfi_def_cfa_register 7
 5207 0006 7860     		str	r0, [r7, #4]
2700:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 5208              		.loc 1 2700 12
 5209 0008 0023     		movs	r3, #0
 5210 000a FB60     		str	r3, [r7, #12]
2701:./Library/stm32f4xx_rtc.c **** 
2702:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2703:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2704:./Library/stm32f4xx_rtc.c **** 
2705:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2706:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 5211              		.loc 1 2706 10
 5212 000c 7B68     		ldr	r3, [r7, #4]
 5213 000e 1B09     		lsrs	r3, r3, #4
 5214 0010 FB60     		str	r3, [r7, #12]
2707:./Library/stm32f4xx_rtc.c **** 
2708:./Library/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2709:./Library/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 5215              		.loc 1 2709 61
 5216 0012 FB68     		ldr	r3, [r7, #12]
 5217 0014 9BB2     		uxth	r3, r3
 5218 0016 43F08003 		orr	r3, r3, #128
 5219              		.loc 1 2709 36
 5220 001a DA43     		mvns	r2, r3
 5221              		.loc 1 2709 91
 5222 001c 064B     		ldr	r3, .L294
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 139


 5223 001e DB68     		ldr	r3, [r3, #12]
 5224              		.loc 1 2709 77
 5225 0020 03F08003 		and	r3, r3, #128
 5226              		.loc 1 2709 6
 5227 0024 0449     		ldr	r1, .L294
 5228              		.loc 1 2709 14
 5229 0026 1343     		orrs	r3, r3, r2
 5230              		.loc 1 2709 12
 5231 0028 CB60     		str	r3, [r1, #12]
2710:./Library/stm32f4xx_rtc.c **** }
 5232              		.loc 1 2710 1
 5233 002a 00BF     		nop
 5234 002c 1437     		adds	r7, r7, #20
 5235              	.LCFI306:
 5236              		.cfi_def_cfa_offset 4
 5237 002e BD46     		mov	sp, r7
 5238              	.LCFI307:
 5239              		.cfi_def_cfa_register 13
 5240              		@ sp needed
 5241 0030 5DF8047B 		ldr	r7, [sp], #4
 5242              	.LCFI308:
 5243              		.cfi_restore 7
 5244              		.cfi_def_cfa_offset 0
 5245 0034 7047     		bx	lr
 5246              	.L295:
 5247 0036 00BF     		.align	2
 5248              	.L294:
 5249 0038 00280040 		.word	1073752064
 5250              		.cfi_endproc
 5251              	.LFE177:
 5253              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 5254              		.align	1
 5255              		.syntax unified
 5256              		.thumb
 5257              		.thumb_func
 5259              	RTC_ByteToBcd2:
 5260              	.LFB178:
2711:./Library/stm32f4xx_rtc.c **** 
2712:./Library/stm32f4xx_rtc.c **** /**
2713:./Library/stm32f4xx_rtc.c ****   * @}
2714:./Library/stm32f4xx_rtc.c ****   */
2715:./Library/stm32f4xx_rtc.c **** 
2716:./Library/stm32f4xx_rtc.c **** /**
2717:./Library/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2718:./Library/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2719:./Library/stm32f4xx_rtc.c ****   * @retval Converted byte
2720:./Library/stm32f4xx_rtc.c ****   */
2721:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2722:./Library/stm32f4xx_rtc.c **** {
 5261              		.loc 1 2722 1
 5262              		.cfi_startproc
 5263              		@ args = 0, pretend = 0, frame = 16
 5264              		@ frame_needed = 1, uses_anonymous_args = 0
 5265              		@ link register save eliminated.
 5266 0000 80B4     		push	{r7}
 5267              	.LCFI309:
 5268              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 140


 5269              		.cfi_offset 7, -4
 5270 0002 85B0     		sub	sp, sp, #20
 5271              	.LCFI310:
 5272              		.cfi_def_cfa_offset 24
 5273 0004 00AF     		add	r7, sp, #0
 5274              	.LCFI311:
 5275              		.cfi_def_cfa_register 7
 5276 0006 0346     		mov	r3, r0
 5277 0008 FB71     		strb	r3, [r7, #7]
2723:./Library/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 5278              		.loc 1 2723 11
 5279 000a 0023     		movs	r3, #0
 5280 000c FB73     		strb	r3, [r7, #15]
2724:./Library/stm32f4xx_rtc.c ****   
2725:./Library/stm32f4xx_rtc.c ****   while (Value >= 10)
 5281              		.loc 1 2725 9
 5282 000e 05E0     		b	.L297
 5283              	.L298:
2726:./Library/stm32f4xx_rtc.c ****   {
2727:./Library/stm32f4xx_rtc.c ****     bcdhigh++;
 5284              		.loc 1 2727 12
 5285 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5286 0012 0133     		adds	r3, r3, #1
 5287 0014 FB73     		strb	r3, [r7, #15]
2728:./Library/stm32f4xx_rtc.c ****     Value -= 10;
 5288              		.loc 1 2728 11
 5289 0016 FB79     		ldrb	r3, [r7, #7]
 5290 0018 0A3B     		subs	r3, r3, #10
 5291 001a FB71     		strb	r3, [r7, #7]
 5292              	.L297:
2725:./Library/stm32f4xx_rtc.c ****   {
 5293              		.loc 1 2725 9
 5294 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5295 001e 092B     		cmp	r3, #9
 5296 0020 F6D8     		bhi	.L298
2729:./Library/stm32f4xx_rtc.c ****   }
2730:./Library/stm32f4xx_rtc.c ****   
2731:./Library/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 5297              		.loc 1 2731 12
 5298 0022 FB7B     		ldrb	r3, [r7, #15]
 5299 0024 1B01     		lsls	r3, r3, #4
 5300 0026 DAB2     		uxtb	r2, r3
 5301              		.loc 1 2731 36
 5302 0028 FB79     		ldrb	r3, [r7, #7]
 5303 002a 1343     		orrs	r3, r3, r2
 5304 002c DBB2     		uxtb	r3, r3
2732:./Library/stm32f4xx_rtc.c **** }
 5305              		.loc 1 2732 1
 5306 002e 1846     		mov	r0, r3
 5307 0030 1437     		adds	r7, r7, #20
 5308              	.LCFI312:
 5309              		.cfi_def_cfa_offset 4
 5310 0032 BD46     		mov	sp, r7
 5311              	.LCFI313:
 5312              		.cfi_def_cfa_register 13
 5313              		@ sp needed
 5314 0034 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 141


 5315              	.LCFI314:
 5316              		.cfi_restore 7
 5317              		.cfi_def_cfa_offset 0
 5318 0038 7047     		bx	lr
 5319              		.cfi_endproc
 5320              	.LFE178:
 5322              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 5323              		.align	1
 5324              		.syntax unified
 5325              		.thumb
 5326              		.thumb_func
 5328              	RTC_Bcd2ToByte:
 5329              	.LFB179:
2733:./Library/stm32f4xx_rtc.c **** 
2734:./Library/stm32f4xx_rtc.c **** /**
2735:./Library/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2736:./Library/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2737:./Library/stm32f4xx_rtc.c ****   * @retval Converted word
2738:./Library/stm32f4xx_rtc.c ****   */
2739:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2740:./Library/stm32f4xx_rtc.c **** {
 5330              		.loc 1 2740 1
 5331              		.cfi_startproc
 5332              		@ args = 0, pretend = 0, frame = 16
 5333              		@ frame_needed = 1, uses_anonymous_args = 0
 5334              		@ link register save eliminated.
 5335 0000 80B4     		push	{r7}
 5336              	.LCFI315:
 5337              		.cfi_def_cfa_offset 4
 5338              		.cfi_offset 7, -4
 5339 0002 85B0     		sub	sp, sp, #20
 5340              	.LCFI316:
 5341              		.cfi_def_cfa_offset 24
 5342 0004 00AF     		add	r7, sp, #0
 5343              	.LCFI317:
 5344              		.cfi_def_cfa_register 7
 5345 0006 0346     		mov	r3, r0
 5346 0008 FB71     		strb	r3, [r7, #7]
2741:./Library/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 5347              		.loc 1 2741 11
 5348 000a 0023     		movs	r3, #0
 5349 000c FB73     		strb	r3, [r7, #15]
2742:./Library/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 5350              		.loc 1 2742 43
 5351 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5352 0010 1B09     		lsrs	r3, r3, #4
 5353 0012 DBB2     		uxtb	r3, r3
 5354              		.loc 1 2742 7
 5355 0014 1A46     		mov	r2, r3
 5356 0016 9200     		lsls	r2, r2, #2
 5357 0018 1344     		add	r3, r3, r2
 5358 001a 5B00     		lsls	r3, r3, #1
 5359 001c FB73     		strb	r3, [r7, #15]
2743:./Library/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 5360              		.loc 1 2743 24
 5361 001e FB79     		ldrb	r3, [r7, #7]
 5362 0020 03F00F03 		and	r3, r3, #15
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 142


 5363 0024 DAB2     		uxtb	r2, r3
 5364              		.loc 1 2743 15
 5365 0026 FB7B     		ldrb	r3, [r7, #15]
 5366 0028 1344     		add	r3, r3, r2
 5367 002a DBB2     		uxtb	r3, r3
2744:./Library/stm32f4xx_rtc.c **** }
 5368              		.loc 1 2744 1
 5369 002c 1846     		mov	r0, r3
 5370 002e 1437     		adds	r7, r7, #20
 5371              	.LCFI318:
 5372              		.cfi_def_cfa_offset 4
 5373 0030 BD46     		mov	sp, r7
 5374              	.LCFI319:
 5375              		.cfi_def_cfa_register 13
 5376              		@ sp needed
 5377 0032 5DF8047B 		ldr	r7, [sp], #4
 5378              	.LCFI320:
 5379              		.cfi_restore 7
 5380              		.cfi_def_cfa_offset 0
 5381 0036 7047     		bx	lr
 5382              		.cfi_endproc
 5383              	.LFE179:
 5385              		.text
 5386              	.Letext0:
 5387              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 5388              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 5389              		.file 4 "./CORE/stm32f4xx.h"
 5390              		.file 5 "./Library/stm32f4xx_rtc.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:20     .text.RTC_DeInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:26     .text.RTC_DeInit:0000000000000000 RTC_DeInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:470    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:627    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:220    .text.RTC_DeInit:00000000000000ec $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:226    .text.RTC_Init:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:232    .text.RTC_Init:0000000000000000 RTC_Init
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:582    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:335    .text.RTC_Init:0000000000000074 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:340    .text.RTC_StructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:346    .text.RTC_StructInit:0000000000000000 RTC_StructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:394    .text.RTC_WriteProtectionCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:400    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:459    .text.RTC_WriteProtectionCmd:0000000000000030 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:464    .text.RTC_EnterInitMode:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:571    .text.RTC_EnterInitMode:0000000000000070 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:576    .text.RTC_ExitInitMode:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:616    .text.RTC_ExitInitMode:000000000000001c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:621    .text.RTC_WaitForSynchro:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:731    .text.RTC_WaitForSynchro:0000000000000074 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:736    .text.RTC_RefClockCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:742    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:830    .text.RTC_RefClockCmd:0000000000000064 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:835    .text.RTC_BypassShadowCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:841    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:911    .text.RTC_BypassShadowCmd:0000000000000048 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:916    .text.RTC_SetTime:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:922    .text.RTC_SetTime:0000000000000000 RTC_SetTime
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5328   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5259   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1134   .text.RTC_SetTime:0000000000000110 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1139   .text.RTC_TimeStructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1145   .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1197   .text.RTC_GetTime:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1203   .text.RTC_GetTime:0000000000000000 RTC_GetTime
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1318   .text.RTC_GetTime:00000000000000a0 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1323   .text.RTC_GetSubSecond:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1329   .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1377   .text.RTC_GetSubSecond:0000000000000024 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1382   .text.RTC_SetDate:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1388   .text.RTC_SetDate:0000000000000000 RTC_SetDate
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1605   .text.RTC_SetDate:000000000000011c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1610   .text.RTC_DateStructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1616   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1668   .text.RTC_GetDate:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1674   .text.RTC_GetDate:0000000000000000 RTC_GetDate
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1787   .text.RTC_GetDate:0000000000000098 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1792   .text.RTC_SetAlarm:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:1798   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2036   .text.RTC_SetAlarm:0000000000000134 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2041   .text.RTC_AlarmStructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2047   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2111   .text.RTC_GetAlarm:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2117   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2271   .text.RTC_GetAlarm:00000000000000e0 $d
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 144


/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2276   .text.RTC_AlarmCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2282   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2415   .text.RTC_AlarmCmd:0000000000000098 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2420   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2426   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2503   .text.RTC_AlarmSubSecondConfig:000000000000004c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2508   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2514   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2573   .text.RTC_GetAlarmSubSecond:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2578   .text.RTC_WakeUpClockConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2584   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2647   .text.RTC_WakeUpClockConfig:0000000000000040 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2652   .text.RTC_SetWakeUpCounter:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2658   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2713   .text.RTC_SetWakeUpCounter:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2718   .text.RTC_GetWakeUpCounter:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2724   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2757   .text.RTC_GetWakeUpCounter:0000000000000014 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2762   .text.RTC_WakeUpCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2768   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2889   .text.RTC_WakeUpCmd:0000000000000090 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2894   .text.RTC_DayLightSavingConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2900   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2968   .text.RTC_DayLightSavingConfig:0000000000000044 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2973   .text.RTC_GetStoreOperation:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:2979   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3012   .text.RTC_GetStoreOperation:0000000000000018 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3017   .text.RTC_OutputConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3023   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3091   .text.RTC_OutputConfig:0000000000000044 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3096   .text.RTC_CoarseCalibConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3102   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3179   .text.RTC_CoarseCalibConfig:000000000000004c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3184   .text.RTC_CoarseCalibCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3190   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3278   .text.RTC_CoarseCalibCmd:0000000000000064 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3283   .text.RTC_CalibOutputCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3289   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3359   .text.RTC_CalibOutputCmd:0000000000000048 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3364   .text.RTC_CalibOutputConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3370   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3433   .text.RTC_CalibOutputConfig:0000000000000040 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3438   .text.RTC_SmoothCalibConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3444   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3561   .text.RTC_SmoothCalibConfig:0000000000000080 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3566   .text.RTC_TimeStampCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3572   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3657   .text.RTC_TimeStampCmd:0000000000000060 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3662   .text.RTC_GetTimeStamp:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3668   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3856   .text.RTC_GetTimeStamp:000000000000011c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3861   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3867   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3899   .text.RTC_GetTimeStampSubSecond:0000000000000014 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3904   .text.RTC_TamperTriggerConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3910   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3976   .text.RTC_TamperTriggerConfig:000000000000003c $d
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s 			page 145


/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3981   .text.RTC_TamperCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:3987   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4049   .text.RTC_TamperCmd:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4054   .text.RTC_TamperFilterConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4060   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4108   .text.RTC_TamperFilterConfig:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4113   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4119   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4167   .text.RTC_TamperSamplingFreqConfig:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4172   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4178   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4226   .text.RTC_TamperPinsPrechargeDuration:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4231   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4237   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4293   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4298   .text.RTC_TamperPullUpCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4304   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4360   .text.RTC_TamperPullUpCmd:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4365   .text.RTC_WriteBackupRegister:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4371   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4426   .text.RTC_WriteBackupRegister:0000000000000030 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4431   .text.RTC_ReadBackupRegister:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4437   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4489   .text.RTC_ReadBackupRegister:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4494   .text.RTC_TamperPinSelection:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4500   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4548   .text.RTC_TamperPinSelection:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4553   .text.RTC_TimeStampPinSelection:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4559   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4607   .text.RTC_TimeStampPinSelection:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4612   .text.RTC_OutputTypeConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4618   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4666   .text.RTC_OutputTypeConfig:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4671   .text.RTC_SynchroShiftConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4677   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4810   .text.RTC_SynchroShiftConfig:0000000000000098 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4815   .text.RTC_ITConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4821   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4924   .text.RTC_ITConfig:0000000000000078 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4929   .text.RTC_GetFlagStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:4935   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5001   .text.RTC_GetFlagStatus:000000000000003c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5007   .text.RTC_ClearFlag:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5013   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5065   .text.RTC_ClearFlag:000000000000002c $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5070   .text.RTC_GetITStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5076   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5179   .text.RTC_GetITStatus:0000000000000070 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5184   .text.RTC_ClearITPendingBit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5190   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5249   .text.RTC_ClearITPendingBit:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5254   .text.RTC_ByteToBcd2:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//cc5cpuFj.s:5323   .text.RTC_Bcd2ToByte:0000000000000000 $t

NO UNDEFINED SYMBOLS
