ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_cryp_des.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CRYP_DES_ECB,"ax",%progbits
  20              		.align	1
  21              		.global	CRYP_DES_ECB
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	CRYP_DES_ECB:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_cryp_des.c"
   1:./Library/stm32f4xx_cryp_des.c **** /**
   2:./Library/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:./Library/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:./Library/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_cryp_des.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_cryp_des.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:./Library/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:./Library/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:./Library/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:./Library/stm32f4xx_cryp_des.c ****   *
  12:./Library/stm32f4xx_cryp_des.c **** @verbatim
  13:./Library/stm32f4xx_cryp_des.c ****   
  14:./Library/stm32f4xx_cryp_des.c ****  ===================================================================
  15:./Library/stm32f4xx_cryp_des.c ****                   ##### How to use this driver #####
  16:./Library/stm32f4xx_cryp_des.c ****  ===================================================================
  17:./Library/stm32f4xx_cryp_des.c ****  [..] 
  18:./Library/stm32f4xx_cryp_des.c ****    (#) Enable The CRYP controller clock using 
  19:./Library/stm32f4xx_cryp_des.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:./Library/stm32f4xx_cryp_des.c ****   
  21:./Library/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB() function.
  22:./Library/stm32f4xx_cryp_des.c ****   
  23:./Library/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC() function.
  24:./Library/stm32f4xx_cryp_des.c ****   
  25:./Library/stm32f4xx_cryp_des.c **** @endverbatim
  26:./Library/stm32f4xx_cryp_des.c ****   *
  27:./Library/stm32f4xx_cryp_des.c ****   ******************************************************************************
  28:./Library/stm32f4xx_cryp_des.c ****   * @attention
  29:./Library/stm32f4xx_cryp_des.c ****   *
  30:./Library/stm32f4xx_cryp_des.c ****   * Copyright (c) 2016 STMicroelectronics.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 2


  31:./Library/stm32f4xx_cryp_des.c ****   * All rights reserved.
  32:./Library/stm32f4xx_cryp_des.c ****   *
  33:./Library/stm32f4xx_cryp_des.c ****   * This software is licensed under terms that can be found in the LICENSE file
  34:./Library/stm32f4xx_cryp_des.c ****   * in the root directory of this software component.
  35:./Library/stm32f4xx_cryp_des.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  36:./Library/stm32f4xx_cryp_des.c ****   *
  37:./Library/stm32f4xx_cryp_des.c ****   ******************************************************************************
  38:./Library/stm32f4xx_cryp_des.c ****   */
  39:./Library/stm32f4xx_cryp_des.c **** 
  40:./Library/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  41:./Library/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  42:./Library/stm32f4xx_cryp_des.c **** 
  43:./Library/stm32f4xx_cryp_des.c **** 
  44:./Library/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  45:./Library/stm32f4xx_cryp_des.c ****   * @{
  46:./Library/stm32f4xx_cryp_des.c ****   */
  47:./Library/stm32f4xx_cryp_des.c **** 
  48:./Library/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  49:./Library/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  50:./Library/stm32f4xx_cryp_des.c ****   * @{
  51:./Library/stm32f4xx_cryp_des.c ****   */
  52:./Library/stm32f4xx_cryp_des.c **** 
  53:./Library/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  54:./Library/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  55:./Library/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  56:./Library/stm32f4xx_cryp_des.c **** 
  57:./Library/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  58:./Library/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  59:./Library/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  60:./Library/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  61:./Library/stm32f4xx_cryp_des.c **** 
  62:./Library/stm32f4xx_cryp_des.c **** 
  63:./Library/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  64:./Library/stm32f4xx_cryp_des.c ****   * @{
  65:./Library/stm32f4xx_cryp_des.c ****   */ 
  66:./Library/stm32f4xx_cryp_des.c **** 
  67:./Library/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  68:./Library/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  69:./Library/stm32f4xx_cryp_des.c ****  *
  70:./Library/stm32f4xx_cryp_des.c **** @verbatim   
  71:./Library/stm32f4xx_cryp_des.c ****  ===============================================================================
  72:./Library/stm32f4xx_cryp_des.c ****                        ##### High Level DES functions #####
  73:./Library/stm32f4xx_cryp_des.c ****  ===============================================================================
  74:./Library/stm32f4xx_cryp_des.c **** @endverbatim
  75:./Library/stm32f4xx_cryp_des.c ****   * @{
  76:./Library/stm32f4xx_cryp_des.c ****   */
  77:./Library/stm32f4xx_cryp_des.c **** 
  78:./Library/stm32f4xx_cryp_des.c **** /**
  79:./Library/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  80:./Library/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  81:./Library/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
  82:./Library/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  83:./Library/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  84:./Library/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  85:./Library/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  86:./Library/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  87:./Library/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 3


  88:./Library/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  89:./Library/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  90:./Library/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  91:./Library/stm32f4xx_cryp_des.c ****   */
  92:./Library/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
  93:./Library/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
  94:./Library/stm32f4xx_cryp_des.c **** {
  29              		.loc 1 94 1
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 0, frame = 104
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 90B5     		push	{r4, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 9BB0     		sub	sp, sp, #108
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 120
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 B960     		str	r1, [r7, #8]
  46 0008 7A60     		str	r2, [r7, #4]
  47 000a 3B60     		str	r3, [r7]
  48 000c 0346     		mov	r3, r0
  49 000e FB73     		strb	r3, [r7, #15]
  95:./Library/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
  96:./Library/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  97:./Library/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 97 17
  51 0010 0023     		movs	r3, #0
  52 0012 7B61     		str	r3, [r7, #20]
  98:./Library/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
  53              		.loc 1 98 12
  54 0014 0023     		movs	r3, #0
  55 0016 7B65     		str	r3, [r7, #84]
  99:./Library/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
  56              		.loc 1 99 15
  57 0018 0123     		movs	r3, #1
  58 001a 87F86730 		strb	r3, [r7, #103]
 100:./Library/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
  59              		.loc 1 100 12
  60 001e BB68     		ldr	r3, [r7, #8]
  61 0020 3B65     		str	r3, [r7, #80]
 101:./Library/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 101 12
  63 0022 7B68     		ldr	r3, [r7, #4]
  64 0024 3B66     		str	r3, [r7, #96]
 102:./Library/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  65              		.loc 1 102 12
  66 0026 BB6F     		ldr	r3, [r7, #120]
  67 0028 FB65     		str	r3, [r7, #92]
 103:./Library/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
  68              		.loc 1 103 12
  69 002a 0023     		movs	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 4


  70 002c BB65     		str	r3, [r7, #88]
 104:./Library/stm32f4xx_cryp_des.c **** 
 105:./Library/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 106:./Library/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  71              		.loc 1 106 3
  72 002e 07F11803 		add	r3, r7, #24
  73 0032 1846     		mov	r0, r3
  74 0034 FFF7FEFF 		bl	CRYP_KeyStructInit
 107:./Library/stm32f4xx_cryp_des.c **** 
 108:./Library/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 109:./Library/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  75              		.loc 1 109 5
  76 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  77 003a 012B     		cmp	r3, #1
  78 003c 02D1     		bne	.L2
 110:./Library/stm32f4xx_cryp_des.c ****   {
 111:./Library/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  79              		.loc 1 111 43
  80 003e 0023     		movs	r3, #0
  81 0040 BB63     		str	r3, [r7, #56]
  82 0042 01E0     		b	.L3
  83              	.L2:
 112:./Library/stm32f4xx_cryp_des.c ****   }
 113:./Library/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 114:./Library/stm32f4xx_cryp_des.c ****   {      
 115:./Library/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  84              		.loc 1 115 43
  85 0044 0423     		movs	r3, #4
  86 0046 BB63     		str	r3, [r7, #56]
  87              	.L3:
 116:./Library/stm32f4xx_cryp_des.c ****   }
 117:./Library/stm32f4xx_cryp_des.c **** 
 118:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  88              		.loc 1 118 40
  89 0048 1023     		movs	r3, #16
  90 004a FB63     		str	r3, [r7, #60]
 119:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  91              		.loc 1 119 40
  92 004c 8023     		movs	r3, #128
  93 004e 3B64     		str	r3, [r7, #64]
 120:./Library/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  94              		.loc 1 120 3
  95 0050 07F13803 		add	r3, r7, #56
  96 0054 1846     		mov	r0, r3
  97 0056 FFF7FEFF 		bl	CRYP_Init
 121:./Library/stm32f4xx_cryp_des.c **** 
 122:./Library/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 123:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  98              		.loc 1 123 52
  99 005a 3B6D     		ldr	r3, [r7, #80]
 100              		.loc 1 123 45
 101 005c 1B68     		ldr	r3, [r3]
 102 005e BB64     		str	r3, [r7, #72]
 103              	.LBB14:
 104              	.LBB15:
 105              		.file 2 "./CORE/core_cmInstr.h"
   1:./CORE/core_cmInstr.h **** /**************************************************************************//**
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 5


   2:./CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./CORE/core_cmInstr.h ****  * @version  V4.10
   5:./CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:./CORE/core_cmInstr.h ****  *
   7:./CORE/core_cmInstr.h ****  * @note
   8:./CORE/core_cmInstr.h ****  *
   9:./CORE/core_cmInstr.h ****  ******************************************************************************/
  10:./CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./CORE/core_cmInstr.h **** 
  12:./CORE/core_cmInstr.h ****    All rights reserved.
  13:./CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./CORE/core_cmInstr.h ****      specific prior written permission.
  23:./CORE/core_cmInstr.h ****    *
  24:./CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./CORE/core_cmInstr.h **** 
  37:./CORE/core_cmInstr.h **** 
  38:./CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./CORE/core_cmInstr.h **** 
  41:./CORE/core_cmInstr.h **** 
  42:./CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:./CORE/core_cmInstr.h ****   @{
  46:./CORE/core_cmInstr.h **** */
  47:./CORE/core_cmInstr.h **** 
  48:./CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./CORE/core_cmInstr.h **** 
  51:./CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./CORE/core_cmInstr.h **** #endif
  54:./CORE/core_cmInstr.h **** 
  55:./CORE/core_cmInstr.h **** 
  56:./CORE/core_cmInstr.h **** /** \brief  No Operation
  57:./CORE/core_cmInstr.h **** 
  58:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 6


  59:./CORE/core_cmInstr.h ****  */
  60:./CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:./CORE/core_cmInstr.h **** 
  62:./CORE/core_cmInstr.h **** 
  63:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./CORE/core_cmInstr.h **** 
  65:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:./CORE/core_cmInstr.h ****  */
  68:./CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:./CORE/core_cmInstr.h **** 
  70:./CORE/core_cmInstr.h **** 
  71:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:./CORE/core_cmInstr.h **** 
  73:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./CORE/core_cmInstr.h ****  */
  76:./CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:./CORE/core_cmInstr.h **** 
  78:./CORE/core_cmInstr.h **** 
  79:./CORE/core_cmInstr.h **** /** \brief  Send Event
  80:./CORE/core_cmInstr.h **** 
  81:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./CORE/core_cmInstr.h ****  */
  83:./CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:./CORE/core_cmInstr.h **** 
  85:./CORE/core_cmInstr.h **** 
  86:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./CORE/core_cmInstr.h **** 
  88:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./CORE/core_cmInstr.h ****  */
  92:./CORE/core_cmInstr.h **** #define __ISB() do {\
  93:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:./CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:./CORE/core_cmInstr.h ****                 } while (0)
  97:./CORE/core_cmInstr.h **** 
  98:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:./CORE/core_cmInstr.h **** 
 100:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./CORE/core_cmInstr.h ****  */
 103:./CORE/core_cmInstr.h **** #define __DSB() do {\
 104:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:./CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:./CORE/core_cmInstr.h ****                 } while (0)
 108:./CORE/core_cmInstr.h **** 
 109:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./CORE/core_cmInstr.h **** 
 111:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./CORE/core_cmInstr.h ****  */
 114:./CORE/core_cmInstr.h **** #define __DMB() do {\
 115:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 7


 116:./CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:./CORE/core_cmInstr.h ****                 } while (0)
 119:./CORE/core_cmInstr.h **** 
 120:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./CORE/core_cmInstr.h **** 
 122:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./CORE/core_cmInstr.h **** 
 124:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./CORE/core_cmInstr.h ****     \return               Reversed value
 126:./CORE/core_cmInstr.h ****  */
 127:./CORE/core_cmInstr.h **** #define __REV                             __rev
 128:./CORE/core_cmInstr.h **** 
 129:./CORE/core_cmInstr.h **** 
 130:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./CORE/core_cmInstr.h **** 
 132:./CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./CORE/core_cmInstr.h **** 
 134:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./CORE/core_cmInstr.h ****     \return               Reversed value
 136:./CORE/core_cmInstr.h ****  */
 137:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./CORE/core_cmInstr.h **** {
 140:./CORE/core_cmInstr.h ****   rev16 r0, r0
 141:./CORE/core_cmInstr.h ****   bx lr
 142:./CORE/core_cmInstr.h **** }
 143:./CORE/core_cmInstr.h **** #endif
 144:./CORE/core_cmInstr.h **** 
 145:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./CORE/core_cmInstr.h **** 
 147:./CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./CORE/core_cmInstr.h **** 
 149:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./CORE/core_cmInstr.h ****     \return               Reversed value
 151:./CORE/core_cmInstr.h ****  */
 152:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:./CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./CORE/core_cmInstr.h **** {
 155:./CORE/core_cmInstr.h ****   revsh r0, r0
 156:./CORE/core_cmInstr.h ****   bx lr
 157:./CORE/core_cmInstr.h **** }
 158:./CORE/core_cmInstr.h **** #endif
 159:./CORE/core_cmInstr.h **** 
 160:./CORE/core_cmInstr.h **** 
 161:./CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./CORE/core_cmInstr.h **** 
 163:./CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./CORE/core_cmInstr.h **** 
 165:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./CORE/core_cmInstr.h ****     \return               Rotated value
 168:./CORE/core_cmInstr.h ****  */
 169:./CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:./CORE/core_cmInstr.h **** 
 171:./CORE/core_cmInstr.h **** 
 172:./CORE/core_cmInstr.h **** /** \brief  Breakpoint
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 8


 173:./CORE/core_cmInstr.h **** 
 174:./CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:./CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:./CORE/core_cmInstr.h **** 
 177:./CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./CORE/core_cmInstr.h ****  */
 180:./CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./CORE/core_cmInstr.h **** 
 182:./CORE/core_cmInstr.h **** 
 183:./CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./CORE/core_cmInstr.h **** 
 185:./CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./CORE/core_cmInstr.h **** 
 187:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./CORE/core_cmInstr.h ****     \return               Reversed value
 189:./CORE/core_cmInstr.h ****  */
 190:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./CORE/core_cmInstr.h **** #else
 193:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./CORE/core_cmInstr.h **** {
 195:./CORE/core_cmInstr.h ****   uint32_t result;
 196:./CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./CORE/core_cmInstr.h **** 
 198:./CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./CORE/core_cmInstr.h ****   {
 201:./CORE/core_cmInstr.h ****     result <<= 1;
 202:./CORE/core_cmInstr.h ****     result |= value & 1;
 203:./CORE/core_cmInstr.h ****     s--;
 204:./CORE/core_cmInstr.h ****   }
 205:./CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./CORE/core_cmInstr.h ****   return(result);
 207:./CORE/core_cmInstr.h **** }
 208:./CORE/core_cmInstr.h **** #endif
 209:./CORE/core_cmInstr.h **** 
 210:./CORE/core_cmInstr.h **** 
 211:./CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:./CORE/core_cmInstr.h **** 
 213:./CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./CORE/core_cmInstr.h **** 
 215:./CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./CORE/core_cmInstr.h ****  */
 218:./CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:./CORE/core_cmInstr.h **** 
 220:./CORE/core_cmInstr.h **** 
 221:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./CORE/core_cmInstr.h **** 
 223:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./CORE/core_cmInstr.h **** 
 225:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./CORE/core_cmInstr.h **** 
 227:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:./CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 9


 230:./CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./CORE/core_cmInstr.h **** 
 232:./CORE/core_cmInstr.h **** 
 233:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./CORE/core_cmInstr.h **** 
 235:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./CORE/core_cmInstr.h **** 
 237:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./CORE/core_cmInstr.h ****  */
 240:./CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./CORE/core_cmInstr.h **** 
 242:./CORE/core_cmInstr.h **** 
 243:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./CORE/core_cmInstr.h **** 
 245:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./CORE/core_cmInstr.h **** 
 247:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./CORE/core_cmInstr.h ****  */
 250:./CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./CORE/core_cmInstr.h **** 
 252:./CORE/core_cmInstr.h **** 
 253:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./CORE/core_cmInstr.h **** 
 255:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./CORE/core_cmInstr.h **** 
 257:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:./CORE/core_cmInstr.h ****     \return          1  Function failed
 261:./CORE/core_cmInstr.h ****  */
 262:./CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./CORE/core_cmInstr.h **** 
 264:./CORE/core_cmInstr.h **** 
 265:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:./CORE/core_cmInstr.h **** 
 267:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./CORE/core_cmInstr.h **** 
 269:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:./CORE/core_cmInstr.h ****     \return          1  Function failed
 273:./CORE/core_cmInstr.h ****  */
 274:./CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./CORE/core_cmInstr.h **** 
 276:./CORE/core_cmInstr.h **** 
 277:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./CORE/core_cmInstr.h **** 
 279:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./CORE/core_cmInstr.h **** 
 281:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:./CORE/core_cmInstr.h ****     \return          1  Function failed
 285:./CORE/core_cmInstr.h ****  */
 286:./CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 10


 287:./CORE/core_cmInstr.h **** 
 288:./CORE/core_cmInstr.h **** 
 289:./CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:./CORE/core_cmInstr.h **** 
 291:./CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./CORE/core_cmInstr.h **** 
 293:./CORE/core_cmInstr.h ****  */
 294:./CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./CORE/core_cmInstr.h **** 
 296:./CORE/core_cmInstr.h **** 
 297:./CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./CORE/core_cmInstr.h **** 
 299:./CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:./CORE/core_cmInstr.h **** 
 301:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./CORE/core_cmInstr.h ****     \return             Saturated value
 304:./CORE/core_cmInstr.h ****  */
 305:./CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./CORE/core_cmInstr.h **** 
 307:./CORE/core_cmInstr.h **** 
 308:./CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./CORE/core_cmInstr.h **** 
 310:./CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./CORE/core_cmInstr.h **** 
 312:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./CORE/core_cmInstr.h ****     \return             Saturated value
 315:./CORE/core_cmInstr.h ****  */
 316:./CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:./CORE/core_cmInstr.h **** 
 318:./CORE/core_cmInstr.h **** 
 319:./CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./CORE/core_cmInstr.h **** 
 321:./CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:./CORE/core_cmInstr.h **** 
 324:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./CORE/core_cmInstr.h ****     \return               Rotated value
 326:./CORE/core_cmInstr.h ****  */
 327:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./CORE/core_cmInstr.h **** {
 330:./CORE/core_cmInstr.h ****   rrx r0, r0
 331:./CORE/core_cmInstr.h ****   bx lr
 332:./CORE/core_cmInstr.h **** }
 333:./CORE/core_cmInstr.h **** #endif
 334:./CORE/core_cmInstr.h **** 
 335:./CORE/core_cmInstr.h **** 
 336:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./CORE/core_cmInstr.h **** 
 338:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./CORE/core_cmInstr.h **** 
 340:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./CORE/core_cmInstr.h ****  */
 343:./CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 11


 344:./CORE/core_cmInstr.h **** 
 345:./CORE/core_cmInstr.h **** 
 346:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:./CORE/core_cmInstr.h **** 
 348:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./CORE/core_cmInstr.h **** 
 350:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./CORE/core_cmInstr.h ****  */
 353:./CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./CORE/core_cmInstr.h **** 
 355:./CORE/core_cmInstr.h **** 
 356:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./CORE/core_cmInstr.h **** 
 358:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./CORE/core_cmInstr.h **** 
 360:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./CORE/core_cmInstr.h ****  */
 363:./CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./CORE/core_cmInstr.h **** 
 365:./CORE/core_cmInstr.h **** 
 366:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./CORE/core_cmInstr.h **** 
 368:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./CORE/core_cmInstr.h **** 
 370:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./CORE/core_cmInstr.h ****  */
 373:./CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./CORE/core_cmInstr.h **** 
 375:./CORE/core_cmInstr.h **** 
 376:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./CORE/core_cmInstr.h **** 
 378:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./CORE/core_cmInstr.h **** 
 380:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./CORE/core_cmInstr.h ****  */
 383:./CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:./CORE/core_cmInstr.h **** 
 385:./CORE/core_cmInstr.h **** 
 386:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./CORE/core_cmInstr.h **** 
 388:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./CORE/core_cmInstr.h **** 
 390:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./CORE/core_cmInstr.h ****  */
 393:./CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./CORE/core_cmInstr.h **** 
 395:./CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./CORE/core_cmInstr.h **** 
 397:./CORE/core_cmInstr.h **** 
 398:./CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 12


 401:./CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:./CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:./CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./CORE/core_cmInstr.h **** #else
 408:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./CORE/core_cmInstr.h **** #endif
 411:./CORE/core_cmInstr.h **** 
 412:./CORE/core_cmInstr.h **** /** \brief  No Operation
 413:./CORE/core_cmInstr.h **** 
 414:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./CORE/core_cmInstr.h ****  */
 416:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./CORE/core_cmInstr.h **** {
 418:./CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./CORE/core_cmInstr.h **** }
 420:./CORE/core_cmInstr.h **** 
 421:./CORE/core_cmInstr.h **** 
 422:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./CORE/core_cmInstr.h **** 
 424:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:./CORE/core_cmInstr.h ****  */
 427:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./CORE/core_cmInstr.h **** {
 429:./CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./CORE/core_cmInstr.h **** }
 431:./CORE/core_cmInstr.h **** 
 432:./CORE/core_cmInstr.h **** 
 433:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:./CORE/core_cmInstr.h **** 
 435:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:./CORE/core_cmInstr.h ****  */
 438:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./CORE/core_cmInstr.h **** {
 440:./CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:./CORE/core_cmInstr.h **** }
 442:./CORE/core_cmInstr.h **** 
 443:./CORE/core_cmInstr.h **** 
 444:./CORE/core_cmInstr.h **** /** \brief  Send Event
 445:./CORE/core_cmInstr.h **** 
 446:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./CORE/core_cmInstr.h ****  */
 448:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./CORE/core_cmInstr.h **** {
 450:./CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./CORE/core_cmInstr.h **** }
 452:./CORE/core_cmInstr.h **** 
 453:./CORE/core_cmInstr.h **** 
 454:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./CORE/core_cmInstr.h **** 
 456:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 13


 458:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./CORE/core_cmInstr.h ****  */
 460:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:./CORE/core_cmInstr.h **** {
 462:./CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./CORE/core_cmInstr.h **** }
 464:./CORE/core_cmInstr.h **** 
 465:./CORE/core_cmInstr.h **** 
 466:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./CORE/core_cmInstr.h **** 
 468:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./CORE/core_cmInstr.h ****  */
 471:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./CORE/core_cmInstr.h **** {
 473:./CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./CORE/core_cmInstr.h **** }
 475:./CORE/core_cmInstr.h **** 
 476:./CORE/core_cmInstr.h **** 
 477:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./CORE/core_cmInstr.h **** 
 479:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./CORE/core_cmInstr.h ****  */
 482:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./CORE/core_cmInstr.h **** {
 484:./CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./CORE/core_cmInstr.h **** }
 486:./CORE/core_cmInstr.h **** 
 487:./CORE/core_cmInstr.h **** 
 488:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./CORE/core_cmInstr.h **** 
 490:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./CORE/core_cmInstr.h **** 
 492:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./CORE/core_cmInstr.h ****     \return               Reversed value
 494:./CORE/core_cmInstr.h ****  */
 495:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./CORE/core_cmInstr.h **** {
 497:./CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:./CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 106              		.loc 2 498 10
 107 0060 BB6C     		ldr	r3, [r7, #72]
 108 0062 1BBA     		rev	r3, r3
 109              	.LBE15:
 110              	.LBE14:
 111              		.loc 1 123 43
 112 0064 3B62     		str	r3, [r7, #32]
 124:./Library/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 113              		.loc 1 124 10
 114 0066 3B6D     		ldr	r3, [r7, #80]
 115 0068 0433     		adds	r3, r3, #4
 116 006a 3B65     		str	r3, [r7, #80]
 125:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 117              		.loc 1 125 52
 118 006c 3B6D     		ldr	r3, [r7, #80]
 119              		.loc 1 125 45
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 14


 120 006e 1B68     		ldr	r3, [r3]
 121 0070 FB64     		str	r3, [r7, #76]
 122              	.LBB16:
 123              	.LBB17:
 124              		.loc 2 498 10
 125 0072 FB6C     		ldr	r3, [r7, #76]
 126 0074 1BBA     		rev	r3, r3
 127              	.LBE17:
 128              	.LBE16:
 129              		.loc 1 125 43
 130 0076 7B62     		str	r3, [r7, #36]
 126:./Library/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 131              		.loc 1 126 3
 132 0078 07F11803 		add	r3, r7, #24
 133 007c 1846     		mov	r0, r3
 134 007e FFF7FEFF 		bl	CRYP_KeyInit
 127:./Library/stm32f4xx_cryp_des.c **** 
 128:./Library/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 129:./Library/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 135              		.loc 1 129 3
 136 0082 FFF7FEFF 		bl	CRYP_FIFOFlush
 130:./Library/stm32f4xx_cryp_des.c **** 
 131:./Library/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 132:./Library/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 137              		.loc 1 132 3
 138 0086 0120     		movs	r0, #1
 139 0088 FFF7FEFF 		bl	CRYP_Cmd
 133:./Library/stm32f4xx_cryp_des.c **** 
 134:./Library/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 140              		.loc 1 134 6
 141 008c FFF7FEFF 		bl	CRYP_GetCmdStatus
 142 0090 0346     		mov	r3, r0
 143              		.loc 1 134 5
 144 0092 002B     		cmp	r3, #0
 145 0094 03D1     		bne	.L6
 135:./Library/stm32f4xx_cryp_des.c ****   {
 136:./Library/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 137:./Library/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 138:./Library/stm32f4xx_cryp_des.c ****     status = ERROR;
 146              		.loc 1 138 12
 147 0096 0023     		movs	r3, #0
 148 0098 87F86730 		strb	r3, [r7, #103]
 149 009c 48E0     		b	.L7
 150              	.L6:
 139:./Library/stm32f4xx_cryp_des.c ****   }
 140:./Library/stm32f4xx_cryp_des.c ****   else
 141:./Library/stm32f4xx_cryp_des.c ****   {
 142:./Library/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 151              		.loc 1 142 10
 152 009e 0023     		movs	r3, #0
 153 00a0 BB65     		str	r3, [r7, #88]
 154              		.loc 1 142 5
 155 00a2 3AE0     		b	.L8
 156              	.L14:
 143:./Library/stm32f4xx_cryp_des.c ****     {
 144:./Library/stm32f4xx_cryp_des.c ****       
 145:./Library/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 15


 146:./Library/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 157              		.loc 1 146 20
 158 00a4 3B6E     		ldr	r3, [r7, #96]
 159              		.loc 1 146 7
 160 00a6 1B68     		ldr	r3, [r3]
 161 00a8 1846     		mov	r0, r3
 162 00aa FFF7FEFF 		bl	CRYP_DataIn
 147:./Library/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 163              		.loc 1 147 16
 164 00ae 3B6E     		ldr	r3, [r7, #96]
 165 00b0 0433     		adds	r3, r3, #4
 166 00b2 3B66     		str	r3, [r7, #96]
 148:./Library/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 167              		.loc 1 148 20
 168 00b4 3B6E     		ldr	r3, [r7, #96]
 169              		.loc 1 148 7
 170 00b6 1B68     		ldr	r3, [r3]
 171 00b8 1846     		mov	r0, r3
 172 00ba FFF7FEFF 		bl	CRYP_DataIn
 149:./Library/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 173              		.loc 1 149 16
 174 00be 3B6E     		ldr	r3, [r7, #96]
 175 00c0 0433     		adds	r3, r3, #4
 176 00c2 3B66     		str	r3, [r7, #96]
 150:./Library/stm32f4xx_cryp_des.c ****       
 151:./Library/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 152:./Library/stm32f4xx_cryp_des.c ****       counter = 0;
 177              		.loc 1 152 15
 178 00c4 0023     		movs	r3, #0
 179 00c6 7B61     		str	r3, [r7, #20]
 180              	.L10:
 153:./Library/stm32f4xx_cryp_des.c ****       do
 154:./Library/stm32f4xx_cryp_des.c ****       {
 155:./Library/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 181              		.loc 1 155 22 discriminator 2
 182 00c8 1020     		movs	r0, #16
 183 00ca FFF7FEFF 		bl	CRYP_GetFlagStatus
 184 00ce 0346     		mov	r3, r0
 185              		.loc 1 155 20 discriminator 2
 186 00d0 7B65     		str	r3, [r7, #84]
 156:./Library/stm32f4xx_cryp_des.c ****         counter++;
 187              		.loc 1 156 16 discriminator 2
 188 00d2 7B69     		ldr	r3, [r7, #20]
 189 00d4 0133     		adds	r3, r3, #1
 190 00d6 7B61     		str	r3, [r7, #20]
 157:./Library/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 191              		.loc 1 157 24 discriminator 2
 192 00d8 7B69     		ldr	r3, [r7, #20]
 193              		.loc 1 157 7 discriminator 2
 194 00da B3F5803F 		cmp	r3, #65536
 195 00de 02D0     		beq	.L9
 196              		.loc 1 157 44 discriminator 1
 197 00e0 7B6D     		ldr	r3, [r7, #84]
 198 00e2 002B     		cmp	r3, #0
 199 00e4 F0D1     		bne	.L10
 200              	.L9:
 158:./Library/stm32f4xx_cryp_des.c ****       
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 16


 159:./Library/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 201              		.loc 1 159 10
 202 00e6 7B6D     		ldr	r3, [r7, #84]
 203 00e8 002B     		cmp	r3, #0
 204 00ea 03D0     		beq	.L11
 160:./Library/stm32f4xx_cryp_des.c ****       {
 161:./Library/stm32f4xx_cryp_des.c ****         status = ERROR;
 205              		.loc 1 161 16
 206 00ec 0023     		movs	r3, #0
 207 00ee 87F86730 		strb	r3, [r7, #103]
 208 00f2 0FE0     		b	.L12
 209              	.L11:
 162:./Library/stm32f4xx_cryp_des.c ****       }
 163:./Library/stm32f4xx_cryp_des.c ****       else
 164:./Library/stm32f4xx_cryp_des.c ****       {
 165:./Library/stm32f4xx_cryp_des.c ****         
 166:./Library/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 167:./Library/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 210              		.loc 1 167 10
 211 00f4 FC6D     		ldr	r4, [r7, #92]
 212              		.loc 1 167 36
 213 00f6 FFF7FEFF 		bl	CRYP_DataOut
 214 00fa 0346     		mov	r3, r0
 215              		.loc 1 167 34
 216 00fc 2360     		str	r3, [r4]
 168:./Library/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 217              		.loc 1 168 19
 218 00fe FB6D     		ldr	r3, [r7, #92]
 219 0100 0433     		adds	r3, r3, #4
 220 0102 FB65     		str	r3, [r7, #92]
 169:./Library/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 221              		.loc 1 169 10
 222 0104 FC6D     		ldr	r4, [r7, #92]
 223              		.loc 1 169 36
 224 0106 FFF7FEFF 		bl	CRYP_DataOut
 225 010a 0346     		mov	r3, r0
 226              		.loc 1 169 34
 227 010c 2360     		str	r3, [r4]
 170:./Library/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 228              		.loc 1 170 19
 229 010e FB6D     		ldr	r3, [r7, #92]
 230 0110 0433     		adds	r3, r3, #4
 231 0112 FB65     		str	r3, [r7, #92]
 232              	.L12:
 142:./Library/stm32f4xx_cryp_des.c ****     {
 233              		.loc 1 142 51 discriminator 2
 234 0114 BB6D     		ldr	r3, [r7, #88]
 235 0116 0833     		adds	r3, r3, #8
 236 0118 BB65     		str	r3, [r7, #88]
 237              	.L8:
 142:./Library/stm32f4xx_cryp_des.c ****     {
 238              		.loc 1 142 5 discriminator 1
 239 011a BA6D     		ldr	r2, [r7, #88]
 240 011c 3B68     		ldr	r3, [r7]
 241 011e 9A42     		cmp	r2, r3
 242 0120 03D2     		bcs	.L13
 142:./Library/stm32f4xx_cryp_des.c ****     {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 17


 243              		.loc 1 142 27 discriminator 3
 244 0122 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 245 0126 002B     		cmp	r3, #0
 246 0128 BCD1     		bne	.L14
 247              	.L13:
 171:./Library/stm32f4xx_cryp_des.c ****       }
 172:./Library/stm32f4xx_cryp_des.c ****     }
 173:./Library/stm32f4xx_cryp_des.c ****     
 174:./Library/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 175:./Library/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 248              		.loc 1 175 5
 249 012a 0020     		movs	r0, #0
 250 012c FFF7FEFF 		bl	CRYP_Cmd
 251              	.L7:
 176:./Library/stm32f4xx_cryp_des.c ****   }
 177:./Library/stm32f4xx_cryp_des.c ****   return status; 
 252              		.loc 1 177 10
 253 0130 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 178:./Library/stm32f4xx_cryp_des.c **** }
 254              		.loc 1 178 1
 255 0134 1846     		mov	r0, r3
 256 0136 6C37     		adds	r7, r7, #108
 257              	.LCFI3:
 258              		.cfi_def_cfa_offset 12
 259 0138 BD46     		mov	sp, r7
 260              	.LCFI4:
 261              		.cfi_def_cfa_register 13
 262              		@ sp needed
 263 013a 90BD     		pop	{r4, r7, pc}
 264              		.cfi_endproc
 265              	.LFE123:
 267              		.section	.text.CRYP_DES_CBC,"ax",%progbits
 268              		.align	1
 269              		.global	CRYP_DES_CBC
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 274              	CRYP_DES_CBC:
 275              	.LFB124:
 179:./Library/stm32f4xx_cryp_des.c **** 
 180:./Library/stm32f4xx_cryp_des.c **** /**
 181:./Library/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 182:./Library/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 183:./Library/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 184:./Library/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 185:./Library/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 186:./Library/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 187:./Library/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 188:./Library/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 189:./Library/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 190:./Library/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 191:./Library/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 192:./Library/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 193:./Library/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 194:./Library/stm32f4xx_cryp_des.c ****   */
 195:./Library/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 196:./Library/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 18


 197:./Library/stm32f4xx_cryp_des.c **** {
 276              		.loc 1 197 1
 277              		.cfi_startproc
 278              		@ args = 8, pretend = 0, frame = 128
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280 0000 90B5     		push	{r4, r7, lr}
 281              	.LCFI5:
 282              		.cfi_def_cfa_offset 12
 283              		.cfi_offset 4, -12
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 A1B0     		sub	sp, sp, #132
 287              	.LCFI6:
 288              		.cfi_def_cfa_offset 144
 289 0004 00AF     		add	r7, sp, #0
 290              	.LCFI7:
 291              		.cfi_def_cfa_register 7
 292 0006 B960     		str	r1, [r7, #8]
 293 0008 7A60     		str	r2, [r7, #4]
 294 000a 3B60     		str	r3, [r7]
 295 000c 0346     		mov	r3, r0
 296 000e FB73     		strb	r3, [r7, #15]
 198:./Library/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 199:./Library/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 200:./Library/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 201:./Library/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 297              		.loc 1 201 17
 298 0010 0023     		movs	r3, #0
 299 0012 3B61     		str	r3, [r7, #16]
 202:./Library/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 300              		.loc 1 202 12
 301 0014 0023     		movs	r3, #0
 302 0016 FB66     		str	r3, [r7, #108]
 203:./Library/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 303              		.loc 1 203 15
 304 0018 0123     		movs	r3, #1
 305 001a 87F87F30 		strb	r3, [r7, #127]
 204:./Library/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 306              		.loc 1 204 12
 307 001e BB68     		ldr	r3, [r7, #8]
 308 0020 BB66     		str	r3, [r7, #104]
 205:./Library/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 309              		.loc 1 205 12
 310 0022 3B68     		ldr	r3, [r7]
 311 0024 BB67     		str	r3, [r7, #120]
 206:./Library/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 312              		.loc 1 206 12
 313 0026 D7F89430 		ldr	r3, [r7, #148]
 314 002a 7B67     		str	r3, [r7, #116]
 207:./Library/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 315              		.loc 1 207 12
 316 002c 7B68     		ldr	r3, [r7, #4]
 317 002e 7B66     		str	r3, [r7, #100]
 208:./Library/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 318              		.loc 1 208 12
 319 0030 0023     		movs	r3, #0
 320 0032 3B67     		str	r3, [r7, #112]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 19


 209:./Library/stm32f4xx_cryp_des.c **** 
 210:./Library/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 211:./Library/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 321              		.loc 1 211 3
 322 0034 07F12403 		add	r3, r7, #36
 323 0038 1846     		mov	r0, r3
 324 003a FFF7FEFF 		bl	CRYP_KeyStructInit
 212:./Library/stm32f4xx_cryp_des.c **** 
 213:./Library/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 214:./Library/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 325              		.loc 1 214 5
 326 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 327 0040 012B     		cmp	r3, #1
 328 0042 02D1     		bne	.L17
 215:./Library/stm32f4xx_cryp_des.c ****   {
 216:./Library/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 329              		.loc 1 216 43
 330 0044 0023     		movs	r3, #0
 331 0046 7B64     		str	r3, [r7, #68]
 332 0048 01E0     		b	.L18
 333              	.L17:
 217:./Library/stm32f4xx_cryp_des.c ****   }
 218:./Library/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 219:./Library/stm32f4xx_cryp_des.c ****   {
 220:./Library/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 334              		.loc 1 220 43
 335 004a 0423     		movs	r3, #4
 336 004c 7B64     		str	r3, [r7, #68]
 337              	.L18:
 221:./Library/stm32f4xx_cryp_des.c ****   }
 222:./Library/stm32f4xx_cryp_des.c **** 
 223:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 338              		.loc 1 223 40
 339 004e 1823     		movs	r3, #24
 340 0050 BB64     		str	r3, [r7, #72]
 224:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 341              		.loc 1 224 40
 342 0052 8023     		movs	r3, #128
 343 0054 FB64     		str	r3, [r7, #76]
 225:./Library/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 344              		.loc 1 225 3
 345 0056 07F14403 		add	r3, r7, #68
 346 005a 1846     		mov	r0, r3
 347 005c FFF7FEFF 		bl	CRYP_Init
 226:./Library/stm32f4xx_cryp_des.c **** 
 227:./Library/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 228:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 348              		.loc 1 228 52
 349 0060 BB6E     		ldr	r3, [r7, #104]
 350              		.loc 1 228 45
 351 0062 1B68     		ldr	r3, [r3]
 352 0064 7B65     		str	r3, [r7, #84]
 353              	.LBB18:
 354              	.LBB19:
 355              		.loc 2 498 10
 356 0066 7B6D     		ldr	r3, [r7, #84]
 357 0068 1BBA     		rev	r3, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 20


 358              	.LBE19:
 359              	.LBE18:
 360              		.loc 1 228 43
 361 006a FB62     		str	r3, [r7, #44]
 229:./Library/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 362              		.loc 1 229 10
 363 006c BB6E     		ldr	r3, [r7, #104]
 364 006e 0433     		adds	r3, r3, #4
 365 0070 BB66     		str	r3, [r7, #104]
 230:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 366              		.loc 1 230 52
 367 0072 BB6E     		ldr	r3, [r7, #104]
 368              		.loc 1 230 45
 369 0074 1B68     		ldr	r3, [r3]
 370 0076 BB65     		str	r3, [r7, #88]
 371              	.LBB20:
 372              	.LBB21:
 373              		.loc 2 498 10
 374 0078 BB6D     		ldr	r3, [r7, #88]
 375 007a 1BBA     		rev	r3, r3
 376              	.LBE21:
 377              	.LBE20:
 378              		.loc 1 230 43
 379 007c 3B63     		str	r3, [r7, #48]
 231:./Library/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 380              		.loc 1 231 3
 381 007e 07F12403 		add	r3, r7, #36
 382 0082 1846     		mov	r0, r3
 383 0084 FFF7FEFF 		bl	CRYP_KeyInit
 232:./Library/stm32f4xx_cryp_des.c **** 
 233:./Library/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 234:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 384              		.loc 1 234 50
 385 0088 7B6E     		ldr	r3, [r7, #100]
 386              		.loc 1 234 43
 387 008a 1B68     		ldr	r3, [r3]
 388 008c FB65     		str	r3, [r7, #92]
 389              	.LBB22:
 390              	.LBB23:
 391              		.loc 2 498 10
 392 008e FB6D     		ldr	r3, [r7, #92]
 393 0090 1BBA     		rev	r3, r3
 394              	.LBE23:
 395              	.LBE22:
 396              		.loc 1 234 41
 397 0092 7B61     		str	r3, [r7, #20]
 235:./Library/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 398              		.loc 1 235 9
 399 0094 7B6E     		ldr	r3, [r7, #100]
 400 0096 0433     		adds	r3, r3, #4
 401 0098 7B66     		str	r3, [r7, #100]
 236:./Library/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 402              		.loc 1 236 50
 403 009a 7B6E     		ldr	r3, [r7, #100]
 404              		.loc 1 236 43
 405 009c 1B68     		ldr	r3, [r3]
 406 009e 3B66     		str	r3, [r7, #96]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 21


 407              	.LBB24:
 408              	.LBB25:
 409              		.loc 2 498 10
 410 00a0 3B6E     		ldr	r3, [r7, #96]
 411 00a2 1BBA     		rev	r3, r3
 412              	.LBE25:
 413              	.LBE24:
 414              		.loc 1 236 41
 415 00a4 BB61     		str	r3, [r7, #24]
 237:./Library/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 416              		.loc 1 237 3
 417 00a6 07F11403 		add	r3, r7, #20
 418 00aa 1846     		mov	r0, r3
 419 00ac FFF7FEFF 		bl	CRYP_IVInit
 238:./Library/stm32f4xx_cryp_des.c **** 
 239:./Library/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 240:./Library/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 420              		.loc 1 240 3
 421 00b0 FFF7FEFF 		bl	CRYP_FIFOFlush
 241:./Library/stm32f4xx_cryp_des.c ****   
 242:./Library/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 243:./Library/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 422              		.loc 1 243 3
 423 00b4 0120     		movs	r0, #1
 424 00b6 FFF7FEFF 		bl	CRYP_Cmd
 244:./Library/stm32f4xx_cryp_des.c **** 
 245:./Library/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 425              		.loc 1 245 6
 426 00ba FFF7FEFF 		bl	CRYP_GetCmdStatus
 427 00be 0346     		mov	r3, r0
 428              		.loc 1 245 5
 429 00c0 002B     		cmp	r3, #0
 430 00c2 03D1     		bne	.L23
 246:./Library/stm32f4xx_cryp_des.c ****   {
 247:./Library/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 248:./Library/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 249:./Library/stm32f4xx_cryp_des.c ****     status = ERROR;
 431              		.loc 1 249 12
 432 00c4 0023     		movs	r3, #0
 433 00c6 87F87F30 		strb	r3, [r7, #127]
 434 00ca 49E0     		b	.L24
 435              	.L23:
 250:./Library/stm32f4xx_cryp_des.c ****   }
 251:./Library/stm32f4xx_cryp_des.c ****   else
 252:./Library/stm32f4xx_cryp_des.c ****   {
 253:./Library/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 436              		.loc 1 253 10
 437 00cc 0023     		movs	r3, #0
 438 00ce 3B67     		str	r3, [r7, #112]
 439              		.loc 1 253 5
 440 00d0 3AE0     		b	.L25
 441              	.L31:
 254:./Library/stm32f4xx_cryp_des.c ****     {
 255:./Library/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
 256:./Library/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 442              		.loc 1 256 20
 443 00d2 BB6F     		ldr	r3, [r7, #120]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 22


 444              		.loc 1 256 7
 445 00d4 1B68     		ldr	r3, [r3]
 446 00d6 1846     		mov	r0, r3
 447 00d8 FFF7FEFF 		bl	CRYP_DataIn
 257:./Library/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 448              		.loc 1 257 16
 449 00dc BB6F     		ldr	r3, [r7, #120]
 450 00de 0433     		adds	r3, r3, #4
 451 00e0 BB67     		str	r3, [r7, #120]
 258:./Library/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 452              		.loc 1 258 20
 453 00e2 BB6F     		ldr	r3, [r7, #120]
 454              		.loc 1 258 7
 455 00e4 1B68     		ldr	r3, [r3]
 456 00e6 1846     		mov	r0, r3
 457 00e8 FFF7FEFF 		bl	CRYP_DataIn
 259:./Library/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 458              		.loc 1 259 16
 459 00ec BB6F     		ldr	r3, [r7, #120]
 460 00ee 0433     		adds	r3, r3, #4
 461 00f0 BB67     		str	r3, [r7, #120]
 260:./Library/stm32f4xx_cryp_des.c ****       
 261:./Library/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 262:./Library/stm32f4xx_cryp_des.c ****       counter = 0;
 462              		.loc 1 262 15
 463 00f2 0023     		movs	r3, #0
 464 00f4 3B61     		str	r3, [r7, #16]
 465              	.L27:
 263:./Library/stm32f4xx_cryp_des.c ****       do
 264:./Library/stm32f4xx_cryp_des.c ****       {
 265:./Library/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 466              		.loc 1 265 22 discriminator 2
 467 00f6 1020     		movs	r0, #16
 468 00f8 FFF7FEFF 		bl	CRYP_GetFlagStatus
 469 00fc 0346     		mov	r3, r0
 470              		.loc 1 265 20 discriminator 2
 471 00fe FB66     		str	r3, [r7, #108]
 266:./Library/stm32f4xx_cryp_des.c ****         counter++;
 472              		.loc 1 266 16 discriminator 2
 473 0100 3B69     		ldr	r3, [r7, #16]
 474 0102 0133     		adds	r3, r3, #1
 475 0104 3B61     		str	r3, [r7, #16]
 267:./Library/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 476              		.loc 1 267 24 discriminator 2
 477 0106 3B69     		ldr	r3, [r7, #16]
 478              		.loc 1 267 7 discriminator 2
 479 0108 B3F5803F 		cmp	r3, #65536
 480 010c 02D0     		beq	.L26
 481              		.loc 1 267 44 discriminator 1
 482 010e FB6E     		ldr	r3, [r7, #108]
 483 0110 002B     		cmp	r3, #0
 484 0112 F0D1     		bne	.L27
 485              	.L26:
 268:./Library/stm32f4xx_cryp_des.c ****       
 269:./Library/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 486              		.loc 1 269 10
 487 0114 FB6E     		ldr	r3, [r7, #108]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 23


 488 0116 002B     		cmp	r3, #0
 489 0118 03D0     		beq	.L28
 270:./Library/stm32f4xx_cryp_des.c ****       {
 271:./Library/stm32f4xx_cryp_des.c ****         status = ERROR;
 490              		.loc 1 271 16
 491 011a 0023     		movs	r3, #0
 492 011c 87F87F30 		strb	r3, [r7, #127]
 493 0120 0FE0     		b	.L29
 494              	.L28:
 272:./Library/stm32f4xx_cryp_des.c ****       }
 273:./Library/stm32f4xx_cryp_des.c ****       else
 274:./Library/stm32f4xx_cryp_des.c ****       {
 275:./Library/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 276:./Library/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 495              		.loc 1 276 10
 496 0122 7C6F     		ldr	r4, [r7, #116]
 497              		.loc 1 276 36
 498 0124 FFF7FEFF 		bl	CRYP_DataOut
 499 0128 0346     		mov	r3, r0
 500              		.loc 1 276 34
 501 012a 2360     		str	r3, [r4]
 277:./Library/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 502              		.loc 1 277 19
 503 012c 7B6F     		ldr	r3, [r7, #116]
 504 012e 0433     		adds	r3, r3, #4
 505 0130 7B67     		str	r3, [r7, #116]
 278:./Library/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 506              		.loc 1 278 10
 507 0132 7C6F     		ldr	r4, [r7, #116]
 508              		.loc 1 278 36
 509 0134 FFF7FEFF 		bl	CRYP_DataOut
 510 0138 0346     		mov	r3, r0
 511              		.loc 1 278 34
 512 013a 2360     		str	r3, [r4]
 279:./Library/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 513              		.loc 1 279 19
 514 013c 7B6F     		ldr	r3, [r7, #116]
 515 013e 0433     		adds	r3, r3, #4
 516 0140 7B67     		str	r3, [r7, #116]
 517              	.L29:
 253:./Library/stm32f4xx_cryp_des.c ****     {
 518              		.loc 1 253 51 discriminator 2
 519 0142 3B6F     		ldr	r3, [r7, #112]
 520 0144 0833     		adds	r3, r3, #8
 521 0146 3B67     		str	r3, [r7, #112]
 522              	.L25:
 253:./Library/stm32f4xx_cryp_des.c ****     {
 523              		.loc 1 253 5 discriminator 1
 524 0148 3A6F     		ldr	r2, [r7, #112]
 525 014a D7F89030 		ldr	r3, [r7, #144]
 526 014e 9A42     		cmp	r2, r3
 527 0150 03D2     		bcs	.L30
 253:./Library/stm32f4xx_cryp_des.c ****     {
 528              		.loc 1 253 27 discriminator 3
 529 0152 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 530 0156 002B     		cmp	r3, #0
 531 0158 BBD1     		bne	.L31
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 24


 532              	.L30:
 280:./Library/stm32f4xx_cryp_des.c ****       }
 281:./Library/stm32f4xx_cryp_des.c ****     }
 282:./Library/stm32f4xx_cryp_des.c ****     
 283:./Library/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 284:./Library/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 533              		.loc 1 284 5
 534 015a 0020     		movs	r0, #0
 535 015c FFF7FEFF 		bl	CRYP_Cmd
 536              	.L24:
 285:./Library/stm32f4xx_cryp_des.c ****   }
 286:./Library/stm32f4xx_cryp_des.c ****   return status; 
 537              		.loc 1 286 10
 538 0160 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 287:./Library/stm32f4xx_cryp_des.c **** }
 539              		.loc 1 287 1
 540 0164 1846     		mov	r0, r3
 541 0166 8437     		adds	r7, r7, #132
 542              	.LCFI8:
 543              		.cfi_def_cfa_offset 12
 544 0168 BD46     		mov	sp, r7
 545              	.LCFI9:
 546              		.cfi_def_cfa_register 13
 547              		@ sp needed
 548 016a 90BD     		pop	{r4, r7, pc}
 549              		.cfi_endproc
 550              	.LFE124:
 552              		.text
 553              	.Letext0:
 554              		.file 3 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 555              		.file 4 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 556              		.file 5 "./CORE/stm32f4xx.h"
 557              		.file 6 "./Library/stm32f4xx_cryp.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_des.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s:20     .text.CRYP_DES_ECB:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s:26     .text.CRYP_DES_ECB:0000000000000000 CRYP_DES_ECB
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s:268    .text.CRYP_DES_CBC:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccBxROwT.s:274    .text.CRYP_DES_CBC:0000000000000000 CRYP_DES_CBC

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
