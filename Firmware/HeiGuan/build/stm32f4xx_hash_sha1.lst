ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_hash_sha1.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HASH_SHA1,"ax",%progbits
  20              		.align	1
  21              		.global	HASH_SHA1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	HASH_SHA1:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_hash_sha1.c"
   1:./Library/stm32f4xx_hash_sha1.c **** /**
   2:./Library/stm32f4xx_hash_sha1.c ****   ******************************************************************************
   3:./Library/stm32f4xx_hash_sha1.c ****   * @file    stm32f4xx_hash_sha1.c
   4:./Library/stm32f4xx_hash_sha1.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_hash_sha1.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_hash_sha1.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_hash_sha1.c ****   * @brief   This file provides high level functions to compute the HASH SHA1 and
   8:./Library/stm32f4xx_hash_sha1.c ****   *          HMAC SHA1 Digest of an input message.
   9:./Library/stm32f4xx_hash_sha1.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:./Library/stm32f4xx_hash_sha1.c ****   *          peripheral.
  11:./Library/stm32f4xx_hash_sha1.c ****   *
  12:./Library/stm32f4xx_hash_sha1.c **** @verbatim
  13:./Library/stm32f4xx_hash_sha1.c ****  ===================================================================
  14:./Library/stm32f4xx_hash_sha1.c ****                  ##### How to use this driver #####
  15:./Library/stm32f4xx_hash_sha1.c ****  ===================================================================
  16:./Library/stm32f4xx_hash_sha1.c ****  [..]
  17:./Library/stm32f4xx_hash_sha1.c ****    (#) Enable The HASH controller clock using 
  18:./Library/stm32f4xx_hash_sha1.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:./Library/stm32f4xx_hash_sha1.c ****   
  20:./Library/stm32f4xx_hash_sha1.c ****    (#) Calculate the HASH SHA1 Digest using HASH_SHA1() function.
  21:./Library/stm32f4xx_hash_sha1.c ****   
  22:./Library/stm32f4xx_hash_sha1.c ****    (#) Calculate the HMAC SHA1 Digest using HMAC_SHA1() function.
  23:./Library/stm32f4xx_hash_sha1.c ****   
  24:./Library/stm32f4xx_hash_sha1.c **** @endverbatim
  25:./Library/stm32f4xx_hash_sha1.c ****   *
  26:./Library/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  27:./Library/stm32f4xx_hash_sha1.c ****   * @attention
  28:./Library/stm32f4xx_hash_sha1.c ****   *
  29:./Library/stm32f4xx_hash_sha1.c ****   * Copyright (c) 2016 STMicroelectronics.
  30:./Library/stm32f4xx_hash_sha1.c ****   * All rights reserved.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 2


  31:./Library/stm32f4xx_hash_sha1.c ****   *
  32:./Library/stm32f4xx_hash_sha1.c ****   * This software is licensed under terms that can be found in the LICENSE file
  33:./Library/stm32f4xx_hash_sha1.c ****   * in the root directory of this software component.
  34:./Library/stm32f4xx_hash_sha1.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  35:./Library/stm32f4xx_hash_sha1.c ****   *
  36:./Library/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  37:./Library/stm32f4xx_hash_sha1.c ****   */
  38:./Library/stm32f4xx_hash_sha1.c **** 
  39:./Library/stm32f4xx_hash_sha1.c **** /* Includes ------------------------------------------------------------------*/
  40:./Library/stm32f4xx_hash_sha1.c **** #include "stm32f4xx_hash.h"
  41:./Library/stm32f4xx_hash_sha1.c **** 
  42:./Library/stm32f4xx_hash_sha1.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  43:./Library/stm32f4xx_hash_sha1.c ****   * @{
  44:./Library/stm32f4xx_hash_sha1.c ****   */
  45:./Library/stm32f4xx_hash_sha1.c **** 
  46:./Library/stm32f4xx_hash_sha1.c **** /** @defgroup HASH 
  47:./Library/stm32f4xx_hash_sha1.c ****   * @brief HASH driver modules
  48:./Library/stm32f4xx_hash_sha1.c ****   * @{
  49:./Library/stm32f4xx_hash_sha1.c ****   */
  50:./Library/stm32f4xx_hash_sha1.c **** 
  51:./Library/stm32f4xx_hash_sha1.c **** /* Private typedef -----------------------------------------------------------*/
  52:./Library/stm32f4xx_hash_sha1.c **** /* Private define ------------------------------------------------------------*/
  53:./Library/stm32f4xx_hash_sha1.c **** #define SHA1BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  54:./Library/stm32f4xx_hash_sha1.c **** 
  55:./Library/stm32f4xx_hash_sha1.c **** /* Private macro -------------------------------------------------------------*/
  56:./Library/stm32f4xx_hash_sha1.c **** /* Private variables ---------------------------------------------------------*/
  57:./Library/stm32f4xx_hash_sha1.c **** /* Private function prototypes -----------------------------------------------*/
  58:./Library/stm32f4xx_hash_sha1.c **** /* Private functions ---------------------------------------------------------*/
  59:./Library/stm32f4xx_hash_sha1.c **** 
  60:./Library/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Private_Functions
  61:./Library/stm32f4xx_hash_sha1.c ****   * @{
  62:./Library/stm32f4xx_hash_sha1.c ****   */ 
  63:./Library/stm32f4xx_hash_sha1.c **** 
  64:./Library/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Group6 High Level SHA1 functions
  65:./Library/stm32f4xx_hash_sha1.c ****  *  @brief   High Level SHA1 Hash and HMAC functions 
  66:./Library/stm32f4xx_hash_sha1.c ****  *
  67:./Library/stm32f4xx_hash_sha1.c **** @verbatim   
  68:./Library/stm32f4xx_hash_sha1.c ****  ===============================================================================
  69:./Library/stm32f4xx_hash_sha1.c ****                ##### High Level SHA1 Hash and HMAC functions #####
  70:./Library/stm32f4xx_hash_sha1.c ****  ===============================================================================
  71:./Library/stm32f4xx_hash_sha1.c **** 
  72:./Library/stm32f4xx_hash_sha1.c **** 
  73:./Library/stm32f4xx_hash_sha1.c **** @endverbatim
  74:./Library/stm32f4xx_hash_sha1.c ****   * @{
  75:./Library/stm32f4xx_hash_sha1.c ****   */
  76:./Library/stm32f4xx_hash_sha1.c **** 
  77:./Library/stm32f4xx_hash_sha1.c **** /**
  78:./Library/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HASH SHA1 digest.
  79:./Library/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
  80:./Library/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
  81:./Library/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
  82:./Library/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
  83:./Library/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
  84:./Library/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
  85:./Library/stm32f4xx_hash_sha1.c ****   */
  86:./Library/stm32f4xx_hash_sha1.c **** ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
  87:./Library/stm32f4xx_hash_sha1.c **** {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 3


  29              		.loc 1 87 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 112
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 9CB0     		sub	sp, sp, #112
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 120
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
  88:./Library/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
  89:./Library/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
  90:./Library/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
  47              		.loc 1 90 17
  48 000c 0023     		movs	r3, #0
  49 000e FB82     		strh	r3, [r7, #22]	@ movhi
  91:./Library/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
  50              		.loc 1 91 12
  51 0010 0023     		movs	r3, #0
  52 0012 FB66     		str	r3, [r7, #108]
  92:./Library/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
  53              		.loc 1 92 17
  54 0014 0023     		movs	r3, #0
  55 0016 3B61     		str	r3, [r7, #16]
  93:./Library/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
  56              		.loc 1 93 12
  57 0018 0023     		movs	r3, #0
  58 001a 3B66     		str	r3, [r7, #96]
  94:./Library/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
  59              		.loc 1 94 15
  60 001c 0123     		movs	r3, #1
  61 001e 87F86B30 		strb	r3, [r7, #107]
  95:./Library/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 95 12
  63 0022 FB68     		ldr	r3, [r7, #12]
  64 0024 7B66     		str	r3, [r7, #100]
  96:./Library/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
  65              		.loc 1 96 12
  66 0026 7B68     		ldr	r3, [r7, #4]
  67 0028 FB65     		str	r3, [r7, #92]
  97:./Library/stm32f4xx_hash_sha1.c **** 
  98:./Library/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
  99:./Library/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  68              		.loc 1 99 19
  69 002a BB68     		ldr	r3, [r7, #8]
  70 002c 9BB2     		uxth	r3, r3
  71 002e 03F00303 		and	r3, r3, #3
  72 0032 9BB2     		uxth	r3, r3
  73 0034 DB00     		lsls	r3, r3, #3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 4


  74 0036 9BB2     		uxth	r3, r3
  75 0038 FB82     		strh	r3, [r7, #22]	@ movhi
 100:./Library/stm32f4xx_hash_sha1.c **** 
 101:./Library/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 102:./Library/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
  76              		.loc 1 102 3
  77 003a FFF7FEFF 		bl	HASH_DeInit
 103:./Library/stm32f4xx_hash_sha1.c **** 
 104:./Library/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 105:./Library/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  78              		.loc 1 105 46
  79 003e 0023     		movs	r3, #0
  80 0040 BB63     		str	r3, [r7, #56]
 106:./Library/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  81              		.loc 1 106 41
  82 0042 0023     		movs	r3, #0
  83 0044 FB63     		str	r3, [r7, #60]
 107:./Library/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  84              		.loc 1 107 41
  85 0046 2023     		movs	r3, #32
  86 0048 3B64     		str	r3, [r7, #64]
 108:./Library/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
  87              		.loc 1 108 3
  88 004a 07F13803 		add	r3, r7, #56
  89 004e 1846     		mov	r0, r3
  90 0050 FFF7FEFF 		bl	HASH_Init
 109:./Library/stm32f4xx_hash_sha1.c **** 
 110:./Library/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the data */
 111:./Library/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  91              		.loc 1 111 3
  92 0054 FB8A     		ldrh	r3, [r7, #22]	@ movhi
  93 0056 9BB2     		uxth	r3, r3
  94 0058 1846     		mov	r0, r3
  95 005a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 112:./Library/stm32f4xx_hash_sha1.c **** 
 113:./Library/stm32f4xx_hash_sha1.c ****   /* Write the Input block in the IN FIFO */
 114:./Library/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  96              		.loc 1 114 8
  97 005e 0023     		movs	r3, #0
  98 0060 FB66     		str	r3, [r7, #108]
  99              		.loc 1 114 3
 100 0062 0AE0     		b	.L2
 101              	.L3:
 115:./Library/stm32f4xx_hash_sha1.c ****   {
 116:./Library/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
 102              		.loc 1 116 18 discriminator 3
 103 0064 7B6E     		ldr	r3, [r7, #100]
 104              		.loc 1 116 5 discriminator 3
 105 0066 1B68     		ldr	r3, [r3]
 106 0068 1846     		mov	r0, r3
 107 006a FFF7FEFF 		bl	HASH_DataIn
 117:./Library/stm32f4xx_hash_sha1.c ****     inputaddr+=4;
 108              		.loc 1 117 14 discriminator 3
 109 006e 7B6E     		ldr	r3, [r7, #100]
 110 0070 0433     		adds	r3, r3, #4
 111 0072 7B66     		str	r3, [r7, #100]
 114:./Library/stm32f4xx_hash_sha1.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 5


 112              		.loc 1 114 21 discriminator 3
 113 0074 FB6E     		ldr	r3, [r7, #108]
 114 0076 0433     		adds	r3, r3, #4
 115 0078 FB66     		str	r3, [r7, #108]
 116              	.L2:
 114:./Library/stm32f4xx_hash_sha1.c ****   {
 117              		.loc 1 114 3 discriminator 1
 118 007a FA6E     		ldr	r2, [r7, #108]
 119 007c BB68     		ldr	r3, [r7, #8]
 120 007e 9A42     		cmp	r2, r3
 121 0080 F0D3     		bcc	.L3
 118:./Library/stm32f4xx_hash_sha1.c ****   }
 119:./Library/stm32f4xx_hash_sha1.c **** 
 120:./Library/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 121:./Library/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 122              		.loc 1 121 3
 123 0082 FFF7FEFF 		bl	HASH_StartDigest
 124              	.L5:
 122:./Library/stm32f4xx_hash_sha1.c **** 
 123:./Library/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 124:./Library/stm32f4xx_hash_sha1.c ****   do
 125:./Library/stm32f4xx_hash_sha1.c ****   {
 126:./Library/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 125              		.loc 1 126 18 discriminator 2
 126 0086 0820     		movs	r0, #8
 127 0088 FFF7FEFF 		bl	HASH_GetFlagStatus
 128 008c 0346     		mov	r3, r0
 129              		.loc 1 126 16 discriminator 2
 130 008e 3B66     		str	r3, [r7, #96]
 127:./Library/stm32f4xx_hash_sha1.c ****     counter++;
 131              		.loc 1 127 12 discriminator 2
 132 0090 3B69     		ldr	r3, [r7, #16]
 133 0092 0133     		adds	r3, r3, #1
 134 0094 3B61     		str	r3, [r7, #16]
 128:./Library/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 135              		.loc 1 128 20 discriminator 2
 136 0096 3B69     		ldr	r3, [r7, #16]
 137              		.loc 1 128 3 discriminator 2
 138 0098 B3F5803F 		cmp	r3, #65536
 139 009c 02D0     		beq	.L4
 140              		.loc 1 128 41 discriminator 1
 141 009e 3B6E     		ldr	r3, [r7, #96]
 142 00a0 002B     		cmp	r3, #0
 143 00a2 F0D1     		bne	.L5
 144              	.L4:
 129:./Library/stm32f4xx_hash_sha1.c **** 
 130:./Library/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 145              		.loc 1 130 6
 146 00a4 3B6E     		ldr	r3, [r7, #96]
 147 00a6 002B     		cmp	r3, #0
 148 00a8 03D0     		beq	.L6
 131:./Library/stm32f4xx_hash_sha1.c ****   {
 132:./Library/stm32f4xx_hash_sha1.c ****      status = ERROR;
 149              		.loc 1 132 13
 150 00aa 0023     		movs	r3, #0
 151 00ac 87F86B30 		strb	r3, [r7, #107]
 152 00b0 2EE0     		b	.L7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 6


 153              	.L6:
 133:./Library/stm32f4xx_hash_sha1.c ****   }
 134:./Library/stm32f4xx_hash_sha1.c ****   else
 135:./Library/stm32f4xx_hash_sha1.c ****   {
 136:./Library/stm32f4xx_hash_sha1.c ****     /* Read the message digest */
 137:./Library/stm32f4xx_hash_sha1.c ****     HASH_GetDigest(&SHA1_MessageDigest);
 154              		.loc 1 137 5
 155 00b2 07F11803 		add	r3, r7, #24
 156 00b6 1846     		mov	r0, r3
 157 00b8 FFF7FEFF 		bl	HASH_GetDigest
 138:./Library/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 158              		.loc 1 138 33
 159 00bc BA69     		ldr	r2, [r7, #24]
 160              		.loc 1 138 6
 161 00be FB6D     		ldr	r3, [r7, #92]
 162 00c0 BA64     		str	r2, [r7, #72]
 163              	.LBB22:
 164              	.LBB23:
 165              		.file 2 "./CORE/core_cmInstr.h"
   1:./CORE/core_cmInstr.h **** /**************************************************************************//**
   2:./CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./CORE/core_cmInstr.h ****  * @version  V4.10
   5:./CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:./CORE/core_cmInstr.h ****  *
   7:./CORE/core_cmInstr.h ****  * @note
   8:./CORE/core_cmInstr.h ****  *
   9:./CORE/core_cmInstr.h ****  ******************************************************************************/
  10:./CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./CORE/core_cmInstr.h **** 
  12:./CORE/core_cmInstr.h ****    All rights reserved.
  13:./CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./CORE/core_cmInstr.h ****      specific prior written permission.
  23:./CORE/core_cmInstr.h ****    *
  24:./CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./CORE/core_cmInstr.h **** 
  37:./CORE/core_cmInstr.h **** 
  38:./CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 7


  39:./CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./CORE/core_cmInstr.h **** 
  41:./CORE/core_cmInstr.h **** 
  42:./CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:./CORE/core_cmInstr.h ****   @{
  46:./CORE/core_cmInstr.h **** */
  47:./CORE/core_cmInstr.h **** 
  48:./CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./CORE/core_cmInstr.h **** 
  51:./CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./CORE/core_cmInstr.h **** #endif
  54:./CORE/core_cmInstr.h **** 
  55:./CORE/core_cmInstr.h **** 
  56:./CORE/core_cmInstr.h **** /** \brief  No Operation
  57:./CORE/core_cmInstr.h **** 
  58:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./CORE/core_cmInstr.h ****  */
  60:./CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:./CORE/core_cmInstr.h **** 
  62:./CORE/core_cmInstr.h **** 
  63:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./CORE/core_cmInstr.h **** 
  65:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:./CORE/core_cmInstr.h ****  */
  68:./CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:./CORE/core_cmInstr.h **** 
  70:./CORE/core_cmInstr.h **** 
  71:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:./CORE/core_cmInstr.h **** 
  73:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./CORE/core_cmInstr.h ****  */
  76:./CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:./CORE/core_cmInstr.h **** 
  78:./CORE/core_cmInstr.h **** 
  79:./CORE/core_cmInstr.h **** /** \brief  Send Event
  80:./CORE/core_cmInstr.h **** 
  81:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./CORE/core_cmInstr.h ****  */
  83:./CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:./CORE/core_cmInstr.h **** 
  85:./CORE/core_cmInstr.h **** 
  86:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./CORE/core_cmInstr.h **** 
  88:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./CORE/core_cmInstr.h ****  */
  92:./CORE/core_cmInstr.h **** #define __ISB() do {\
  93:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:./CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 8


  96:./CORE/core_cmInstr.h ****                 } while (0)
  97:./CORE/core_cmInstr.h **** 
  98:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:./CORE/core_cmInstr.h **** 
 100:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./CORE/core_cmInstr.h ****  */
 103:./CORE/core_cmInstr.h **** #define __DSB() do {\
 104:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:./CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:./CORE/core_cmInstr.h ****                 } while (0)
 108:./CORE/core_cmInstr.h **** 
 109:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./CORE/core_cmInstr.h **** 
 111:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./CORE/core_cmInstr.h ****  */
 114:./CORE/core_cmInstr.h **** #define __DMB() do {\
 115:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:./CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:./CORE/core_cmInstr.h ****                 } while (0)
 119:./CORE/core_cmInstr.h **** 
 120:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./CORE/core_cmInstr.h **** 
 122:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./CORE/core_cmInstr.h **** 
 124:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./CORE/core_cmInstr.h ****     \return               Reversed value
 126:./CORE/core_cmInstr.h ****  */
 127:./CORE/core_cmInstr.h **** #define __REV                             __rev
 128:./CORE/core_cmInstr.h **** 
 129:./CORE/core_cmInstr.h **** 
 130:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./CORE/core_cmInstr.h **** 
 132:./CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./CORE/core_cmInstr.h **** 
 134:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./CORE/core_cmInstr.h ****     \return               Reversed value
 136:./CORE/core_cmInstr.h ****  */
 137:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./CORE/core_cmInstr.h **** {
 140:./CORE/core_cmInstr.h ****   rev16 r0, r0
 141:./CORE/core_cmInstr.h ****   bx lr
 142:./CORE/core_cmInstr.h **** }
 143:./CORE/core_cmInstr.h **** #endif
 144:./CORE/core_cmInstr.h **** 
 145:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./CORE/core_cmInstr.h **** 
 147:./CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./CORE/core_cmInstr.h **** 
 149:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./CORE/core_cmInstr.h ****     \return               Reversed value
 151:./CORE/core_cmInstr.h ****  */
 152:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 9


 153:./CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./CORE/core_cmInstr.h **** {
 155:./CORE/core_cmInstr.h ****   revsh r0, r0
 156:./CORE/core_cmInstr.h ****   bx lr
 157:./CORE/core_cmInstr.h **** }
 158:./CORE/core_cmInstr.h **** #endif
 159:./CORE/core_cmInstr.h **** 
 160:./CORE/core_cmInstr.h **** 
 161:./CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./CORE/core_cmInstr.h **** 
 163:./CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./CORE/core_cmInstr.h **** 
 165:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./CORE/core_cmInstr.h ****     \return               Rotated value
 168:./CORE/core_cmInstr.h ****  */
 169:./CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:./CORE/core_cmInstr.h **** 
 171:./CORE/core_cmInstr.h **** 
 172:./CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:./CORE/core_cmInstr.h **** 
 174:./CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:./CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:./CORE/core_cmInstr.h **** 
 177:./CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./CORE/core_cmInstr.h ****  */
 180:./CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./CORE/core_cmInstr.h **** 
 182:./CORE/core_cmInstr.h **** 
 183:./CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./CORE/core_cmInstr.h **** 
 185:./CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./CORE/core_cmInstr.h **** 
 187:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./CORE/core_cmInstr.h ****     \return               Reversed value
 189:./CORE/core_cmInstr.h ****  */
 190:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./CORE/core_cmInstr.h **** #else
 193:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./CORE/core_cmInstr.h **** {
 195:./CORE/core_cmInstr.h ****   uint32_t result;
 196:./CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./CORE/core_cmInstr.h **** 
 198:./CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./CORE/core_cmInstr.h ****   {
 201:./CORE/core_cmInstr.h ****     result <<= 1;
 202:./CORE/core_cmInstr.h ****     result |= value & 1;
 203:./CORE/core_cmInstr.h ****     s--;
 204:./CORE/core_cmInstr.h ****   }
 205:./CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./CORE/core_cmInstr.h ****   return(result);
 207:./CORE/core_cmInstr.h **** }
 208:./CORE/core_cmInstr.h **** #endif
 209:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 10


 210:./CORE/core_cmInstr.h **** 
 211:./CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:./CORE/core_cmInstr.h **** 
 213:./CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./CORE/core_cmInstr.h **** 
 215:./CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./CORE/core_cmInstr.h ****  */
 218:./CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:./CORE/core_cmInstr.h **** 
 220:./CORE/core_cmInstr.h **** 
 221:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./CORE/core_cmInstr.h **** 
 223:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./CORE/core_cmInstr.h **** 
 225:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./CORE/core_cmInstr.h **** 
 227:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:./CORE/core_cmInstr.h ****  */
 230:./CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./CORE/core_cmInstr.h **** 
 232:./CORE/core_cmInstr.h **** 
 233:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./CORE/core_cmInstr.h **** 
 235:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./CORE/core_cmInstr.h **** 
 237:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./CORE/core_cmInstr.h ****  */
 240:./CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./CORE/core_cmInstr.h **** 
 242:./CORE/core_cmInstr.h **** 
 243:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./CORE/core_cmInstr.h **** 
 245:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./CORE/core_cmInstr.h **** 
 247:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./CORE/core_cmInstr.h ****  */
 250:./CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./CORE/core_cmInstr.h **** 
 252:./CORE/core_cmInstr.h **** 
 253:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./CORE/core_cmInstr.h **** 
 255:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./CORE/core_cmInstr.h **** 
 257:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:./CORE/core_cmInstr.h ****     \return          1  Function failed
 261:./CORE/core_cmInstr.h ****  */
 262:./CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./CORE/core_cmInstr.h **** 
 264:./CORE/core_cmInstr.h **** 
 265:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 11


 267:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./CORE/core_cmInstr.h **** 
 269:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:./CORE/core_cmInstr.h ****     \return          1  Function failed
 273:./CORE/core_cmInstr.h ****  */
 274:./CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./CORE/core_cmInstr.h **** 
 276:./CORE/core_cmInstr.h **** 
 277:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./CORE/core_cmInstr.h **** 
 279:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./CORE/core_cmInstr.h **** 
 281:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:./CORE/core_cmInstr.h ****     \return          1  Function failed
 285:./CORE/core_cmInstr.h ****  */
 286:./CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:./CORE/core_cmInstr.h **** 
 288:./CORE/core_cmInstr.h **** 
 289:./CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:./CORE/core_cmInstr.h **** 
 291:./CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./CORE/core_cmInstr.h **** 
 293:./CORE/core_cmInstr.h ****  */
 294:./CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./CORE/core_cmInstr.h **** 
 296:./CORE/core_cmInstr.h **** 
 297:./CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./CORE/core_cmInstr.h **** 
 299:./CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:./CORE/core_cmInstr.h **** 
 301:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./CORE/core_cmInstr.h ****     \return             Saturated value
 304:./CORE/core_cmInstr.h ****  */
 305:./CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./CORE/core_cmInstr.h **** 
 307:./CORE/core_cmInstr.h **** 
 308:./CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./CORE/core_cmInstr.h **** 
 310:./CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./CORE/core_cmInstr.h **** 
 312:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./CORE/core_cmInstr.h ****     \return             Saturated value
 315:./CORE/core_cmInstr.h ****  */
 316:./CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:./CORE/core_cmInstr.h **** 
 318:./CORE/core_cmInstr.h **** 
 319:./CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./CORE/core_cmInstr.h **** 
 321:./CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 12


 324:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./CORE/core_cmInstr.h ****     \return               Rotated value
 326:./CORE/core_cmInstr.h ****  */
 327:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./CORE/core_cmInstr.h **** {
 330:./CORE/core_cmInstr.h ****   rrx r0, r0
 331:./CORE/core_cmInstr.h ****   bx lr
 332:./CORE/core_cmInstr.h **** }
 333:./CORE/core_cmInstr.h **** #endif
 334:./CORE/core_cmInstr.h **** 
 335:./CORE/core_cmInstr.h **** 
 336:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./CORE/core_cmInstr.h **** 
 338:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./CORE/core_cmInstr.h **** 
 340:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./CORE/core_cmInstr.h ****  */
 343:./CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:./CORE/core_cmInstr.h **** 
 345:./CORE/core_cmInstr.h **** 
 346:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:./CORE/core_cmInstr.h **** 
 348:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./CORE/core_cmInstr.h **** 
 350:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./CORE/core_cmInstr.h ****  */
 353:./CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./CORE/core_cmInstr.h **** 
 355:./CORE/core_cmInstr.h **** 
 356:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./CORE/core_cmInstr.h **** 
 358:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./CORE/core_cmInstr.h **** 
 360:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./CORE/core_cmInstr.h ****  */
 363:./CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./CORE/core_cmInstr.h **** 
 365:./CORE/core_cmInstr.h **** 
 366:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./CORE/core_cmInstr.h **** 
 368:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./CORE/core_cmInstr.h **** 
 370:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./CORE/core_cmInstr.h ****  */
 373:./CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./CORE/core_cmInstr.h **** 
 375:./CORE/core_cmInstr.h **** 
 376:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./CORE/core_cmInstr.h **** 
 378:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./CORE/core_cmInstr.h **** 
 380:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 13


 381:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./CORE/core_cmInstr.h ****  */
 383:./CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:./CORE/core_cmInstr.h **** 
 385:./CORE/core_cmInstr.h **** 
 386:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./CORE/core_cmInstr.h **** 
 388:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./CORE/core_cmInstr.h **** 
 390:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./CORE/core_cmInstr.h ****  */
 393:./CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./CORE/core_cmInstr.h **** 
 395:./CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./CORE/core_cmInstr.h **** 
 397:./CORE/core_cmInstr.h **** 
 398:./CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:./CORE/core_cmInstr.h **** 
 401:./CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:./CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:./CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./CORE/core_cmInstr.h **** #else
 408:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./CORE/core_cmInstr.h **** #endif
 411:./CORE/core_cmInstr.h **** 
 412:./CORE/core_cmInstr.h **** /** \brief  No Operation
 413:./CORE/core_cmInstr.h **** 
 414:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./CORE/core_cmInstr.h ****  */
 416:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./CORE/core_cmInstr.h **** {
 418:./CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./CORE/core_cmInstr.h **** }
 420:./CORE/core_cmInstr.h **** 
 421:./CORE/core_cmInstr.h **** 
 422:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./CORE/core_cmInstr.h **** 
 424:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:./CORE/core_cmInstr.h ****  */
 427:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./CORE/core_cmInstr.h **** {
 429:./CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./CORE/core_cmInstr.h **** }
 431:./CORE/core_cmInstr.h **** 
 432:./CORE/core_cmInstr.h **** 
 433:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:./CORE/core_cmInstr.h **** 
 435:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:./CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 14


 438:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./CORE/core_cmInstr.h **** {
 440:./CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:./CORE/core_cmInstr.h **** }
 442:./CORE/core_cmInstr.h **** 
 443:./CORE/core_cmInstr.h **** 
 444:./CORE/core_cmInstr.h **** /** \brief  Send Event
 445:./CORE/core_cmInstr.h **** 
 446:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./CORE/core_cmInstr.h ****  */
 448:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./CORE/core_cmInstr.h **** {
 450:./CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./CORE/core_cmInstr.h **** }
 452:./CORE/core_cmInstr.h **** 
 453:./CORE/core_cmInstr.h **** 
 454:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./CORE/core_cmInstr.h **** 
 456:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./CORE/core_cmInstr.h ****  */
 460:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:./CORE/core_cmInstr.h **** {
 462:./CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./CORE/core_cmInstr.h **** }
 464:./CORE/core_cmInstr.h **** 
 465:./CORE/core_cmInstr.h **** 
 466:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./CORE/core_cmInstr.h **** 
 468:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./CORE/core_cmInstr.h ****  */
 471:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./CORE/core_cmInstr.h **** {
 473:./CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./CORE/core_cmInstr.h **** }
 475:./CORE/core_cmInstr.h **** 
 476:./CORE/core_cmInstr.h **** 
 477:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./CORE/core_cmInstr.h **** 
 479:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./CORE/core_cmInstr.h ****  */
 482:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./CORE/core_cmInstr.h **** {
 484:./CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./CORE/core_cmInstr.h **** }
 486:./CORE/core_cmInstr.h **** 
 487:./CORE/core_cmInstr.h **** 
 488:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./CORE/core_cmInstr.h **** 
 490:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./CORE/core_cmInstr.h **** 
 492:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./CORE/core_cmInstr.h ****     \return               Reversed value
 494:./CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 15


 495:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./CORE/core_cmInstr.h **** {
 497:./CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:./CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 166              		.loc 2 498 10
 167 00c2 BA6C     		ldr	r2, [r7, #72]
 168 00c4 12BA     		rev	r2, r2
 169              	.LBE23:
 170              	.LBE22:
 171              		.loc 1 138 31
 172 00c6 1A60     		str	r2, [r3]
 139:./Library/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 173              		.loc 1 139 15
 174 00c8 FB6D     		ldr	r3, [r7, #92]
 175 00ca 0433     		adds	r3, r3, #4
 176 00cc FB65     		str	r3, [r7, #92]
 140:./Library/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 177              		.loc 1 140 33
 178 00ce FA69     		ldr	r2, [r7, #28]
 179              		.loc 1 140 6
 180 00d0 FB6D     		ldr	r3, [r7, #92]
 181 00d2 FA64     		str	r2, [r7, #76]
 182              	.LBB24:
 183              	.LBB25:
 184              		.loc 2 498 10
 185 00d4 FA6C     		ldr	r2, [r7, #76]
 186 00d6 12BA     		rev	r2, r2
 187              	.LBE25:
 188              	.LBE24:
 189              		.loc 1 140 31
 190 00d8 1A60     		str	r2, [r3]
 141:./Library/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 191              		.loc 1 141 15
 192 00da FB6D     		ldr	r3, [r7, #92]
 193 00dc 0433     		adds	r3, r3, #4
 194 00de FB65     		str	r3, [r7, #92]
 142:./Library/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 195              		.loc 1 142 33
 196 00e0 3A6A     		ldr	r2, [r7, #32]
 197              		.loc 1 142 6
 198 00e2 FB6D     		ldr	r3, [r7, #92]
 199 00e4 3A65     		str	r2, [r7, #80]
 200              	.LBB26:
 201              	.LBB27:
 202              		.loc 2 498 10
 203 00e6 3A6D     		ldr	r2, [r7, #80]
 204 00e8 12BA     		rev	r2, r2
 205              	.LBE27:
 206              	.LBE26:
 207              		.loc 1 142 31
 208 00ea 1A60     		str	r2, [r3]
 143:./Library/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 209              		.loc 1 143 15
 210 00ec FB6D     		ldr	r3, [r7, #92]
 211 00ee 0433     		adds	r3, r3, #4
 212 00f0 FB65     		str	r3, [r7, #92]
 144:./Library/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 16


 213              		.loc 1 144 33
 214 00f2 7A6A     		ldr	r2, [r7, #36]
 215              		.loc 1 144 6
 216 00f4 FB6D     		ldr	r3, [r7, #92]
 217 00f6 7A65     		str	r2, [r7, #84]
 218              	.LBB28:
 219              	.LBB29:
 220              		.loc 2 498 10
 221 00f8 7A6D     		ldr	r2, [r7, #84]
 222 00fa 12BA     		rev	r2, r2
 223              	.LBE29:
 224              	.LBE28:
 225              		.loc 1 144 31
 226 00fc 1A60     		str	r2, [r3]
 145:./Library/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 227              		.loc 1 145 15
 228 00fe FB6D     		ldr	r3, [r7, #92]
 229 0100 0433     		adds	r3, r3, #4
 230 0102 FB65     		str	r3, [r7, #92]
 146:./Library/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 231              		.loc 1 146 33
 232 0104 BA6A     		ldr	r2, [r7, #40]
 233              		.loc 1 146 6
 234 0106 FB6D     		ldr	r3, [r7, #92]
 235 0108 BA65     		str	r2, [r7, #88]
 236              	.LBB30:
 237              	.LBB31:
 238              		.loc 2 498 10
 239 010a BA6D     		ldr	r2, [r7, #88]
 240 010c 12BA     		rev	r2, r2
 241              	.LBE31:
 242              	.LBE30:
 243              		.loc 1 146 31
 244 010e 1A60     		str	r2, [r3]
 245              	.L7:
 147:./Library/stm32f4xx_hash_sha1.c ****   }
 148:./Library/stm32f4xx_hash_sha1.c ****   return status;
 246              		.loc 1 148 10
 247 0110 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 149:./Library/stm32f4xx_hash_sha1.c **** }
 248              		.loc 1 149 1
 249 0114 1846     		mov	r0, r3
 250 0116 7037     		adds	r7, r7, #112
 251              	.LCFI3:
 252              		.cfi_def_cfa_offset 8
 253 0118 BD46     		mov	sp, r7
 254              	.LCFI4:
 255              		.cfi_def_cfa_register 13
 256              		@ sp needed
 257 011a 80BD     		pop	{r7, pc}
 258              		.cfi_endproc
 259              	.LFE123:
 261              		.section	.text.HMAC_SHA1,"ax",%progbits
 262              		.align	1
 263              		.global	HMAC_SHA1
 264              		.syntax unified
 265              		.thumb
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 17


 266              		.thumb_func
 268              	HMAC_SHA1:
 269              	.LFB124:
 150:./Library/stm32f4xx_hash_sha1.c **** 
 151:./Library/stm32f4xx_hash_sha1.c **** /**
 152:./Library/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HMAC SHA1 digest.
 153:./Library/stm32f4xx_hash_sha1.c ****   * @param  Key: pointer to the Key used for HMAC.
 154:./Library/stm32f4xx_hash_sha1.c ****   * @param  Keylen: length of the Key used for HMAC.  
 155:./Library/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
 156:./Library/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
 157:./Library/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
 158:./Library/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
 159:./Library/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
 160:./Library/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
 161:./Library/stm32f4xx_hash_sha1.c ****   */
 162:./Library/stm32f4xx_hash_sha1.c **** ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
 163:./Library/stm32f4xx_hash_sha1.c ****                       uint32_t Ilen, uint8_t Output[20])
 164:./Library/stm32f4xx_hash_sha1.c **** {
 270              		.loc 1 164 1
 271              		.cfi_startproc
 272              		@ args = 4, pretend = 0, frame = 120
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274 0000 80B5     		push	{r7, lr}
 275              	.LCFI5:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279 0002 9EB0     		sub	sp, sp, #120
 280              	.LCFI6:
 281              		.cfi_def_cfa_offset 128
 282 0004 00AF     		add	r7, sp, #0
 283              	.LCFI7:
 284              		.cfi_def_cfa_register 7
 285 0006 F860     		str	r0, [r7, #12]
 286 0008 B960     		str	r1, [r7, #8]
 287 000a 7A60     		str	r2, [r7, #4]
 288 000c 3B60     		str	r3, [r7]
 165:./Library/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
 166:./Library/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
 167:./Library/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
 289              		.loc 1 167 17
 290 000e 0023     		movs	r3, #0
 291 0010 7B83     		strh	r3, [r7, #26]	@ movhi
 168:./Library/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitskey = 0;
 292              		.loc 1 168 17
 293 0012 0023     		movs	r3, #0
 294 0014 3B83     		strh	r3, [r7, #24]	@ movhi
 169:./Library/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
 295              		.loc 1 169 12
 296 0016 0023     		movs	r3, #0
 297 0018 7B67     		str	r3, [r7, #116]
 170:./Library/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
 298              		.loc 1 170 17
 299 001a 0023     		movs	r3, #0
 300 001c 7B61     		str	r3, [r7, #20]
 171:./Library/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
 301              		.loc 1 171 12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 18


 302 001e 0023     		movs	r3, #0
 303 0020 7B66     		str	r3, [r7, #100]
 172:./Library/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 304              		.loc 1 172 15
 305 0022 0123     		movs	r3, #1
 306 0024 87F87330 		strb	r3, [r7, #115]
 173:./Library/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 307              		.loc 1 173 12
 308 0028 FB68     		ldr	r3, [r7, #12]
 309 002a FB66     		str	r3, [r7, #108]
 174:./Library/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 310              		.loc 1 174 12
 311 002c 7B68     		ldr	r3, [r7, #4]
 312 002e BB66     		str	r3, [r7, #104]
 175:./Library/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
 313              		.loc 1 175 12
 314 0030 D7F88030 		ldr	r3, [r7, #128]
 315 0034 3B66     		str	r3, [r7, #96]
 176:./Library/stm32f4xx_hash_sha1.c **** 
 177:./Library/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 178:./Library/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 316              		.loc 1 178 19
 317 0036 3B68     		ldr	r3, [r7]
 318 0038 9BB2     		uxth	r3, r3
 319 003a 03F00303 		and	r3, r3, #3
 320 003e 9BB2     		uxth	r3, r3
 321 0040 DB00     		lsls	r3, r3, #3
 322 0042 9BB2     		uxth	r3, r3
 323 0044 7B83     		strh	r3, [r7, #26]	@ movhi
 179:./Library/stm32f4xx_hash_sha1.c **** 
 180:./Library/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Key */
 181:./Library/stm32f4xx_hash_sha1.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 324              		.loc 1 181 18
 325 0046 BB68     		ldr	r3, [r7, #8]
 326 0048 9BB2     		uxth	r3, r3
 327 004a 03F00303 		and	r3, r3, #3
 328 004e 9BB2     		uxth	r3, r3
 329 0050 DB00     		lsls	r3, r3, #3
 330 0052 9BB2     		uxth	r3, r3
 331 0054 3B83     		strh	r3, [r7, #24]	@ movhi
 182:./Library/stm32f4xx_hash_sha1.c **** 
 183:./Library/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 184:./Library/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
 332              		.loc 1 184 3
 333 0056 FFF7FEFF 		bl	HASH_DeInit
 185:./Library/stm32f4xx_hash_sha1.c **** 
 186:./Library/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 187:./Library/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 334              		.loc 1 187 46
 335 005a 0023     		movs	r3, #0
 336 005c FB63     		str	r3, [r7, #60]
 188:./Library/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 337              		.loc 1 188 41
 338 005e 4023     		movs	r3, #64
 339 0060 3B64     		str	r3, [r7, #64]
 189:./Library/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 340              		.loc 1 189 41
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 19


 341 0062 2023     		movs	r3, #32
 342 0064 7B64     		str	r3, [r7, #68]
 190:./Library/stm32f4xx_hash_sha1.c ****   if(Keylen > 64)
 343              		.loc 1 190 5
 344 0066 BB68     		ldr	r3, [r7, #8]
 345 0068 402B     		cmp	r3, #64
 346 006a 03D9     		bls	.L15
 191:./Library/stm32f4xx_hash_sha1.c ****   {
 192:./Library/stm32f4xx_hash_sha1.c ****     /* HMAC long Key */
 193:./Library/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 347              		.loc 1 193 46
 348 006c 4FF48033 		mov	r3, #65536
 349 0070 BB64     		str	r3, [r7, #72]
 350 0072 01E0     		b	.L16
 351              	.L15:
 194:./Library/stm32f4xx_hash_sha1.c ****   }
 195:./Library/stm32f4xx_hash_sha1.c ****   else
 196:./Library/stm32f4xx_hash_sha1.c ****   {
 197:./Library/stm32f4xx_hash_sha1.c ****     /* HMAC short Key */
 198:./Library/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 352              		.loc 1 198 46
 353 0074 0023     		movs	r3, #0
 354 0076 BB64     		str	r3, [r7, #72]
 355              	.L16:
 199:./Library/stm32f4xx_hash_sha1.c ****   }
 200:./Library/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
 356              		.loc 1 200 3
 357 0078 07F13C03 		add	r3, r7, #60
 358 007c 1846     		mov	r0, r3
 359 007e FFF7FEFF 		bl	HASH_Init
 201:./Library/stm32f4xx_hash_sha1.c **** 
 202:./Library/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the Key */
 203:./Library/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 360              		.loc 1 203 3
 361 0082 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 362 0084 9BB2     		uxth	r3, r3
 363 0086 1846     		mov	r0, r3
 364 0088 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 204:./Library/stm32f4xx_hash_sha1.c **** 
 205:./Library/stm32f4xx_hash_sha1.c ****   /* Write the Key */
 206:./Library/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 365              		.loc 1 206 8
 366 008c 0023     		movs	r3, #0
 367 008e 7B67     		str	r3, [r7, #116]
 368              		.loc 1 206 3
 369 0090 0AE0     		b	.L17
 370              	.L18:
 207:./Library/stm32f4xx_hash_sha1.c ****   {
 208:./Library/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 371              		.loc 1 208 18 discriminator 3
 372 0092 FB6E     		ldr	r3, [r7, #108]
 373              		.loc 1 208 5 discriminator 3
 374 0094 1B68     		ldr	r3, [r3]
 375 0096 1846     		mov	r0, r3
 376 0098 FFF7FEFF 		bl	HASH_DataIn
 209:./Library/stm32f4xx_hash_sha1.c ****     keyaddr+=4;
 377              		.loc 1 209 12 discriminator 3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 20


 378 009c FB6E     		ldr	r3, [r7, #108]
 379 009e 0433     		adds	r3, r3, #4
 380 00a0 FB66     		str	r3, [r7, #108]
 206:./Library/stm32f4xx_hash_sha1.c ****   {
 381              		.loc 1 206 23 discriminator 3
 382 00a2 7B6F     		ldr	r3, [r7, #116]
 383 00a4 0433     		adds	r3, r3, #4
 384 00a6 7B67     		str	r3, [r7, #116]
 385              	.L17:
 206:./Library/stm32f4xx_hash_sha1.c ****   {
 386              		.loc 1 206 3 discriminator 1
 387 00a8 7A6F     		ldr	r2, [r7, #116]
 388 00aa BB68     		ldr	r3, [r7, #8]
 389 00ac 9A42     		cmp	r2, r3
 390 00ae F0D3     		bcc	.L18
 210:./Library/stm32f4xx_hash_sha1.c ****   }
 211:./Library/stm32f4xx_hash_sha1.c **** 
 212:./Library/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 213:./Library/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 391              		.loc 1 213 3
 392 00b0 FFF7FEFF 		bl	HASH_StartDigest
 393              	.L20:
 214:./Library/stm32f4xx_hash_sha1.c **** 
 215:./Library/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 216:./Library/stm32f4xx_hash_sha1.c ****   do
 217:./Library/stm32f4xx_hash_sha1.c ****   {
 218:./Library/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 394              		.loc 1 218 18 discriminator 2
 395 00b4 0820     		movs	r0, #8
 396 00b6 FFF7FEFF 		bl	HASH_GetFlagStatus
 397 00ba 0346     		mov	r3, r0
 398              		.loc 1 218 16 discriminator 2
 399 00bc 7B66     		str	r3, [r7, #100]
 219:./Library/stm32f4xx_hash_sha1.c ****     counter++;
 400              		.loc 1 219 12 discriminator 2
 401 00be 7B69     		ldr	r3, [r7, #20]
 402 00c0 0133     		adds	r3, r3, #1
 403 00c2 7B61     		str	r3, [r7, #20]
 220:./Library/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 404              		.loc 1 220 20 discriminator 2
 405 00c4 7B69     		ldr	r3, [r7, #20]
 406              		.loc 1 220 3 discriminator 2
 407 00c6 B3F5803F 		cmp	r3, #65536
 408 00ca 02D0     		beq	.L19
 409              		.loc 1 220 41 discriminator 1
 410 00cc 7B6E     		ldr	r3, [r7, #100]
 411 00ce 002B     		cmp	r3, #0
 412 00d0 F0D1     		bne	.L20
 413              	.L19:
 221:./Library/stm32f4xx_hash_sha1.c **** 
 222:./Library/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 414              		.loc 1 222 6
 415 00d2 7B6E     		ldr	r3, [r7, #100]
 416 00d4 002B     		cmp	r3, #0
 417 00d6 03D0     		beq	.L21
 223:./Library/stm32f4xx_hash_sha1.c ****   {
 224:./Library/stm32f4xx_hash_sha1.c ****      status = ERROR;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 21


 418              		.loc 1 224 13
 419 00d8 0023     		movs	r3, #0
 420 00da 87F87330 		strb	r3, [r7, #115]
 421 00de 92E0     		b	.L22
 422              	.L21:
 225:./Library/stm32f4xx_hash_sha1.c ****   }
 226:./Library/stm32f4xx_hash_sha1.c ****   else
 227:./Library/stm32f4xx_hash_sha1.c ****   {
 228:./Library/stm32f4xx_hash_sha1.c ****     /* Configure the number of valid bits in last word of the Input data */
 229:./Library/stm32f4xx_hash_sha1.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 423              		.loc 1 229 5
 424 00e0 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 425 00e2 9BB2     		uxth	r3, r3
 426 00e4 1846     		mov	r0, r3
 427 00e6 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 230:./Library/stm32f4xx_hash_sha1.c **** 
 231:./Library/stm32f4xx_hash_sha1.c ****     /* Write the Input block in the IN FIFO */
 232:./Library/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 428              		.loc 1 232 10
 429 00ea 0023     		movs	r3, #0
 430 00ec 7B67     		str	r3, [r7, #116]
 431              		.loc 1 232 5
 432 00ee 0AE0     		b	.L23
 433              	.L24:
 233:./Library/stm32f4xx_hash_sha1.c ****     {
 234:./Library/stm32f4xx_hash_sha1.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 434              		.loc 1 234 20 discriminator 3
 435 00f0 BB6E     		ldr	r3, [r7, #104]
 436              		.loc 1 234 7 discriminator 3
 437 00f2 1B68     		ldr	r3, [r3]
 438 00f4 1846     		mov	r0, r3
 439 00f6 FFF7FEFF 		bl	HASH_DataIn
 235:./Library/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 440              		.loc 1 235 16 discriminator 3
 441 00fa BB6E     		ldr	r3, [r7, #104]
 442 00fc 0433     		adds	r3, r3, #4
 443 00fe BB66     		str	r3, [r7, #104]
 232:./Library/stm32f4xx_hash_sha1.c ****     {
 444              		.loc 1 232 23 discriminator 3
 445 0100 7B6F     		ldr	r3, [r7, #116]
 446 0102 0433     		adds	r3, r3, #4
 447 0104 7B67     		str	r3, [r7, #116]
 448              	.L23:
 232:./Library/stm32f4xx_hash_sha1.c ****     {
 449              		.loc 1 232 5 discriminator 1
 450 0106 7A6F     		ldr	r2, [r7, #116]
 451 0108 3B68     		ldr	r3, [r7]
 452 010a 9A42     		cmp	r2, r3
 453 010c F0D3     		bcc	.L24
 236:./Library/stm32f4xx_hash_sha1.c ****     }
 237:./Library/stm32f4xx_hash_sha1.c **** 
 238:./Library/stm32f4xx_hash_sha1.c ****     /* Start the HASH processor */
 239:./Library/stm32f4xx_hash_sha1.c ****     HASH_StartDigest();
 454              		.loc 1 239 5
 455 010e FFF7FEFF 		bl	HASH_StartDigest
 240:./Library/stm32f4xx_hash_sha1.c **** 
 241:./Library/stm32f4xx_hash_sha1.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 22


 242:./Library/stm32f4xx_hash_sha1.c ****     /* wait until the Busy flag is RESET */
 243:./Library/stm32f4xx_hash_sha1.c ****     counter =0;
 456              		.loc 1 243 13
 457 0112 0023     		movs	r3, #0
 458 0114 7B61     		str	r3, [r7, #20]
 459              	.L26:
 244:./Library/stm32f4xx_hash_sha1.c ****     do
 245:./Library/stm32f4xx_hash_sha1.c ****     {
 246:./Library/stm32f4xx_hash_sha1.c ****       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 460              		.loc 1 246 20 discriminator 2
 461 0116 0820     		movs	r0, #8
 462 0118 FFF7FEFF 		bl	HASH_GetFlagStatus
 463 011c 0346     		mov	r3, r0
 464              		.loc 1 246 18 discriminator 2
 465 011e 7B66     		str	r3, [r7, #100]
 247:./Library/stm32f4xx_hash_sha1.c ****       counter++;
 466              		.loc 1 247 14 discriminator 2
 467 0120 7B69     		ldr	r3, [r7, #20]
 468 0122 0133     		adds	r3, r3, #1
 469 0124 7B61     		str	r3, [r7, #20]
 248:./Library/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 470              		.loc 1 248 22 discriminator 2
 471 0126 7B69     		ldr	r3, [r7, #20]
 472              		.loc 1 248 5 discriminator 2
 473 0128 B3F5803F 		cmp	r3, #65536
 474 012c 02D0     		beq	.L25
 475              		.loc 1 248 43 discriminator 1
 476 012e 7B6E     		ldr	r3, [r7, #100]
 477 0130 002B     		cmp	r3, #0
 478 0132 F0D1     		bne	.L26
 479              	.L25:
 249:./Library/stm32f4xx_hash_sha1.c **** 
 250:./Library/stm32f4xx_hash_sha1.c ****     if (busystatus != RESET)
 480              		.loc 1 250 8
 481 0134 7B6E     		ldr	r3, [r7, #100]
 482 0136 002B     		cmp	r3, #0
 483 0138 03D0     		beq	.L27
 251:./Library/stm32f4xx_hash_sha1.c ****     {
 252:./Library/stm32f4xx_hash_sha1.c ****       status = ERROR;
 484              		.loc 1 252 14
 485 013a 0023     		movs	r3, #0
 486 013c 87F87330 		strb	r3, [r7, #115]
 487 0140 61E0     		b	.L22
 488              	.L27:
 253:./Library/stm32f4xx_hash_sha1.c ****     }
 254:./Library/stm32f4xx_hash_sha1.c ****     else
 255:./Library/stm32f4xx_hash_sha1.c ****     {  
 256:./Library/stm32f4xx_hash_sha1.c ****       /* Configure the number of valid bits in last word of the Key */
 257:./Library/stm32f4xx_hash_sha1.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 489              		.loc 1 257 7
 490 0142 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 491 0144 9BB2     		uxth	r3, r3
 492 0146 1846     		mov	r0, r3
 493 0148 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 258:./Library/stm32f4xx_hash_sha1.c **** 
 259:./Library/stm32f4xx_hash_sha1.c ****       /* Write the Key */
 260:./Library/stm32f4xx_hash_sha1.c ****       keyaddr = (uint32_t)Key;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 23


 494              		.loc 1 260 15
 495 014c FB68     		ldr	r3, [r7, #12]
 496 014e FB66     		str	r3, [r7, #108]
 261:./Library/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 497              		.loc 1 261 12
 498 0150 0023     		movs	r3, #0
 499 0152 7B67     		str	r3, [r7, #116]
 500              		.loc 1 261 7
 501 0154 0AE0     		b	.L28
 502              	.L29:
 262:./Library/stm32f4xx_hash_sha1.c ****       {
 263:./Library/stm32f4xx_hash_sha1.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 503              		.loc 1 263 22 discriminator 3
 504 0156 FB6E     		ldr	r3, [r7, #108]
 505              		.loc 1 263 9 discriminator 3
 506 0158 1B68     		ldr	r3, [r3]
 507 015a 1846     		mov	r0, r3
 508 015c FFF7FEFF 		bl	HASH_DataIn
 264:./Library/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 509              		.loc 1 264 16 discriminator 3
 510 0160 FB6E     		ldr	r3, [r7, #108]
 511 0162 0433     		adds	r3, r3, #4
 512 0164 FB66     		str	r3, [r7, #108]
 261:./Library/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 513              		.loc 1 261 27 discriminator 3
 514 0166 7B6F     		ldr	r3, [r7, #116]
 515 0168 0433     		adds	r3, r3, #4
 516 016a 7B67     		str	r3, [r7, #116]
 517              	.L28:
 261:./Library/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 518              		.loc 1 261 7 discriminator 1
 519 016c 7A6F     		ldr	r2, [r7, #116]
 520 016e BB68     		ldr	r3, [r7, #8]
 521 0170 9A42     		cmp	r2, r3
 522 0172 F0D3     		bcc	.L29
 265:./Library/stm32f4xx_hash_sha1.c ****       }
 266:./Library/stm32f4xx_hash_sha1.c **** 
 267:./Library/stm32f4xx_hash_sha1.c ****       /* Start the HASH processor */
 268:./Library/stm32f4xx_hash_sha1.c ****       HASH_StartDigest();
 523              		.loc 1 268 7
 524 0174 FFF7FEFF 		bl	HASH_StartDigest
 269:./Library/stm32f4xx_hash_sha1.c **** 
 270:./Library/stm32f4xx_hash_sha1.c ****       /* wait until the Busy flag is RESET */
 271:./Library/stm32f4xx_hash_sha1.c ****       counter =0;
 525              		.loc 1 271 15
 526 0178 0023     		movs	r3, #0
 527 017a 7B61     		str	r3, [r7, #20]
 528              	.L31:
 272:./Library/stm32f4xx_hash_sha1.c ****       do
 273:./Library/stm32f4xx_hash_sha1.c ****       {
 274:./Library/stm32f4xx_hash_sha1.c ****         busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 529              		.loc 1 274 22 discriminator 2
 530 017c 0820     		movs	r0, #8
 531 017e FFF7FEFF 		bl	HASH_GetFlagStatus
 532 0182 0346     		mov	r3, r0
 533              		.loc 1 274 20 discriminator 2
 534 0184 7B66     		str	r3, [r7, #100]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 24


 275:./Library/stm32f4xx_hash_sha1.c ****         counter++;
 535              		.loc 1 275 16 discriminator 2
 536 0186 7B69     		ldr	r3, [r7, #20]
 537 0188 0133     		adds	r3, r3, #1
 538 018a 7B61     		str	r3, [r7, #20]
 276:./Library/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 539              		.loc 1 276 24 discriminator 2
 540 018c 7B69     		ldr	r3, [r7, #20]
 541              		.loc 1 276 7 discriminator 2
 542 018e B3F5803F 		cmp	r3, #65536
 543 0192 02D0     		beq	.L30
 544              		.loc 1 276 45 discriminator 1
 545 0194 7B6E     		ldr	r3, [r7, #100]
 546 0196 002B     		cmp	r3, #0
 547 0198 F0D1     		bne	.L31
 548              	.L30:
 277:./Library/stm32f4xx_hash_sha1.c **** 
 278:./Library/stm32f4xx_hash_sha1.c ****       if (busystatus != RESET)
 549              		.loc 1 278 10
 550 019a 7B6E     		ldr	r3, [r7, #100]
 551 019c 002B     		cmp	r3, #0
 552 019e 03D0     		beq	.L32
 279:./Library/stm32f4xx_hash_sha1.c ****       {
 280:./Library/stm32f4xx_hash_sha1.c ****         status = ERROR;
 553              		.loc 1 280 16
 554 01a0 0023     		movs	r3, #0
 555 01a2 87F87330 		strb	r3, [r7, #115]
 556 01a6 2EE0     		b	.L22
 557              	.L32:
 281:./Library/stm32f4xx_hash_sha1.c ****       }
 282:./Library/stm32f4xx_hash_sha1.c ****       else
 283:./Library/stm32f4xx_hash_sha1.c ****       {
 284:./Library/stm32f4xx_hash_sha1.c ****         /* Read the message digest */
 285:./Library/stm32f4xx_hash_sha1.c ****         HASH_GetDigest(&SHA1_MessageDigest);
 558              		.loc 1 285 9
 559 01a8 07F11C03 		add	r3, r7, #28
 560 01ac 1846     		mov	r0, r3
 561 01ae FFF7FEFF 		bl	HASH_GetDigest
 286:./Library/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 562              		.loc 1 286 37
 563 01b2 FA69     		ldr	r2, [r7, #28]
 564              		.loc 1 286 10
 565 01b4 3B6E     		ldr	r3, [r7, #96]
 566 01b6 FA64     		str	r2, [r7, #76]
 567              	.LBB32:
 568              	.LBB33:
 569              		.loc 2 498 10
 570 01b8 FA6C     		ldr	r2, [r7, #76]
 571 01ba 12BA     		rev	r2, r2
 572              	.LBE33:
 573              	.LBE32:
 574              		.loc 1 286 35
 575 01bc 1A60     		str	r2, [r3]
 287:./Library/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 576              		.loc 1 287 19
 577 01be 3B6E     		ldr	r3, [r7, #96]
 578 01c0 0433     		adds	r3, r3, #4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 25


 579 01c2 3B66     		str	r3, [r7, #96]
 288:./Library/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 580              		.loc 1 288 37
 581 01c4 3A6A     		ldr	r2, [r7, #32]
 582              		.loc 1 288 10
 583 01c6 3B6E     		ldr	r3, [r7, #96]
 584 01c8 3A65     		str	r2, [r7, #80]
 585              	.LBB34:
 586              	.LBB35:
 587              		.loc 2 498 10
 588 01ca 3A6D     		ldr	r2, [r7, #80]
 589 01cc 12BA     		rev	r2, r2
 590              	.LBE35:
 591              	.LBE34:
 592              		.loc 1 288 35
 593 01ce 1A60     		str	r2, [r3]
 289:./Library/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 594              		.loc 1 289 19
 595 01d0 3B6E     		ldr	r3, [r7, #96]
 596 01d2 0433     		adds	r3, r3, #4
 597 01d4 3B66     		str	r3, [r7, #96]
 290:./Library/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 598              		.loc 1 290 37
 599 01d6 7A6A     		ldr	r2, [r7, #36]
 600              		.loc 1 290 10
 601 01d8 3B6E     		ldr	r3, [r7, #96]
 602 01da 7A65     		str	r2, [r7, #84]
 603              	.LBB36:
 604              	.LBB37:
 605              		.loc 2 498 10
 606 01dc 7A6D     		ldr	r2, [r7, #84]
 607 01de 12BA     		rev	r2, r2
 608              	.LBE37:
 609              	.LBE36:
 610              		.loc 1 290 35
 611 01e0 1A60     		str	r2, [r3]
 291:./Library/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 612              		.loc 1 291 19
 613 01e2 3B6E     		ldr	r3, [r7, #96]
 614 01e4 0433     		adds	r3, r3, #4
 615 01e6 3B66     		str	r3, [r7, #96]
 292:./Library/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 616              		.loc 1 292 37
 617 01e8 BA6A     		ldr	r2, [r7, #40]
 618              		.loc 1 292 10
 619 01ea 3B6E     		ldr	r3, [r7, #96]
 620 01ec BA65     		str	r2, [r7, #88]
 621              	.LBB38:
 622              	.LBB39:
 623              		.loc 2 498 10
 624 01ee BA6D     		ldr	r2, [r7, #88]
 625 01f0 12BA     		rev	r2, r2
 626              	.LBE39:
 627              	.LBE38:
 628              		.loc 1 292 35
 629 01f2 1A60     		str	r2, [r3]
 293:./Library/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 26


 630              		.loc 1 293 19
 631 01f4 3B6E     		ldr	r3, [r7, #96]
 632 01f6 0433     		adds	r3, r3, #4
 633 01f8 3B66     		str	r3, [r7, #96]
 294:./Library/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 634              		.loc 1 294 37
 635 01fa FA6A     		ldr	r2, [r7, #44]
 636              		.loc 1 294 10
 637 01fc 3B6E     		ldr	r3, [r7, #96]
 638 01fe FA65     		str	r2, [r7, #92]
 639              	.LBB40:
 640              	.LBB41:
 641              		.loc 2 498 10
 642 0200 FA6D     		ldr	r2, [r7, #92]
 643 0202 12BA     		rev	r2, r2
 644              	.LBE41:
 645              	.LBE40:
 646              		.loc 1 294 35
 647 0204 1A60     		str	r2, [r3]
 648              	.L22:
 295:./Library/stm32f4xx_hash_sha1.c ****       }
 296:./Library/stm32f4xx_hash_sha1.c ****     }  
 297:./Library/stm32f4xx_hash_sha1.c ****   }
 298:./Library/stm32f4xx_hash_sha1.c ****   return status;  
 649              		.loc 1 298 10
 650 0206 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 299:./Library/stm32f4xx_hash_sha1.c **** }
 651              		.loc 1 299 1
 652 020a 1846     		mov	r0, r3
 653 020c 7837     		adds	r7, r7, #120
 654              	.LCFI8:
 655              		.cfi_def_cfa_offset 8
 656 020e BD46     		mov	sp, r7
 657              	.LCFI9:
 658              		.cfi_def_cfa_register 13
 659              		@ sp needed
 660 0210 80BD     		pop	{r7, pc}
 661              		.cfi_endproc
 662              	.LFE124:
 664              		.text
 665              	.Letext0:
 666              		.file 3 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 667              		.file 4 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 668              		.file 5 "./CORE/stm32f4xx.h"
 669              		.file 6 "./Library/stm32f4xx_hash.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash_sha1.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s:20     .text.HASH_SHA1:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s:26     .text.HASH_SHA1:0000000000000000 HASH_SHA1
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s:262    .text.HMAC_SHA1:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccRJXwS9.s:268    .text.HMAC_SHA1:0000000000000000 HMAC_SHA1

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
