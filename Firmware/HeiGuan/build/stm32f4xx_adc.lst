ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_DeInit,"ax",%progbits
  20              		.align	1
  21              		.global	ADC_DeInit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	ADC_DeInit:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_adc.c"
   1:./Library/stm32f4xx_adc.c **** /**
   2:./Library/stm32f4xx_adc.c ****   ******************************************************************************
   3:./Library/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:./Library/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_adc.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_adc.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:./Library/stm32f4xx_adc.c ****   *           + Initialization and Configuration (in addition to ADC multi mode 
  10:./Library/stm32f4xx_adc.c ****   *             selection)
  11:./Library/stm32f4xx_adc.c ****   *           + Analog Watchdog configuration
  12:./Library/stm32f4xx_adc.c ****   *           + Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:./Library/stm32f4xx_adc.c ****   *             management 
  14:./Library/stm32f4xx_adc.c ****   *           + Regular Channels Configuration
  15:./Library/stm32f4xx_adc.c ****   *           + Regular Channels DMA Configuration
  16:./Library/stm32f4xx_adc.c ****   *           + Injected channels Configuration
  17:./Library/stm32f4xx_adc.c ****   *           + Interrupts and flags management
  18:./Library/stm32f4xx_adc.c ****   *         
  19:./Library/stm32f4xx_adc.c ****   @verbatim
  20:./Library/stm32f4xx_adc.c ****  ===============================================================================
  21:./Library/stm32f4xx_adc.c ****                      ##### How to use this driver #####
  22:./Library/stm32f4xx_adc.c ****  ===============================================================================
  23:./Library/stm32f4xx_adc.c ****     [..]
  24:./Library/stm32f4xx_adc.c ****     (#) Enable the ADC interface clock using 
  25:./Library/stm32f4xx_adc.c ****         RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  26:./Library/stm32f4xx_adc.c ****        
  27:./Library/stm32f4xx_adc.c ****     (#) ADC pins configuration
  28:./Library/stm32f4xx_adc.c ****          (++) Enable the clock for the ADC GPIOs using the following function:
  29:./Library/stm32f4xx_adc.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  30:./Library/stm32f4xx_adc.c ****          (++) Configure these ADC pins in analog mode using GPIO_Init();  
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 2


  31:./Library/stm32f4xx_adc.c ****   
  32:./Library/stm32f4xx_adc.c ****      (#) Configure the ADC Prescaler, conversion resolution and data 
  33:./Library/stm32f4xx_adc.c ****          alignment using the ADC_Init() function.
  34:./Library/stm32f4xx_adc.c ****      (#) Activate the ADC peripheral using ADC_Cmd() function.
  35:./Library/stm32f4xx_adc.c ****   
  36:./Library/stm32f4xx_adc.c ****      *** Regular channels group configuration ***
  37:./Library/stm32f4xx_adc.c ****      ============================================
  38:./Library/stm32f4xx_adc.c ****      [..]    
  39:./Library/stm32f4xx_adc.c ****        (+) To configure the ADC regular channels group features, use 
  40:./Library/stm32f4xx_adc.c ****            ADC_Init() and ADC_RegularChannelConfig() functions.
  41:./Library/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  42:./Library/stm32f4xx_adc.c ****            function.
  43:./Library/stm32f4xx_adc.c ****        (+) To configurate and activate the Discontinuous mode, use the 
  44:./Library/stm32f4xx_adc.c ****            ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:./Library/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetConversionValue()
  46:./Library/stm32f4xx_adc.c ****            function.
  47:./Library/stm32f4xx_adc.c ****   
  48:./Library/stm32f4xx_adc.c ****      *** Multi mode ADCs Regular channels configuration ***
  49:./Library/stm32f4xx_adc.c ****      ======================================================
  50:./Library/stm32f4xx_adc.c ****      [..]
  51:./Library/stm32f4xx_adc.c ****        (+) Refer to "Regular channels group configuration" description to
  52:./Library/stm32f4xx_adc.c ****            configure the ADC1, ADC2 and ADC3 regular channels.        
  53:./Library/stm32f4xx_adc.c ****        (+) Select the Multi mode ADC regular channels features (dual or 
  54:./Library/stm32f4xx_adc.c ****            triple mode) using ADC_CommonInit() function and configure 
  55:./Library/stm32f4xx_adc.c ****            the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  56:./Library/stm32f4xx_adc.c ****            functions.        
  57:./Library/stm32f4xx_adc.c ****        (+) Read the ADCs converted values using the 
  58:./Library/stm32f4xx_adc.c ****            ADC_GetMultiModeConversionValue() function.
  59:./Library/stm32f4xx_adc.c ****   
  60:./Library/stm32f4xx_adc.c ****      *** DMA for Regular channels group features configuration ***
  61:./Library/stm32f4xx_adc.c ****      ============================================================= 
  62:./Library/stm32f4xx_adc.c ****      [..]
  63:./Library/stm32f4xx_adc.c ****        (+) To enable the DMA mode for regular channels group, use the 
  64:./Library/stm32f4xx_adc.c ****            ADC_DMACmd() function.
  65:./Library/stm32f4xx_adc.c ****        (+) To enable the generation of DMA requests continuously at the end
  66:./Library/stm32f4xx_adc.c ****            of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  67:./Library/stm32f4xx_adc.c ****            function.
  68:./Library/stm32f4xx_adc.c ****   
  69:./Library/stm32f4xx_adc.c ****      *** Injected channels group configuration ***
  70:./Library/stm32f4xx_adc.c ****      =============================================    
  71:./Library/stm32f4xx_adc.c ****      [..]
  72:./Library/stm32f4xx_adc.c ****        (+) To configure the ADC Injected channels group features, use 
  73:./Library/stm32f4xx_adc.c ****            ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  74:./Library/stm32f4xx_adc.c ****            functions.
  75:./Library/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  76:./Library/stm32f4xx_adc.c ****            function.
  77:./Library/stm32f4xx_adc.c ****        (+) To activate the Injected Discontinuous mode, use the 
  78:./Library/stm32f4xx_adc.c ****            ADC_InjectedDiscModeCmd() function.  
  79:./Library/stm32f4xx_adc.c ****        (+) To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  80:./Library/stm32f4xx_adc.c ****            function.        
  81:./Library/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  82:./Library/stm32f4xx_adc.c ****            function.
  83:./Library/stm32f4xx_adc.c ****   
  84:./Library/stm32f4xx_adc.c ****     @endverbatim
  85:./Library/stm32f4xx_adc.c ****   ******************************************************************************
  86:./Library/stm32f4xx_adc.c ****   * @attention
  87:./Library/stm32f4xx_adc.c ****   *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 3


  88:./Library/stm32f4xx_adc.c ****   * Copyright (c) 2016 STMicroelectronics.
  89:./Library/stm32f4xx_adc.c ****   * All rights reserved.
  90:./Library/stm32f4xx_adc.c ****   *
  91:./Library/stm32f4xx_adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  92:./Library/stm32f4xx_adc.c ****   * in the root directory of this software component.
  93:./Library/stm32f4xx_adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  94:./Library/stm32f4xx_adc.c ****   *
  95:./Library/stm32f4xx_adc.c ****   ******************************************************************************
  96:./Library/stm32f4xx_adc.c ****   */
  97:./Library/stm32f4xx_adc.c **** 
  98:./Library/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  99:./Library/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 100:./Library/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 101:./Library/stm32f4xx_adc.c **** 
 102:./Library/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 103:./Library/stm32f4xx_adc.c ****   * @{
 104:./Library/stm32f4xx_adc.c ****   */
 105:./Library/stm32f4xx_adc.c **** 
 106:./Library/stm32f4xx_adc.c **** /** @defgroup ADC 
 107:./Library/stm32f4xx_adc.c ****   * @brief ADC driver modules
 108:./Library/stm32f4xx_adc.c ****   * @{
 109:./Library/stm32f4xx_adc.c ****   */ 
 110:./Library/stm32f4xx_adc.c **** 
 111:./Library/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 112:./Library/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 113:./Library/stm32f4xx_adc.c **** 
 114:./Library/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 115:./Library/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 116:./Library/stm32f4xx_adc.c **** 
 117:./Library/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 118:./Library/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 119:./Library/stm32f4xx_adc.c **** 
 120:./Library/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 121:./Library/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 122:./Library/stm32f4xx_adc.c **** 
 123:./Library/stm32f4xx_adc.c **** /* CR1 register Mask */
 124:./Library/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 125:./Library/stm32f4xx_adc.c **** 
 126:./Library/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 127:./Library/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 128:./Library/stm32f4xx_adc.c **** 
 129:./Library/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 130:./Library/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 131:./Library/stm32f4xx_adc.c **** 
 132:./Library/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 133:./Library/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 134:./Library/stm32f4xx_adc.c **** 
 135:./Library/stm32f4xx_adc.c **** /* CR2 register Mask */
 136:./Library/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 137:./Library/stm32f4xx_adc.c **** 
 138:./Library/stm32f4xx_adc.c **** /* ADC SQx mask */
 139:./Library/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 140:./Library/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 141:./Library/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 142:./Library/stm32f4xx_adc.c **** 
 143:./Library/stm32f4xx_adc.c **** /* ADC L Mask */
 144:./Library/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 4


 145:./Library/stm32f4xx_adc.c **** 
 146:./Library/stm32f4xx_adc.c **** /* ADC JSQx mask */
 147:./Library/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 148:./Library/stm32f4xx_adc.c **** 
 149:./Library/stm32f4xx_adc.c **** /* ADC JL mask */
 150:./Library/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 151:./Library/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 152:./Library/stm32f4xx_adc.c **** 
 153:./Library/stm32f4xx_adc.c **** /* ADC SMPx mask */
 154:./Library/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 155:./Library/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 156:./Library/stm32f4xx_adc.c **** 
 157:./Library/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 158:./Library/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 159:./Library/stm32f4xx_adc.c **** 
 160:./Library/stm32f4xx_adc.c **** /* ADC CDR register base address */
 161:./Library/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 162:./Library/stm32f4xx_adc.c **** 
 163:./Library/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 164:./Library/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 165:./Library/stm32f4xx_adc.c **** 
 166:./Library/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 167:./Library/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 168:./Library/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 169:./Library/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 170:./Library/stm32f4xx_adc.c **** 
 171:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 172:./Library/stm32f4xx_adc.c ****   * @{
 173:./Library/stm32f4xx_adc.c ****   */ 
 174:./Library/stm32f4xx_adc.c **** 
 175:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 176:./Library/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 177:./Library/stm32f4xx_adc.c ****  *
 178:./Library/stm32f4xx_adc.c **** @verbatim    
 179:./Library/stm32f4xx_adc.c ****  ===============================================================================
 180:./Library/stm32f4xx_adc.c ****               ##### Initialization and Configuration functions #####
 181:./Library/stm32f4xx_adc.c ****  ===============================================================================
 182:./Library/stm32f4xx_adc.c ****     [..]  This section provides functions allowing to:
 183:./Library/stm32f4xx_adc.c ****       (+) Initialize and configure the ADC Prescaler
 184:./Library/stm32f4xx_adc.c ****       (+) ADC Conversion Resolution (12bit..6bit)
 185:./Library/stm32f4xx_adc.c ****       (+) Scan Conversion Mode (multichannel or one channel) for regular group
 186:./Library/stm32f4xx_adc.c ****       (+) ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 187:./Library/stm32f4xx_adc.c ****           regular group
 188:./Library/stm32f4xx_adc.c ****       (+) External trigger Edge and source of regular group, 
 189:./Library/stm32f4xx_adc.c ****       (+) Converted data alignment (left or right)
 190:./Library/stm32f4xx_adc.c ****       (+) The number of ADC conversions that will be done using the sequencer for 
 191:./Library/stm32f4xx_adc.c ****           regular channel group
 192:./Library/stm32f4xx_adc.c ****       (+) Multi ADC mode selection
 193:./Library/stm32f4xx_adc.c ****       (+) Direct memory access mode selection for multi ADC mode  
 194:./Library/stm32f4xx_adc.c ****       (+) Delay between 2 sampling phases (used in dual or triple interleaved modes)
 195:./Library/stm32f4xx_adc.c ****       (+) Enable or disable the ADC peripheral   
 196:./Library/stm32f4xx_adc.c **** @endverbatim
 197:./Library/stm32f4xx_adc.c ****   * @{
 198:./Library/stm32f4xx_adc.c ****   */
 199:./Library/stm32f4xx_adc.c **** 
 200:./Library/stm32f4xx_adc.c **** /**
 201:./Library/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 5


 202:./Library/stm32f4xx_adc.c ****   *         values.
 203:./Library/stm32f4xx_adc.c ****   * @param  None
 204:./Library/stm32f4xx_adc.c ****   * @retval None
 205:./Library/stm32f4xx_adc.c ****   */
 206:./Library/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:./Library/stm32f4xx_adc.c **** {
  29              		.loc 1 207 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
 208:./Library/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:./Library/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  41              		.loc 1 209 3
  42 0004 0121     		movs	r1, #1
  43 0006 4FF48070 		mov	r0, #256
  44 000a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:./Library/stm32f4xx_adc.c ****   
 211:./Library/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:./Library/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  45              		.loc 1 212 3
  46 000e 0021     		movs	r1, #0
  47 0010 4FF48070 		mov	r0, #256
  48 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:./Library/stm32f4xx_adc.c **** }
  49              		.loc 1 213 1
  50 0018 00BF     		nop
  51 001a 80BD     		pop	{r7, pc}
  52              		.cfi_endproc
  53              	.LFE123:
  55              		.section	.text.ADC_Init,"ax",%progbits
  56              		.align	1
  57              		.global	ADC_Init
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  62              	ADC_Init:
  63              	.LFB124:
 214:./Library/stm32f4xx_adc.c **** 
 215:./Library/stm32f4xx_adc.c **** /**
 216:./Library/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:./Library/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:./Library/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:./Library/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:./Library/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:./Library/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:./Library/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:./Library/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:./Library/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 6


 226:./Library/stm32f4xx_adc.c ****   * @retval None
 227:./Library/stm32f4xx_adc.c ****   */
 228:./Library/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:./Library/stm32f4xx_adc.c **** {
  64              		.loc 1 229 1
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 16
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69 0000 80B4     		push	{r7}
  70              	.LCFI2:
  71              		.cfi_def_cfa_offset 4
  72              		.cfi_offset 7, -4
  73 0002 85B0     		sub	sp, sp, #20
  74              	.LCFI3:
  75              		.cfi_def_cfa_offset 24
  76 0004 00AF     		add	r7, sp, #0
  77              	.LCFI4:
  78              		.cfi_def_cfa_register 7
  79 0006 7860     		str	r0, [r7, #4]
  80 0008 3960     		str	r1, [r7]
 230:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  81              		.loc 1 230 12
  82 000a 0023     		movs	r3, #0
  83 000c FB60     		str	r3, [r7, #12]
 231:./Library/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  84              		.loc 1 231 11
  85 000e 0023     		movs	r3, #0
  86 0010 FB72     		strb	r3, [r7, #11]
 232:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 233:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:./Library/stm32f4xx_adc.c ****   
 242:./Library/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:./Library/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:./Library/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  87              		.loc 1 244 11
  88 0012 7B68     		ldr	r3, [r7, #4]
  89 0014 5B68     		ldr	r3, [r3, #4]
  90 0016 FB60     		str	r3, [r7, #12]
 245:./Library/stm32f4xx_adc.c ****   
 246:./Library/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:./Library/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  91              		.loc 1 247 11
  92 0018 FB68     		ldr	r3, [r7, #12]
  93 001a 23F04073 		bic	r3, r3, #50331648
  94 001e 23F48073 		bic	r3, r3, #256
  95 0022 FB60     		str	r3, [r7, #12]
 248:./Library/stm32f4xx_adc.c ****   
 249:./Library/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:./Library/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 7


 251:./Library/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:./Library/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  96              		.loc 1 252 50
  97 0024 3B68     		ldr	r3, [r7]
  98 0026 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  99              		.loc 1 252 69
 100 0028 1A02     		lsls	r2, r3, #8
 253:./Library/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 101              		.loc 1 253 50
 102 002a 3B68     		ldr	r3, [r7]
 103 002c 1B68     		ldr	r3, [r3]
 252:./Library/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 104              		.loc 1 252 14
 105 002e 1343     		orrs	r3, r3, r2
 252:./Library/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 106              		.loc 1 252 11
 107 0030 FA68     		ldr	r2, [r7, #12]
 108 0032 1343     		orrs	r3, r3, r2
 109 0034 FB60     		str	r3, [r7, #12]
 254:./Library/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:./Library/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 110              		.loc 1 255 13
 111 0036 7B68     		ldr	r3, [r7, #4]
 112 0038 FA68     		ldr	r2, [r7, #12]
 113 003a 5A60     		str	r2, [r3, #4]
 256:./Library/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:./Library/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:./Library/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 114              		.loc 1 258 11
 115 003c 7B68     		ldr	r3, [r7, #4]
 116 003e 9B68     		ldr	r3, [r3, #8]
 117 0040 FB60     		str	r3, [r7, #12]
 259:./Library/stm32f4xx_adc.c ****   
 260:./Library/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:./Library/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 118              		.loc 1 261 11
 119 0042 FA68     		ldr	r2, [r7, #12]
 120 0044 184B     		ldr	r3, .L3
 121 0046 1340     		ands	r3, r3, r2
 122 0048 FB60     		str	r3, [r7, #12]
 262:./Library/stm32f4xx_adc.c ****   
 263:./Library/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:./Library/stm32f4xx_adc.c ****      continuous conversion mode */
 265:./Library/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:./Library/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:./Library/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:./Library/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:./Library/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 123              		.loc 1 269 39
 124 004a 3B68     		ldr	r3, [r7]
 125 004c 1A69     		ldr	r2, [r3, #16]
 270:./Library/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 126              		.loc 1 270 39
 127 004e 3B68     		ldr	r3, [r7]
 128 0050 DB68     		ldr	r3, [r3, #12]
 269:./Library/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 129              		.loc 1 269 55
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 8


 130 0052 1A43     		orrs	r2, r2, r3
 271:./Library/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 131              		.loc 1 271 39
 132 0054 3B68     		ldr	r3, [r7]
 133 0056 9B68     		ldr	r3, [r3, #8]
 270:./Library/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 134              		.loc 1 270 62
 135 0058 1A43     		orrs	r2, r2, r3
 272:./Library/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 136              		.loc 1 272 50
 137 005a 3B68     		ldr	r3, [r7]
 138 005c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 139              		.loc 1 272 75
 140 005e 5B00     		lsls	r3, r3, #1
 269:./Library/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 141              		.loc 1 269 14
 142 0060 1343     		orrs	r3, r3, r2
 269:./Library/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 143              		.loc 1 269 11
 144 0062 FA68     		ldr	r2, [r7, #12]
 145 0064 1343     		orrs	r3, r3, r2
 146 0066 FB60     		str	r3, [r7, #12]
 273:./Library/stm32f4xx_adc.c ****                         
 274:./Library/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:./Library/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 147              		.loc 1 275 13
 148 0068 7B68     		ldr	r3, [r7, #4]
 149 006a FA68     		ldr	r2, [r7, #12]
 150 006c 9A60     		str	r2, [r3, #8]
 276:./Library/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:./Library/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:./Library/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 151              		.loc 1 278 11
 152 006e 7B68     		ldr	r3, [r7, #4]
 153 0070 DB6A     		ldr	r3, [r3, #44]
 154 0072 FB60     		str	r3, [r7, #12]
 279:./Library/stm32f4xx_adc.c ****   
 280:./Library/stm32f4xx_adc.c ****   /* Clear L bits */
 281:./Library/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 155              		.loc 1 281 11
 156 0074 FB68     		ldr	r3, [r7, #12]
 157 0076 23F47003 		bic	r3, r3, #15728640
 158 007a FB60     		str	r3, [r7, #12]
 282:./Library/stm32f4xx_adc.c ****   
 283:./Library/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:./Library/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:./Library/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 159              		.loc 1 285 38
 160 007c 3B68     		ldr	r3, [r7]
 161 007e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 162              		.loc 1 285 14
 163 0080 013B     		subs	r3, r3, #1
 164 0082 DAB2     		uxtb	r2, r3
 165              		.loc 1 285 11
 166 0084 FB7A     		ldrb	r3, [r7, #11]
 167 0086 1343     		orrs	r3, r3, r2
 168 0088 FB72     		strb	r3, [r7, #11]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 9


 286:./Library/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 169              		.loc 1 286 15
 170 008a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 171              		.loc 1 286 33
 172 008c 1B05     		lsls	r3, r3, #20
 173              		.loc 1 286 11
 174 008e FA68     		ldr	r2, [r7, #12]
 175 0090 1343     		orrs	r3, r3, r2
 176 0092 FB60     		str	r3, [r7, #12]
 287:./Library/stm32f4xx_adc.c ****   
 288:./Library/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:./Library/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 177              		.loc 1 289 14
 178 0094 7B68     		ldr	r3, [r7, #4]
 179 0096 FA68     		ldr	r2, [r7, #12]
 180 0098 DA62     		str	r2, [r3, #44]
 290:./Library/stm32f4xx_adc.c **** }
 181              		.loc 1 290 1
 182 009a 00BF     		nop
 183 009c 1437     		adds	r7, r7, #20
 184              	.LCFI5:
 185              		.cfi_def_cfa_offset 4
 186 009e BD46     		mov	sp, r7
 187              	.LCFI6:
 188              		.cfi_def_cfa_register 13
 189              		@ sp needed
 190 00a0 5DF8047B 		ldr	r7, [sp], #4
 191              	.LCFI7:
 192              		.cfi_restore 7
 193              		.cfi_def_cfa_offset 0
 194 00a4 7047     		bx	lr
 195              	.L4:
 196 00a6 00BF     		.align	2
 197              	.L3:
 198 00a8 FDF7FFC0 		.word	-1056966659
 199              		.cfi_endproc
 200              	.LFE124:
 202              		.section	.text.ADC_StructInit,"ax",%progbits
 203              		.align	1
 204              		.global	ADC_StructInit
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 209              	ADC_StructInit:
 210              	.LFB125:
 291:./Library/stm32f4xx_adc.c **** 
 292:./Library/stm32f4xx_adc.c **** /**
 293:./Library/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:./Library/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:./Library/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:./Library/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:./Library/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:./Library/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:./Library/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:./Library/stm32f4xx_adc.c ****   *         be initialized.
 301:./Library/stm32f4xx_adc.c ****   * @retval None
 302:./Library/stm32f4xx_adc.c ****   */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 10


 303:./Library/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:./Library/stm32f4xx_adc.c **** {
 211              		.loc 1 304 1
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 8
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216 0000 80B4     		push	{r7}
 217              	.LCFI8:
 218              		.cfi_def_cfa_offset 4
 219              		.cfi_offset 7, -4
 220 0002 83B0     		sub	sp, sp, #12
 221              	.LCFI9:
 222              		.cfi_def_cfa_offset 16
 223 0004 00AF     		add	r7, sp, #0
 224              	.LCFI10:
 225              		.cfi_def_cfa_register 7
 226 0006 7860     		str	r0, [r7, #4]
 305:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:./Library/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 227              		.loc 1 306 34
 228 0008 7B68     		ldr	r3, [r7, #4]
 229 000a 0022     		movs	r2, #0
 230 000c 1A60     		str	r2, [r3]
 307:./Library/stm32f4xx_adc.c **** 
 308:./Library/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:./Library/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 231              		.loc 1 309 36
 232 000e 7B68     		ldr	r3, [r7, #4]
 233 0010 0022     		movs	r2, #0
 234 0012 1A71     		strb	r2, [r3, #4]
 310:./Library/stm32f4xx_adc.c **** 
 311:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:./Library/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 235              		.loc 1 312 42
 236 0014 7B68     		ldr	r3, [r7, #4]
 237 0016 0022     		movs	r2, #0
 238 0018 5A71     		strb	r2, [r3, #5]
 313:./Library/stm32f4xx_adc.c **** 
 314:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:./Library/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 239              		.loc 1 315 44
 240 001a 7B68     		ldr	r3, [r7, #4]
 241 001c 0022     		movs	r2, #0
 242 001e 9A60     		str	r2, [r3, #8]
 316:./Library/stm32f4xx_adc.c **** 
 317:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:./Library/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 243              		.loc 1 318 40
 244 0020 7B68     		ldr	r3, [r7, #4]
 245 0022 0022     		movs	r2, #0
 246 0024 DA60     		str	r2, [r3, #12]
 319:./Library/stm32f4xx_adc.c **** 
 320:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:./Library/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 247              		.loc 1 321 33
 248 0026 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 11


 249 0028 0022     		movs	r2, #0
 250 002a 1A61     		str	r2, [r3, #16]
 322:./Library/stm32f4xx_adc.c **** 
 323:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:./Library/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 251              		.loc 1 324 39
 252 002c 7B68     		ldr	r3, [r7, #4]
 253 002e 0122     		movs	r2, #1
 254 0030 1A75     		strb	r2, [r3, #20]
 325:./Library/stm32f4xx_adc.c **** }
 255              		.loc 1 325 1
 256 0032 00BF     		nop
 257 0034 0C37     		adds	r7, r7, #12
 258              	.LCFI11:
 259              		.cfi_def_cfa_offset 4
 260 0036 BD46     		mov	sp, r7
 261              	.LCFI12:
 262              		.cfi_def_cfa_register 13
 263              		@ sp needed
 264 0038 5DF8047B 		ldr	r7, [sp], #4
 265              	.LCFI13:
 266              		.cfi_restore 7
 267              		.cfi_def_cfa_offset 0
 268 003c 7047     		bx	lr
 269              		.cfi_endproc
 270              	.LFE125:
 272              		.section	.text.ADC_CommonInit,"ax",%progbits
 273              		.align	1
 274              		.global	ADC_CommonInit
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 279              	ADC_CommonInit:
 280              	.LFB126:
 326:./Library/stm32f4xx_adc.c **** 
 327:./Library/stm32f4xx_adc.c **** /**
 328:./Library/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:./Library/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:./Library/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:./Library/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:./Library/stm32f4xx_adc.c ****   * @retval None
 333:./Library/stm32f4xx_adc.c ****   */
 334:./Library/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:./Library/stm32f4xx_adc.c **** {
 281              		.loc 1 335 1
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 16
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286 0000 80B4     		push	{r7}
 287              	.LCFI14:
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 7, -4
 290 0002 85B0     		sub	sp, sp, #20
 291              	.LCFI15:
 292              		.cfi_def_cfa_offset 24
 293 0004 00AF     		add	r7, sp, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 12


 294              	.LCFI16:
 295              		.cfi_def_cfa_register 7
 296 0006 7860     		str	r0, [r7, #4]
 336:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 297              		.loc 1 336 12
 298 0008 0023     		movs	r3, #0
 299 000a FB60     		str	r3, [r7, #12]
 337:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 338:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:./Library/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:./Library/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:./Library/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 300              		.loc 1 344 16
 301 000c 0E4B     		ldr	r3, .L7
 302              		.loc 1 344 11
 303 000e 5B68     		ldr	r3, [r3, #4]
 304 0010 FB60     		str	r3, [r7, #12]
 345:./Library/stm32f4xx_adc.c ****   
 346:./Library/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:./Library/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 305              		.loc 1 347 11
 306 0012 FA68     		ldr	r2, [r7, #12]
 307 0014 0D4B     		ldr	r3, .L7+4
 308 0016 1340     		ands	r3, r3, r2
 309 0018 FB60     		str	r3, [r7, #12]
 348:./Library/stm32f4xx_adc.c ****   
 349:./Library/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:./Library/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:./Library/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:./Library/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:./Library/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:./Library/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:./Library/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 310              		.loc 1 355 45
 311 001a 7B68     		ldr	r3, [r7, #4]
 312 001c 1A68     		ldr	r2, [r3]
 356:./Library/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 313              		.loc 1 356 45
 314 001e 7B68     		ldr	r3, [r7, #4]
 315 0020 5B68     		ldr	r3, [r3, #4]
 355:./Library/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 316              		.loc 1 355 56
 317 0022 1A43     		orrs	r2, r2, r3
 357:./Library/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 318              		.loc 1 357 45
 319 0024 7B68     		ldr	r3, [r7, #4]
 320 0026 9B68     		ldr	r3, [r3, #8]
 356:./Library/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 321              		.loc 1 356 61
 322 0028 1A43     		orrs	r2, r2, r3
 358:./Library/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 323              		.loc 1 358 45
 324 002a 7B68     		ldr	r3, [r7, #4]
 325 002c DB68     		ldr	r3, [r3, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 13


 357:./Library/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 326              		.loc 1 357 65
 327 002e 1343     		orrs	r3, r3, r2
 355:./Library/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 328              		.loc 1 355 11
 329 0030 FA68     		ldr	r2, [r7, #12]
 330 0032 1343     		orrs	r3, r3, r2
 331 0034 FB60     		str	r3, [r7, #12]
 359:./Library/stm32f4xx_adc.c ****                         
 360:./Library/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:./Library/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 332              		.loc 1 361 6
 333 0036 044A     		ldr	r2, .L7
 334              		.loc 1 361 12
 335 0038 FB68     		ldr	r3, [r7, #12]
 336 003a 5360     		str	r3, [r2, #4]
 362:./Library/stm32f4xx_adc.c **** }
 337              		.loc 1 362 1
 338 003c 00BF     		nop
 339 003e 1437     		adds	r7, r7, #20
 340              	.LCFI17:
 341              		.cfi_def_cfa_offset 4
 342 0040 BD46     		mov	sp, r7
 343              	.LCFI18:
 344              		.cfi_def_cfa_register 13
 345              		@ sp needed
 346 0042 5DF8047B 		ldr	r7, [sp], #4
 347              	.LCFI19:
 348              		.cfi_restore 7
 349              		.cfi_def_cfa_offset 0
 350 0046 7047     		bx	lr
 351              	.L8:
 352              		.align	2
 353              	.L7:
 354 0048 00230140 		.word	1073816320
 355 004c E030FCFF 		.word	-249632
 356              		.cfi_endproc
 357              	.LFE126:
 359              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 360              		.align	1
 361              		.global	ADC_CommonStructInit
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 366              	ADC_CommonStructInit:
 367              	.LFB127:
 363:./Library/stm32f4xx_adc.c **** 
 364:./Library/stm32f4xx_adc.c **** /**
 365:./Library/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:./Library/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:./Library/stm32f4xx_adc.c ****   *         which will be initialized.
 368:./Library/stm32f4xx_adc.c ****   * @retval None
 369:./Library/stm32f4xx_adc.c ****   */
 370:./Library/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:./Library/stm32f4xx_adc.c **** {
 368              		.loc 1 371 1
 369              		.cfi_startproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 14


 370              		@ args = 0, pretend = 0, frame = 8
 371              		@ frame_needed = 1, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373 0000 80B4     		push	{r7}
 374              	.LCFI20:
 375              		.cfi_def_cfa_offset 4
 376              		.cfi_offset 7, -4
 377 0002 83B0     		sub	sp, sp, #12
 378              	.LCFI21:
 379              		.cfi_def_cfa_offset 16
 380 0004 00AF     		add	r7, sp, #0
 381              	.LCFI22:
 382              		.cfi_def_cfa_register 7
 383 0006 7860     		str	r0, [r7, #4]
 372:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:./Library/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 384              		.loc 1 373 34
 385 0008 7B68     		ldr	r3, [r7, #4]
 386 000a 0022     		movs	r2, #0
 387 000c 1A60     		str	r2, [r3]
 374:./Library/stm32f4xx_adc.c **** 
 375:./Library/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:./Library/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 388              		.loc 1 376 39
 389 000e 7B68     		ldr	r3, [r7, #4]
 390 0010 0022     		movs	r2, #0
 391 0012 5A60     		str	r2, [r3, #4]
 377:./Library/stm32f4xx_adc.c **** 
 378:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:./Library/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 392              		.loc 1 379 43
 393 0014 7B68     		ldr	r3, [r7, #4]
 394 0016 0022     		movs	r2, #0
 395 0018 9A60     		str	r2, [r3, #8]
 380:./Library/stm32f4xx_adc.c **** 
 381:./Library/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:./Library/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 396              		.loc 1 382 46
 397 001a 7B68     		ldr	r3, [r7, #4]
 398 001c 0022     		movs	r2, #0
 399 001e DA60     		str	r2, [r3, #12]
 383:./Library/stm32f4xx_adc.c **** }
 400              		.loc 1 383 1
 401 0020 00BF     		nop
 402 0022 0C37     		adds	r7, r7, #12
 403              	.LCFI23:
 404              		.cfi_def_cfa_offset 4
 405 0024 BD46     		mov	sp, r7
 406              	.LCFI24:
 407              		.cfi_def_cfa_register 13
 408              		@ sp needed
 409 0026 5DF8047B 		ldr	r7, [sp], #4
 410              	.LCFI25:
 411              		.cfi_restore 7
 412              		.cfi_def_cfa_offset 0
 413 002a 7047     		bx	lr
 414              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 15


 415              	.LFE127:
 417              		.section	.text.ADC_Cmd,"ax",%progbits
 418              		.align	1
 419              		.global	ADC_Cmd
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 424              	ADC_Cmd:
 425              	.LFB128:
 384:./Library/stm32f4xx_adc.c **** 
 385:./Library/stm32f4xx_adc.c **** /**
 386:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:./Library/stm32f4xx_adc.c ****   * @retval None
 391:./Library/stm32f4xx_adc.c ****   */
 392:./Library/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:./Library/stm32f4xx_adc.c **** {
 426              		.loc 1 393 1
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 8
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430              		@ link register save eliminated.
 431 0000 80B4     		push	{r7}
 432              	.LCFI26:
 433              		.cfi_def_cfa_offset 4
 434              		.cfi_offset 7, -4
 435 0002 83B0     		sub	sp, sp, #12
 436              	.LCFI27:
 437              		.cfi_def_cfa_offset 16
 438 0004 00AF     		add	r7, sp, #0
 439              	.LCFI28:
 440              		.cfi_def_cfa_register 7
 441 0006 7860     		str	r0, [r7, #4]
 442 0008 0B46     		mov	r3, r1
 443 000a FB70     		strb	r3, [r7, #3]
 394:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 395:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 444              		.loc 1 397 6
 445 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 446 000e 002B     		cmp	r3, #0
 447 0010 06D0     		beq	.L11
 398:./Library/stm32f4xx_adc.c ****   {
 399:./Library/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:./Library/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 448              		.loc 1 400 15
 449 0012 7B68     		ldr	r3, [r7, #4]
 450 0014 9B68     		ldr	r3, [r3, #8]
 451 0016 43F00102 		orr	r2, r3, #1
 452 001a 7B68     		ldr	r3, [r7, #4]
 453 001c 9A60     		str	r2, [r3, #8]
 401:./Library/stm32f4xx_adc.c ****   }
 402:./Library/stm32f4xx_adc.c ****   else
 403:./Library/stm32f4xx_adc.c ****   {
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 16


 404:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:./Library/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 406:./Library/stm32f4xx_adc.c ****   }
 407:./Library/stm32f4xx_adc.c **** }
 454              		.loc 1 407 1
 455 001e 05E0     		b	.L13
 456              	.L11:
 405:./Library/stm32f4xx_adc.c ****   }
 457              		.loc 1 405 15
 458 0020 7B68     		ldr	r3, [r7, #4]
 459 0022 9B68     		ldr	r3, [r3, #8]
 460 0024 23F00102 		bic	r2, r3, #1
 461 0028 7B68     		ldr	r3, [r7, #4]
 462 002a 9A60     		str	r2, [r3, #8]
 463              	.L13:
 464              		.loc 1 407 1
 465 002c 00BF     		nop
 466 002e 0C37     		adds	r7, r7, #12
 467              	.LCFI29:
 468              		.cfi_def_cfa_offset 4
 469 0030 BD46     		mov	sp, r7
 470              	.LCFI30:
 471              		.cfi_def_cfa_register 13
 472              		@ sp needed
 473 0032 5DF8047B 		ldr	r7, [sp], #4
 474              	.LCFI31:
 475              		.cfi_restore 7
 476              		.cfi_def_cfa_offset 0
 477 0036 7047     		bx	lr
 478              		.cfi_endproc
 479              	.LFE128:
 481              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 482              		.align	1
 483              		.global	ADC_AnalogWatchdogCmd
 484              		.syntax unified
 485              		.thumb
 486              		.thumb_func
 488              	ADC_AnalogWatchdogCmd:
 489              	.LFB129:
 408:./Library/stm32f4xx_adc.c **** /**
 409:./Library/stm32f4xx_adc.c ****   * @}
 410:./Library/stm32f4xx_adc.c ****   */
 411:./Library/stm32f4xx_adc.c **** 
 412:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:./Library/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:./Library/stm32f4xx_adc.c ****  *
 415:./Library/stm32f4xx_adc.c **** @verbatim   
 416:./Library/stm32f4xx_adc.c ****  ===============================================================================
 417:./Library/stm32f4xx_adc.c ****              ##### Analog Watchdog configuration functions #####
 418:./Library/stm32f4xx_adc.c ****  ===============================================================================  
 419:./Library/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the Analog Watchdog
 420:./Library/stm32f4xx_adc.c ****          (AWD) feature in the ADC.
 421:./Library/stm32f4xx_adc.c ****   
 422:./Library/stm32f4xx_adc.c ****     [..] A typical configuration Analog Watchdog is done following these steps :
 423:./Library/stm32f4xx_adc.c ****       (#) the ADC guarded channel(s) is (are) selected using the 
 424:./Library/stm32f4xx_adc.c ****           ADC_AnalogWatchdogSingleChannelConfig() function.
 425:./Library/stm32f4xx_adc.c ****       (#) The Analog watchdog lower and higher threshold are configured using the  
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 17


 426:./Library/stm32f4xx_adc.c ****           ADC_AnalogWatchdogThresholdsConfig() function.
 427:./Library/stm32f4xx_adc.c ****       (#) The Analog watchdog is enabled and configured to enable the check, on one
 428:./Library/stm32f4xx_adc.c ****           or more channels, using the  ADC_AnalogWatchdogCmd() function.
 429:./Library/stm32f4xx_adc.c **** @endverbatim
 430:./Library/stm32f4xx_adc.c ****   * @{
 431:./Library/stm32f4xx_adc.c ****   */
 432:./Library/stm32f4xx_adc.c ****   
 433:./Library/stm32f4xx_adc.c **** /**
 434:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 435:./Library/stm32f4xx_adc.c ****   *         injected channels
 436:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 437:./Library/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 438:./Library/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 439:./Library/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 440:./Library/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 441:./Library/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 442:./Library/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 443:./Library/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 444:./Library/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 445:./Library/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 446:./Library/stm32f4xx_adc.c ****   * @retval None	  
 447:./Library/stm32f4xx_adc.c ****   */
 448:./Library/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 449:./Library/stm32f4xx_adc.c **** {
 490              		.loc 1 449 1
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 16
 493              		@ frame_needed = 1, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495 0000 80B4     		push	{r7}
 496              	.LCFI32:
 497              		.cfi_def_cfa_offset 4
 498              		.cfi_offset 7, -4
 499 0002 85B0     		sub	sp, sp, #20
 500              	.LCFI33:
 501              		.cfi_def_cfa_offset 24
 502 0004 00AF     		add	r7, sp, #0
 503              	.LCFI34:
 504              		.cfi_def_cfa_register 7
 505 0006 7860     		str	r0, [r7, #4]
 506 0008 3960     		str	r1, [r7]
 450:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 507              		.loc 1 450 12
 508 000a 0023     		movs	r3, #0
 509 000c FB60     		str	r3, [r7, #12]
 451:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 452:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 453:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 454:./Library/stm32f4xx_adc.c ****   
 455:./Library/stm32f4xx_adc.c ****   /* Get the old register value */
 456:./Library/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 510              		.loc 1 456 10
 511 000e 7B68     		ldr	r3, [r7, #4]
 512 0010 5B68     		ldr	r3, [r3, #4]
 513 0012 FB60     		str	r3, [r7, #12]
 457:./Library/stm32f4xx_adc.c ****   
 458:./Library/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 18


 459:./Library/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 514              		.loc 1 459 10
 515 0014 FB68     		ldr	r3, [r7, #12]
 516 0016 23F44003 		bic	r3, r3, #12582912
 517 001a 23F40073 		bic	r3, r3, #512
 518 001e FB60     		str	r3, [r7, #12]
 460:./Library/stm32f4xx_adc.c ****   
 461:./Library/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 462:./Library/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 519              		.loc 1 462 10
 520 0020 FA68     		ldr	r2, [r7, #12]
 521 0022 3B68     		ldr	r3, [r7]
 522 0024 1343     		orrs	r3, r3, r2
 523 0026 FB60     		str	r3, [r7, #12]
 463:./Library/stm32f4xx_adc.c ****   
 464:./Library/stm32f4xx_adc.c ****   /* Store the new register value */
 465:./Library/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 524              		.loc 1 465 13
 525 0028 7B68     		ldr	r3, [r7, #4]
 526 002a FA68     		ldr	r2, [r7, #12]
 527 002c 5A60     		str	r2, [r3, #4]
 466:./Library/stm32f4xx_adc.c **** }
 528              		.loc 1 466 1
 529 002e 00BF     		nop
 530 0030 1437     		adds	r7, r7, #20
 531              	.LCFI35:
 532              		.cfi_def_cfa_offset 4
 533 0032 BD46     		mov	sp, r7
 534              	.LCFI36:
 535              		.cfi_def_cfa_register 13
 536              		@ sp needed
 537 0034 5DF8047B 		ldr	r7, [sp], #4
 538              	.LCFI37:
 539              		.cfi_restore 7
 540              		.cfi_def_cfa_offset 0
 541 0038 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE129:
 545              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 546              		.align	1
 547              		.global	ADC_AnalogWatchdogThresholdsConfig
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 552              	ADC_AnalogWatchdogThresholdsConfig:
 553              	.LFB130:
 467:./Library/stm32f4xx_adc.c **** 
 468:./Library/stm32f4xx_adc.c **** /**
 469:./Library/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 470:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 471:./Library/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 472:./Library/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 473:./Library/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 474:./Library/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:./Library/stm32f4xx_adc.c ****   * @retval None
 476:./Library/stm32f4xx_adc.c ****   */
 477:./Library/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 19


 478:./Library/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 479:./Library/stm32f4xx_adc.c **** {
 554              		.loc 1 479 1
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 8
 557              		@ frame_needed = 1, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 559 0000 80B4     		push	{r7}
 560              	.LCFI38:
 561              		.cfi_def_cfa_offset 4
 562              		.cfi_offset 7, -4
 563 0002 83B0     		sub	sp, sp, #12
 564              	.LCFI39:
 565              		.cfi_def_cfa_offset 16
 566 0004 00AF     		add	r7, sp, #0
 567              	.LCFI40:
 568              		.cfi_def_cfa_register 7
 569 0006 7860     		str	r0, [r7, #4]
 570 0008 0B46     		mov	r3, r1
 571 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 572 000c 1346     		mov	r3, r2	@ movhi
 573 000e 3B80     		strh	r3, [r7]	@ movhi
 480:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 481:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 482:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 483:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 484:./Library/stm32f4xx_adc.c ****   
 485:./Library/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 486:./Library/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 574              		.loc 1 486 13
 575 0010 7A88     		ldrh	r2, [r7, #2]
 576 0012 7B68     		ldr	r3, [r7, #4]
 577 0014 5A62     		str	r2, [r3, #36]
 487:./Library/stm32f4xx_adc.c ****   
 488:./Library/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 489:./Library/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 578              		.loc 1 489 13
 579 0016 3A88     		ldrh	r2, [r7]
 580 0018 7B68     		ldr	r3, [r7, #4]
 581 001a 9A62     		str	r2, [r3, #40]
 490:./Library/stm32f4xx_adc.c **** }
 582              		.loc 1 490 1
 583 001c 00BF     		nop
 584 001e 0C37     		adds	r7, r7, #12
 585              	.LCFI41:
 586              		.cfi_def_cfa_offset 4
 587 0020 BD46     		mov	sp, r7
 588              	.LCFI42:
 589              		.cfi_def_cfa_register 13
 590              		@ sp needed
 591 0022 5DF8047B 		ldr	r7, [sp], #4
 592              	.LCFI43:
 593              		.cfi_restore 7
 594              		.cfi_def_cfa_offset 0
 595 0026 7047     		bx	lr
 596              		.cfi_endproc
 597              	.LFE130:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 20


 599              		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 600              		.align	1
 601              		.global	ADC_AnalogWatchdogSingleChannelConfig
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 606              	ADC_AnalogWatchdogSingleChannelConfig:
 607              	.LFB131:
 491:./Library/stm32f4xx_adc.c **** 
 492:./Library/stm32f4xx_adc.c **** /**
 493:./Library/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 494:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 495:./Library/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 496:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 497:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 498:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 499:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 500:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 501:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 502:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 503:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 504:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 505:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 506:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 507:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 508:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 509:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 510:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 511:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 512:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 513:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 514:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 515:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 516:./Library/stm32f4xx_adc.c ****   * @retval None
 517:./Library/stm32f4xx_adc.c ****   */
 518:./Library/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 519:./Library/stm32f4xx_adc.c **** {
 608              		.loc 1 519 1
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 16
 611              		@ frame_needed = 1, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 613 0000 80B4     		push	{r7}
 614              	.LCFI44:
 615              		.cfi_def_cfa_offset 4
 616              		.cfi_offset 7, -4
 617 0002 85B0     		sub	sp, sp, #20
 618              	.LCFI45:
 619              		.cfi_def_cfa_offset 24
 620 0004 00AF     		add	r7, sp, #0
 621              	.LCFI46:
 622              		.cfi_def_cfa_register 7
 623 0006 7860     		str	r0, [r7, #4]
 624 0008 0B46     		mov	r3, r1
 625 000a FB70     		strb	r3, [r7, #3]
 520:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 626              		.loc 1 520 12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 21


 627 000c 0023     		movs	r3, #0
 628 000e FB60     		str	r3, [r7, #12]
 521:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 522:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 523:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 524:./Library/stm32f4xx_adc.c ****   
 525:./Library/stm32f4xx_adc.c ****   /* Get the old register value */
 526:./Library/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 629              		.loc 1 526 10
 630 0010 7B68     		ldr	r3, [r7, #4]
 631 0012 5B68     		ldr	r3, [r3, #4]
 632 0014 FB60     		str	r3, [r7, #12]
 527:./Library/stm32f4xx_adc.c ****   
 528:./Library/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 529:./Library/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 633              		.loc 1 529 10
 634 0016 FB68     		ldr	r3, [r7, #12]
 635 0018 23F01F03 		bic	r3, r3, #31
 636 001c FB60     		str	r3, [r7, #12]
 530:./Library/stm32f4xx_adc.c ****   
 531:./Library/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 532:./Library/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 637              		.loc 1 532 10
 638 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 639 0020 FA68     		ldr	r2, [r7, #12]
 640 0022 1343     		orrs	r3, r3, r2
 641 0024 FB60     		str	r3, [r7, #12]
 533:./Library/stm32f4xx_adc.c ****   
 534:./Library/stm32f4xx_adc.c ****   /* Store the new register value */
 535:./Library/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 642              		.loc 1 535 13
 643 0026 7B68     		ldr	r3, [r7, #4]
 644 0028 FA68     		ldr	r2, [r7, #12]
 645 002a 5A60     		str	r2, [r3, #4]
 536:./Library/stm32f4xx_adc.c **** }
 646              		.loc 1 536 1
 647 002c 00BF     		nop
 648 002e 1437     		adds	r7, r7, #20
 649              	.LCFI47:
 650              		.cfi_def_cfa_offset 4
 651 0030 BD46     		mov	sp, r7
 652              	.LCFI48:
 653              		.cfi_def_cfa_register 13
 654              		@ sp needed
 655 0032 5DF8047B 		ldr	r7, [sp], #4
 656              	.LCFI49:
 657              		.cfi_restore 7
 658              		.cfi_def_cfa_offset 0
 659 0036 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE131:
 663              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 664              		.align	1
 665              		.global	ADC_TempSensorVrefintCmd
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 22


 670              	ADC_TempSensorVrefintCmd:
 671              	.LFB132:
 537:./Library/stm32f4xx_adc.c **** /**
 538:./Library/stm32f4xx_adc.c ****   * @}
 539:./Library/stm32f4xx_adc.c ****   */
 540:./Library/stm32f4xx_adc.c **** 
 541:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 542:./Library/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 543:./Library/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 544:./Library/stm32f4xx_adc.c ****  *
 545:./Library/stm32f4xx_adc.c **** @verbatim   
 546:./Library/stm32f4xx_adc.c ****  ===============================================================================
 547:./Library/stm32f4xx_adc.c ****       ##### Temperature Sensor, Vrefint and VBAT management functions #####
 548:./Library/stm32f4xx_adc.c ****  ===============================================================================  
 549:./Library/stm32f4xx_adc.c ****     [..] This section provides functions allowing to enable/ disable the internal 
 550:./Library/stm32f4xx_adc.c ****          connections between the ADC and the Temperature Sensor, the Vrefint and 
 551:./Library/stm32f4xx_adc.c ****          the Vbat sources.
 552:./Library/stm32f4xx_adc.c ****      
 553:./Library/stm32f4xx_adc.c ****     [..] A typical configuration to get the Temperature sensor and Vrefint channels 
 554:./Library/stm32f4xx_adc.c ****          voltages is done following these steps :
 555:./Library/stm32f4xx_adc.c ****       (#) Enable the internal connection of Temperature sensor and Vrefint sources 
 556:./Library/stm32f4xx_adc.c ****           with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 557:./Library/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 558:./Library/stm32f4xx_adc.c ****           ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 559:./Library/stm32f4xx_adc.c ****       (#) Get the voltage values, using ADC_GetConversionValue() or  
 560:./Library/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 561:./Library/stm32f4xx_adc.c **** 
 562:./Library/stm32f4xx_adc.c ****     [..] A typical configuration to get the VBAT channel voltage is done following 
 563:./Library/stm32f4xx_adc.c ****          these steps :
 564:./Library/stm32f4xx_adc.c ****       (#) Enable the internal connection of VBAT source with the ADC channel using 
 565:./Library/stm32f4xx_adc.c ****           ADC_VBATCmd() function. 
 566:./Library/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 567:./Library/stm32f4xx_adc.c ****           ADC_InjectedChannelConfig() functions 
 568:./Library/stm32f4xx_adc.c ****       (#) Get the voltage value, using ADC_GetConversionValue() or  
 569:./Library/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 570:./Library/stm32f4xx_adc.c ****  
 571:./Library/stm32f4xx_adc.c **** @endverbatim
 572:./Library/stm32f4xx_adc.c ****   * @{
 573:./Library/stm32f4xx_adc.c ****   */
 574:./Library/stm32f4xx_adc.c ****   
 575:./Library/stm32f4xx_adc.c ****   
 576:./Library/stm32f4xx_adc.c **** /**
 577:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 578:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 579:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 580:./Library/stm32f4xx_adc.c ****   * @retval None
 581:./Library/stm32f4xx_adc.c ****   */
 582:./Library/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 583:./Library/stm32f4xx_adc.c **** {
 672              		.loc 1 583 1
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 8
 675              		@ frame_needed = 1, uses_anonymous_args = 0
 676              		@ link register save eliminated.
 677 0000 80B4     		push	{r7}
 678              	.LCFI50:
 679              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 23


 680              		.cfi_offset 7, -4
 681 0002 83B0     		sub	sp, sp, #12
 682              	.LCFI51:
 683              		.cfi_def_cfa_offset 16
 684 0004 00AF     		add	r7, sp, #0
 685              	.LCFI52:
 686              		.cfi_def_cfa_register 7
 687 0006 0346     		mov	r3, r0
 688 0008 FB71     		strb	r3, [r7, #7]
 584:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 585:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 586:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 689              		.loc 1 586 6
 690 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 691 000c 002B     		cmp	r3, #0
 692 000e 06D0     		beq	.L18
 587:./Library/stm32f4xx_adc.c ****   {
 588:./Library/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 589:./Library/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 693              		.loc 1 589 14
 694 0010 094B     		ldr	r3, .L21
 695 0012 5B68     		ldr	r3, [r3, #4]
 696 0014 084A     		ldr	r2, .L21
 697 0016 43F40003 		orr	r3, r3, #8388608
 698 001a 5360     		str	r3, [r2, #4]
 590:./Library/stm32f4xx_adc.c ****   }
 591:./Library/stm32f4xx_adc.c ****   else
 592:./Library/stm32f4xx_adc.c ****   {
 593:./Library/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 594:./Library/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 595:./Library/stm32f4xx_adc.c ****   }
 596:./Library/stm32f4xx_adc.c **** }
 699              		.loc 1 596 1
 700 001c 05E0     		b	.L20
 701              	.L18:
 594:./Library/stm32f4xx_adc.c ****   }
 702              		.loc 1 594 14
 703 001e 064B     		ldr	r3, .L21
 704 0020 5B68     		ldr	r3, [r3, #4]
 705 0022 054A     		ldr	r2, .L21
 706 0024 23F40003 		bic	r3, r3, #8388608
 707 0028 5360     		str	r3, [r2, #4]
 708              	.L20:
 709              		.loc 1 596 1
 710 002a 00BF     		nop
 711 002c 0C37     		adds	r7, r7, #12
 712              	.LCFI53:
 713              		.cfi_def_cfa_offset 4
 714 002e BD46     		mov	sp, r7
 715              	.LCFI54:
 716              		.cfi_def_cfa_register 13
 717              		@ sp needed
 718 0030 5DF8047B 		ldr	r7, [sp], #4
 719              	.LCFI55:
 720              		.cfi_restore 7
 721              		.cfi_def_cfa_offset 0
 722 0034 7047     		bx	lr
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 24


 723              	.L22:
 724 0036 00BF     		.align	2
 725              	.L21:
 726 0038 00230140 		.word	1073816320
 727              		.cfi_endproc
 728              	.LFE132:
 730              		.section	.text.ADC_VBATCmd,"ax",%progbits
 731              		.align	1
 732              		.global	ADC_VBATCmd
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 737              	ADC_VBATCmd:
 738              	.LFB133:
 597:./Library/stm32f4xx_adc.c **** 
 598:./Library/stm32f4xx_adc.c **** /**
 599:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 600:./Library/stm32f4xx_adc.c ****   * 
 601:./Library/stm32f4xx_adc.c ****   * @note   the Battery voltage measured is equal to VBAT/2 on STM32F40xx and 
 602:./Library/stm32f4xx_adc.c ****   *         STM32F41xx devices and equal to VBAT/4 on STM32F42xx and STM32F43xx devices 
 603:./Library/stm32f4xx_adc.c ****   *              
 604:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 605:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 606:./Library/stm32f4xx_adc.c ****   * @retval None
 607:./Library/stm32f4xx_adc.c ****   */
 608:./Library/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 609:./Library/stm32f4xx_adc.c **** {
 739              		.loc 1 609 1
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 8
 742              		@ frame_needed = 1, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744 0000 80B4     		push	{r7}
 745              	.LCFI56:
 746              		.cfi_def_cfa_offset 4
 747              		.cfi_offset 7, -4
 748 0002 83B0     		sub	sp, sp, #12
 749              	.LCFI57:
 750              		.cfi_def_cfa_offset 16
 751 0004 00AF     		add	r7, sp, #0
 752              	.LCFI58:
 753              		.cfi_def_cfa_register 7
 754 0006 0346     		mov	r3, r0
 755 0008 FB71     		strb	r3, [r7, #7]
 610:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 611:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 612:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 756              		.loc 1 612 6
 757 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 758 000c 002B     		cmp	r3, #0
 759 000e 06D0     		beq	.L24
 613:./Library/stm32f4xx_adc.c ****   {
 614:./Library/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 615:./Library/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 760              		.loc 1 615 14
 761 0010 094B     		ldr	r3, .L27
 762 0012 5B68     		ldr	r3, [r3, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 25


 763 0014 084A     		ldr	r2, .L27
 764 0016 43F48003 		orr	r3, r3, #4194304
 765 001a 5360     		str	r3, [r2, #4]
 616:./Library/stm32f4xx_adc.c ****   }
 617:./Library/stm32f4xx_adc.c ****   else
 618:./Library/stm32f4xx_adc.c ****   {
 619:./Library/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 620:./Library/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 621:./Library/stm32f4xx_adc.c ****   }
 622:./Library/stm32f4xx_adc.c **** }
 766              		.loc 1 622 1
 767 001c 05E0     		b	.L26
 768              	.L24:
 620:./Library/stm32f4xx_adc.c ****   }
 769              		.loc 1 620 14
 770 001e 064B     		ldr	r3, .L27
 771 0020 5B68     		ldr	r3, [r3, #4]
 772 0022 054A     		ldr	r2, .L27
 773 0024 23F48003 		bic	r3, r3, #4194304
 774 0028 5360     		str	r3, [r2, #4]
 775              	.L26:
 776              		.loc 1 622 1
 777 002a 00BF     		nop
 778 002c 0C37     		adds	r7, r7, #12
 779              	.LCFI59:
 780              		.cfi_def_cfa_offset 4
 781 002e BD46     		mov	sp, r7
 782              	.LCFI60:
 783              		.cfi_def_cfa_register 13
 784              		@ sp needed
 785 0030 5DF8047B 		ldr	r7, [sp], #4
 786              	.LCFI61:
 787              		.cfi_restore 7
 788              		.cfi_def_cfa_offset 0
 789 0034 7047     		bx	lr
 790              	.L28:
 791 0036 00BF     		.align	2
 792              	.L27:
 793 0038 00230140 		.word	1073816320
 794              		.cfi_endproc
 795              	.LFE133:
 797              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 798              		.align	1
 799              		.global	ADC_RegularChannelConfig
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 804              	ADC_RegularChannelConfig:
 805              	.LFB134:
 623:./Library/stm32f4xx_adc.c **** 
 624:./Library/stm32f4xx_adc.c **** /**
 625:./Library/stm32f4xx_adc.c ****   * @}
 626:./Library/stm32f4xx_adc.c ****   */
 627:./Library/stm32f4xx_adc.c **** 
 628:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 629:./Library/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 630:./Library/stm32f4xx_adc.c ****  *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 26


 631:./Library/stm32f4xx_adc.c **** @verbatim   
 632:./Library/stm32f4xx_adc.c ****  ===============================================================================
 633:./Library/stm32f4xx_adc.c ****              ##### Regular Channels Configuration functions #####
 634:./Library/stm32f4xx_adc.c ****  ===============================================================================  
 635:./Library/stm32f4xx_adc.c **** 
 636:./Library/stm32f4xx_adc.c ****     [..] This section provides functions allowing to manage the ADC's regular channels,
 637:./Library/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
 638:./Library/stm32f4xx_adc.c ****   
 639:./Library/stm32f4xx_adc.c ****       (#) Configuration and management functions for regular channels: This subsection 
 640:./Library/stm32f4xx_adc.c ****           provides functions allowing to configure the ADC regular channels :    
 641:./Library/stm32f4xx_adc.c ****          (++) Configure the rank in the regular group sequencer for each channel
 642:./Library/stm32f4xx_adc.c ****          (++) Configure the sampling time for each channel
 643:./Library/stm32f4xx_adc.c ****          (++) select the conversion Trigger for regular channels
 644:./Library/stm32f4xx_adc.c ****          (++) select the desired EOC event behavior configuration
 645:./Library/stm32f4xx_adc.c ****          (++) Activate the continuous Mode  (*)
 646:./Library/stm32f4xx_adc.c ****          (++) Activate the Discontinuous Mode 
 647:./Library/stm32f4xx_adc.c ****          -@@- Please Note that the following features for regular channels 
 648:./Library/stm32f4xx_adc.c ****              are configured using the ADC_Init() function : 
 649:./Library/stm32f4xx_adc.c ****            (+@@) scan mode activation 
 650:./Library/stm32f4xx_adc.c ****            (+@@) continuous mode activation (**) 
 651:./Library/stm32f4xx_adc.c ****            (+@@) External trigger source  
 652:./Library/stm32f4xx_adc.c ****            (+@@) External trigger edge 
 653:./Library/stm32f4xx_adc.c ****            (+@@) number of conversion in the regular channels group sequencer.
 654:./Library/stm32f4xx_adc.c ****      
 655:./Library/stm32f4xx_adc.c ****          -@@- (*) and (**) are performing the same configuration
 656:./Library/stm32f4xx_adc.c ****      
 657:./Library/stm32f4xx_adc.c ****       (#) Get the conversion data: This subsection provides an important function in 
 658:./Library/stm32f4xx_adc.c ****           the ADC peripheral since it returns the converted data of the current 
 659:./Library/stm32f4xx_adc.c ****           regular channel. When the Conversion value is read, the EOC Flag is 
 660:./Library/stm32f4xx_adc.c ****           automatically cleared.
 661:./Library/stm32f4xx_adc.c ****      
 662:./Library/stm32f4xx_adc.c ****           -@- For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 663:./Library/stm32f4xx_adc.c ****               results data (in the selected multi mode) can be returned in the same 
 664:./Library/stm32f4xx_adc.c ****               time using ADC_GetMultiModeConversionValue() function. 
 665:./Library/stm32f4xx_adc.c ****          
 666:./Library/stm32f4xx_adc.c **** @endverbatim
 667:./Library/stm32f4xx_adc.c ****   * @{
 668:./Library/stm32f4xx_adc.c ****   */
 669:./Library/stm32f4xx_adc.c **** /**
 670:./Library/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:./Library/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:./Library/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 27


 688:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:./Library/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:./Library/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:./Library/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:./Library/stm32f4xx_adc.c ****   * @retval None
 707:./Library/stm32f4xx_adc.c ****   */
 708:./Library/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:./Library/stm32f4xx_adc.c **** {
 806              		.loc 1 709 1
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 16
 809              		@ frame_needed = 1, uses_anonymous_args = 0
 810              		@ link register save eliminated.
 811 0000 80B4     		push	{r7}
 812              	.LCFI62:
 813              		.cfi_def_cfa_offset 4
 814              		.cfi_offset 7, -4
 815 0002 85B0     		sub	sp, sp, #20
 816              	.LCFI63:
 817              		.cfi_def_cfa_offset 24
 818 0004 00AF     		add	r7, sp, #0
 819              	.LCFI64:
 820              		.cfi_def_cfa_register 7
 821 0006 7860     		str	r0, [r7, #4]
 822 0008 0846     		mov	r0, r1
 823 000a 1146     		mov	r1, r2
 824 000c 1A46     		mov	r2, r3
 825 000e 0346     		mov	r3, r0
 826 0010 FB70     		strb	r3, [r7, #3]
 827 0012 0B46     		mov	r3, r1
 828 0014 BB70     		strb	r3, [r7, #2]
 829 0016 1346     		mov	r3, r2
 830 0018 7B70     		strb	r3, [r7, #1]
 710:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 831              		.loc 1 710 12
 832 001a 0023     		movs	r3, #0
 833 001c FB60     		str	r3, [r7, #12]
 834              		.loc 1 710 25
 835 001e 0023     		movs	r3, #0
 836 0020 BB60     		str	r3, [r7, #8]
 711:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 712:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 28


 714:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:./Library/stm32f4xx_adc.c ****   
 717:./Library/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:./Library/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 837              		.loc 1 718 6
 838 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 839 0024 092B     		cmp	r3, #9
 840 0026 23D9     		bls	.L30
 719:./Library/stm32f4xx_adc.c ****   {
 720:./Library/stm32f4xx_adc.c ****     /* Get the old register value */
 721:./Library/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 841              		.loc 1 721 13
 842 0028 7B68     		ldr	r3, [r7, #4]
 843 002a DB68     		ldr	r3, [r3, #12]
 844 002c FB60     		str	r3, [r7, #12]
 722:./Library/stm32f4xx_adc.c ****     
 723:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:./Library/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 845              		.loc 1 724 50
 846 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 847 0030 A3F10A02 		sub	r2, r3, #10
 848              		.loc 1 724 35
 849 0034 1346     		mov	r3, r2
 850 0036 5B00     		lsls	r3, r3, #1
 851 0038 1344     		add	r3, r3, r2
 852              		.loc 1 724 13
 853 003a 0722     		movs	r2, #7
 854 003c 02FA03F3 		lsl	r3, r2, r3
 855 0040 BB60     		str	r3, [r7, #8]
 725:./Library/stm32f4xx_adc.c ****     
 726:./Library/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:./Library/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 856              		.loc 1 727 16
 857 0042 BB68     		ldr	r3, [r7, #8]
 858 0044 DB43     		mvns	r3, r3
 859              		.loc 1 727 13
 860 0046 FA68     		ldr	r2, [r7, #12]
 861 0048 1340     		ands	r3, r3, r2
 862 004a FB60     		str	r3, [r7, #12]
 728:./Library/stm32f4xx_adc.c ****     
 729:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:./Library/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 863              		.loc 1 730 15
 864 004c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 865              		.loc 1 730 61
 866 004e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 867 0050 A3F10A02 		sub	r2, r3, #10
 868              		.loc 1 730 46
 869 0054 1346     		mov	r3, r2
 870 0056 5B00     		lsls	r3, r3, #1
 871 0058 1344     		add	r3, r3, r2
 872              		.loc 1 730 13
 873 005a 01FA03F3 		lsl	r3, r1, r3
 874 005e BB60     		str	r3, [r7, #8]
 731:./Library/stm32f4xx_adc.c ****     
 732:./Library/stm32f4xx_adc.c ****     /* Set the new sample time */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 29


 733:./Library/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 875              		.loc 1 733 13
 876 0060 FA68     		ldr	r2, [r7, #12]
 877 0062 BB68     		ldr	r3, [r7, #8]
 878 0064 1343     		orrs	r3, r3, r2
 879 0066 FB60     		str	r3, [r7, #12]
 734:./Library/stm32f4xx_adc.c ****     
 735:./Library/stm32f4xx_adc.c ****     /* Store the new register value */
 736:./Library/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 880              		.loc 1 736 17
 881 0068 7B68     		ldr	r3, [r7, #4]
 882 006a FA68     		ldr	r2, [r7, #12]
 883 006c DA60     		str	r2, [r3, #12]
 884 006e 1EE0     		b	.L31
 885              	.L30:
 737:./Library/stm32f4xx_adc.c ****   }
 738:./Library/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:./Library/stm32f4xx_adc.c ****   {
 740:./Library/stm32f4xx_adc.c ****     /* Get the old register value */
 741:./Library/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 886              		.loc 1 741 13
 887 0070 7B68     		ldr	r3, [r7, #4]
 888 0072 1B69     		ldr	r3, [r3, #16]
 889 0074 FB60     		str	r3, [r7, #12]
 742:./Library/stm32f4xx_adc.c ****     
 743:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:./Library/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 890              		.loc 1 744 35
 891 0076 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 892 0078 1346     		mov	r3, r2
 893 007a 5B00     		lsls	r3, r3, #1
 894 007c 1344     		add	r3, r3, r2
 895              		.loc 1 744 13
 896 007e 0722     		movs	r2, #7
 897 0080 02FA03F3 		lsl	r3, r2, r3
 898 0084 BB60     		str	r3, [r7, #8]
 745:./Library/stm32f4xx_adc.c ****     
 746:./Library/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:./Library/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 899              		.loc 1 747 16
 900 0086 BB68     		ldr	r3, [r7, #8]
 901 0088 DB43     		mvns	r3, r3
 902              		.loc 1 747 13
 903 008a FA68     		ldr	r2, [r7, #12]
 904 008c 1340     		ands	r3, r3, r2
 905 008e FB60     		str	r3, [r7, #12]
 748:./Library/stm32f4xx_adc.c ****     
 749:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:./Library/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 906              		.loc 1 750 15
 907 0090 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 908              		.loc 1 750 46
 909 0092 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 910 0094 1346     		mov	r3, r2
 911 0096 5B00     		lsls	r3, r3, #1
 912 0098 1344     		add	r3, r3, r2
 913              		.loc 1 750 13
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 30


 914 009a 01FA03F3 		lsl	r3, r1, r3
 915 009e BB60     		str	r3, [r7, #8]
 751:./Library/stm32f4xx_adc.c ****     
 752:./Library/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:./Library/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 916              		.loc 1 753 13
 917 00a0 FA68     		ldr	r2, [r7, #12]
 918 00a2 BB68     		ldr	r3, [r7, #8]
 919 00a4 1343     		orrs	r3, r3, r2
 920 00a6 FB60     		str	r3, [r7, #12]
 754:./Library/stm32f4xx_adc.c ****     
 755:./Library/stm32f4xx_adc.c ****     /* Store the new register value */
 756:./Library/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 921              		.loc 1 756 17
 922 00a8 7B68     		ldr	r3, [r7, #4]
 923 00aa FA68     		ldr	r2, [r7, #12]
 924 00ac 1A61     		str	r2, [r3, #16]
 925              	.L31:
 757:./Library/stm32f4xx_adc.c ****   }
 758:./Library/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:./Library/stm32f4xx_adc.c ****   if (Rank < 7)
 926              		.loc 1 759 6
 927 00ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 928 00b0 062B     		cmp	r3, #6
 929 00b2 21D8     		bhi	.L32
 760:./Library/stm32f4xx_adc.c ****   {
 761:./Library/stm32f4xx_adc.c ****     /* Get the old register value */
 762:./Library/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 930              		.loc 1 762 13
 931 00b4 7B68     		ldr	r3, [r7, #4]
 932 00b6 5B6B     		ldr	r3, [r3, #52]
 933 00b8 FB60     		str	r3, [r7, #12]
 763:./Library/stm32f4xx_adc.c ****     
 764:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:./Library/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 934              		.loc 1 765 41
 935 00ba BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 936 00bc 5A1E     		subs	r2, r3, #1
 937              		.loc 1 765 33
 938 00be 1346     		mov	r3, r2
 939 00c0 9B00     		lsls	r3, r3, #2
 940 00c2 1344     		add	r3, r3, r2
 941              		.loc 1 765 13
 942 00c4 1F22     		movs	r2, #31
 943 00c6 02FA03F3 		lsl	r3, r2, r3
 944 00ca BB60     		str	r3, [r7, #8]
 766:./Library/stm32f4xx_adc.c ****     
 767:./Library/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:./Library/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 945              		.loc 1 768 16
 946 00cc BB68     		ldr	r3, [r7, #8]
 947 00ce DB43     		mvns	r3, r3
 948              		.loc 1 768 13
 949 00d0 FA68     		ldr	r2, [r7, #12]
 950 00d2 1340     		ands	r3, r3, r2
 951 00d4 FB60     		str	r3, [r7, #12]
 769:./Library/stm32f4xx_adc.c ****     
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 31


 770:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:./Library/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 952              		.loc 1 771 15
 953 00d6 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 954              		.loc 1 771 51
 955 00d8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 956 00da 5A1E     		subs	r2, r3, #1
 957              		.loc 1 771 43
 958 00dc 1346     		mov	r3, r2
 959 00de 9B00     		lsls	r3, r3, #2
 960 00e0 1344     		add	r3, r3, r2
 961              		.loc 1 771 13
 962 00e2 01FA03F3 		lsl	r3, r1, r3
 963 00e6 BB60     		str	r3, [r7, #8]
 772:./Library/stm32f4xx_adc.c ****     
 773:./Library/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:./Library/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 964              		.loc 1 774 13
 965 00e8 FA68     		ldr	r2, [r7, #12]
 966 00ea BB68     		ldr	r3, [r7, #8]
 967 00ec 1343     		orrs	r3, r3, r2
 968 00ee FB60     		str	r3, [r7, #12]
 775:./Library/stm32f4xx_adc.c ****     
 776:./Library/stm32f4xx_adc.c ****     /* Store the new register value */
 777:./Library/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 969              		.loc 1 777 16
 970 00f0 7B68     		ldr	r3, [r7, #4]
 971 00f2 FA68     		ldr	r2, [r7, #12]
 972 00f4 5A63     		str	r2, [r3, #52]
 778:./Library/stm32f4xx_adc.c ****   }
 779:./Library/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:./Library/stm32f4xx_adc.c ****   else if (Rank < 13)
 781:./Library/stm32f4xx_adc.c ****   {
 782:./Library/stm32f4xx_adc.c ****     /* Get the old register value */
 783:./Library/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 784:./Library/stm32f4xx_adc.c ****     
 785:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:./Library/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 787:./Library/stm32f4xx_adc.c ****     
 788:./Library/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:./Library/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 790:./Library/stm32f4xx_adc.c ****     
 791:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:./Library/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 793:./Library/stm32f4xx_adc.c ****     
 794:./Library/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:./Library/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 796:./Library/stm32f4xx_adc.c ****     
 797:./Library/stm32f4xx_adc.c ****     /* Store the new register value */
 798:./Library/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 799:./Library/stm32f4xx_adc.c ****   }
 800:./Library/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:./Library/stm32f4xx_adc.c ****   else
 802:./Library/stm32f4xx_adc.c ****   {
 803:./Library/stm32f4xx_adc.c ****     /* Get the old register value */
 804:./Library/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 805:./Library/stm32f4xx_adc.c ****     
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 32


 806:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:./Library/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 808:./Library/stm32f4xx_adc.c ****     
 809:./Library/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:./Library/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 811:./Library/stm32f4xx_adc.c ****     
 812:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:./Library/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 814:./Library/stm32f4xx_adc.c ****     
 815:./Library/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:./Library/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 817:./Library/stm32f4xx_adc.c ****     
 818:./Library/stm32f4xx_adc.c ****     /* Store the new register value */
 819:./Library/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 820:./Library/stm32f4xx_adc.c ****   }
 821:./Library/stm32f4xx_adc.c **** }
 973              		.loc 1 821 1
 974 00f6 47E0     		b	.L35
 975              	.L32:
 780:./Library/stm32f4xx_adc.c ****   {
 976              		.loc 1 780 11
 977 00f8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 978 00fa 0C2B     		cmp	r3, #12
 979 00fc 21D8     		bhi	.L34
 783:./Library/stm32f4xx_adc.c ****     
 980              		.loc 1 783 13
 981 00fe 7B68     		ldr	r3, [r7, #4]
 982 0100 1B6B     		ldr	r3, [r3, #48]
 983 0102 FB60     		str	r3, [r7, #12]
 786:./Library/stm32f4xx_adc.c ****     
 984              		.loc 1 786 41
 985 0104 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 986 0106 DA1F     		subs	r2, r3, #7
 786:./Library/stm32f4xx_adc.c ****     
 987              		.loc 1 786 33
 988 0108 1346     		mov	r3, r2
 989 010a 9B00     		lsls	r3, r3, #2
 990 010c 1344     		add	r3, r3, r2
 786:./Library/stm32f4xx_adc.c ****     
 991              		.loc 1 786 13
 992 010e 1F22     		movs	r2, #31
 993 0110 02FA03F3 		lsl	r3, r2, r3
 994 0114 BB60     		str	r3, [r7, #8]
 789:./Library/stm32f4xx_adc.c ****     
 995              		.loc 1 789 16
 996 0116 BB68     		ldr	r3, [r7, #8]
 997 0118 DB43     		mvns	r3, r3
 789:./Library/stm32f4xx_adc.c ****     
 998              		.loc 1 789 13
 999 011a FA68     		ldr	r2, [r7, #12]
 1000 011c 1340     		ands	r3, r3, r2
 1001 011e FB60     		str	r3, [r7, #12]
 792:./Library/stm32f4xx_adc.c ****     
 1002              		.loc 1 792 15
 1003 0120 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 792:./Library/stm32f4xx_adc.c ****     
 1004              		.loc 1 792 51
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 33


 1005 0122 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1006 0124 DA1F     		subs	r2, r3, #7
 792:./Library/stm32f4xx_adc.c ****     
 1007              		.loc 1 792 43
 1008 0126 1346     		mov	r3, r2
 1009 0128 9B00     		lsls	r3, r3, #2
 1010 012a 1344     		add	r3, r3, r2
 792:./Library/stm32f4xx_adc.c ****     
 1011              		.loc 1 792 13
 1012 012c 01FA03F3 		lsl	r3, r1, r3
 1013 0130 BB60     		str	r3, [r7, #8]
 795:./Library/stm32f4xx_adc.c ****     
 1014              		.loc 1 795 13
 1015 0132 FA68     		ldr	r2, [r7, #12]
 1016 0134 BB68     		ldr	r3, [r7, #8]
 1017 0136 1343     		orrs	r3, r3, r2
 1018 0138 FB60     		str	r3, [r7, #12]
 798:./Library/stm32f4xx_adc.c ****   }
 1019              		.loc 1 798 16
 1020 013a 7B68     		ldr	r3, [r7, #4]
 1021 013c FA68     		ldr	r2, [r7, #12]
 1022 013e 1A63     		str	r2, [r3, #48]
 1023              		.loc 1 821 1
 1024 0140 22E0     		b	.L35
 1025              	.L34:
 804:./Library/stm32f4xx_adc.c ****     
 1026              		.loc 1 804 13
 1027 0142 7B68     		ldr	r3, [r7, #4]
 1028 0144 DB6A     		ldr	r3, [r3, #44]
 1029 0146 FB60     		str	r3, [r7, #12]
 807:./Library/stm32f4xx_adc.c ****     
 1030              		.loc 1 807 41
 1031 0148 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1032 014a A3F10D02 		sub	r2, r3, #13
 807:./Library/stm32f4xx_adc.c ****     
 1033              		.loc 1 807 33
 1034 014e 1346     		mov	r3, r2
 1035 0150 9B00     		lsls	r3, r3, #2
 1036 0152 1344     		add	r3, r3, r2
 807:./Library/stm32f4xx_adc.c ****     
 1037              		.loc 1 807 13
 1038 0154 1F22     		movs	r2, #31
 1039 0156 02FA03F3 		lsl	r3, r2, r3
 1040 015a BB60     		str	r3, [r7, #8]
 810:./Library/stm32f4xx_adc.c ****     
 1041              		.loc 1 810 16
 1042 015c BB68     		ldr	r3, [r7, #8]
 1043 015e DB43     		mvns	r3, r3
 810:./Library/stm32f4xx_adc.c ****     
 1044              		.loc 1 810 13
 1045 0160 FA68     		ldr	r2, [r7, #12]
 1046 0162 1340     		ands	r3, r3, r2
 1047 0164 FB60     		str	r3, [r7, #12]
 813:./Library/stm32f4xx_adc.c ****     
 1048              		.loc 1 813 15
 1049 0166 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 813:./Library/stm32f4xx_adc.c ****     
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 34


 1050              		.loc 1 813 51
 1051 0168 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1052 016a A3F10D02 		sub	r2, r3, #13
 813:./Library/stm32f4xx_adc.c ****     
 1053              		.loc 1 813 43
 1054 016e 1346     		mov	r3, r2
 1055 0170 9B00     		lsls	r3, r3, #2
 1056 0172 1344     		add	r3, r3, r2
 813:./Library/stm32f4xx_adc.c ****     
 1057              		.loc 1 813 13
 1058 0174 01FA03F3 		lsl	r3, r1, r3
 1059 0178 BB60     		str	r3, [r7, #8]
 816:./Library/stm32f4xx_adc.c ****     
 1060              		.loc 1 816 13
 1061 017a FA68     		ldr	r2, [r7, #12]
 1062 017c BB68     		ldr	r3, [r7, #8]
 1063 017e 1343     		orrs	r3, r3, r2
 1064 0180 FB60     		str	r3, [r7, #12]
 819:./Library/stm32f4xx_adc.c ****   }
 1065              		.loc 1 819 16
 1066 0182 7B68     		ldr	r3, [r7, #4]
 1067 0184 FA68     		ldr	r2, [r7, #12]
 1068 0186 DA62     		str	r2, [r3, #44]
 1069              	.L35:
 1070              		.loc 1 821 1
 1071 0188 00BF     		nop
 1072 018a 1437     		adds	r7, r7, #20
 1073              	.LCFI65:
 1074              		.cfi_def_cfa_offset 4
 1075 018c BD46     		mov	sp, r7
 1076              	.LCFI66:
 1077              		.cfi_def_cfa_register 13
 1078              		@ sp needed
 1079 018e 5DF8047B 		ldr	r7, [sp], #4
 1080              	.LCFI67:
 1081              		.cfi_restore 7
 1082              		.cfi_def_cfa_offset 0
 1083 0192 7047     		bx	lr
 1084              		.cfi_endproc
 1085              	.LFE134:
 1087              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 1088              		.align	1
 1089              		.global	ADC_SoftwareStartConv
 1090              		.syntax unified
 1091              		.thumb
 1092              		.thumb_func
 1094              	ADC_SoftwareStartConv:
 1095              	.LFB135:
 822:./Library/stm32f4xx_adc.c **** 
 823:./Library/stm32f4xx_adc.c **** /**
 824:./Library/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:./Library/stm32f4xx_adc.c ****   * @retval None
 827:./Library/stm32f4xx_adc.c ****   */
 828:./Library/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:./Library/stm32f4xx_adc.c **** {
 1096              		.loc 1 829 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 35


 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 8
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101 0000 80B4     		push	{r7}
 1102              	.LCFI68:
 1103              		.cfi_def_cfa_offset 4
 1104              		.cfi_offset 7, -4
 1105 0002 83B0     		sub	sp, sp, #12
 1106              	.LCFI69:
 1107              		.cfi_def_cfa_offset 16
 1108 0004 00AF     		add	r7, sp, #0
 1109              	.LCFI70:
 1110              		.cfi_def_cfa_register 7
 1111 0006 7860     		str	r0, [r7, #4]
 830:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 831:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:./Library/stm32f4xx_adc.c ****   
 833:./Library/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:./Library/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 1112              		.loc 1 834 13
 1113 0008 7B68     		ldr	r3, [r7, #4]
 1114 000a 9B68     		ldr	r3, [r3, #8]
 1115 000c 43F08042 		orr	r2, r3, #1073741824
 1116 0010 7B68     		ldr	r3, [r7, #4]
 1117 0012 9A60     		str	r2, [r3, #8]
 835:./Library/stm32f4xx_adc.c **** }
 1118              		.loc 1 835 1
 1119 0014 00BF     		nop
 1120 0016 0C37     		adds	r7, r7, #12
 1121              	.LCFI71:
 1122              		.cfi_def_cfa_offset 4
 1123 0018 BD46     		mov	sp, r7
 1124              	.LCFI72:
 1125              		.cfi_def_cfa_register 13
 1126              		@ sp needed
 1127 001a 5DF8047B 		ldr	r7, [sp], #4
 1128              	.LCFI73:
 1129              		.cfi_restore 7
 1130              		.cfi_def_cfa_offset 0
 1131 001e 7047     		bx	lr
 1132              		.cfi_endproc
 1133              	.LFE135:
 1135              		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 1136              		.align	1
 1137              		.global	ADC_GetSoftwareStartConvStatus
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1142              	ADC_GetSoftwareStartConvStatus:
 1143              	.LFB136:
 836:./Library/stm32f4xx_adc.c **** 
 837:./Library/stm32f4xx_adc.c **** /**
 838:./Library/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:./Library/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:./Library/stm32f4xx_adc.c ****   */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 36


 842:./Library/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:./Library/stm32f4xx_adc.c **** {
 1144              		.loc 1 843 1
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 16
 1147              		@ frame_needed = 1, uses_anonymous_args = 0
 1148              		@ link register save eliminated.
 1149 0000 80B4     		push	{r7}
 1150              	.LCFI74:
 1151              		.cfi_def_cfa_offset 4
 1152              		.cfi_offset 7, -4
 1153 0002 85B0     		sub	sp, sp, #20
 1154              	.LCFI75:
 1155              		.cfi_def_cfa_offset 24
 1156 0004 00AF     		add	r7, sp, #0
 1157              	.LCFI76:
 1158              		.cfi_def_cfa_register 7
 1159 0006 7860     		str	r0, [r7, #4]
 844:./Library/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1160              		.loc 1 844 14
 1161 0008 0023     		movs	r3, #0
 1162 000a FB73     		strb	r3, [r7, #15]
 845:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 846:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:./Library/stm32f4xx_adc.c ****   
 848:./Library/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:./Library/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 1163              		.loc 1 849 12
 1164 000c 7B68     		ldr	r3, [r7, #4]
 1165 000e 9B68     		ldr	r3, [r3, #8]
 1166              		.loc 1 849 18
 1167 0010 03F08043 		and	r3, r3, #1073741824
 1168              		.loc 1 849 6
 1169 0014 002B     		cmp	r3, #0
 1170 0016 02D0     		beq	.L38
 850:./Library/stm32f4xx_adc.c ****   {
 851:./Library/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:./Library/stm32f4xx_adc.c ****     bitstatus = SET;
 1171              		.loc 1 852 15
 1172 0018 0123     		movs	r3, #1
 1173 001a FB73     		strb	r3, [r7, #15]
 1174 001c 01E0     		b	.L39
 1175              	.L38:
 853:./Library/stm32f4xx_adc.c ****   }
 854:./Library/stm32f4xx_adc.c ****   else
 855:./Library/stm32f4xx_adc.c ****   {
 856:./Library/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:./Library/stm32f4xx_adc.c ****     bitstatus = RESET;
 1176              		.loc 1 857 15
 1177 001e 0023     		movs	r3, #0
 1178 0020 FB73     		strb	r3, [r7, #15]
 1179              	.L39:
 858:./Library/stm32f4xx_adc.c ****   }
 859:./Library/stm32f4xx_adc.c ****   
 860:./Library/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:./Library/stm32f4xx_adc.c ****   return  bitstatus;
 1180              		.loc 1 861 11
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 37


 1181 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:./Library/stm32f4xx_adc.c **** }
 1182              		.loc 1 862 1
 1183 0024 1846     		mov	r0, r3
 1184 0026 1437     		adds	r7, r7, #20
 1185              	.LCFI77:
 1186              		.cfi_def_cfa_offset 4
 1187 0028 BD46     		mov	sp, r7
 1188              	.LCFI78:
 1189              		.cfi_def_cfa_register 13
 1190              		@ sp needed
 1191 002a 5DF8047B 		ldr	r7, [sp], #4
 1192              	.LCFI79:
 1193              		.cfi_restore 7
 1194              		.cfi_def_cfa_offset 0
 1195 002e 7047     		bx	lr
 1196              		.cfi_endproc
 1197              	.LFE136:
 1199              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 1200              		.align	1
 1201              		.global	ADC_EOCOnEachRegularChannelCmd
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1206              	ADC_EOCOnEachRegularChannelCmd:
 1207              	.LFB137:
 863:./Library/stm32f4xx_adc.c **** 
 864:./Library/stm32f4xx_adc.c **** 
 865:./Library/stm32f4xx_adc.c **** /**
 866:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:./Library/stm32f4xx_adc.c ****   * @retval None
 871:./Library/stm32f4xx_adc.c ****   */
 872:./Library/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:./Library/stm32f4xx_adc.c **** {
 1208              		.loc 1 873 1
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 8
 1211              		@ frame_needed = 1, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213 0000 80B4     		push	{r7}
 1214              	.LCFI80:
 1215              		.cfi_def_cfa_offset 4
 1216              		.cfi_offset 7, -4
 1217 0002 83B0     		sub	sp, sp, #12
 1218              	.LCFI81:
 1219              		.cfi_def_cfa_offset 16
 1220 0004 00AF     		add	r7, sp, #0
 1221              	.LCFI82:
 1222              		.cfi_def_cfa_register 7
 1223 0006 7860     		str	r0, [r7, #4]
 1224 0008 0B46     		mov	r3, r1
 1225 000a FB70     		strb	r3, [r7, #3]
 874:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 875:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 38


 876:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:./Library/stm32f4xx_adc.c ****   
 878:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1226              		.loc 1 878 6
 1227 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1228 000e 002B     		cmp	r3, #0
 1229 0010 06D0     		beq	.L42
 879:./Library/stm32f4xx_adc.c ****   {
 880:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:./Library/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1230              		.loc 1 881 15
 1231 0012 7B68     		ldr	r3, [r7, #4]
 1232 0014 9B68     		ldr	r3, [r3, #8]
 1233 0016 43F48062 		orr	r2, r3, #1024
 1234 001a 7B68     		ldr	r3, [r7, #4]
 1235 001c 9A60     		str	r2, [r3, #8]
 882:./Library/stm32f4xx_adc.c ****   }
 883:./Library/stm32f4xx_adc.c ****   else
 884:./Library/stm32f4xx_adc.c ****   {
 885:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:./Library/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 887:./Library/stm32f4xx_adc.c ****   }
 888:./Library/stm32f4xx_adc.c **** }
 1236              		.loc 1 888 1
 1237 001e 05E0     		b	.L44
 1238              	.L42:
 886:./Library/stm32f4xx_adc.c ****   }
 1239              		.loc 1 886 15
 1240 0020 7B68     		ldr	r3, [r7, #4]
 1241 0022 9B68     		ldr	r3, [r3, #8]
 1242 0024 23F48062 		bic	r2, r3, #1024
 1243 0028 7B68     		ldr	r3, [r7, #4]
 1244 002a 9A60     		str	r2, [r3, #8]
 1245              	.L44:
 1246              		.loc 1 888 1
 1247 002c 00BF     		nop
 1248 002e 0C37     		adds	r7, r7, #12
 1249              	.LCFI83:
 1250              		.cfi_def_cfa_offset 4
 1251 0030 BD46     		mov	sp, r7
 1252              	.LCFI84:
 1253              		.cfi_def_cfa_register 13
 1254              		@ sp needed
 1255 0032 5DF8047B 		ldr	r7, [sp], #4
 1256              	.LCFI85:
 1257              		.cfi_restore 7
 1258              		.cfi_def_cfa_offset 0
 1259 0036 7047     		bx	lr
 1260              		.cfi_endproc
 1261              	.LFE137:
 1263              		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 1264              		.align	1
 1265              		.global	ADC_ContinuousModeCmd
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1270              	ADC_ContinuousModeCmd:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 39


 1271              	.LFB138:
 889:./Library/stm32f4xx_adc.c **** 
 890:./Library/stm32f4xx_adc.c **** /**
 891:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:./Library/stm32f4xx_adc.c ****   * @retval None
 896:./Library/stm32f4xx_adc.c ****   */
 897:./Library/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:./Library/stm32f4xx_adc.c **** {
 1272              		.loc 1 898 1
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 8
 1275              		@ frame_needed = 1, uses_anonymous_args = 0
 1276              		@ link register save eliminated.
 1277 0000 80B4     		push	{r7}
 1278              	.LCFI86:
 1279              		.cfi_def_cfa_offset 4
 1280              		.cfi_offset 7, -4
 1281 0002 83B0     		sub	sp, sp, #12
 1282              	.LCFI87:
 1283              		.cfi_def_cfa_offset 16
 1284 0004 00AF     		add	r7, sp, #0
 1285              	.LCFI88:
 1286              		.cfi_def_cfa_register 7
 1287 0006 7860     		str	r0, [r7, #4]
 1288 0008 0B46     		mov	r3, r1
 1289 000a FB70     		strb	r3, [r7, #3]
 899:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 900:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:./Library/stm32f4xx_adc.c ****   
 903:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1290              		.loc 1 903 6
 1291 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1292 000e 002B     		cmp	r3, #0
 1293 0010 06D0     		beq	.L46
 904:./Library/stm32f4xx_adc.c ****   {
 905:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:./Library/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1294              		.loc 1 906 15
 1295 0012 7B68     		ldr	r3, [r7, #4]
 1296 0014 9B68     		ldr	r3, [r3, #8]
 1297 0016 43F00202 		orr	r2, r3, #2
 1298 001a 7B68     		ldr	r3, [r7, #4]
 1299 001c 9A60     		str	r2, [r3, #8]
 907:./Library/stm32f4xx_adc.c ****   }
 908:./Library/stm32f4xx_adc.c ****   else
 909:./Library/stm32f4xx_adc.c ****   {
 910:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:./Library/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 912:./Library/stm32f4xx_adc.c ****   }
 913:./Library/stm32f4xx_adc.c **** }
 1300              		.loc 1 913 1
 1301 001e 05E0     		b	.L48
 1302              	.L46:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 40


 911:./Library/stm32f4xx_adc.c ****   }
 1303              		.loc 1 911 15
 1304 0020 7B68     		ldr	r3, [r7, #4]
 1305 0022 9B68     		ldr	r3, [r3, #8]
 1306 0024 23F00202 		bic	r2, r3, #2
 1307 0028 7B68     		ldr	r3, [r7, #4]
 1308 002a 9A60     		str	r2, [r3, #8]
 1309              	.L48:
 1310              		.loc 1 913 1
 1311 002c 00BF     		nop
 1312 002e 0C37     		adds	r7, r7, #12
 1313              	.LCFI89:
 1314              		.cfi_def_cfa_offset 4
 1315 0030 BD46     		mov	sp, r7
 1316              	.LCFI90:
 1317              		.cfi_def_cfa_register 13
 1318              		@ sp needed
 1319 0032 5DF8047B 		ldr	r7, [sp], #4
 1320              	.LCFI91:
 1321              		.cfi_restore 7
 1322              		.cfi_def_cfa_offset 0
 1323 0036 7047     		bx	lr
 1324              		.cfi_endproc
 1325              	.LFE138:
 1327              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 1328              		.align	1
 1329              		.global	ADC_DiscModeChannelCountConfig
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1334              	ADC_DiscModeChannelCountConfig:
 1335              	.LFB139:
 914:./Library/stm32f4xx_adc.c **** 
 915:./Library/stm32f4xx_adc.c **** /**
 916:./Library/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:./Library/stm32f4xx_adc.c ****   *         channel.
 918:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:./Library/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:./Library/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:./Library/stm32f4xx_adc.c ****   * @retval None
 922:./Library/stm32f4xx_adc.c ****   */
 923:./Library/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:./Library/stm32f4xx_adc.c **** {
 1336              		.loc 1 924 1
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 16
 1339              		@ frame_needed = 1, uses_anonymous_args = 0
 1340              		@ link register save eliminated.
 1341 0000 80B4     		push	{r7}
 1342              	.LCFI92:
 1343              		.cfi_def_cfa_offset 4
 1344              		.cfi_offset 7, -4
 1345 0002 85B0     		sub	sp, sp, #20
 1346              	.LCFI93:
 1347              		.cfi_def_cfa_offset 24
 1348 0004 00AF     		add	r7, sp, #0
 1349              	.LCFI94:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 41


 1350              		.cfi_def_cfa_register 7
 1351 0006 7860     		str	r0, [r7, #4]
 1352 0008 0B46     		mov	r3, r1
 1353 000a FB70     		strb	r3, [r7, #3]
 925:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1354              		.loc 1 925 12
 1355 000c 0023     		movs	r3, #0
 1356 000e FB60     		str	r3, [r7, #12]
 926:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1357              		.loc 1 926 12
 1358 0010 0023     		movs	r3, #0
 1359 0012 BB60     		str	r3, [r7, #8]
 927:./Library/stm32f4xx_adc.c ****   
 928:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 929:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:./Library/stm32f4xx_adc.c ****   
 932:./Library/stm32f4xx_adc.c ****   /* Get the old register value */
 933:./Library/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1360              		.loc 1 933 11
 1361 0014 7B68     		ldr	r3, [r7, #4]
 1362 0016 5B68     		ldr	r3, [r3, #4]
 1363 0018 FB60     		str	r3, [r7, #12]
 934:./Library/stm32f4xx_adc.c ****   
 935:./Library/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:./Library/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1364              		.loc 1 936 11
 1365 001a FB68     		ldr	r3, [r7, #12]
 1366 001c 23F46043 		bic	r3, r3, #57344
 1367 0020 FB60     		str	r3, [r7, #12]
 937:./Library/stm32f4xx_adc.c ****   
 938:./Library/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:./Library/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1368              		.loc 1 939 20
 1369 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1370 0024 013B     		subs	r3, r3, #1
 1371              		.loc 1 939 11
 1372 0026 BB60     		str	r3, [r7, #8]
 940:./Library/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1373              		.loc 1 940 22
 1374 0028 BB68     		ldr	r3, [r7, #8]
 1375 002a 5B03     		lsls	r3, r3, #13
 1376              		.loc 1 940 11
 1377 002c FA68     		ldr	r2, [r7, #12]
 1378 002e 1343     		orrs	r3, r3, r2
 1379 0030 FB60     		str	r3, [r7, #12]
 941:./Library/stm32f4xx_adc.c ****   
 942:./Library/stm32f4xx_adc.c ****   /* Store the new register value */
 943:./Library/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1380              		.loc 1 943 13
 1381 0032 7B68     		ldr	r3, [r7, #4]
 1382 0034 FA68     		ldr	r2, [r7, #12]
 1383 0036 5A60     		str	r2, [r3, #4]
 944:./Library/stm32f4xx_adc.c **** }
 1384              		.loc 1 944 1
 1385 0038 00BF     		nop
 1386 003a 1437     		adds	r7, r7, #20
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 42


 1387              	.LCFI95:
 1388              		.cfi_def_cfa_offset 4
 1389 003c BD46     		mov	sp, r7
 1390              	.LCFI96:
 1391              		.cfi_def_cfa_register 13
 1392              		@ sp needed
 1393 003e 5DF8047B 		ldr	r7, [sp], #4
 1394              	.LCFI97:
 1395              		.cfi_restore 7
 1396              		.cfi_def_cfa_offset 0
 1397 0042 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE139:
 1401              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 1402              		.align	1
 1403              		.global	ADC_DiscModeCmd
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1408              	ADC_DiscModeCmd:
 1409              	.LFB140:
 945:./Library/stm32f4xx_adc.c **** 
 946:./Library/stm32f4xx_adc.c **** /**
 947:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:./Library/stm32f4xx_adc.c ****   *         for the specified ADC
 949:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:./Library/stm32f4xx_adc.c ****   *         regular group channel.
 952:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:./Library/stm32f4xx_adc.c ****   * @retval None
 954:./Library/stm32f4xx_adc.c ****   */
 955:./Library/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:./Library/stm32f4xx_adc.c **** {
 1410              		.loc 1 956 1
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 8
 1413              		@ frame_needed = 1, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
 1415 0000 80B4     		push	{r7}
 1416              	.LCFI98:
 1417              		.cfi_def_cfa_offset 4
 1418              		.cfi_offset 7, -4
 1419 0002 83B0     		sub	sp, sp, #12
 1420              	.LCFI99:
 1421              		.cfi_def_cfa_offset 16
 1422 0004 00AF     		add	r7, sp, #0
 1423              	.LCFI100:
 1424              		.cfi_def_cfa_register 7
 1425 0006 7860     		str	r0, [r7, #4]
 1426 0008 0B46     		mov	r3, r1
 1427 000a FB70     		strb	r3, [r7, #3]
 957:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 958:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:./Library/stm32f4xx_adc.c ****   
 961:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1428              		.loc 1 961 6
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 43


 1429 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1430 000e 002B     		cmp	r3, #0
 1431 0010 06D0     		beq	.L51
 962:./Library/stm32f4xx_adc.c ****   {
 963:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:./Library/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1432              		.loc 1 964 15
 1433 0012 7B68     		ldr	r3, [r7, #4]
 1434 0014 5B68     		ldr	r3, [r3, #4]
 1435 0016 43F40062 		orr	r2, r3, #2048
 1436 001a 7B68     		ldr	r3, [r7, #4]
 1437 001c 5A60     		str	r2, [r3, #4]
 965:./Library/stm32f4xx_adc.c ****   }
 966:./Library/stm32f4xx_adc.c ****   else
 967:./Library/stm32f4xx_adc.c ****   {
 968:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:./Library/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 970:./Library/stm32f4xx_adc.c ****   }
 971:./Library/stm32f4xx_adc.c **** }
 1438              		.loc 1 971 1
 1439 001e 05E0     		b	.L53
 1440              	.L51:
 969:./Library/stm32f4xx_adc.c ****   }
 1441              		.loc 1 969 15
 1442 0020 7B68     		ldr	r3, [r7, #4]
 1443 0022 5B68     		ldr	r3, [r3, #4]
 1444 0024 23F40062 		bic	r2, r3, #2048
 1445 0028 7B68     		ldr	r3, [r7, #4]
 1446 002a 5A60     		str	r2, [r3, #4]
 1447              	.L53:
 1448              		.loc 1 971 1
 1449 002c 00BF     		nop
 1450 002e 0C37     		adds	r7, r7, #12
 1451              	.LCFI101:
 1452              		.cfi_def_cfa_offset 4
 1453 0030 BD46     		mov	sp, r7
 1454              	.LCFI102:
 1455              		.cfi_def_cfa_register 13
 1456              		@ sp needed
 1457 0032 5DF8047B 		ldr	r7, [sp], #4
 1458              	.LCFI103:
 1459              		.cfi_restore 7
 1460              		.cfi_def_cfa_offset 0
 1461 0036 7047     		bx	lr
 1462              		.cfi_endproc
 1463              	.LFE140:
 1465              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 1466              		.align	1
 1467              		.global	ADC_GetConversionValue
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1472              	ADC_GetConversionValue:
 1473              	.LFB141:
 972:./Library/stm32f4xx_adc.c **** 
 973:./Library/stm32f4xx_adc.c **** /**
 974:./Library/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 44


 975:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:./Library/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:./Library/stm32f4xx_adc.c ****   */
 978:./Library/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:./Library/stm32f4xx_adc.c **** {
 1474              		.loc 1 979 1
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 8
 1477              		@ frame_needed = 1, uses_anonymous_args = 0
 1478              		@ link register save eliminated.
 1479 0000 80B4     		push	{r7}
 1480              	.LCFI104:
 1481              		.cfi_def_cfa_offset 4
 1482              		.cfi_offset 7, -4
 1483 0002 83B0     		sub	sp, sp, #12
 1484              	.LCFI105:
 1485              		.cfi_def_cfa_offset 16
 1486 0004 00AF     		add	r7, sp, #0
 1487              	.LCFI106:
 1488              		.cfi_def_cfa_register 7
 1489 0006 7860     		str	r0, [r7, #4]
 980:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
 981:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:./Library/stm32f4xx_adc.c ****   
 983:./Library/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:./Library/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1490              		.loc 1 984 25
 1491 0008 7B68     		ldr	r3, [r7, #4]
 1492 000a DB6C     		ldr	r3, [r3, #76]
 1493              		.loc 1 984 10
 1494 000c 9BB2     		uxth	r3, r3
 985:./Library/stm32f4xx_adc.c **** }
 1495              		.loc 1 985 1
 1496 000e 1846     		mov	r0, r3
 1497 0010 0C37     		adds	r7, r7, #12
 1498              	.LCFI107:
 1499              		.cfi_def_cfa_offset 4
 1500 0012 BD46     		mov	sp, r7
 1501              	.LCFI108:
 1502              		.cfi_def_cfa_register 13
 1503              		@ sp needed
 1504 0014 5DF8047B 		ldr	r7, [sp], #4
 1505              	.LCFI109:
 1506              		.cfi_restore 7
 1507              		.cfi_def_cfa_offset 0
 1508 0018 7047     		bx	lr
 1509              		.cfi_endproc
 1510              	.LFE141:
 1512              		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 1513              		.align	1
 1514              		.global	ADC_GetMultiModeConversionValue
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1519              	ADC_GetMultiModeConversionValue:
 1520              	.LFB142:
 986:./Library/stm32f4xx_adc.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 45


 987:./Library/stm32f4xx_adc.c **** /**
 988:./Library/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:./Library/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:./Library/stm32f4xx_adc.c ****   * @param  None  
 991:./Library/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:./Library/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:./Library/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:./Library/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:./Library/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:./Library/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:./Library/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:./Library/stm32f4xx_adc.c ****   */
 999:./Library/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:./Library/stm32f4xx_adc.c **** {
 1521              		.loc 1 1000 1
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 0
 1524              		@ frame_needed = 1, uses_anonymous_args = 0
 1525              		@ link register save eliminated.
 1526 0000 80B4     		push	{r7}
 1527              	.LCFI110:
 1528              		.cfi_def_cfa_offset 4
 1529              		.cfi_offset 7, -4
 1530 0002 00AF     		add	r7, sp, #0
 1531              	.LCFI111:
 1532              		.cfi_def_cfa_register 7
1001:./Library/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:./Library/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1533              		.loc 1 1002 11
 1534 0004 034B     		ldr	r3, .L58
 1535 0006 1B68     		ldr	r3, [r3]
1003:./Library/stm32f4xx_adc.c **** }
 1536              		.loc 1 1003 1
 1537 0008 1846     		mov	r0, r3
 1538 000a BD46     		mov	sp, r7
 1539              	.LCFI112:
 1540              		.cfi_def_cfa_register 13
 1541              		@ sp needed
 1542 000c 5DF8047B 		ldr	r7, [sp], #4
 1543              	.LCFI113:
 1544              		.cfi_restore 7
 1545              		.cfi_def_cfa_offset 0
 1546 0010 7047     		bx	lr
 1547              	.L59:
 1548 0012 00BF     		.align	2
 1549              	.L58:
 1550 0014 08230140 		.word	1073816328
 1551              		.cfi_endproc
 1552              	.LFE142:
 1554              		.section	.text.ADC_DMACmd,"ax",%progbits
 1555              		.align	1
 1556              		.global	ADC_DMACmd
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1561              	ADC_DMACmd:
 1562              	.LFB143:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 46


1004:./Library/stm32f4xx_adc.c **** /**
1005:./Library/stm32f4xx_adc.c ****   * @}
1006:./Library/stm32f4xx_adc.c ****   */
1007:./Library/stm32f4xx_adc.c **** 
1008:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:./Library/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:./Library/stm32f4xx_adc.c ****  *
1011:./Library/stm32f4xx_adc.c **** @verbatim   
1012:./Library/stm32f4xx_adc.c ****  ===============================================================================
1013:./Library/stm32f4xx_adc.c ****             ##### Regular Channels DMA Configuration functions #####
1014:./Library/stm32f4xx_adc.c ****  ===============================================================================  
1015:./Library/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the DMA for ADC 
1016:./Library/stm32f4xx_adc.c ****          regular channels.
1017:./Library/stm32f4xx_adc.c ****          Since converted regular channel values are stored into a unique data 
1018:./Library/stm32f4xx_adc.c ****          register, it is useful to use DMA for conversion of more than one regular 
1019:./Library/stm32f4xx_adc.c ****          channel. This avoids the loss of the data already stored in the ADC 
1020:./Library/stm32f4xx_adc.c ****          Data register.   
1021:./Library/stm32f4xx_adc.c ****          When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1022:./Library/stm32f4xx_adc.c ****          conversion of a regular channel, a DMA request is generated.
1023:./Library/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for Independent ADC mode" 
1024:./Library/stm32f4xx_adc.c ****          configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1025:./Library/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1026:./Library/stm32f4xx_adc.c ****       (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1027:./Library/stm32f4xx_adc.c ****       (+) Requests can continue to be generated (feature ENABLED).  
1028:./Library/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for multi ADC mode" configuration 
1029:./Library/stm32f4xx_adc.c ****          (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1030:./Library/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1031:./Library/stm32f4xx_adc.c ****         (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1032:./Library/stm32f4xx_adc.c ****         (+) Requests can continue to be generated (feature ENABLED).
1033:./Library/stm32f4xx_adc.c **** 
1034:./Library/stm32f4xx_adc.c **** @endverbatim
1035:./Library/stm32f4xx_adc.c ****   * @{
1036:./Library/stm32f4xx_adc.c ****   */
1037:./Library/stm32f4xx_adc.c ****   
1038:./Library/stm32f4xx_adc.c ****  /**
1039:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1040:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1041:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1042:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1043:./Library/stm32f4xx_adc.c ****   * @retval None
1044:./Library/stm32f4xx_adc.c ****   */
1045:./Library/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1046:./Library/stm32f4xx_adc.c **** {
 1563              		.loc 1 1046 1
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 8
 1566              		@ frame_needed = 1, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 1568 0000 80B4     		push	{r7}
 1569              	.LCFI114:
 1570              		.cfi_def_cfa_offset 4
 1571              		.cfi_offset 7, -4
 1572 0002 83B0     		sub	sp, sp, #12
 1573              	.LCFI115:
 1574              		.cfi_def_cfa_offset 16
 1575 0004 00AF     		add	r7, sp, #0
 1576              	.LCFI116:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 47


 1577              		.cfi_def_cfa_register 7
 1578 0006 7860     		str	r0, [r7, #4]
 1579 0008 0B46     		mov	r3, r1
 1580 000a FB70     		strb	r3, [r7, #3]
1047:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1048:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1049:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1050:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1581              		.loc 1 1050 6
 1582 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1583 000e 002B     		cmp	r3, #0
 1584 0010 06D0     		beq	.L61
1051:./Library/stm32f4xx_adc.c ****   {
1052:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1053:./Library/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1585              		.loc 1 1053 15
 1586 0012 7B68     		ldr	r3, [r7, #4]
 1587 0014 9B68     		ldr	r3, [r3, #8]
 1588 0016 43F48072 		orr	r2, r3, #256
 1589 001a 7B68     		ldr	r3, [r7, #4]
 1590 001c 9A60     		str	r2, [r3, #8]
1054:./Library/stm32f4xx_adc.c ****   }
1055:./Library/stm32f4xx_adc.c ****   else
1056:./Library/stm32f4xx_adc.c ****   {
1057:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1058:./Library/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
1059:./Library/stm32f4xx_adc.c ****   }
1060:./Library/stm32f4xx_adc.c **** }
 1591              		.loc 1 1060 1
 1592 001e 05E0     		b	.L63
 1593              	.L61:
1058:./Library/stm32f4xx_adc.c ****   }
 1594              		.loc 1 1058 15
 1595 0020 7B68     		ldr	r3, [r7, #4]
 1596 0022 9B68     		ldr	r3, [r3, #8]
 1597 0024 23F48072 		bic	r2, r3, #256
 1598 0028 7B68     		ldr	r3, [r7, #4]
 1599 002a 9A60     		str	r2, [r3, #8]
 1600              	.L63:
 1601              		.loc 1 1060 1
 1602 002c 00BF     		nop
 1603 002e 0C37     		adds	r7, r7, #12
 1604              	.LCFI117:
 1605              		.cfi_def_cfa_offset 4
 1606 0030 BD46     		mov	sp, r7
 1607              	.LCFI118:
 1608              		.cfi_def_cfa_register 13
 1609              		@ sp needed
 1610 0032 5DF8047B 		ldr	r7, [sp], #4
 1611              	.LCFI119:
 1612              		.cfi_restore 7
 1613              		.cfi_def_cfa_offset 0
 1614 0036 7047     		bx	lr
 1615              		.cfi_endproc
 1616              	.LFE143:
 1618              		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 1619              		.align	1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 48


 1620              		.global	ADC_DMARequestAfterLastTransferCmd
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
 1625              	ADC_DMARequestAfterLastTransferCmd:
 1626              	.LFB144:
1061:./Library/stm32f4xx_adc.c **** 
1062:./Library/stm32f4xx_adc.c **** /**
1063:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1064:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1065:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1066:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1067:./Library/stm32f4xx_adc.c ****   * @retval None
1068:./Library/stm32f4xx_adc.c ****   */
1069:./Library/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1070:./Library/stm32f4xx_adc.c **** {
 1627              		.loc 1 1070 1
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 8
 1630              		@ frame_needed = 1, uses_anonymous_args = 0
 1631              		@ link register save eliminated.
 1632 0000 80B4     		push	{r7}
 1633              	.LCFI120:
 1634              		.cfi_def_cfa_offset 4
 1635              		.cfi_offset 7, -4
 1636 0002 83B0     		sub	sp, sp, #12
 1637              	.LCFI121:
 1638              		.cfi_def_cfa_offset 16
 1639 0004 00AF     		add	r7, sp, #0
 1640              	.LCFI122:
 1641              		.cfi_def_cfa_register 7
 1642 0006 7860     		str	r0, [r7, #4]
 1643 0008 0B46     		mov	r3, r1
 1644 000a FB70     		strb	r3, [r7, #3]
1071:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1072:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1073:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1074:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1645              		.loc 1 1074 6
 1646 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1647 000e 002B     		cmp	r3, #0
 1648 0010 06D0     		beq	.L65
1075:./Library/stm32f4xx_adc.c ****   {
1076:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1077:./Library/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1649              		.loc 1 1077 15
 1650 0012 7B68     		ldr	r3, [r7, #4]
 1651 0014 9B68     		ldr	r3, [r3, #8]
 1652 0016 43F40072 		orr	r2, r3, #512
 1653 001a 7B68     		ldr	r3, [r7, #4]
 1654 001c 9A60     		str	r2, [r3, #8]
1078:./Library/stm32f4xx_adc.c ****   }
1079:./Library/stm32f4xx_adc.c ****   else
1080:./Library/stm32f4xx_adc.c ****   {
1081:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1082:./Library/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
1083:./Library/stm32f4xx_adc.c ****   }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 49


1084:./Library/stm32f4xx_adc.c **** }
 1655              		.loc 1 1084 1
 1656 001e 05E0     		b	.L67
 1657              	.L65:
1082:./Library/stm32f4xx_adc.c ****   }
 1658              		.loc 1 1082 15
 1659 0020 7B68     		ldr	r3, [r7, #4]
 1660 0022 9B68     		ldr	r3, [r3, #8]
 1661 0024 23F40072 		bic	r2, r3, #512
 1662 0028 7B68     		ldr	r3, [r7, #4]
 1663 002a 9A60     		str	r2, [r3, #8]
 1664              	.L67:
 1665              		.loc 1 1084 1
 1666 002c 00BF     		nop
 1667 002e 0C37     		adds	r7, r7, #12
 1668              	.LCFI123:
 1669              		.cfi_def_cfa_offset 4
 1670 0030 BD46     		mov	sp, r7
 1671              	.LCFI124:
 1672              		.cfi_def_cfa_register 13
 1673              		@ sp needed
 1674 0032 5DF8047B 		ldr	r7, [sp], #4
 1675              	.LCFI125:
 1676              		.cfi_restore 7
 1677              		.cfi_def_cfa_offset 0
 1678 0036 7047     		bx	lr
 1679              		.cfi_endproc
 1680              	.LFE144:
 1682              		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 1683              		.align	1
 1684              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1685              		.syntax unified
 1686              		.thumb
 1687              		.thumb_func
 1689              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1690              	.LFB145:
1085:./Library/stm32f4xx_adc.c **** 
1086:./Library/stm32f4xx_adc.c **** /**
1087:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1088:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1089:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1090:./Library/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1091:./Library/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1092:./Library/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1093:./Library/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1094:./Library/stm32f4xx_adc.c ****   * @retval None
1095:./Library/stm32f4xx_adc.c ****   */
1096:./Library/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1097:./Library/stm32f4xx_adc.c **** {
 1691              		.loc 1 1097 1
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 8
 1694              		@ frame_needed = 1, uses_anonymous_args = 0
 1695              		@ link register save eliminated.
 1696 0000 80B4     		push	{r7}
 1697              	.LCFI126:
 1698              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 50


 1699              		.cfi_offset 7, -4
 1700 0002 83B0     		sub	sp, sp, #12
 1701              	.LCFI127:
 1702              		.cfi_def_cfa_offset 16
 1703 0004 00AF     		add	r7, sp, #0
 1704              	.LCFI128:
 1705              		.cfi_def_cfa_register 7
 1706 0006 0346     		mov	r3, r0
 1707 0008 FB71     		strb	r3, [r7, #7]
1098:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1099:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1708              		.loc 1 1100 6
 1709 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1710 000c 002B     		cmp	r3, #0
 1711 000e 06D0     		beq	.L69
1101:./Library/stm32f4xx_adc.c ****   {
1102:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1103:./Library/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1712              		.loc 1 1103 14
 1713 0010 094B     		ldr	r3, .L72
 1714 0012 5B68     		ldr	r3, [r3, #4]
 1715 0014 084A     		ldr	r2, .L72
 1716 0016 43F40053 		orr	r3, r3, #8192
 1717 001a 5360     		str	r3, [r2, #4]
1104:./Library/stm32f4xx_adc.c ****   }
1105:./Library/stm32f4xx_adc.c ****   else
1106:./Library/stm32f4xx_adc.c ****   {
1107:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1108:./Library/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
1109:./Library/stm32f4xx_adc.c ****   }
1110:./Library/stm32f4xx_adc.c **** }
 1718              		.loc 1 1110 1
 1719 001c 05E0     		b	.L71
 1720              	.L69:
1108:./Library/stm32f4xx_adc.c ****   }
 1721              		.loc 1 1108 14
 1722 001e 064B     		ldr	r3, .L72
 1723 0020 5B68     		ldr	r3, [r3, #4]
 1724 0022 054A     		ldr	r2, .L72
 1725 0024 23F40053 		bic	r3, r3, #8192
 1726 0028 5360     		str	r3, [r2, #4]
 1727              	.L71:
 1728              		.loc 1 1110 1
 1729 002a 00BF     		nop
 1730 002c 0C37     		adds	r7, r7, #12
 1731              	.LCFI129:
 1732              		.cfi_def_cfa_offset 4
 1733 002e BD46     		mov	sp, r7
 1734              	.LCFI130:
 1735              		.cfi_def_cfa_register 13
 1736              		@ sp needed
 1737 0030 5DF8047B 		ldr	r7, [sp], #4
 1738              	.LCFI131:
 1739              		.cfi_restore 7
 1740              		.cfi_def_cfa_offset 0
 1741 0034 7047     		bx	lr
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 51


 1742              	.L73:
 1743 0036 00BF     		.align	2
 1744              	.L72:
 1745 0038 00230140 		.word	1073816320
 1746              		.cfi_endproc
 1747              	.LFE145:
 1749              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1750              		.align	1
 1751              		.global	ADC_InjectedChannelConfig
 1752              		.syntax unified
 1753              		.thumb
 1754              		.thumb_func
 1756              	ADC_InjectedChannelConfig:
 1757              	.LFB146:
1111:./Library/stm32f4xx_adc.c **** /**
1112:./Library/stm32f4xx_adc.c ****   * @}
1113:./Library/stm32f4xx_adc.c ****   */
1114:./Library/stm32f4xx_adc.c **** 
1115:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1116:./Library/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1117:./Library/stm32f4xx_adc.c ****  *
1118:./Library/stm32f4xx_adc.c **** @verbatim   
1119:./Library/stm32f4xx_adc.c ****  ===============================================================================
1120:./Library/stm32f4xx_adc.c ****               ##### Injected channels Configuration functions #####
1121:./Library/stm32f4xx_adc.c ****  ===============================================================================  
1122:./Library/stm32f4xx_adc.c **** 
1123:./Library/stm32f4xx_adc.c ****     [..] This section provide functions allowing to configure the ADC Injected channels,
1124:./Library/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
1125:./Library/stm32f4xx_adc.c ****     
1126:./Library/stm32f4xx_adc.c ****       (#) Configuration functions for Injected channels: This subsection provides 
1127:./Library/stm32f4xx_adc.c ****           functions allowing to configure the ADC injected channels :    
1128:./Library/stm32f4xx_adc.c ****         (++) Configure the rank in the injected group sequencer for each channel
1129:./Library/stm32f4xx_adc.c ****         (++) Configure the sampling time for each channel    
1130:./Library/stm32f4xx_adc.c ****         (++) Activate the Auto injected Mode  
1131:./Library/stm32f4xx_adc.c ****         (++) Activate the Discontinuous Mode 
1132:./Library/stm32f4xx_adc.c ****         (++) scan mode activation  
1133:./Library/stm32f4xx_adc.c ****         (++) External/software trigger source   
1134:./Library/stm32f4xx_adc.c ****         (++) External trigger edge 
1135:./Library/stm32f4xx_adc.c ****         (++) injected channels sequencer.
1136:./Library/stm32f4xx_adc.c ****     
1137:./Library/stm32f4xx_adc.c ****       (#) Get the Specified Injected channel conversion data: This subsection 
1138:./Library/stm32f4xx_adc.c ****           provides an important function in the ADC peripheral since it returns the 
1139:./Library/stm32f4xx_adc.c ****           converted data of the specific injected channel.
1140:./Library/stm32f4xx_adc.c **** 
1141:./Library/stm32f4xx_adc.c **** @endverbatim
1142:./Library/stm32f4xx_adc.c ****   * @{
1143:./Library/stm32f4xx_adc.c ****   */ 
1144:./Library/stm32f4xx_adc.c **** /**
1145:./Library/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1146:./Library/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1147:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1148:./Library/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1149:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1150:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1151:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1152:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1153:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 52


1154:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1155:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1156:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1157:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1158:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1159:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1160:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1161:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1162:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1163:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1164:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1165:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1166:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1167:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1168:./Library/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1169:./Library/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1170:./Library/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1171:./Library/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1172:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1173:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1174:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1175:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1176:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1177:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1178:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1179:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1180:./Library/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1181:./Library/stm32f4xx_adc.c ****   * @retval None
1182:./Library/stm32f4xx_adc.c ****   */
1183:./Library/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1184:./Library/stm32f4xx_adc.c **** {
 1758              		.loc 1 1184 1
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 24
 1761              		@ frame_needed = 1, uses_anonymous_args = 0
 1762              		@ link register save eliminated.
 1763 0000 80B4     		push	{r7}
 1764              	.LCFI132:
 1765              		.cfi_def_cfa_offset 4
 1766              		.cfi_offset 7, -4
 1767 0002 87B0     		sub	sp, sp, #28
 1768              	.LCFI133:
 1769              		.cfi_def_cfa_offset 32
 1770 0004 00AF     		add	r7, sp, #0
 1771              	.LCFI134:
 1772              		.cfi_def_cfa_register 7
 1773 0006 7860     		str	r0, [r7, #4]
 1774 0008 0846     		mov	r0, r1
 1775 000a 1146     		mov	r1, r2
 1776 000c 1A46     		mov	r2, r3
 1777 000e 0346     		mov	r3, r0
 1778 0010 FB70     		strb	r3, [r7, #3]
 1779 0012 0B46     		mov	r3, r1
 1780 0014 BB70     		strb	r3, [r7, #2]
 1781 0016 1346     		mov	r3, r2
 1782 0018 7B70     		strb	r3, [r7, #1]
1185:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 53


 1783              		.loc 1 1185 12
 1784 001a 0023     		movs	r3, #0
 1785 001c 7B61     		str	r3, [r7, #20]
 1786              		.loc 1 1185 25
 1787 001e 0023     		movs	r3, #0
 1788 0020 3B61     		str	r3, [r7, #16]
 1789              		.loc 1 1185 38
 1790 0022 0023     		movs	r3, #0
 1791 0024 FB60     		str	r3, [r7, #12]
1186:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1187:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1188:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1189:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1190:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1191:./Library/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1192:./Library/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1792              		.loc 1 1192 6
 1793 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1794 0028 092B     		cmp	r3, #9
 1795 002a 23D9     		bls	.L75
1193:./Library/stm32f4xx_adc.c ****   {
1194:./Library/stm32f4xx_adc.c ****     /* Get the old register value */
1195:./Library/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1796              		.loc 1 1195 13
 1797 002c 7B68     		ldr	r3, [r7, #4]
 1798 002e DB68     		ldr	r3, [r3, #12]
 1799 0030 7B61     		str	r3, [r7, #20]
1196:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1197:./Library/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1800              		.loc 1 1197 48
 1801 0032 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1802 0034 A3F10A02 		sub	r2, r3, #10
 1803              		.loc 1 1197 34
 1804 0038 1346     		mov	r3, r2
 1805 003a 5B00     		lsls	r3, r3, #1
 1806 003c 1344     		add	r3, r3, r2
 1807              		.loc 1 1197 13
 1808 003e 0722     		movs	r2, #7
 1809 0040 02FA03F3 		lsl	r3, r2, r3
 1810 0044 3B61     		str	r3, [r7, #16]
1198:./Library/stm32f4xx_adc.c ****     /* Clear the old sample time */
1199:./Library/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1811              		.loc 1 1199 16
 1812 0046 3B69     		ldr	r3, [r7, #16]
 1813 0048 DB43     		mvns	r3, r3
 1814              		.loc 1 1199 13
 1815 004a 7A69     		ldr	r2, [r7, #20]
 1816 004c 1340     		ands	r3, r3, r2
 1817 004e 7B61     		str	r3, [r7, #20]
1200:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1201:./Library/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1818              		.loc 1 1201 15
 1819 0050 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1820              		.loc 1 1201 59
 1821 0052 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1822 0054 A3F10A02 		sub	r2, r3, #10
 1823              		.loc 1 1201 45
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 54


 1824 0058 1346     		mov	r3, r2
 1825 005a 5B00     		lsls	r3, r3, #1
 1826 005c 1344     		add	r3, r3, r2
 1827              		.loc 1 1201 13
 1828 005e 01FA03F3 		lsl	r3, r1, r3
 1829 0062 3B61     		str	r3, [r7, #16]
1202:./Library/stm32f4xx_adc.c ****     /* Set the new sample time */
1203:./Library/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1830              		.loc 1 1203 13
 1831 0064 7A69     		ldr	r2, [r7, #20]
 1832 0066 3B69     		ldr	r3, [r7, #16]
 1833 0068 1343     		orrs	r3, r3, r2
 1834 006a 7B61     		str	r3, [r7, #20]
1204:./Library/stm32f4xx_adc.c ****     /* Store the new register value */
1205:./Library/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1835              		.loc 1 1205 17
 1836 006c 7B68     		ldr	r3, [r7, #4]
 1837 006e 7A69     		ldr	r2, [r7, #20]
 1838 0070 DA60     		str	r2, [r3, #12]
 1839 0072 1EE0     		b	.L76
 1840              	.L75:
1206:./Library/stm32f4xx_adc.c ****   }
1207:./Library/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1208:./Library/stm32f4xx_adc.c ****   {
1209:./Library/stm32f4xx_adc.c ****     /* Get the old register value */
1210:./Library/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1841              		.loc 1 1210 13
 1842 0074 7B68     		ldr	r3, [r7, #4]
 1843 0076 1B69     		ldr	r3, [r3, #16]
 1844 0078 7B61     		str	r3, [r7, #20]
1211:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1212:./Library/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1845              		.loc 1 1212 35
 1846 007a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1847 007c 1346     		mov	r3, r2
 1848 007e 5B00     		lsls	r3, r3, #1
 1849 0080 1344     		add	r3, r3, r2
 1850              		.loc 1 1212 13
 1851 0082 0722     		movs	r2, #7
 1852 0084 02FA03F3 		lsl	r3, r2, r3
 1853 0088 3B61     		str	r3, [r7, #16]
1213:./Library/stm32f4xx_adc.c ****     /* Clear the old sample time */
1214:./Library/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1854              		.loc 1 1214 16
 1855 008a 3B69     		ldr	r3, [r7, #16]
 1856 008c DB43     		mvns	r3, r3
 1857              		.loc 1 1214 13
 1858 008e 7A69     		ldr	r2, [r7, #20]
 1859 0090 1340     		ands	r3, r3, r2
 1860 0092 7B61     		str	r3, [r7, #20]
1215:./Library/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1216:./Library/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1861              		.loc 1 1216 15
 1862 0094 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1863              		.loc 1 1216 46
 1864 0096 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1865 0098 1346     		mov	r3, r2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 55


 1866 009a 5B00     		lsls	r3, r3, #1
 1867 009c 1344     		add	r3, r3, r2
 1868              		.loc 1 1216 13
 1869 009e 01FA03F3 		lsl	r3, r1, r3
 1870 00a2 3B61     		str	r3, [r7, #16]
1217:./Library/stm32f4xx_adc.c ****     /* Set the new sample time */
1218:./Library/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1871              		.loc 1 1218 13
 1872 00a4 7A69     		ldr	r2, [r7, #20]
 1873 00a6 3B69     		ldr	r3, [r7, #16]
 1874 00a8 1343     		orrs	r3, r3, r2
 1875 00aa 7B61     		str	r3, [r7, #20]
1219:./Library/stm32f4xx_adc.c ****     /* Store the new register value */
1220:./Library/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1876              		.loc 1 1220 17
 1877 00ac 7B68     		ldr	r3, [r7, #4]
 1878 00ae 7A69     		ldr	r2, [r7, #20]
 1879 00b0 1A61     		str	r2, [r3, #16]
 1880              	.L76:
1221:./Library/stm32f4xx_adc.c ****   }
1222:./Library/stm32f4xx_adc.c ****   /* Rank configuration */
1223:./Library/stm32f4xx_adc.c ****   /* Get the old register value */
1224:./Library/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1881              		.loc 1 1224 11
 1882 00b2 7B68     		ldr	r3, [r7, #4]
 1883 00b4 9B6B     		ldr	r3, [r3, #56]
 1884 00b6 7B61     		str	r3, [r7, #20]
1225:./Library/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1226:./Library/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1885              		.loc 1 1226 37
 1886 00b8 7B69     		ldr	r3, [r7, #20]
 1887 00ba 1B0D     		lsrs	r3, r3, #20
 1888              		.loc 1 1226 11
 1889 00bc 03F00303 		and	r3, r3, #3
 1890 00c0 FB60     		str	r3, [r7, #12]
1227:./Library/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1228:./Library/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1891              		.loc 1 1228 55
 1892 00c2 FB68     		ldr	r3, [r7, #12]
 1893 00c4 DBB2     		uxtb	r3, r3
 1894 00c6 BA78     		ldrb	r2, [r7, #2]
 1895 00c8 D31A     		subs	r3, r2, r3
 1896 00ca DBB2     		uxtb	r3, r3
 1897              		.loc 1 1228 34
 1898 00cc 0233     		adds	r3, r3, #2
 1899 00ce DBB2     		uxtb	r3, r3
 1900 00d0 1A46     		mov	r2, r3
 1901              		.loc 1 1228 32
 1902 00d2 1346     		mov	r3, r2
 1903 00d4 9B00     		lsls	r3, r3, #2
 1904 00d6 1344     		add	r3, r3, r2
 1905              		.loc 1 1228 11
 1906 00d8 1F22     		movs	r2, #31
 1907 00da 02FA03F3 		lsl	r3, r2, r3
 1908 00de 3B61     		str	r3, [r7, #16]
1229:./Library/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1230:./Library/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 56


 1909              		.loc 1 1230 14
 1910 00e0 3B69     		ldr	r3, [r7, #16]
 1911 00e2 DB43     		mvns	r3, r3
 1912              		.loc 1 1230 11
 1913 00e4 7A69     		ldr	r2, [r7, #20]
 1914 00e6 1340     		ands	r3, r3, r2
 1915 00e8 7B61     		str	r3, [r7, #20]
1231:./Library/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1232:./Library/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1916              		.loc 1 1232 13
 1917 00ea FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1918              		.loc 1 1232 64
 1919 00ec FB68     		ldr	r3, [r7, #12]
 1920 00ee DBB2     		uxtb	r3, r3
 1921 00f0 B978     		ldrb	r1, [r7, #2]
 1922 00f2 CB1A     		subs	r3, r1, r3
 1923 00f4 DBB2     		uxtb	r3, r3
 1924              		.loc 1 1232 43
 1925 00f6 0233     		adds	r3, r3, #2
 1926 00f8 DBB2     		uxtb	r3, r3
 1927 00fa 1946     		mov	r1, r3
 1928              		.loc 1 1232 41
 1929 00fc 0B46     		mov	r3, r1
 1930 00fe 9B00     		lsls	r3, r3, #2
 1931 0100 0B44     		add	r3, r3, r1
 1932              		.loc 1 1232 11
 1933 0102 02FA03F3 		lsl	r3, r2, r3
 1934 0106 3B61     		str	r3, [r7, #16]
1233:./Library/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1234:./Library/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1935              		.loc 1 1234 11
 1936 0108 7A69     		ldr	r2, [r7, #20]
 1937 010a 3B69     		ldr	r3, [r7, #16]
 1938 010c 1343     		orrs	r3, r3, r2
 1939 010e 7B61     		str	r3, [r7, #20]
1235:./Library/stm32f4xx_adc.c ****   /* Store the new register value */
1236:./Library/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1940              		.loc 1 1236 14
 1941 0110 7B68     		ldr	r3, [r7, #4]
 1942 0112 7A69     		ldr	r2, [r7, #20]
 1943 0114 9A63     		str	r2, [r3, #56]
1237:./Library/stm32f4xx_adc.c **** }
 1944              		.loc 1 1237 1
 1945 0116 00BF     		nop
 1946 0118 1C37     		adds	r7, r7, #28
 1947              	.LCFI135:
 1948              		.cfi_def_cfa_offset 4
 1949 011a BD46     		mov	sp, r7
 1950              	.LCFI136:
 1951              		.cfi_def_cfa_register 13
 1952              		@ sp needed
 1953 011c 5DF8047B 		ldr	r7, [sp], #4
 1954              	.LCFI137:
 1955              		.cfi_restore 7
 1956              		.cfi_def_cfa_offset 0
 1957 0120 7047     		bx	lr
 1958              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 57


 1959              	.LFE146:
 1961              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1962              		.align	1
 1963              		.global	ADC_InjectedSequencerLengthConfig
 1964              		.syntax unified
 1965              		.thumb
 1966              		.thumb_func
 1968              	ADC_InjectedSequencerLengthConfig:
 1969              	.LFB147:
1238:./Library/stm32f4xx_adc.c **** 
1239:./Library/stm32f4xx_adc.c **** /**
1240:./Library/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1241:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1242:./Library/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1243:./Library/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1244:./Library/stm32f4xx_adc.c ****   * @retval None
1245:./Library/stm32f4xx_adc.c ****   */
1246:./Library/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1247:./Library/stm32f4xx_adc.c **** {
 1970              		.loc 1 1247 1
 1971              		.cfi_startproc
 1972              		@ args = 0, pretend = 0, frame = 16
 1973              		@ frame_needed = 1, uses_anonymous_args = 0
 1974              		@ link register save eliminated.
 1975 0000 80B4     		push	{r7}
 1976              	.LCFI138:
 1977              		.cfi_def_cfa_offset 4
 1978              		.cfi_offset 7, -4
 1979 0002 85B0     		sub	sp, sp, #20
 1980              	.LCFI139:
 1981              		.cfi_def_cfa_offset 24
 1982 0004 00AF     		add	r7, sp, #0
 1983              	.LCFI140:
 1984              		.cfi_def_cfa_register 7
 1985 0006 7860     		str	r0, [r7, #4]
 1986 0008 0B46     		mov	r3, r1
 1987 000a FB70     		strb	r3, [r7, #3]
1248:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1988              		.loc 1 1248 12
 1989 000c 0023     		movs	r3, #0
 1990 000e FB60     		str	r3, [r7, #12]
1249:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1991              		.loc 1 1249 12
 1992 0010 0023     		movs	r3, #0
 1993 0012 BB60     		str	r3, [r7, #8]
1250:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1251:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1252:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1253:./Library/stm32f4xx_adc.c ****   
1254:./Library/stm32f4xx_adc.c ****   /* Get the old register value */
1255:./Library/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1994              		.loc 1 1255 11
 1995 0014 7B68     		ldr	r3, [r7, #4]
 1996 0016 9B6B     		ldr	r3, [r3, #56]
 1997 0018 FB60     		str	r3, [r7, #12]
1256:./Library/stm32f4xx_adc.c ****   
1257:./Library/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 58


1258:./Library/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1998              		.loc 1 1258 11
 1999 001a FB68     		ldr	r3, [r7, #12]
 2000 001c 23F44013 		bic	r3, r3, #3145728
 2001 0020 FB60     		str	r3, [r7, #12]
1259:./Library/stm32f4xx_adc.c ****   
1260:./Library/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1261:./Library/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 2002              		.loc 1 1261 20
 2003 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2004 0024 013B     		subs	r3, r3, #1
 2005              		.loc 1 1261 11
 2006 0026 BB60     		str	r3, [r7, #8]
1262:./Library/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 2007              		.loc 1 1262 22
 2008 0028 BB68     		ldr	r3, [r7, #8]
 2009 002a 1B05     		lsls	r3, r3, #20
 2010              		.loc 1 1262 11
 2011 002c FA68     		ldr	r2, [r7, #12]
 2012 002e 1343     		orrs	r3, r3, r2
 2013 0030 FB60     		str	r3, [r7, #12]
1263:./Library/stm32f4xx_adc.c ****   
1264:./Library/stm32f4xx_adc.c ****   /* Store the new register value */
1265:./Library/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 2014              		.loc 1 1265 14
 2015 0032 7B68     		ldr	r3, [r7, #4]
 2016 0034 FA68     		ldr	r2, [r7, #12]
 2017 0036 9A63     		str	r2, [r3, #56]
1266:./Library/stm32f4xx_adc.c **** }
 2018              		.loc 1 1266 1
 2019 0038 00BF     		nop
 2020 003a 1437     		adds	r7, r7, #20
 2021              	.LCFI141:
 2022              		.cfi_def_cfa_offset 4
 2023 003c BD46     		mov	sp, r7
 2024              	.LCFI142:
 2025              		.cfi_def_cfa_register 13
 2026              		@ sp needed
 2027 003e 5DF8047B 		ldr	r7, [sp], #4
 2028              	.LCFI143:
 2029              		.cfi_restore 7
 2030              		.cfi_def_cfa_offset 0
 2031 0042 7047     		bx	lr
 2032              		.cfi_endproc
 2033              	.LFE147:
 2035              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 2036              		.align	1
 2037              		.global	ADC_SetInjectedOffset
 2038              		.syntax unified
 2039              		.thumb
 2040              		.thumb_func
 2042              	ADC_SetInjectedOffset:
 2043              	.LFB148:
1267:./Library/stm32f4xx_adc.c **** 
1268:./Library/stm32f4xx_adc.c **** /**
1269:./Library/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1270:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 59


1271:./Library/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1272:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1273:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1274:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1275:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1276:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1277:./Library/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1278:./Library/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1279:./Library/stm32f4xx_adc.c ****   * @retval None
1280:./Library/stm32f4xx_adc.c ****   */
1281:./Library/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1282:./Library/stm32f4xx_adc.c **** {
 2044              		.loc 1 1282 1
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 16
 2047              		@ frame_needed = 1, uses_anonymous_args = 0
 2048              		@ link register save eliminated.
 2049 0000 80B4     		push	{r7}
 2050              	.LCFI144:
 2051              		.cfi_def_cfa_offset 4
 2052              		.cfi_offset 7, -4
 2053 0002 85B0     		sub	sp, sp, #20
 2054              	.LCFI145:
 2055              		.cfi_def_cfa_offset 24
 2056 0004 00AF     		add	r7, sp, #0
 2057              	.LCFI146:
 2058              		.cfi_def_cfa_register 7
 2059 0006 7860     		str	r0, [r7, #4]
 2060 0008 0B46     		mov	r3, r1
 2061 000a FB70     		strb	r3, [r7, #3]
 2062 000c 1346     		mov	r3, r2	@ movhi
 2063 000e 3B80     		strh	r3, [r7]	@ movhi
1283:./Library/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 2064              		.loc 1 1283 19
 2065 0010 0023     		movs	r3, #0
 2066 0012 FB60     		str	r3, [r7, #12]
1284:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1285:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1286:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1287:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1288:./Library/stm32f4xx_adc.c ****   
1289:./Library/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2067              		.loc 1 1289 9
 2068 0014 7B68     		ldr	r3, [r7, #4]
 2069              		.loc 1 1289 7
 2070 0016 FB60     		str	r3, [r7, #12]
1290:./Library/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 2071              		.loc 1 1290 7
 2072 0018 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2073 001a FB68     		ldr	r3, [r7, #12]
 2074 001c 1344     		add	r3, r3, r2
 2075 001e FB60     		str	r3, [r7, #12]
1291:./Library/stm32f4xx_adc.c ****   
1292:./Library/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1293:./Library/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 2076              		.loc 1 1293 3
 2077 0020 FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 60


 2078 0022 1A46     		mov	r2, r3
 2079              		.loc 1 1293 27
 2080 0024 3B88     		ldrh	r3, [r7]
 2081              		.loc 1 1293 25
 2082 0026 1360     		str	r3, [r2]
1294:./Library/stm32f4xx_adc.c **** }
 2083              		.loc 1 1294 1
 2084 0028 00BF     		nop
 2085 002a 1437     		adds	r7, r7, #20
 2086              	.LCFI147:
 2087              		.cfi_def_cfa_offset 4
 2088 002c BD46     		mov	sp, r7
 2089              	.LCFI148:
 2090              		.cfi_def_cfa_register 13
 2091              		@ sp needed
 2092 002e 5DF8047B 		ldr	r7, [sp], #4
 2093              	.LCFI149:
 2094              		.cfi_restore 7
 2095              		.cfi_def_cfa_offset 0
 2096 0032 7047     		bx	lr
 2097              		.cfi_endproc
 2098              	.LFE148:
 2100              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 2101              		.align	1
 2102              		.global	ADC_ExternalTrigInjectedConvConfig
 2103              		.syntax unified
 2104              		.thumb
 2105              		.thumb_func
 2107              	ADC_ExternalTrigInjectedConvConfig:
 2108              	.LFB149:
1295:./Library/stm32f4xx_adc.c **** 
1296:./Library/stm32f4xx_adc.c ****  /**
1297:./Library/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1298:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1299:./Library/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1300:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1301:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1302:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1303:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1304:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1305:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1306:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1307:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1308:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1309:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1310:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1311:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1312:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1313:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1314:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1315:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1316:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1317:./Library/stm32f4xx_adc.c ****   * @retval None
1318:./Library/stm32f4xx_adc.c ****   */
1319:./Library/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1320:./Library/stm32f4xx_adc.c **** {
 2109              		.loc 1 1320 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 61


 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 16
 2112              		@ frame_needed = 1, uses_anonymous_args = 0
 2113              		@ link register save eliminated.
 2114 0000 80B4     		push	{r7}
 2115              	.LCFI150:
 2116              		.cfi_def_cfa_offset 4
 2117              		.cfi_offset 7, -4
 2118 0002 85B0     		sub	sp, sp, #20
 2119              	.LCFI151:
 2120              		.cfi_def_cfa_offset 24
 2121 0004 00AF     		add	r7, sp, #0
 2122              	.LCFI152:
 2123              		.cfi_def_cfa_register 7
 2124 0006 7860     		str	r0, [r7, #4]
 2125 0008 3960     		str	r1, [r7]
1321:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 2126              		.loc 1 1321 12
 2127 000a 0023     		movs	r3, #0
 2128 000c FB60     		str	r3, [r7, #12]
1322:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1323:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1324:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1325:./Library/stm32f4xx_adc.c ****   
1326:./Library/stm32f4xx_adc.c ****   /* Get the old register value */
1327:./Library/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 2129              		.loc 1 1327 10
 2130 000e 7B68     		ldr	r3, [r7, #4]
 2131 0010 9B68     		ldr	r3, [r3, #8]
 2132 0012 FB60     		str	r3, [r7, #12]
1328:./Library/stm32f4xx_adc.c ****   
1329:./Library/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1330:./Library/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 2133              		.loc 1 1330 10
 2134 0014 FB68     		ldr	r3, [r7, #12]
 2135 0016 23F47023 		bic	r3, r3, #983040
 2136 001a FB60     		str	r3, [r7, #12]
1331:./Library/stm32f4xx_adc.c ****   
1332:./Library/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1333:./Library/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 2137              		.loc 1 1333 10
 2138 001c FA68     		ldr	r2, [r7, #12]
 2139 001e 3B68     		ldr	r3, [r7]
 2140 0020 1343     		orrs	r3, r3, r2
 2141 0022 FB60     		str	r3, [r7, #12]
1334:./Library/stm32f4xx_adc.c ****   
1335:./Library/stm32f4xx_adc.c ****   /* Store the new register value */
1336:./Library/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 2142              		.loc 1 1336 13
 2143 0024 7B68     		ldr	r3, [r7, #4]
 2144 0026 FA68     		ldr	r2, [r7, #12]
 2145 0028 9A60     		str	r2, [r3, #8]
1337:./Library/stm32f4xx_adc.c **** }
 2146              		.loc 1 1337 1
 2147 002a 00BF     		nop
 2148 002c 1437     		adds	r7, r7, #20
 2149              	.LCFI153:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 62


 2150              		.cfi_def_cfa_offset 4
 2151 002e BD46     		mov	sp, r7
 2152              	.LCFI154:
 2153              		.cfi_def_cfa_register 13
 2154              		@ sp needed
 2155 0030 5DF8047B 		ldr	r7, [sp], #4
 2156              	.LCFI155:
 2157              		.cfi_restore 7
 2158              		.cfi_def_cfa_offset 0
 2159 0034 7047     		bx	lr
 2160              		.cfi_endproc
 2161              	.LFE149:
 2163              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 2164              		.align	1
 2165              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2170              	ADC_ExternalTrigInjectedConvEdgeConfig:
 2171              	.LFB150:
1338:./Library/stm32f4xx_adc.c **** 
1339:./Library/stm32f4xx_adc.c **** /**
1340:./Library/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1341:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1342:./Library/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1343:./Library/stm32f4xx_adc.c ****   *         to start injected conversion. 
1344:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1345:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1346:./Library/stm32f4xx_adc.c ****   *                                                     injected conversion
1347:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1348:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1349:./Library/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1350:./Library/stm32f4xx_adc.c ****   *                                                               and falling edge
1351:./Library/stm32f4xx_adc.c ****   * @retval None
1352:./Library/stm32f4xx_adc.c ****   */
1353:./Library/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1354:./Library/stm32f4xx_adc.c **** {
 2172              		.loc 1 1354 1
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 16
 2175              		@ frame_needed = 1, uses_anonymous_args = 0
 2176              		@ link register save eliminated.
 2177 0000 80B4     		push	{r7}
 2178              	.LCFI156:
 2179              		.cfi_def_cfa_offset 4
 2180              		.cfi_offset 7, -4
 2181 0002 85B0     		sub	sp, sp, #20
 2182              	.LCFI157:
 2183              		.cfi_def_cfa_offset 24
 2184 0004 00AF     		add	r7, sp, #0
 2185              	.LCFI158:
 2186              		.cfi_def_cfa_register 7
 2187 0006 7860     		str	r0, [r7, #4]
 2188 0008 3960     		str	r1, [r7]
1355:./Library/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 2189              		.loc 1 1355 12
 2190 000a 0023     		movs	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 63


 2191 000c FB60     		str	r3, [r7, #12]
1356:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1357:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1358:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1359:./Library/stm32f4xx_adc.c ****   /* Get the old register value */
1360:./Library/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 2192              		.loc 1 1360 10
 2193 000e 7B68     		ldr	r3, [r7, #4]
 2194 0010 9B68     		ldr	r3, [r3, #8]
 2195 0012 FB60     		str	r3, [r7, #12]
1361:./Library/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1362:./Library/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 2196              		.loc 1 1362 10
 2197 0014 FB68     		ldr	r3, [r7, #12]
 2198 0016 23F44013 		bic	r3, r3, #3145728
 2199 001a FB60     		str	r3, [r7, #12]
1363:./Library/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1364:./Library/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 2200              		.loc 1 1364 10
 2201 001c FA68     		ldr	r2, [r7, #12]
 2202 001e 3B68     		ldr	r3, [r7]
 2203 0020 1343     		orrs	r3, r3, r2
 2204 0022 FB60     		str	r3, [r7, #12]
1365:./Library/stm32f4xx_adc.c ****   /* Store the new register value */
1366:./Library/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 2205              		.loc 1 1366 13
 2206 0024 7B68     		ldr	r3, [r7, #4]
 2207 0026 FA68     		ldr	r2, [r7, #12]
 2208 0028 9A60     		str	r2, [r3, #8]
1367:./Library/stm32f4xx_adc.c **** }
 2209              		.loc 1 1367 1
 2210 002a 00BF     		nop
 2211 002c 1437     		adds	r7, r7, #20
 2212              	.LCFI159:
 2213              		.cfi_def_cfa_offset 4
 2214 002e BD46     		mov	sp, r7
 2215              	.LCFI160:
 2216              		.cfi_def_cfa_register 13
 2217              		@ sp needed
 2218 0030 5DF8047B 		ldr	r7, [sp], #4
 2219              	.LCFI161:
 2220              		.cfi_restore 7
 2221              		.cfi_def_cfa_offset 0
 2222 0034 7047     		bx	lr
 2223              		.cfi_endproc
 2224              	.LFE150:
 2226              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 2227              		.align	1
 2228              		.global	ADC_SoftwareStartInjectedConv
 2229              		.syntax unified
 2230              		.thumb
 2231              		.thumb_func
 2233              	ADC_SoftwareStartInjectedConv:
 2234              	.LFB151:
1368:./Library/stm32f4xx_adc.c **** 
1369:./Library/stm32f4xx_adc.c **** /**
1370:./Library/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 64


1371:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1372:./Library/stm32f4xx_adc.c ****   * @retval None
1373:./Library/stm32f4xx_adc.c ****   */
1374:./Library/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1375:./Library/stm32f4xx_adc.c **** {
 2235              		.loc 1 1375 1
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 8
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
 2240 0000 80B4     		push	{r7}
 2241              	.LCFI162:
 2242              		.cfi_def_cfa_offset 4
 2243              		.cfi_offset 7, -4
 2244 0002 83B0     		sub	sp, sp, #12
 2245              	.LCFI163:
 2246              		.cfi_def_cfa_offset 16
 2247 0004 00AF     		add	r7, sp, #0
 2248              	.LCFI164:
 2249              		.cfi_def_cfa_register 7
 2250 0006 7860     		str	r0, [r7, #4]
1376:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1377:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1378:./Library/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1379:./Library/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 2251              		.loc 1 1379 13
 2252 0008 7B68     		ldr	r3, [r7, #4]
 2253 000a 9B68     		ldr	r3, [r3, #8]
 2254 000c 43F48002 		orr	r2, r3, #4194304
 2255 0010 7B68     		ldr	r3, [r7, #4]
 2256 0012 9A60     		str	r2, [r3, #8]
1380:./Library/stm32f4xx_adc.c **** }
 2257              		.loc 1 1380 1
 2258 0014 00BF     		nop
 2259 0016 0C37     		adds	r7, r7, #12
 2260              	.LCFI165:
 2261              		.cfi_def_cfa_offset 4
 2262 0018 BD46     		mov	sp, r7
 2263              	.LCFI166:
 2264              		.cfi_def_cfa_register 13
 2265              		@ sp needed
 2266 001a 5DF8047B 		ldr	r7, [sp], #4
 2267              	.LCFI167:
 2268              		.cfi_restore 7
 2269              		.cfi_def_cfa_offset 0
 2270 001e 7047     		bx	lr
 2271              		.cfi_endproc
 2272              	.LFE151:
 2274              		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 2275              		.align	1
 2276              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 2277              		.syntax unified
 2278              		.thumb
 2279              		.thumb_func
 2281              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 2282              	.LFB152:
1381:./Library/stm32f4xx_adc.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 65


1382:./Library/stm32f4xx_adc.c **** /**
1383:./Library/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1384:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1385:./Library/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1386:./Library/stm32f4xx_adc.c ****   */
1387:./Library/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1388:./Library/stm32f4xx_adc.c **** {
 2283              		.loc 1 1388 1
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 16
 2286              		@ frame_needed = 1, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
 2288 0000 80B4     		push	{r7}
 2289              	.LCFI168:
 2290              		.cfi_def_cfa_offset 4
 2291              		.cfi_offset 7, -4
 2292 0002 85B0     		sub	sp, sp, #20
 2293              	.LCFI169:
 2294              		.cfi_def_cfa_offset 24
 2295 0004 00AF     		add	r7, sp, #0
 2296              	.LCFI170:
 2297              		.cfi_def_cfa_register 7
 2298 0006 7860     		str	r0, [r7, #4]
1389:./Library/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2299              		.loc 1 1389 14
 2300 0008 0023     		movs	r3, #0
 2301 000a FB73     		strb	r3, [r7, #15]
1390:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1391:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1392:./Library/stm32f4xx_adc.c ****   
1393:./Library/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1394:./Library/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 2302              		.loc 1 1394 12
 2303 000c 7B68     		ldr	r3, [r7, #4]
 2304 000e 9B68     		ldr	r3, [r3, #8]
 2305              		.loc 1 1394 18
 2306 0010 03F48003 		and	r3, r3, #4194304
 2307              		.loc 1 1394 6
 2308 0014 002B     		cmp	r3, #0
 2309 0016 02D0     		beq	.L83
1395:./Library/stm32f4xx_adc.c ****   {
1396:./Library/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1397:./Library/stm32f4xx_adc.c ****     bitstatus = SET;
 2310              		.loc 1 1397 15
 2311 0018 0123     		movs	r3, #1
 2312 001a FB73     		strb	r3, [r7, #15]
 2313 001c 01E0     		b	.L84
 2314              	.L83:
1398:./Library/stm32f4xx_adc.c ****   }
1399:./Library/stm32f4xx_adc.c ****   else
1400:./Library/stm32f4xx_adc.c ****   {
1401:./Library/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1402:./Library/stm32f4xx_adc.c ****     bitstatus = RESET;
 2315              		.loc 1 1402 15
 2316 001e 0023     		movs	r3, #0
 2317 0020 FB73     		strb	r3, [r7, #15]
 2318              	.L84:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 66


1403:./Library/stm32f4xx_adc.c ****   }
1404:./Library/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1405:./Library/stm32f4xx_adc.c ****   return  bitstatus;
 2319              		.loc 1 1405 11
 2320 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1406:./Library/stm32f4xx_adc.c **** }
 2321              		.loc 1 1406 1
 2322 0024 1846     		mov	r0, r3
 2323 0026 1437     		adds	r7, r7, #20
 2324              	.LCFI171:
 2325              		.cfi_def_cfa_offset 4
 2326 0028 BD46     		mov	sp, r7
 2327              	.LCFI172:
 2328              		.cfi_def_cfa_register 13
 2329              		@ sp needed
 2330 002a 5DF8047B 		ldr	r7, [sp], #4
 2331              	.LCFI173:
 2332              		.cfi_restore 7
 2333              		.cfi_def_cfa_offset 0
 2334 002e 7047     		bx	lr
 2335              		.cfi_endproc
 2336              	.LFE152:
 2338              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 2339              		.align	1
 2340              		.global	ADC_AutoInjectedConvCmd
 2341              		.syntax unified
 2342              		.thumb
 2343              		.thumb_func
 2345              	ADC_AutoInjectedConvCmd:
 2346              	.LFB153:
1407:./Library/stm32f4xx_adc.c **** 
1408:./Library/stm32f4xx_adc.c **** /**
1409:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1410:./Library/stm32f4xx_adc.c ****   *         conversion after regular one.
1411:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1412:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1413:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1414:./Library/stm32f4xx_adc.c ****   * @retval None
1415:./Library/stm32f4xx_adc.c ****   */
1416:./Library/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1417:./Library/stm32f4xx_adc.c **** {
 2347              		.loc 1 1417 1
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 8
 2350              		@ frame_needed = 1, uses_anonymous_args = 0
 2351              		@ link register save eliminated.
 2352 0000 80B4     		push	{r7}
 2353              	.LCFI174:
 2354              		.cfi_def_cfa_offset 4
 2355              		.cfi_offset 7, -4
 2356 0002 83B0     		sub	sp, sp, #12
 2357              	.LCFI175:
 2358              		.cfi_def_cfa_offset 16
 2359 0004 00AF     		add	r7, sp, #0
 2360              	.LCFI176:
 2361              		.cfi_def_cfa_register 7
 2362 0006 7860     		str	r0, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 67


 2363 0008 0B46     		mov	r3, r1
 2364 000a FB70     		strb	r3, [r7, #3]
1418:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1419:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1420:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1421:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2365              		.loc 1 1421 6
 2366 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2367 000e 002B     		cmp	r3, #0
 2368 0010 06D0     		beq	.L87
1422:./Library/stm32f4xx_adc.c ****   {
1423:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1424:./Library/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 2369              		.loc 1 1424 15
 2370 0012 7B68     		ldr	r3, [r7, #4]
 2371 0014 5B68     		ldr	r3, [r3, #4]
 2372 0016 43F48062 		orr	r2, r3, #1024
 2373 001a 7B68     		ldr	r3, [r7, #4]
 2374 001c 5A60     		str	r2, [r3, #4]
1425:./Library/stm32f4xx_adc.c ****   }
1426:./Library/stm32f4xx_adc.c ****   else
1427:./Library/stm32f4xx_adc.c ****   {
1428:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1429:./Library/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
1430:./Library/stm32f4xx_adc.c ****   }
1431:./Library/stm32f4xx_adc.c **** }
 2375              		.loc 1 1431 1
 2376 001e 05E0     		b	.L89
 2377              	.L87:
1429:./Library/stm32f4xx_adc.c ****   }
 2378              		.loc 1 1429 15
 2379 0020 7B68     		ldr	r3, [r7, #4]
 2380 0022 5B68     		ldr	r3, [r3, #4]
 2381 0024 23F48062 		bic	r2, r3, #1024
 2382 0028 7B68     		ldr	r3, [r7, #4]
 2383 002a 5A60     		str	r2, [r3, #4]
 2384              	.L89:
 2385              		.loc 1 1431 1
 2386 002c 00BF     		nop
 2387 002e 0C37     		adds	r7, r7, #12
 2388              	.LCFI177:
 2389              		.cfi_def_cfa_offset 4
 2390 0030 BD46     		mov	sp, r7
 2391              	.LCFI178:
 2392              		.cfi_def_cfa_register 13
 2393              		@ sp needed
 2394 0032 5DF8047B 		ldr	r7, [sp], #4
 2395              	.LCFI179:
 2396              		.cfi_restore 7
 2397              		.cfi_def_cfa_offset 0
 2398 0036 7047     		bx	lr
 2399              		.cfi_endproc
 2400              	.LFE153:
 2402              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 2403              		.align	1
 2404              		.global	ADC_InjectedDiscModeCmd
 2405              		.syntax unified
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 68


 2406              		.thumb
 2407              		.thumb_func
 2409              	ADC_InjectedDiscModeCmd:
 2410              	.LFB154:
1432:./Library/stm32f4xx_adc.c **** 
1433:./Library/stm32f4xx_adc.c **** /**
1434:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1435:./Library/stm32f4xx_adc.c ****   *         channel for the specified ADC
1436:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1437:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1438:./Library/stm32f4xx_adc.c ****   *         group channel.
1439:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1440:./Library/stm32f4xx_adc.c ****   * @retval None
1441:./Library/stm32f4xx_adc.c ****   */
1442:./Library/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1443:./Library/stm32f4xx_adc.c **** {
 2411              		.loc 1 1443 1
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 8
 2414              		@ frame_needed = 1, uses_anonymous_args = 0
 2415              		@ link register save eliminated.
 2416 0000 80B4     		push	{r7}
 2417              	.LCFI180:
 2418              		.cfi_def_cfa_offset 4
 2419              		.cfi_offset 7, -4
 2420 0002 83B0     		sub	sp, sp, #12
 2421              	.LCFI181:
 2422              		.cfi_def_cfa_offset 16
 2423 0004 00AF     		add	r7, sp, #0
 2424              	.LCFI182:
 2425              		.cfi_def_cfa_register 7
 2426 0006 7860     		str	r0, [r7, #4]
 2427 0008 0B46     		mov	r3, r1
 2428 000a FB70     		strb	r3, [r7, #3]
1444:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1445:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1446:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1447:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2429              		.loc 1 1447 6
 2430 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2431 000e 002B     		cmp	r3, #0
 2432 0010 06D0     		beq	.L91
1448:./Library/stm32f4xx_adc.c ****   {
1449:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1450:./Library/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2433              		.loc 1 1450 15
 2434 0012 7B68     		ldr	r3, [r7, #4]
 2435 0014 5B68     		ldr	r3, [r3, #4]
 2436 0016 43F48052 		orr	r2, r3, #4096
 2437 001a 7B68     		ldr	r3, [r7, #4]
 2438 001c 5A60     		str	r2, [r3, #4]
1451:./Library/stm32f4xx_adc.c ****   }
1452:./Library/stm32f4xx_adc.c ****   else
1453:./Library/stm32f4xx_adc.c ****   {
1454:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1455:./Library/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
1456:./Library/stm32f4xx_adc.c ****   }
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 69


1457:./Library/stm32f4xx_adc.c **** }
 2439              		.loc 1 1457 1
 2440 001e 05E0     		b	.L93
 2441              	.L91:
1455:./Library/stm32f4xx_adc.c ****   }
 2442              		.loc 1 1455 15
 2443 0020 7B68     		ldr	r3, [r7, #4]
 2444 0022 5B68     		ldr	r3, [r3, #4]
 2445 0024 23F48052 		bic	r2, r3, #4096
 2446 0028 7B68     		ldr	r3, [r7, #4]
 2447 002a 5A60     		str	r2, [r3, #4]
 2448              	.L93:
 2449              		.loc 1 1457 1
 2450 002c 00BF     		nop
 2451 002e 0C37     		adds	r7, r7, #12
 2452              	.LCFI183:
 2453              		.cfi_def_cfa_offset 4
 2454 0030 BD46     		mov	sp, r7
 2455              	.LCFI184:
 2456              		.cfi_def_cfa_register 13
 2457              		@ sp needed
 2458 0032 5DF8047B 		ldr	r7, [sp], #4
 2459              	.LCFI185:
 2460              		.cfi_restore 7
 2461              		.cfi_def_cfa_offset 0
 2462 0036 7047     		bx	lr
 2463              		.cfi_endproc
 2464              	.LFE154:
 2466              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 2467              		.align	1
 2468              		.global	ADC_GetInjectedConversionValue
 2469              		.syntax unified
 2470              		.thumb
 2471              		.thumb_func
 2473              	ADC_GetInjectedConversionValue:
 2474              	.LFB155:
1458:./Library/stm32f4xx_adc.c **** 
1459:./Library/stm32f4xx_adc.c **** /**
1460:./Library/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1461:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1462:./Library/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1463:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1464:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1465:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1466:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1467:./Library/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1468:./Library/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1469:./Library/stm32f4xx_adc.c ****   */
1470:./Library/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1471:./Library/stm32f4xx_adc.c **** {
 2475              		.loc 1 1471 1
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 16
 2478              		@ frame_needed = 1, uses_anonymous_args = 0
 2479              		@ link register save eliminated.
 2480 0000 80B4     		push	{r7}
 2481              	.LCFI186:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 70


 2482              		.cfi_def_cfa_offset 4
 2483              		.cfi_offset 7, -4
 2484 0002 85B0     		sub	sp, sp, #20
 2485              	.LCFI187:
 2486              		.cfi_def_cfa_offset 24
 2487 0004 00AF     		add	r7, sp, #0
 2488              	.LCFI188:
 2489              		.cfi_def_cfa_register 7
 2490 0006 7860     		str	r0, [r7, #4]
 2491 0008 0B46     		mov	r3, r1
 2492 000a FB70     		strb	r3, [r7, #3]
1472:./Library/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2493              		.loc 1 1472 17
 2494 000c 0023     		movs	r3, #0
 2495 000e FB60     		str	r3, [r7, #12]
1473:./Library/stm32f4xx_adc.c ****   
1474:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1475:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1476:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1477:./Library/stm32f4xx_adc.c **** 
1478:./Library/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2496              		.loc 1 1478 9
 2497 0010 7B68     		ldr	r3, [r7, #4]
 2498              		.loc 1 1478 7
 2499 0012 FB60     		str	r3, [r7, #12]
1479:./Library/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2500              		.loc 1 1479 7
 2501 0014 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2502 0016 FB68     		ldr	r3, [r7, #12]
 2503 0018 1344     		add	r3, r3, r2
 2504 001a 2833     		adds	r3, r3, #40
 2505 001c FB60     		str	r3, [r7, #12]
1480:./Library/stm32f4xx_adc.c ****   
1481:./Library/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1482:./Library/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2506              		.loc 1 1482 23
 2507 001e FB68     		ldr	r3, [r7, #12]
 2508              		.loc 1 1482 22
 2509 0020 1B68     		ldr	r3, [r3]
 2510              		.loc 1 1482 10
 2511 0022 9BB2     		uxth	r3, r3
1483:./Library/stm32f4xx_adc.c **** }
 2512              		.loc 1 1483 1
 2513 0024 1846     		mov	r0, r3
 2514 0026 1437     		adds	r7, r7, #20
 2515              	.LCFI189:
 2516              		.cfi_def_cfa_offset 4
 2517 0028 BD46     		mov	sp, r7
 2518              	.LCFI190:
 2519              		.cfi_def_cfa_register 13
 2520              		@ sp needed
 2521 002a 5DF8047B 		ldr	r7, [sp], #4
 2522              	.LCFI191:
 2523              		.cfi_restore 7
 2524              		.cfi_def_cfa_offset 0
 2525 002e 7047     		bx	lr
 2526              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 71


 2527              	.LFE155:
 2529              		.section	.text.ADC_ITConfig,"ax",%progbits
 2530              		.align	1
 2531              		.global	ADC_ITConfig
 2532              		.syntax unified
 2533              		.thumb
 2534              		.thumb_func
 2536              	ADC_ITConfig:
 2537              	.LFB156:
1484:./Library/stm32f4xx_adc.c **** /**
1485:./Library/stm32f4xx_adc.c ****   * @}
1486:./Library/stm32f4xx_adc.c ****   */
1487:./Library/stm32f4xx_adc.c **** 
1488:./Library/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1489:./Library/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1490:./Library/stm32f4xx_adc.c ****  *
1491:./Library/stm32f4xx_adc.c **** @verbatim   
1492:./Library/stm32f4xx_adc.c ****  ===============================================================================
1493:./Library/stm32f4xx_adc.c ****             ##### Interrupts and flags management functions #####
1494:./Library/stm32f4xx_adc.c ****  ===============================================================================  
1495:./Library/stm32f4xx_adc.c **** 
1496:./Library/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the ADC Interrupts 
1497:./Library/stm32f4xx_adc.c ****          and to get the status and clear flags and Interrupts pending bits.
1498:./Library/stm32f4xx_adc.c ****   
1499:./Library/stm32f4xx_adc.c ****     [..] Each ADC provides 4 Interrupts sources and 6 Flags which can be divided
1500:./Library/stm32f4xx_adc.c ****         into 3 groups:
1501:./Library/stm32f4xx_adc.c ****   
1502:./Library/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC regular channels ***
1503:./Library/stm32f4xx_adc.c ****   =====================================================
1504:./Library/stm32f4xx_adc.c ****     [..]
1505:./Library/stm32f4xx_adc.c ****       (+) Flags :
1506:./Library/stm32f4xx_adc.c ****         (##) ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1507:./Library/stm32f4xx_adc.c **** 
1508:./Library/stm32f4xx_adc.c ****         (##) ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate 
1509:./Library/stm32f4xx_adc.c ****              (depending on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() )
1510:./Library/stm32f4xx_adc.c ****              the end of:
1511:./Library/stm32f4xx_adc.c ****              (+++) a regular CHANNEL conversion 
1512:./Library/stm32f4xx_adc.c ****              (+++) sequence of regular GROUP conversions .
1513:./Library/stm32f4xx_adc.c **** 
1514:./Library/stm32f4xx_adc.c ****         (##) ADC_FLAG_STRT: Regular channel start ==> to indicate when regular 
1515:./Library/stm32f4xx_adc.c ****              CHANNEL conversion starts.
1516:./Library/stm32f4xx_adc.c ****     [..]
1517:./Library/stm32f4xx_adc.c ****       (+) Interrupts :
1518:./Library/stm32f4xx_adc.c ****         (##) ADC_IT_OVR : specifies the interrupt source for Overrun detection 
1519:./Library/stm32f4xx_adc.c ****              event.  
1520:./Library/stm32f4xx_adc.c ****         (##) ADC_IT_EOC : specifies the interrupt source for Regular channel end
1521:./Library/stm32f4xx_adc.c ****              of conversion event.
1522:./Library/stm32f4xx_adc.c ****   
1523:./Library/stm32f4xx_adc.c ****   
1524:./Library/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC Injected channels ***
1525:./Library/stm32f4xx_adc.c ****   ======================================================
1526:./Library/stm32f4xx_adc.c ****     [..]
1527:./Library/stm32f4xx_adc.c ****       (+) Flags :
1528:./Library/stm32f4xx_adc.c ****         (##) ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate 
1529:./Library/stm32f4xx_adc.c ****              at the end of injected GROUP conversion  
1530:./Library/stm32f4xx_adc.c ****               
1531:./Library/stm32f4xx_adc.c ****         (##) ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 72


1532:./Library/stm32f4xx_adc.c ****              injected GROUP conversion starts.
1533:./Library/stm32f4xx_adc.c ****     [..]
1534:./Library/stm32f4xx_adc.c ****       (+) Interrupts :
1535:./Library/stm32f4xx_adc.c ****         (##) ADC_IT_JEOC : specifies the interrupt source for Injected channel 
1536:./Library/stm32f4xx_adc.c ****              end of conversion event.     
1537:./Library/stm32f4xx_adc.c **** 
1538:./Library/stm32f4xx_adc.c ****   *** General Flags and Interrupts for the ADC ***
1539:./Library/stm32f4xx_adc.c ****   ================================================ 
1540:./Library/stm32f4xx_adc.c ****     [..]
1541:./Library/stm32f4xx_adc.c ****       (+)Flags :
1542:./Library/stm32f4xx_adc.c ****         (##) ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1543:./Library/stm32f4xx_adc.c ****              crosses the programmed thresholds values.
1544:./Library/stm32f4xx_adc.c ****     [..]          
1545:./Library/stm32f4xx_adc.c ****       (+) Interrupts :
1546:./Library/stm32f4xx_adc.c ****         (##) ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1547:./Library/stm32f4xx_adc.c **** 
1548:./Library/stm32f4xx_adc.c ****   
1549:./Library/stm32f4xx_adc.c ****     [..] The user should identify which mode will be used in his application to 
1550:./Library/stm32f4xx_adc.c ****          manage the ADC controller events: Polling mode or Interrupt mode.
1551:./Library/stm32f4xx_adc.c ****   
1552:./Library/stm32f4xx_adc.c ****     [..] In the Polling Mode it is advised to use the following functions:
1553:./Library/stm32f4xx_adc.c ****       (+) ADC_GetFlagStatus() : to check if flags events occur. 
1554:./Library/stm32f4xx_adc.c ****       (+) ADC_ClearFlag()     : to clear the flags events.
1555:./Library/stm32f4xx_adc.c ****       
1556:./Library/stm32f4xx_adc.c ****     [..] In the Interrupt Mode it is advised to use the following functions:
1557:./Library/stm32f4xx_adc.c ****       (+) ADC_ITConfig()          : to enable or disable the interrupt source.
1558:./Library/stm32f4xx_adc.c ****       (+) ADC_GetITStatus()       : to check if Interrupt occurs.
1559:./Library/stm32f4xx_adc.c ****       (+) ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1560:./Library/stm32f4xx_adc.c ****                                    (corresponding Flag). 
1561:./Library/stm32f4xx_adc.c **** @endverbatim
1562:./Library/stm32f4xx_adc.c ****   * @{
1563:./Library/stm32f4xx_adc.c ****   */ 
1564:./Library/stm32f4xx_adc.c **** /**
1565:./Library/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1566:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1567:./Library/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1568:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1569:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1570:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1571:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1572:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1573:./Library/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1574:./Library/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1575:./Library/stm32f4xx_adc.c ****   * @retval None
1576:./Library/stm32f4xx_adc.c ****   */
1577:./Library/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1578:./Library/stm32f4xx_adc.c **** {
 2538              		.loc 1 1578 1
 2539              		.cfi_startproc
 2540              		@ args = 0, pretend = 0, frame = 16
 2541              		@ frame_needed = 1, uses_anonymous_args = 0
 2542              		@ link register save eliminated.
 2543 0000 80B4     		push	{r7}
 2544              	.LCFI192:
 2545              		.cfi_def_cfa_offset 4
 2546              		.cfi_offset 7, -4
 2547 0002 85B0     		sub	sp, sp, #20
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 73


 2548              	.LCFI193:
 2549              		.cfi_def_cfa_offset 24
 2550 0004 00AF     		add	r7, sp, #0
 2551              	.LCFI194:
 2552              		.cfi_def_cfa_register 7
 2553 0006 7860     		str	r0, [r7, #4]
 2554 0008 0B46     		mov	r3, r1
 2555 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 2556 000c 1346     		mov	r3, r2
 2557 000e 7B70     		strb	r3, [r7, #1]
1579:./Library/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2558              		.loc 1 1579 12
 2559 0010 0023     		movs	r3, #0
 2560 0012 FB60     		str	r3, [r7, #12]
1580:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1581:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1582:./Library/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1583:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1584:./Library/stm32f4xx_adc.c **** 
1585:./Library/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1586:./Library/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2561              		.loc 1 1586 12
 2562 0014 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2563 0016 DBB2     		uxtb	r3, r3
 2564              		.loc 1 1586 10
 2565 0018 FB60     		str	r3, [r7, #12]
1587:./Library/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2566              		.loc 1 1587 10
 2567 001a 0122     		movs	r2, #1
 2568 001c FB68     		ldr	r3, [r7, #12]
 2569 001e 02FA03F3 		lsl	r3, r2, r3
 2570 0022 FB60     		str	r3, [r7, #12]
1588:./Library/stm32f4xx_adc.c **** 
1589:./Library/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2571              		.loc 1 1589 6
 2572 0024 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2573 0026 002B     		cmp	r3, #0
 2574 0028 06D0     		beq	.L97
1590:./Library/stm32f4xx_adc.c ****   {
1591:./Library/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1592:./Library/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2575              		.loc 1 1592 15
 2576 002a 7B68     		ldr	r3, [r7, #4]
 2577 002c 5A68     		ldr	r2, [r3, #4]
 2578 002e FB68     		ldr	r3, [r7, #12]
 2579 0030 1A43     		orrs	r2, r2, r3
 2580 0032 7B68     		ldr	r3, [r7, #4]
 2581 0034 5A60     		str	r2, [r3, #4]
1593:./Library/stm32f4xx_adc.c ****   }
1594:./Library/stm32f4xx_adc.c ****   else
1595:./Library/stm32f4xx_adc.c ****   {
1596:./Library/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1597:./Library/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
1598:./Library/stm32f4xx_adc.c ****   }
1599:./Library/stm32f4xx_adc.c **** }
 2582              		.loc 1 1599 1
 2583 0036 06E0     		b	.L99
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 74


 2584              	.L97:
1597:./Library/stm32f4xx_adc.c ****   }
 2585              		.loc 1 1597 15
 2586 0038 7B68     		ldr	r3, [r7, #4]
 2587 003a 5A68     		ldr	r2, [r3, #4]
1597:./Library/stm32f4xx_adc.c ****   }
 2588              		.loc 1 1597 19
 2589 003c FB68     		ldr	r3, [r7, #12]
 2590 003e DB43     		mvns	r3, r3
1597:./Library/stm32f4xx_adc.c ****   }
 2591              		.loc 1 1597 15
 2592 0040 1A40     		ands	r2, r2, r3
 2593 0042 7B68     		ldr	r3, [r7, #4]
 2594 0044 5A60     		str	r2, [r3, #4]
 2595              	.L99:
 2596              		.loc 1 1599 1
 2597 0046 00BF     		nop
 2598 0048 1437     		adds	r7, r7, #20
 2599              	.LCFI195:
 2600              		.cfi_def_cfa_offset 4
 2601 004a BD46     		mov	sp, r7
 2602              	.LCFI196:
 2603              		.cfi_def_cfa_register 13
 2604              		@ sp needed
 2605 004c 5DF8047B 		ldr	r7, [sp], #4
 2606              	.LCFI197:
 2607              		.cfi_restore 7
 2608              		.cfi_def_cfa_offset 0
 2609 0050 7047     		bx	lr
 2610              		.cfi_endproc
 2611              	.LFE156:
 2613              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 2614              		.align	1
 2615              		.global	ADC_GetFlagStatus
 2616              		.syntax unified
 2617              		.thumb
 2618              		.thumb_func
 2620              	ADC_GetFlagStatus:
 2621              	.LFB157:
1600:./Library/stm32f4xx_adc.c **** 
1601:./Library/stm32f4xx_adc.c **** /**
1602:./Library/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1603:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1604:./Library/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1605:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1606:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1607:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1608:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1609:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1610:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1611:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1612:./Library/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1613:./Library/stm32f4xx_adc.c ****   */
1614:./Library/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1615:./Library/stm32f4xx_adc.c **** {
 2622              		.loc 1 1615 1
 2623              		.cfi_startproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 75


 2624              		@ args = 0, pretend = 0, frame = 16
 2625              		@ frame_needed = 1, uses_anonymous_args = 0
 2626              		@ link register save eliminated.
 2627 0000 80B4     		push	{r7}
 2628              	.LCFI198:
 2629              		.cfi_def_cfa_offset 4
 2630              		.cfi_offset 7, -4
 2631 0002 85B0     		sub	sp, sp, #20
 2632              	.LCFI199:
 2633              		.cfi_def_cfa_offset 24
 2634 0004 00AF     		add	r7, sp, #0
 2635              	.LCFI200:
 2636              		.cfi_def_cfa_register 7
 2637 0006 7860     		str	r0, [r7, #4]
 2638 0008 0B46     		mov	r3, r1
 2639 000a FB70     		strb	r3, [r7, #3]
1616:./Library/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2640              		.loc 1 1616 14
 2641 000c 0023     		movs	r3, #0
 2642 000e FB73     		strb	r3, [r7, #15]
1617:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1618:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1619:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1620:./Library/stm32f4xx_adc.c **** 
1621:./Library/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1622:./Library/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2643              		.loc 1 1622 12
 2644 0010 7B68     		ldr	r3, [r7, #4]
 2645 0012 1A68     		ldr	r2, [r3]
 2646              		.loc 1 1622 17
 2647 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2648 0016 1340     		ands	r3, r3, r2
 2649              		.loc 1 1622 6
 2650 0018 002B     		cmp	r3, #0
 2651 001a 02D0     		beq	.L101
1623:./Library/stm32f4xx_adc.c ****   {
1624:./Library/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1625:./Library/stm32f4xx_adc.c ****     bitstatus = SET;
 2652              		.loc 1 1625 15
 2653 001c 0123     		movs	r3, #1
 2654 001e FB73     		strb	r3, [r7, #15]
 2655 0020 01E0     		b	.L102
 2656              	.L101:
1626:./Library/stm32f4xx_adc.c ****   }
1627:./Library/stm32f4xx_adc.c ****   else
1628:./Library/stm32f4xx_adc.c ****   {
1629:./Library/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1630:./Library/stm32f4xx_adc.c ****     bitstatus = RESET;
 2657              		.loc 1 1630 15
 2658 0022 0023     		movs	r3, #0
 2659 0024 FB73     		strb	r3, [r7, #15]
 2660              	.L102:
1631:./Library/stm32f4xx_adc.c ****   }
1632:./Library/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1633:./Library/stm32f4xx_adc.c ****   return  bitstatus;
 2661              		.loc 1 1633 11
 2662 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 76


1634:./Library/stm32f4xx_adc.c **** }
 2663              		.loc 1 1634 1
 2664 0028 1846     		mov	r0, r3
 2665 002a 1437     		adds	r7, r7, #20
 2666              	.LCFI201:
 2667              		.cfi_def_cfa_offset 4
 2668 002c BD46     		mov	sp, r7
 2669              	.LCFI202:
 2670              		.cfi_def_cfa_register 13
 2671              		@ sp needed
 2672 002e 5DF8047B 		ldr	r7, [sp], #4
 2673              	.LCFI203:
 2674              		.cfi_restore 7
 2675              		.cfi_def_cfa_offset 0
 2676 0032 7047     		bx	lr
 2677              		.cfi_endproc
 2678              	.LFE157:
 2680              		.section	.text.ADC_ClearFlag,"ax",%progbits
 2681              		.align	1
 2682              		.global	ADC_ClearFlag
 2683              		.syntax unified
 2684              		.thumb
 2685              		.thumb_func
 2687              	ADC_ClearFlag:
 2688              	.LFB158:
1635:./Library/stm32f4xx_adc.c **** 
1636:./Library/stm32f4xx_adc.c **** /**
1637:./Library/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1638:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1639:./Library/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1640:./Library/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1641:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1642:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1643:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1644:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1645:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1646:./Library/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1647:./Library/stm32f4xx_adc.c ****   * @retval None
1648:./Library/stm32f4xx_adc.c ****   */
1649:./Library/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1650:./Library/stm32f4xx_adc.c **** {
 2689              		.loc 1 1650 1
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 8
 2692              		@ frame_needed = 1, uses_anonymous_args = 0
 2693              		@ link register save eliminated.
 2694 0000 80B4     		push	{r7}
 2695              	.LCFI204:
 2696              		.cfi_def_cfa_offset 4
 2697              		.cfi_offset 7, -4
 2698 0002 83B0     		sub	sp, sp, #12
 2699              	.LCFI205:
 2700              		.cfi_def_cfa_offset 16
 2701 0004 00AF     		add	r7, sp, #0
 2702              	.LCFI206:
 2703              		.cfi_def_cfa_register 7
 2704 0006 7860     		str	r0, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 77


 2705 0008 0B46     		mov	r3, r1
 2706 000a FB70     		strb	r3, [r7, #3]
1651:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1652:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1653:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1654:./Library/stm32f4xx_adc.c **** 
1655:./Library/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1656:./Library/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2707              		.loc 1 1656 15
 2708 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2709              		.loc 1 1656 14
 2710 000e DA43     		mvns	r2, r3
 2711              		.loc 1 1656 12
 2712 0010 7B68     		ldr	r3, [r7, #4]
 2713 0012 1A60     		str	r2, [r3]
1657:./Library/stm32f4xx_adc.c **** }
 2714              		.loc 1 1657 1
 2715 0014 00BF     		nop
 2716 0016 0C37     		adds	r7, r7, #12
 2717              	.LCFI207:
 2718              		.cfi_def_cfa_offset 4
 2719 0018 BD46     		mov	sp, r7
 2720              	.LCFI208:
 2721              		.cfi_def_cfa_register 13
 2722              		@ sp needed
 2723 001a 5DF8047B 		ldr	r7, [sp], #4
 2724              	.LCFI209:
 2725              		.cfi_restore 7
 2726              		.cfi_def_cfa_offset 0
 2727 001e 7047     		bx	lr
 2728              		.cfi_endproc
 2729              	.LFE158:
 2731              		.section	.text.ADC_GetITStatus,"ax",%progbits
 2732              		.align	1
 2733              		.global	ADC_GetITStatus
 2734              		.syntax unified
 2735              		.thumb
 2736              		.thumb_func
 2738              	ADC_GetITStatus:
 2739              	.LFB159:
1658:./Library/stm32f4xx_adc.c **** 
1659:./Library/stm32f4xx_adc.c **** /**
1660:./Library/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1661:./Library/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1662:./Library/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1663:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1664:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1665:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1666:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1667:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1668:./Library/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1669:./Library/stm32f4xx_adc.c ****   */
1670:./Library/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1671:./Library/stm32f4xx_adc.c **** {
 2740              		.loc 1 1671 1
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 24
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 78


 2743              		@ frame_needed = 1, uses_anonymous_args = 0
 2744              		@ link register save eliminated.
 2745 0000 80B4     		push	{r7}
 2746              	.LCFI210:
 2747              		.cfi_def_cfa_offset 4
 2748              		.cfi_offset 7, -4
 2749 0002 87B0     		sub	sp, sp, #28
 2750              	.LCFI211:
 2751              		.cfi_def_cfa_offset 32
 2752 0004 00AF     		add	r7, sp, #0
 2753              	.LCFI212:
 2754              		.cfi_def_cfa_register 7
 2755 0006 7860     		str	r0, [r7, #4]
 2756 0008 0B46     		mov	r3, r1
 2757 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1672:./Library/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2758              		.loc 1 1672 12
 2759 000c 0023     		movs	r3, #0
 2760 000e FB75     		strb	r3, [r7, #23]
1673:./Library/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2761              		.loc 1 1673 12
 2762 0010 0023     		movs	r3, #0
 2763 0012 3B61     		str	r3, [r7, #16]
 2764              		.loc 1 1673 24
 2765 0014 0023     		movs	r3, #0
 2766 0016 FB60     		str	r3, [r7, #12]
1674:./Library/stm32f4xx_adc.c **** 
1675:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1676:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1677:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1678:./Library/stm32f4xx_adc.c **** 
1679:./Library/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1680:./Library/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2767              		.loc 1 1680 19
 2768 0018 7B88     		ldrh	r3, [r7, #2]
 2769 001a 1B0A     		lsrs	r3, r3, #8
 2770 001c 9BB2     		uxth	r3, r3
 2771              		.loc 1 1680 10
 2772 001e 3B61     		str	r3, [r7, #16]
1681:./Library/stm32f4xx_adc.c **** 
1682:./Library/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1683:./Library/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2773              		.loc 1 1683 23
 2774 0020 7B68     		ldr	r3, [r7, #4]
 2775 0022 5A68     		ldr	r2, [r3, #4]
 2776              		.loc 1 1683 50
 2777 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2778 0026 DBB2     		uxtb	r3, r3
 2779 0028 1946     		mov	r1, r3
 2780              		.loc 1 1683 47
 2781 002a 0123     		movs	r3, #1
 2782 002c 8B40     		lsls	r3, r3, r1
 2783              		.loc 1 1683 16
 2784 002e 1340     		ands	r3, r3, r2
 2785 0030 FB60     		str	r3, [r7, #12]
1684:./Library/stm32f4xx_adc.c **** 
1685:./Library/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 79


1686:./Library/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2786              		.loc 1 1686 13
 2787 0032 7B68     		ldr	r3, [r7, #4]
 2788 0034 1A68     		ldr	r2, [r3]
 2789              		.loc 1 1686 18
 2790 0036 3B69     		ldr	r3, [r7, #16]
 2791 0038 1340     		ands	r3, r3, r2
 2792              		.loc 1 1686 6
 2793 003a 002B     		cmp	r3, #0
 2794 003c 05D0     		beq	.L106
 2795              		.loc 1 1686 48 discriminator 1
 2796 003e FB68     		ldr	r3, [r7, #12]
 2797 0040 002B     		cmp	r3, #0
 2798 0042 02D0     		beq	.L106
1687:./Library/stm32f4xx_adc.c ****   {
1688:./Library/stm32f4xx_adc.c ****     /* ADC_IT is set */
1689:./Library/stm32f4xx_adc.c ****     bitstatus = SET;
 2799              		.loc 1 1689 15
 2800 0044 0123     		movs	r3, #1
 2801 0046 FB75     		strb	r3, [r7, #23]
 2802 0048 01E0     		b	.L107
 2803              	.L106:
1690:./Library/stm32f4xx_adc.c ****   }
1691:./Library/stm32f4xx_adc.c ****   else
1692:./Library/stm32f4xx_adc.c ****   {
1693:./Library/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1694:./Library/stm32f4xx_adc.c ****     bitstatus = RESET;
 2804              		.loc 1 1694 15
 2805 004a 0023     		movs	r3, #0
 2806 004c FB75     		strb	r3, [r7, #23]
 2807              	.L107:
1695:./Library/stm32f4xx_adc.c ****   }
1696:./Library/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1697:./Library/stm32f4xx_adc.c ****   return  bitstatus;
 2808              		.loc 1 1697 11
 2809 004e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1698:./Library/stm32f4xx_adc.c **** }
 2810              		.loc 1 1698 1
 2811 0050 1846     		mov	r0, r3
 2812 0052 1C37     		adds	r7, r7, #28
 2813              	.LCFI213:
 2814              		.cfi_def_cfa_offset 4
 2815 0054 BD46     		mov	sp, r7
 2816              	.LCFI214:
 2817              		.cfi_def_cfa_register 13
 2818              		@ sp needed
 2819 0056 5DF8047B 		ldr	r7, [sp], #4
 2820              	.LCFI215:
 2821              		.cfi_restore 7
 2822              		.cfi_def_cfa_offset 0
 2823 005a 7047     		bx	lr
 2824              		.cfi_endproc
 2825              	.LFE159:
 2827              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 2828              		.align	1
 2829              		.global	ADC_ClearITPendingBit
 2830              		.syntax unified
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 80


 2831              		.thumb
 2832              		.thumb_func
 2834              	ADC_ClearITPendingBit:
 2835              	.LFB160:
1699:./Library/stm32f4xx_adc.c **** 
1700:./Library/stm32f4xx_adc.c **** /**
1701:./Library/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1702:./Library/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1703:./Library/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1704:./Library/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1705:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1706:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1707:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1708:./Library/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1709:./Library/stm32f4xx_adc.c ****   * @retval None
1710:./Library/stm32f4xx_adc.c ****   */
1711:./Library/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1712:./Library/stm32f4xx_adc.c **** {
 2836              		.loc 1 1712 1
 2837              		.cfi_startproc
 2838              		@ args = 0, pretend = 0, frame = 16
 2839              		@ frame_needed = 1, uses_anonymous_args = 0
 2840              		@ link register save eliminated.
 2841 0000 80B4     		push	{r7}
 2842              	.LCFI216:
 2843              		.cfi_def_cfa_offset 4
 2844              		.cfi_offset 7, -4
 2845 0002 85B0     		sub	sp, sp, #20
 2846              	.LCFI217:
 2847              		.cfi_def_cfa_offset 24
 2848 0004 00AF     		add	r7, sp, #0
 2849              	.LCFI218:
 2850              		.cfi_def_cfa_register 7
 2851 0006 7860     		str	r0, [r7, #4]
 2852 0008 0B46     		mov	r3, r1
 2853 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1713:./Library/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2854              		.loc 1 1713 11
 2855 000c 0023     		movs	r3, #0
 2856 000e FB73     		strb	r3, [r7, #15]
1714:./Library/stm32f4xx_adc.c ****   /* Check the parameters */
1715:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1716:./Library/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1717:./Library/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1718:./Library/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2857              		.loc 1 1718 12
 2858 0010 7B88     		ldrh	r3, [r7, #2]
 2859 0012 1B0A     		lsrs	r3, r3, #8
 2860 0014 9BB2     		uxth	r3, r3
 2861              		.loc 1 1718 10
 2862 0016 FB73     		strb	r3, [r7, #15]
1719:./Library/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1720:./Library/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2863              		.loc 1 1720 15
 2864 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2865              		.loc 1 1720 14
 2866 001a DA43     		mvns	r2, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 81


 2867              		.loc 1 1720 12
 2868 001c 7B68     		ldr	r3, [r7, #4]
 2869 001e 1A60     		str	r2, [r3]
1721:./Library/stm32f4xx_adc.c **** }                    
 2870              		.loc 1 1721 1
 2871 0020 00BF     		nop
 2872 0022 1437     		adds	r7, r7, #20
 2873              	.LCFI219:
 2874              		.cfi_def_cfa_offset 4
 2875 0024 BD46     		mov	sp, r7
 2876              	.LCFI220:
 2877              		.cfi_def_cfa_register 13
 2878              		@ sp needed
 2879 0026 5DF8047B 		ldr	r7, [sp], #4
 2880              	.LCFI221:
 2881              		.cfi_restore 7
 2882              		.cfi_def_cfa_offset 0
 2883 002a 7047     		bx	lr
 2884              		.cfi_endproc
 2885              	.LFE160:
 2887              		.text
 2888              	.Letext0:
 2889              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 2890              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 2891              		.file 4 "./CORE/stm32f4xx.h"
 2892              		.file 5 "./Library/stm32f4xx_adc.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 82


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_adc.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:20     .text.ADC_DeInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:26     .text.ADC_DeInit:0000000000000000 ADC_DeInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:56     .text.ADC_Init:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:62     .text.ADC_Init:0000000000000000 ADC_Init
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:198    .text.ADC_Init:00000000000000a8 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:203    .text.ADC_StructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:209    .text.ADC_StructInit:0000000000000000 ADC_StructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:273    .text.ADC_CommonInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:279    .text.ADC_CommonInit:0000000000000000 ADC_CommonInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:354    .text.ADC_CommonInit:0000000000000048 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:360    .text.ADC_CommonStructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:366    .text.ADC_CommonStructInit:0000000000000000 ADC_CommonStructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:418    .text.ADC_Cmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:424    .text.ADC_Cmd:0000000000000000 ADC_Cmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:482    .text.ADC_AnalogWatchdogCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:488    .text.ADC_AnalogWatchdogCmd:0000000000000000 ADC_AnalogWatchdogCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:546    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:552    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 ADC_AnalogWatchdogThresholdsConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:600    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:606    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 ADC_AnalogWatchdogSingleChannelConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:664    .text.ADC_TempSensorVrefintCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:670    .text.ADC_TempSensorVrefintCmd:0000000000000000 ADC_TempSensorVrefintCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:726    .text.ADC_TempSensorVrefintCmd:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:731    .text.ADC_VBATCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:737    .text.ADC_VBATCmd:0000000000000000 ADC_VBATCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:793    .text.ADC_VBATCmd:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:798    .text.ADC_RegularChannelConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:804    .text.ADC_RegularChannelConfig:0000000000000000 ADC_RegularChannelConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1088   .text.ADC_SoftwareStartConv:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1094   .text.ADC_SoftwareStartConv:0000000000000000 ADC_SoftwareStartConv
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1136   .text.ADC_GetSoftwareStartConvStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1142   .text.ADC_GetSoftwareStartConvStatus:0000000000000000 ADC_GetSoftwareStartConvStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1200   .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1206   .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 ADC_EOCOnEachRegularChannelCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1264   .text.ADC_ContinuousModeCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1270   .text.ADC_ContinuousModeCmd:0000000000000000 ADC_ContinuousModeCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1328   .text.ADC_DiscModeChannelCountConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1334   .text.ADC_DiscModeChannelCountConfig:0000000000000000 ADC_DiscModeChannelCountConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1402   .text.ADC_DiscModeCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1408   .text.ADC_DiscModeCmd:0000000000000000 ADC_DiscModeCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1466   .text.ADC_GetConversionValue:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1472   .text.ADC_GetConversionValue:0000000000000000 ADC_GetConversionValue
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1513   .text.ADC_GetMultiModeConversionValue:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1519   .text.ADC_GetMultiModeConversionValue:0000000000000000 ADC_GetMultiModeConversionValue
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1550   .text.ADC_GetMultiModeConversionValue:0000000000000014 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1555   .text.ADC_DMACmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1561   .text.ADC_DMACmd:0000000000000000 ADC_DMACmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1619   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1625   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 ADC_DMARequestAfterLastTransferCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1683   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1689   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 ADC_MultiModeDMARequestAfterLastTransferCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1745   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000038 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1750   .text.ADC_InjectedChannelConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1756   .text.ADC_InjectedChannelConfig:0000000000000000 ADC_InjectedChannelConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1962   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 $t
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s 			page 83


/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:1968   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 ADC_InjectedSequencerLengthConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2036   .text.ADC_SetInjectedOffset:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2042   .text.ADC_SetInjectedOffset:0000000000000000 ADC_SetInjectedOffset
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2101   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2107   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 ADC_ExternalTrigInjectedConvConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2164   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2170   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 ADC_ExternalTrigInjectedConvEdgeConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2227   .text.ADC_SoftwareStartInjectedConv:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2233   .text.ADC_SoftwareStartInjectedConv:0000000000000000 ADC_SoftwareStartInjectedConv
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2275   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2281   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 ADC_GetSoftwareStartInjectedConvCmdStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2339   .text.ADC_AutoInjectedConvCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2345   .text.ADC_AutoInjectedConvCmd:0000000000000000 ADC_AutoInjectedConvCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2403   .text.ADC_InjectedDiscModeCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2409   .text.ADC_InjectedDiscModeCmd:0000000000000000 ADC_InjectedDiscModeCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2467   .text.ADC_GetInjectedConversionValue:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2473   .text.ADC_GetInjectedConversionValue:0000000000000000 ADC_GetInjectedConversionValue
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2530   .text.ADC_ITConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2536   .text.ADC_ITConfig:0000000000000000 ADC_ITConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2614   .text.ADC_GetFlagStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2620   .text.ADC_GetFlagStatus:0000000000000000 ADC_GetFlagStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2681   .text.ADC_ClearFlag:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2687   .text.ADC_ClearFlag:0000000000000000 ADC_ClearFlag
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2732   .text.ADC_GetITStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2738   .text.ADC_GetITStatus:0000000000000000 ADC_GetITStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2828   .text.ADC_ClearITPendingBit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccuHBdFA.s:2834   .text.ADC_ClearITPendingBit:0000000000000000 ADC_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
