ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_cryp_tdes.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  20              		.align	1
  21              		.global	CRYP_TDES_ECB
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	CRYP_TDES_ECB:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_cryp_tdes.c"
   1:./Library/stm32f4xx_cryp_tdes.c **** /**
   2:./Library/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:./Library/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:./Library/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_cryp_tdes.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_cryp_tdes.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:./Library/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:./Library/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:./Library/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:./Library/stm32f4xx_cryp_tdes.c ****   *
  12:./Library/stm32f4xx_cryp_tdes.c **** @verbatim
  13:./Library/stm32f4xx_cryp_tdes.c **** 
  14:./Library/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  15:./Library/stm32f4xx_cryp_tdes.c ****                            ##### How to use this driver #####
  16:./Library/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  17:./Library/stm32f4xx_cryp_tdes.c ****  [..]
  18:./Library/stm32f4xx_cryp_tdes.c ****    (#) Enable The CRYP controller clock using 
  19:./Library/stm32f4xx_cryp_tdes.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:./Library/stm32f4xx_cryp_tdes.c ****   
  21:./Library/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB() function.
  22:./Library/stm32f4xx_cryp_tdes.c ****   
  23:./Library/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC() function.
  24:./Library/stm32f4xx_cryp_tdes.c ****   
  25:./Library/stm32f4xx_cryp_tdes.c **** @endverbatim
  26:./Library/stm32f4xx_cryp_tdes.c ****   *
  27:./Library/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  28:./Library/stm32f4xx_cryp_tdes.c ****   * @attention
  29:./Library/stm32f4xx_cryp_tdes.c ****   *
  30:./Library/stm32f4xx_cryp_tdes.c ****   * Copyright (c) 2016 STMicroelectronics.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 2


  31:./Library/stm32f4xx_cryp_tdes.c ****   * All rights reserved.
  32:./Library/stm32f4xx_cryp_tdes.c ****   *
  33:./Library/stm32f4xx_cryp_tdes.c ****   * This software is licensed under terms that can be found in the LICENSE file
  34:./Library/stm32f4xx_cryp_tdes.c ****   * in the root directory of this software component.
  35:./Library/stm32f4xx_cryp_tdes.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  36:./Library/stm32f4xx_cryp_tdes.c ****   *
  37:./Library/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  38:./Library/stm32f4xx_cryp_tdes.c ****   */
  39:./Library/stm32f4xx_cryp_tdes.c **** 
  40:./Library/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  41:./Library/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  42:./Library/stm32f4xx_cryp_tdes.c **** 
  43:./Library/stm32f4xx_cryp_tdes.c **** 
  44:./Library/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  45:./Library/stm32f4xx_cryp_tdes.c ****   * @{
  46:./Library/stm32f4xx_cryp_tdes.c ****   */
  47:./Library/stm32f4xx_cryp_tdes.c **** 
  48:./Library/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  49:./Library/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  50:./Library/stm32f4xx_cryp_tdes.c ****   * @{
  51:./Library/stm32f4xx_cryp_tdes.c ****   */
  52:./Library/stm32f4xx_cryp_tdes.c **** 
  53:./Library/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  54:./Library/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  55:./Library/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  56:./Library/stm32f4xx_cryp_tdes.c **** 
  57:./Library/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  58:./Library/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  59:./Library/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  60:./Library/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  61:./Library/stm32f4xx_cryp_tdes.c **** 
  62:./Library/stm32f4xx_cryp_tdes.c **** 
  63:./Library/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  64:./Library/stm32f4xx_cryp_tdes.c ****   * @{
  65:./Library/stm32f4xx_cryp_tdes.c ****   */ 
  66:./Library/stm32f4xx_cryp_tdes.c **** 
  67:./Library/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  68:./Library/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  69:./Library/stm32f4xx_cryp_tdes.c ****  *
  70:./Library/stm32f4xx_cryp_tdes.c **** @verbatim   
  71:./Library/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  72:./Library/stm32f4xx_cryp_tdes.c ****                       ##### High Level TDES functions #####
  73:./Library/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  74:./Library/stm32f4xx_cryp_tdes.c **** 
  75:./Library/stm32f4xx_cryp_tdes.c **** @endverbatim
  76:./Library/stm32f4xx_cryp_tdes.c ****   * @{
  77:./Library/stm32f4xx_cryp_tdes.c ****   */
  78:./Library/stm32f4xx_cryp_tdes.c **** 
  79:./Library/stm32f4xx_cryp_tdes.c **** /**
  80:./Library/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  81:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  82:./Library/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  83:./Library/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  84:./Library/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  85:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  86:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  87:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 3


  88:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  89:./Library/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  90:./Library/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  91:./Library/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  92:./Library/stm32f4xx_cryp_tdes.c ****   */
  93:./Library/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
  94:./Library/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
  95:./Library/stm32f4xx_cryp_tdes.c **** {
  29              		.loc 1 95 1
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 0, frame = 120
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 90B5     		push	{r4, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 9FB0     		sub	sp, sp, #124
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 136
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 B960     		str	r1, [r7, #8]
  46 0008 7A60     		str	r2, [r7, #4]
  47 000a 3B60     		str	r3, [r7]
  48 000c 0346     		mov	r3, r0
  49 000e FB73     		strb	r3, [r7, #15]
  96:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
  97:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  98:./Library/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 98 17
  51 0010 0023     		movs	r3, #0
  52 0012 7B61     		str	r3, [r7, #20]
  99:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
  53              		.loc 1 99 12
  54 0014 0023     		movs	r3, #0
  55 0016 7B66     		str	r3, [r7, #100]
 100:./Library/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
  56              		.loc 1 100 15
  57 0018 0123     		movs	r3, #1
  58 001a 87F87730 		strb	r3, [r7, #119]
 101:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
  59              		.loc 1 101 12
  60 001e BB68     		ldr	r3, [r7, #8]
  61 0020 3B66     		str	r3, [r7, #96]
 102:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 102 12
  63 0022 7B68     		ldr	r3, [r7, #4]
  64 0024 3B67     		str	r3, [r7, #112]
 103:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  65              		.loc 1 103 12
  66 0026 D7F88830 		ldr	r3, [r7, #136]
  67 002a FB66     		str	r3, [r7, #108]
 104:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
  68              		.loc 1 104 12
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 4


  69 002c 0023     		movs	r3, #0
  70 002e BB66     		str	r3, [r7, #104]
 105:./Library/stm32f4xx_cryp_tdes.c **** 
 106:./Library/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 107:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  71              		.loc 1 107 3
  72 0030 07F11803 		add	r3, r7, #24
  73 0034 1846     		mov	r0, r3
  74 0036 FFF7FEFF 		bl	CRYP_KeyStructInit
 108:./Library/stm32f4xx_cryp_tdes.c **** 
 109:./Library/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 110:./Library/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  75              		.loc 1 110 5
  76 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  77 003c 012B     		cmp	r3, #1
  78 003e 02D1     		bne	.L2
 111:./Library/stm32f4xx_cryp_tdes.c ****   {
 112:./Library/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  79              		.loc 1 112 43
  80 0040 0023     		movs	r3, #0
  81 0042 BB63     		str	r3, [r7, #56]
  82 0044 01E0     		b	.L3
  83              	.L2:
 113:./Library/stm32f4xx_cryp_tdes.c ****   }
 114:./Library/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 115:./Library/stm32f4xx_cryp_tdes.c ****   {
 116:./Library/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  84              		.loc 1 116 43
  85 0046 0423     		movs	r3, #4
  86 0048 BB63     		str	r3, [r7, #56]
  87              	.L3:
 117:./Library/stm32f4xx_cryp_tdes.c ****   }
 118:./Library/stm32f4xx_cryp_tdes.c **** 
 119:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  88              		.loc 1 119 41
  89 004a 0023     		movs	r3, #0
  90 004c FB63     		str	r3, [r7, #60]
 120:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  91              		.loc 1 120 41
  92 004e 8023     		movs	r3, #128
  93 0050 3B64     		str	r3, [r7, #64]
 121:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  94              		.loc 1 121 3
  95 0052 07F13803 		add	r3, r7, #56
  96 0056 1846     		mov	r0, r3
  97 0058 FFF7FEFF 		bl	CRYP_Init
 122:./Library/stm32f4xx_cryp_tdes.c **** 
 123:./Library/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 124:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  98              		.loc 1 124 53
  99 005c 3B6E     		ldr	r3, [r7, #96]
 100              		.loc 1 124 46
 101 005e 1B68     		ldr	r3, [r3]
 102 0060 BB64     		str	r3, [r7, #72]
 103              	.LBB30:
 104              	.LBB31:
 105              		.file 2 "./CORE/core_cmInstr.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 5


   1:./CORE/core_cmInstr.h **** /**************************************************************************//**
   2:./CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./CORE/core_cmInstr.h ****  * @version  V4.10
   5:./CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:./CORE/core_cmInstr.h ****  *
   7:./CORE/core_cmInstr.h ****  * @note
   8:./CORE/core_cmInstr.h ****  *
   9:./CORE/core_cmInstr.h ****  ******************************************************************************/
  10:./CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./CORE/core_cmInstr.h **** 
  12:./CORE/core_cmInstr.h ****    All rights reserved.
  13:./CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./CORE/core_cmInstr.h ****      specific prior written permission.
  23:./CORE/core_cmInstr.h ****    *
  24:./CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./CORE/core_cmInstr.h **** 
  37:./CORE/core_cmInstr.h **** 
  38:./CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./CORE/core_cmInstr.h **** 
  41:./CORE/core_cmInstr.h **** 
  42:./CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:./CORE/core_cmInstr.h ****   @{
  46:./CORE/core_cmInstr.h **** */
  47:./CORE/core_cmInstr.h **** 
  48:./CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./CORE/core_cmInstr.h **** 
  51:./CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./CORE/core_cmInstr.h **** #endif
  54:./CORE/core_cmInstr.h **** 
  55:./CORE/core_cmInstr.h **** 
  56:./CORE/core_cmInstr.h **** /** \brief  No Operation
  57:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 6


  58:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./CORE/core_cmInstr.h ****  */
  60:./CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:./CORE/core_cmInstr.h **** 
  62:./CORE/core_cmInstr.h **** 
  63:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./CORE/core_cmInstr.h **** 
  65:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:./CORE/core_cmInstr.h ****  */
  68:./CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:./CORE/core_cmInstr.h **** 
  70:./CORE/core_cmInstr.h **** 
  71:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:./CORE/core_cmInstr.h **** 
  73:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./CORE/core_cmInstr.h ****  */
  76:./CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:./CORE/core_cmInstr.h **** 
  78:./CORE/core_cmInstr.h **** 
  79:./CORE/core_cmInstr.h **** /** \brief  Send Event
  80:./CORE/core_cmInstr.h **** 
  81:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./CORE/core_cmInstr.h ****  */
  83:./CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:./CORE/core_cmInstr.h **** 
  85:./CORE/core_cmInstr.h **** 
  86:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./CORE/core_cmInstr.h **** 
  88:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./CORE/core_cmInstr.h ****  */
  92:./CORE/core_cmInstr.h **** #define __ISB() do {\
  93:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:./CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:./CORE/core_cmInstr.h ****                 } while (0)
  97:./CORE/core_cmInstr.h **** 
  98:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:./CORE/core_cmInstr.h **** 
 100:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./CORE/core_cmInstr.h ****  */
 103:./CORE/core_cmInstr.h **** #define __DSB() do {\
 104:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:./CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:./CORE/core_cmInstr.h ****                 } while (0)
 108:./CORE/core_cmInstr.h **** 
 109:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./CORE/core_cmInstr.h **** 
 111:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./CORE/core_cmInstr.h ****  */
 114:./CORE/core_cmInstr.h **** #define __DMB() do {\
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 7


 115:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:./CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:./CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:./CORE/core_cmInstr.h ****                 } while (0)
 119:./CORE/core_cmInstr.h **** 
 120:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./CORE/core_cmInstr.h **** 
 122:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./CORE/core_cmInstr.h **** 
 124:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./CORE/core_cmInstr.h ****     \return               Reversed value
 126:./CORE/core_cmInstr.h ****  */
 127:./CORE/core_cmInstr.h **** #define __REV                             __rev
 128:./CORE/core_cmInstr.h **** 
 129:./CORE/core_cmInstr.h **** 
 130:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./CORE/core_cmInstr.h **** 
 132:./CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./CORE/core_cmInstr.h **** 
 134:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./CORE/core_cmInstr.h ****     \return               Reversed value
 136:./CORE/core_cmInstr.h ****  */
 137:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./CORE/core_cmInstr.h **** {
 140:./CORE/core_cmInstr.h ****   rev16 r0, r0
 141:./CORE/core_cmInstr.h ****   bx lr
 142:./CORE/core_cmInstr.h **** }
 143:./CORE/core_cmInstr.h **** #endif
 144:./CORE/core_cmInstr.h **** 
 145:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./CORE/core_cmInstr.h **** 
 147:./CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./CORE/core_cmInstr.h **** 
 149:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./CORE/core_cmInstr.h ****     \return               Reversed value
 151:./CORE/core_cmInstr.h ****  */
 152:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:./CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./CORE/core_cmInstr.h **** {
 155:./CORE/core_cmInstr.h ****   revsh r0, r0
 156:./CORE/core_cmInstr.h ****   bx lr
 157:./CORE/core_cmInstr.h **** }
 158:./CORE/core_cmInstr.h **** #endif
 159:./CORE/core_cmInstr.h **** 
 160:./CORE/core_cmInstr.h **** 
 161:./CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./CORE/core_cmInstr.h **** 
 163:./CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./CORE/core_cmInstr.h **** 
 165:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./CORE/core_cmInstr.h ****     \return               Rotated value
 168:./CORE/core_cmInstr.h ****  */
 169:./CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:./CORE/core_cmInstr.h **** 
 171:./CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 8


 172:./CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:./CORE/core_cmInstr.h **** 
 174:./CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:./CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:./CORE/core_cmInstr.h **** 
 177:./CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./CORE/core_cmInstr.h ****  */
 180:./CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./CORE/core_cmInstr.h **** 
 182:./CORE/core_cmInstr.h **** 
 183:./CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./CORE/core_cmInstr.h **** 
 185:./CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./CORE/core_cmInstr.h **** 
 187:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./CORE/core_cmInstr.h ****     \return               Reversed value
 189:./CORE/core_cmInstr.h ****  */
 190:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./CORE/core_cmInstr.h **** #else
 193:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./CORE/core_cmInstr.h **** {
 195:./CORE/core_cmInstr.h ****   uint32_t result;
 196:./CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./CORE/core_cmInstr.h **** 
 198:./CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./CORE/core_cmInstr.h ****   {
 201:./CORE/core_cmInstr.h ****     result <<= 1;
 202:./CORE/core_cmInstr.h ****     result |= value & 1;
 203:./CORE/core_cmInstr.h ****     s--;
 204:./CORE/core_cmInstr.h ****   }
 205:./CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./CORE/core_cmInstr.h ****   return(result);
 207:./CORE/core_cmInstr.h **** }
 208:./CORE/core_cmInstr.h **** #endif
 209:./CORE/core_cmInstr.h **** 
 210:./CORE/core_cmInstr.h **** 
 211:./CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:./CORE/core_cmInstr.h **** 
 213:./CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./CORE/core_cmInstr.h **** 
 215:./CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./CORE/core_cmInstr.h ****  */
 218:./CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:./CORE/core_cmInstr.h **** 
 220:./CORE/core_cmInstr.h **** 
 221:./CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./CORE/core_cmInstr.h **** 
 223:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./CORE/core_cmInstr.h **** 
 225:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./CORE/core_cmInstr.h **** 
 227:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 9


 229:./CORE/core_cmInstr.h ****  */
 230:./CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./CORE/core_cmInstr.h **** 
 232:./CORE/core_cmInstr.h **** 
 233:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./CORE/core_cmInstr.h **** 
 235:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./CORE/core_cmInstr.h **** 
 237:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./CORE/core_cmInstr.h ****  */
 240:./CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./CORE/core_cmInstr.h **** 
 242:./CORE/core_cmInstr.h **** 
 243:./CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./CORE/core_cmInstr.h **** 
 245:./CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./CORE/core_cmInstr.h **** 
 247:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./CORE/core_cmInstr.h ****  */
 250:./CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./CORE/core_cmInstr.h **** 
 252:./CORE/core_cmInstr.h **** 
 253:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./CORE/core_cmInstr.h **** 
 255:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./CORE/core_cmInstr.h **** 
 257:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:./CORE/core_cmInstr.h ****     \return          1  Function failed
 261:./CORE/core_cmInstr.h ****  */
 262:./CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./CORE/core_cmInstr.h **** 
 264:./CORE/core_cmInstr.h **** 
 265:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:./CORE/core_cmInstr.h **** 
 267:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./CORE/core_cmInstr.h **** 
 269:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:./CORE/core_cmInstr.h ****     \return          1  Function failed
 273:./CORE/core_cmInstr.h ****  */
 274:./CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./CORE/core_cmInstr.h **** 
 276:./CORE/core_cmInstr.h **** 
 277:./CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./CORE/core_cmInstr.h **** 
 279:./CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./CORE/core_cmInstr.h **** 
 281:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:./CORE/core_cmInstr.h ****     \return          1  Function failed
 285:./CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 10


 286:./CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:./CORE/core_cmInstr.h **** 
 288:./CORE/core_cmInstr.h **** 
 289:./CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:./CORE/core_cmInstr.h **** 
 291:./CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./CORE/core_cmInstr.h **** 
 293:./CORE/core_cmInstr.h ****  */
 294:./CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./CORE/core_cmInstr.h **** 
 296:./CORE/core_cmInstr.h **** 
 297:./CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./CORE/core_cmInstr.h **** 
 299:./CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:./CORE/core_cmInstr.h **** 
 301:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./CORE/core_cmInstr.h ****     \return             Saturated value
 304:./CORE/core_cmInstr.h ****  */
 305:./CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./CORE/core_cmInstr.h **** 
 307:./CORE/core_cmInstr.h **** 
 308:./CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./CORE/core_cmInstr.h **** 
 310:./CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./CORE/core_cmInstr.h **** 
 312:./CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./CORE/core_cmInstr.h ****     \return             Saturated value
 315:./CORE/core_cmInstr.h ****  */
 316:./CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:./CORE/core_cmInstr.h **** 
 318:./CORE/core_cmInstr.h **** 
 319:./CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./CORE/core_cmInstr.h **** 
 321:./CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:./CORE/core_cmInstr.h **** 
 324:./CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./CORE/core_cmInstr.h ****     \return               Rotated value
 326:./CORE/core_cmInstr.h ****  */
 327:./CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./CORE/core_cmInstr.h **** {
 330:./CORE/core_cmInstr.h ****   rrx r0, r0
 331:./CORE/core_cmInstr.h ****   bx lr
 332:./CORE/core_cmInstr.h **** }
 333:./CORE/core_cmInstr.h **** #endif
 334:./CORE/core_cmInstr.h **** 
 335:./CORE/core_cmInstr.h **** 
 336:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./CORE/core_cmInstr.h **** 
 338:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./CORE/core_cmInstr.h **** 
 340:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 11


 343:./CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:./CORE/core_cmInstr.h **** 
 345:./CORE/core_cmInstr.h **** 
 346:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:./CORE/core_cmInstr.h **** 
 348:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./CORE/core_cmInstr.h **** 
 350:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./CORE/core_cmInstr.h ****  */
 353:./CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./CORE/core_cmInstr.h **** 
 355:./CORE/core_cmInstr.h **** 
 356:./CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./CORE/core_cmInstr.h **** 
 358:./CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./CORE/core_cmInstr.h **** 
 360:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./CORE/core_cmInstr.h ****  */
 363:./CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./CORE/core_cmInstr.h **** 
 365:./CORE/core_cmInstr.h **** 
 366:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./CORE/core_cmInstr.h **** 
 368:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./CORE/core_cmInstr.h **** 
 370:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./CORE/core_cmInstr.h ****  */
 373:./CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./CORE/core_cmInstr.h **** 
 375:./CORE/core_cmInstr.h **** 
 376:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./CORE/core_cmInstr.h **** 
 378:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./CORE/core_cmInstr.h **** 
 380:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./CORE/core_cmInstr.h ****  */
 383:./CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:./CORE/core_cmInstr.h **** 
 385:./CORE/core_cmInstr.h **** 
 386:./CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./CORE/core_cmInstr.h **** 
 388:./CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./CORE/core_cmInstr.h **** 
 390:./CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./CORE/core_cmInstr.h ****  */
 393:./CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./CORE/core_cmInstr.h **** 
 395:./CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./CORE/core_cmInstr.h **** 
 397:./CORE/core_cmInstr.h **** 
 398:./CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./CORE/core_cmInstr.h **** /* GNU gcc specific functions */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 12


 400:./CORE/core_cmInstr.h **** 
 401:./CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:./CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:./CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./CORE/core_cmInstr.h **** #else
 408:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./CORE/core_cmInstr.h **** #endif
 411:./CORE/core_cmInstr.h **** 
 412:./CORE/core_cmInstr.h **** /** \brief  No Operation
 413:./CORE/core_cmInstr.h **** 
 414:./CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./CORE/core_cmInstr.h ****  */
 416:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./CORE/core_cmInstr.h **** {
 418:./CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./CORE/core_cmInstr.h **** }
 420:./CORE/core_cmInstr.h **** 
 421:./CORE/core_cmInstr.h **** 
 422:./CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./CORE/core_cmInstr.h **** 
 424:./CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:./CORE/core_cmInstr.h ****  */
 427:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./CORE/core_cmInstr.h **** {
 429:./CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./CORE/core_cmInstr.h **** }
 431:./CORE/core_cmInstr.h **** 
 432:./CORE/core_cmInstr.h **** 
 433:./CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:./CORE/core_cmInstr.h **** 
 435:./CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:./CORE/core_cmInstr.h ****  */
 438:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./CORE/core_cmInstr.h **** {
 440:./CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:./CORE/core_cmInstr.h **** }
 442:./CORE/core_cmInstr.h **** 
 443:./CORE/core_cmInstr.h **** 
 444:./CORE/core_cmInstr.h **** /** \brief  Send Event
 445:./CORE/core_cmInstr.h **** 
 446:./CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./CORE/core_cmInstr.h ****  */
 448:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./CORE/core_cmInstr.h **** {
 450:./CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./CORE/core_cmInstr.h **** }
 452:./CORE/core_cmInstr.h **** 
 453:./CORE/core_cmInstr.h **** 
 454:./CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./CORE/core_cmInstr.h **** 
 456:./CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 13


 457:./CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:./CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./CORE/core_cmInstr.h ****  */
 460:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:./CORE/core_cmInstr.h **** {
 462:./CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./CORE/core_cmInstr.h **** }
 464:./CORE/core_cmInstr.h **** 
 465:./CORE/core_cmInstr.h **** 
 466:./CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./CORE/core_cmInstr.h **** 
 468:./CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./CORE/core_cmInstr.h ****  */
 471:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./CORE/core_cmInstr.h **** {
 473:./CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./CORE/core_cmInstr.h **** }
 475:./CORE/core_cmInstr.h **** 
 476:./CORE/core_cmInstr.h **** 
 477:./CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./CORE/core_cmInstr.h **** 
 479:./CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./CORE/core_cmInstr.h ****  */
 482:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./CORE/core_cmInstr.h **** {
 484:./CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./CORE/core_cmInstr.h **** }
 486:./CORE/core_cmInstr.h **** 
 487:./CORE/core_cmInstr.h **** 
 488:./CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./CORE/core_cmInstr.h **** 
 490:./CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./CORE/core_cmInstr.h **** 
 492:./CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./CORE/core_cmInstr.h ****     \return               Reversed value
 494:./CORE/core_cmInstr.h ****  */
 495:./CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./CORE/core_cmInstr.h **** {
 497:./CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:./CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 106              		.loc 2 498 10
 107 0062 BB6C     		ldr	r3, [r7, #72]
 108 0064 1BBA     		rev	r3, r3
 109              	.LBE31:
 110              	.LBE30:
 111              		.loc 1 124 44
 112 0066 3B62     		str	r3, [r7, #32]
 125:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 113              		.loc 1 125 10
 114 0068 3B6E     		ldr	r3, [r7, #96]
 115 006a 0433     		adds	r3, r3, #4
 116 006c 3B66     		str	r3, [r7, #96]
 126:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 117              		.loc 1 126 53
 118 006e 3B6E     		ldr	r3, [r7, #96]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 14


 119              		.loc 1 126 46
 120 0070 1B68     		ldr	r3, [r3]
 121 0072 FB64     		str	r3, [r7, #76]
 122              	.LBB32:
 123              	.LBB33:
 124              		.loc 2 498 10
 125 0074 FB6C     		ldr	r3, [r7, #76]
 126 0076 1BBA     		rev	r3, r3
 127              	.LBE33:
 128              	.LBE32:
 129              		.loc 1 126 44
 130 0078 7B62     		str	r3, [r7, #36]
 127:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 131              		.loc 1 127 10
 132 007a 3B6E     		ldr	r3, [r7, #96]
 133 007c 0433     		adds	r3, r3, #4
 134 007e 3B66     		str	r3, [r7, #96]
 128:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 135              		.loc 1 128 53
 136 0080 3B6E     		ldr	r3, [r7, #96]
 137              		.loc 1 128 46
 138 0082 1B68     		ldr	r3, [r3]
 139 0084 3B65     		str	r3, [r7, #80]
 140              	.LBB34:
 141              	.LBB35:
 142              		.loc 2 498 10
 143 0086 3B6D     		ldr	r3, [r7, #80]
 144 0088 1BBA     		rev	r3, r3
 145              	.LBE35:
 146              	.LBE34:
 147              		.loc 1 128 44
 148 008a BB62     		str	r3, [r7, #40]
 129:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 149              		.loc 1 129 10
 150 008c 3B6E     		ldr	r3, [r7, #96]
 151 008e 0433     		adds	r3, r3, #4
 152 0090 3B66     		str	r3, [r7, #96]
 130:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 153              		.loc 1 130 53
 154 0092 3B6E     		ldr	r3, [r7, #96]
 155              		.loc 1 130 46
 156 0094 1B68     		ldr	r3, [r3]
 157 0096 7B65     		str	r3, [r7, #84]
 158              	.LBB36:
 159              	.LBB37:
 160              		.loc 2 498 10
 161 0098 7B6D     		ldr	r3, [r7, #84]
 162 009a 1BBA     		rev	r3, r3
 163              	.LBE37:
 164              	.LBE36:
 165              		.loc 1 130 44
 166 009c FB62     		str	r3, [r7, #44]
 131:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 167              		.loc 1 131 10
 168 009e 3B6E     		ldr	r3, [r7, #96]
 169 00a0 0433     		adds	r3, r3, #4
 170 00a2 3B66     		str	r3, [r7, #96]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 15


 132:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 171              		.loc 1 132 53
 172 00a4 3B6E     		ldr	r3, [r7, #96]
 173              		.loc 1 132 46
 174 00a6 1B68     		ldr	r3, [r3]
 175 00a8 BB65     		str	r3, [r7, #88]
 176              	.LBB38:
 177              	.LBB39:
 178              		.loc 2 498 10
 179 00aa BB6D     		ldr	r3, [r7, #88]
 180 00ac 1BBA     		rev	r3, r3
 181              	.LBE39:
 182              	.LBE38:
 183              		.loc 1 132 44
 184 00ae 3B63     		str	r3, [r7, #48]
 133:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 185              		.loc 1 133 10
 186 00b0 3B6E     		ldr	r3, [r7, #96]
 187 00b2 0433     		adds	r3, r3, #4
 188 00b4 3B66     		str	r3, [r7, #96]
 134:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 189              		.loc 1 134 53
 190 00b6 3B6E     		ldr	r3, [r7, #96]
 191              		.loc 1 134 46
 192 00b8 1B68     		ldr	r3, [r3]
 193 00ba FB65     		str	r3, [r7, #92]
 194              	.LBB40:
 195              	.LBB41:
 196              		.loc 2 498 10
 197 00bc FB6D     		ldr	r3, [r7, #92]
 198 00be 1BBA     		rev	r3, r3
 199              	.LBE41:
 200              	.LBE40:
 201              		.loc 1 134 44
 202 00c0 7B63     		str	r3, [r7, #52]
 135:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 203              		.loc 1 135 3
 204 00c2 07F11803 		add	r3, r7, #24
 205 00c6 1846     		mov	r0, r3
 206 00c8 FFF7FEFF 		bl	CRYP_KeyInit
 136:./Library/stm32f4xx_cryp_tdes.c **** 
 137:./Library/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 138:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 207              		.loc 1 138 3
 208 00cc FFF7FEFF 		bl	CRYP_FIFOFlush
 139:./Library/stm32f4xx_cryp_tdes.c **** 
 140:./Library/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 141:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 209              		.loc 1 141 3
 210 00d0 0120     		movs	r0, #1
 211 00d2 FFF7FEFF 		bl	CRYP_Cmd
 142:./Library/stm32f4xx_cryp_tdes.c **** 
 143:./Library/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 212              		.loc 1 143 6
 213 00d6 FFF7FEFF 		bl	CRYP_GetCmdStatus
 214 00da 0346     		mov	r3, r0
 215              		.loc 1 143 5
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 16


 216 00dc 002B     		cmp	r3, #0
 217 00de 03D1     		bne	.L10
 144:./Library/stm32f4xx_cryp_tdes.c ****   {
 145:./Library/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 146:./Library/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 147:./Library/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 218              		.loc 1 147 12
 219 00e0 0023     		movs	r3, #0
 220 00e2 87F87730 		strb	r3, [r7, #119]
 221 00e6 48E0     		b	.L11
 222              	.L10:
 148:./Library/stm32f4xx_cryp_tdes.c ****   }
 149:./Library/stm32f4xx_cryp_tdes.c ****   else
 150:./Library/stm32f4xx_cryp_tdes.c ****   {
 151:./Library/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 223              		.loc 1 151 10
 224 00e8 0023     		movs	r3, #0
 225 00ea BB66     		str	r3, [r7, #104]
 226              		.loc 1 151 5
 227 00ec 3AE0     		b	.L12
 228              	.L18:
 152:./Library/stm32f4xx_cryp_tdes.c ****     {
 153:./Library/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 154:./Library/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 229              		.loc 1 154 20
 230 00ee 3B6F     		ldr	r3, [r7, #112]
 231              		.loc 1 154 7
 232 00f0 1B68     		ldr	r3, [r3]
 233 00f2 1846     		mov	r0, r3
 234 00f4 FFF7FEFF 		bl	CRYP_DataIn
 155:./Library/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 235              		.loc 1 155 16
 236 00f8 3B6F     		ldr	r3, [r7, #112]
 237 00fa 0433     		adds	r3, r3, #4
 238 00fc 3B67     		str	r3, [r7, #112]
 156:./Library/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 239              		.loc 1 156 20
 240 00fe 3B6F     		ldr	r3, [r7, #112]
 241              		.loc 1 156 7
 242 0100 1B68     		ldr	r3, [r3]
 243 0102 1846     		mov	r0, r3
 244 0104 FFF7FEFF 		bl	CRYP_DataIn
 157:./Library/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 245              		.loc 1 157 16
 246 0108 3B6F     		ldr	r3, [r7, #112]
 247 010a 0433     		adds	r3, r3, #4
 248 010c 3B67     		str	r3, [r7, #112]
 158:./Library/stm32f4xx_cryp_tdes.c ****       
 159:./Library/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 160:./Library/stm32f4xx_cryp_tdes.c ****       counter = 0;
 249              		.loc 1 160 15
 250 010e 0023     		movs	r3, #0
 251 0110 7B61     		str	r3, [r7, #20]
 252              	.L14:
 161:./Library/stm32f4xx_cryp_tdes.c ****       do
 162:./Library/stm32f4xx_cryp_tdes.c ****       {
 163:./Library/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 17


 253              		.loc 1 163 22 discriminator 2
 254 0112 1020     		movs	r0, #16
 255 0114 FFF7FEFF 		bl	CRYP_GetFlagStatus
 256 0118 0346     		mov	r3, r0
 257              		.loc 1 163 20 discriminator 2
 258 011a 7B66     		str	r3, [r7, #100]
 164:./Library/stm32f4xx_cryp_tdes.c ****         counter++;
 259              		.loc 1 164 16 discriminator 2
 260 011c 7B69     		ldr	r3, [r7, #20]
 261 011e 0133     		adds	r3, r3, #1
 262 0120 7B61     		str	r3, [r7, #20]
 165:./Library/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 263              		.loc 1 165 24 discriminator 2
 264 0122 7B69     		ldr	r3, [r7, #20]
 265              		.loc 1 165 7 discriminator 2
 266 0124 B3F5803F 		cmp	r3, #65536
 267 0128 02D0     		beq	.L13
 268              		.loc 1 165 45 discriminator 1
 269 012a 7B6E     		ldr	r3, [r7, #100]
 270 012c 002B     		cmp	r3, #0
 271 012e F0D1     		bne	.L14
 272              	.L13:
 166:./Library/stm32f4xx_cryp_tdes.c ****       
 167:./Library/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 273              		.loc 1 167 10
 274 0130 7B6E     		ldr	r3, [r7, #100]
 275 0132 002B     		cmp	r3, #0
 276 0134 03D0     		beq	.L15
 168:./Library/stm32f4xx_cryp_tdes.c ****       {
 169:./Library/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 277              		.loc 1 169 16
 278 0136 0023     		movs	r3, #0
 279 0138 87F87730 		strb	r3, [r7, #119]
 280 013c 0FE0     		b	.L16
 281              	.L15:
 170:./Library/stm32f4xx_cryp_tdes.c ****       }
 171:./Library/stm32f4xx_cryp_tdes.c ****       else
 172:./Library/stm32f4xx_cryp_tdes.c ****       {
 173:./Library/stm32f4xx_cryp_tdes.c ****         
 174:./Library/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 175:./Library/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 282              		.loc 1 175 10
 283 013e FC6E     		ldr	r4, [r7, #108]
 284              		.loc 1 175 36
 285 0140 FFF7FEFF 		bl	CRYP_DataOut
 286 0144 0346     		mov	r3, r0
 287              		.loc 1 175 34
 288 0146 2360     		str	r3, [r4]
 176:./Library/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 289              		.loc 1 176 19
 290 0148 FB6E     		ldr	r3, [r7, #108]
 291 014a 0433     		adds	r3, r3, #4
 292 014c FB66     		str	r3, [r7, #108]
 177:./Library/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 293              		.loc 1 177 10
 294 014e FC6E     		ldr	r4, [r7, #108]
 295              		.loc 1 177 36
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 18


 296 0150 FFF7FEFF 		bl	CRYP_DataOut
 297 0154 0346     		mov	r3, r0
 298              		.loc 1 177 34
 299 0156 2360     		str	r3, [r4]
 178:./Library/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 300              		.loc 1 178 19
 301 0158 FB6E     		ldr	r3, [r7, #108]
 302 015a 0433     		adds	r3, r3, #4
 303 015c FB66     		str	r3, [r7, #108]
 304              	.L16:
 151:./Library/stm32f4xx_cryp_tdes.c ****     {
 305              		.loc 1 151 51 discriminator 2
 306 015e BB6E     		ldr	r3, [r7, #104]
 307 0160 0833     		adds	r3, r3, #8
 308 0162 BB66     		str	r3, [r7, #104]
 309              	.L12:
 151:./Library/stm32f4xx_cryp_tdes.c ****     {
 310              		.loc 1 151 5 discriminator 1
 311 0164 BA6E     		ldr	r2, [r7, #104]
 312 0166 3B68     		ldr	r3, [r7]
 313 0168 9A42     		cmp	r2, r3
 314 016a 03D2     		bcs	.L17
 151:./Library/stm32f4xx_cryp_tdes.c ****     {
 315              		.loc 1 151 27 discriminator 3
 316 016c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 317 0170 002B     		cmp	r3, #0
 318 0172 BCD1     		bne	.L18
 319              	.L17:
 179:./Library/stm32f4xx_cryp_tdes.c ****       }
 180:./Library/stm32f4xx_cryp_tdes.c ****     }
 181:./Library/stm32f4xx_cryp_tdes.c ****     
 182:./Library/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 183:./Library/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 320              		.loc 1 183 5
 321 0174 0020     		movs	r0, #0
 322 0176 FFF7FEFF 		bl	CRYP_Cmd
 323              	.L11:
 184:./Library/stm32f4xx_cryp_tdes.c ****   }
 185:./Library/stm32f4xx_cryp_tdes.c ****   return status; 
 324              		.loc 1 185 10
 325 017a 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 186:./Library/stm32f4xx_cryp_tdes.c **** }
 326              		.loc 1 186 1
 327 017e 1846     		mov	r0, r3
 328 0180 7C37     		adds	r7, r7, #124
 329              	.LCFI3:
 330              		.cfi_def_cfa_offset 12
 331 0182 BD46     		mov	sp, r7
 332              	.LCFI4:
 333              		.cfi_def_cfa_register 13
 334              		@ sp needed
 335 0184 90BD     		pop	{r4, r7, pc}
 336              		.cfi_endproc
 337              	.LFE123:
 339              		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 340              		.align	1
 341              		.global	CRYP_TDES_CBC
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 19


 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	CRYP_TDES_CBC:
 347              	.LFB124:
 187:./Library/stm32f4xx_cryp_tdes.c **** 
 188:./Library/stm32f4xx_cryp_tdes.c **** /**
 189:./Library/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 190:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 191:./Library/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 192:./Library/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 193:./Library/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 194:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 195:./Library/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 196:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 197:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 198:./Library/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 199:./Library/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 200:./Library/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 201:./Library/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 202:./Library/stm32f4xx_cryp_tdes.c ****   */
 203:./Library/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 204:./Library/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 205:./Library/stm32f4xx_cryp_tdes.c **** {
 348              		.loc 1 205 1
 349              		.cfi_startproc
 350              		@ args = 8, pretend = 0, frame = 144
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352 0000 90B5     		push	{r4, r7, lr}
 353              	.LCFI5:
 354              		.cfi_def_cfa_offset 12
 355              		.cfi_offset 4, -12
 356              		.cfi_offset 7, -8
 357              		.cfi_offset 14, -4
 358 0002 A5B0     		sub	sp, sp, #148
 359              	.LCFI6:
 360              		.cfi_def_cfa_offset 160
 361 0004 00AF     		add	r7, sp, #0
 362              	.LCFI7:
 363              		.cfi_def_cfa_register 7
 364 0006 B960     		str	r1, [r7, #8]
 365 0008 7A60     		str	r2, [r7, #4]
 366 000a 3B60     		str	r3, [r7]
 367 000c 0346     		mov	r3, r0
 368 000e FB73     		strb	r3, [r7, #15]
 206:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 207:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 208:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 209:./Library/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 369              		.loc 1 209 17
 370 0010 0023     		movs	r3, #0
 371 0012 3B61     		str	r3, [r7, #16]
 210:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 372              		.loc 1 210 12
 373 0014 0023     		movs	r3, #0
 374 0016 FB67     		str	r3, [r7, #124]
 211:./Library/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 20


 375              		.loc 1 211 15
 376 0018 0123     		movs	r3, #1
 377 001a 87F88F30 		strb	r3, [r7, #143]
 212:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 378              		.loc 1 212 12
 379 001e BB68     		ldr	r3, [r7, #8]
 380 0020 BB67     		str	r3, [r7, #120]
 213:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 381              		.loc 1 213 12
 382 0022 3B68     		ldr	r3, [r7]
 383 0024 C7F88830 		str	r3, [r7, #136]
 214:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 384              		.loc 1 214 12
 385 0028 D7F8A430 		ldr	r3, [r7, #164]
 386 002c C7F88430 		str	r3, [r7, #132]
 215:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 387              		.loc 1 215 12
 388 0030 7B68     		ldr	r3, [r7, #4]
 389 0032 7B67     		str	r3, [r7, #116]
 216:./Library/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 390              		.loc 1 216 12
 391 0034 0023     		movs	r3, #0
 392 0036 C7F88030 		str	r3, [r7, #128]
 217:./Library/stm32f4xx_cryp_tdes.c **** 
 218:./Library/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 219:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 393              		.loc 1 219 3
 394 003a 07F12403 		add	r3, r7, #36
 395 003e 1846     		mov	r0, r3
 396 0040 FFF7FEFF 		bl	CRYP_KeyStructInit
 220:./Library/stm32f4xx_cryp_tdes.c **** 
 221:./Library/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 222:./Library/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 397              		.loc 1 222 5
 398 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 399 0046 012B     		cmp	r3, #1
 400 0048 02D1     		bne	.L21
 223:./Library/stm32f4xx_cryp_tdes.c ****   {
 224:./Library/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 401              		.loc 1 224 42
 402 004a 0023     		movs	r3, #0
 403 004c 7B64     		str	r3, [r7, #68]
 404 004e 01E0     		b	.L22
 405              	.L21:
 225:./Library/stm32f4xx_cryp_tdes.c ****   }
 226:./Library/stm32f4xx_cryp_tdes.c ****   else
 227:./Library/stm32f4xx_cryp_tdes.c ****   {
 228:./Library/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 406              		.loc 1 228 42
 407 0050 0423     		movs	r3, #4
 408 0052 7B64     		str	r3, [r7, #68]
 409              	.L22:
 229:./Library/stm32f4xx_cryp_tdes.c ****   }
 230:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 410              		.loc 1 230 41
 411 0054 0823     		movs	r3, #8
 412 0056 BB64     		str	r3, [r7, #72]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 21


 231:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 413              		.loc 1 231 41
 414 0058 8023     		movs	r3, #128
 415 005a FB64     		str	r3, [r7, #76]
 232:./Library/stm32f4xx_cryp_tdes.c **** 
 233:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 416              		.loc 1 233 3
 417 005c 07F14403 		add	r3, r7, #68
 418 0060 1846     		mov	r0, r3
 419 0062 FFF7FEFF 		bl	CRYP_Init
 234:./Library/stm32f4xx_cryp_tdes.c **** 
 235:./Library/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 236:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 420              		.loc 1 236 53
 421 0066 BB6F     		ldr	r3, [r7, #120]
 422              		.loc 1 236 46
 423 0068 1B68     		ldr	r3, [r3]
 424 006a 7B65     		str	r3, [r7, #84]
 425              	.LBB42:
 426              	.LBB43:
 427              		.loc 2 498 10
 428 006c 7B6D     		ldr	r3, [r7, #84]
 429 006e 1BBA     		rev	r3, r3
 430              	.LBE43:
 431              	.LBE42:
 432              		.loc 1 236 44
 433 0070 FB62     		str	r3, [r7, #44]
 237:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 434              		.loc 1 237 10
 435 0072 BB6F     		ldr	r3, [r7, #120]
 436 0074 0433     		adds	r3, r3, #4
 437 0076 BB67     		str	r3, [r7, #120]
 238:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 438              		.loc 1 238 53
 439 0078 BB6F     		ldr	r3, [r7, #120]
 440              		.loc 1 238 46
 441 007a 1B68     		ldr	r3, [r3]
 442 007c BB65     		str	r3, [r7, #88]
 443              	.LBB44:
 444              	.LBB45:
 445              		.loc 2 498 10
 446 007e BB6D     		ldr	r3, [r7, #88]
 447 0080 1BBA     		rev	r3, r3
 448              	.LBE45:
 449              	.LBE44:
 450              		.loc 1 238 44
 451 0082 3B63     		str	r3, [r7, #48]
 239:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 452              		.loc 1 239 10
 453 0084 BB6F     		ldr	r3, [r7, #120]
 454 0086 0433     		adds	r3, r3, #4
 455 0088 BB67     		str	r3, [r7, #120]
 240:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 456              		.loc 1 240 53
 457 008a BB6F     		ldr	r3, [r7, #120]
 458              		.loc 1 240 46
 459 008c 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 22


 460 008e FB65     		str	r3, [r7, #92]
 461              	.LBB46:
 462              	.LBB47:
 463              		.loc 2 498 10
 464 0090 FB6D     		ldr	r3, [r7, #92]
 465 0092 1BBA     		rev	r3, r3
 466              	.LBE47:
 467              	.LBE46:
 468              		.loc 1 240 44
 469 0094 7B63     		str	r3, [r7, #52]
 241:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 470              		.loc 1 241 10
 471 0096 BB6F     		ldr	r3, [r7, #120]
 472 0098 0433     		adds	r3, r3, #4
 473 009a BB67     		str	r3, [r7, #120]
 242:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 474              		.loc 1 242 53
 475 009c BB6F     		ldr	r3, [r7, #120]
 476              		.loc 1 242 46
 477 009e 1B68     		ldr	r3, [r3]
 478 00a0 3B66     		str	r3, [r7, #96]
 479              	.LBB48:
 480              	.LBB49:
 481              		.loc 2 498 10
 482 00a2 3B6E     		ldr	r3, [r7, #96]
 483 00a4 1BBA     		rev	r3, r3
 484              	.LBE49:
 485              	.LBE48:
 486              		.loc 1 242 44
 487 00a6 BB63     		str	r3, [r7, #56]
 243:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 488              		.loc 1 243 10
 489 00a8 BB6F     		ldr	r3, [r7, #120]
 490 00aa 0433     		adds	r3, r3, #4
 491 00ac BB67     		str	r3, [r7, #120]
 244:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 492              		.loc 1 244 53
 493 00ae BB6F     		ldr	r3, [r7, #120]
 494              		.loc 1 244 46
 495 00b0 1B68     		ldr	r3, [r3]
 496 00b2 7B66     		str	r3, [r7, #100]
 497              	.LBB50:
 498              	.LBB51:
 499              		.loc 2 498 10
 500 00b4 7B6E     		ldr	r3, [r7, #100]
 501 00b6 1BBA     		rev	r3, r3
 502              	.LBE51:
 503              	.LBE50:
 504              		.loc 1 244 44
 505 00b8 FB63     		str	r3, [r7, #60]
 245:./Library/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 506              		.loc 1 245 10
 507 00ba BB6F     		ldr	r3, [r7, #120]
 508 00bc 0433     		adds	r3, r3, #4
 509 00be BB67     		str	r3, [r7, #120]
 246:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 510              		.loc 1 246 53
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 23


 511 00c0 BB6F     		ldr	r3, [r7, #120]
 512              		.loc 1 246 46
 513 00c2 1B68     		ldr	r3, [r3]
 514 00c4 BB66     		str	r3, [r7, #104]
 515              	.LBB52:
 516              	.LBB53:
 517              		.loc 2 498 10
 518 00c6 BB6E     		ldr	r3, [r7, #104]
 519 00c8 1BBA     		rev	r3, r3
 520              	.LBE53:
 521              	.LBE52:
 522              		.loc 1 246 44
 523 00ca 3B64     		str	r3, [r7, #64]
 247:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 524              		.loc 1 247 3
 525 00cc 07F12403 		add	r3, r7, #36
 526 00d0 1846     		mov	r0, r3
 527 00d2 FFF7FEFF 		bl	CRYP_KeyInit
 248:./Library/stm32f4xx_cryp_tdes.c ****   
 249:./Library/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 250:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 528              		.loc 1 250 51
 529 00d6 7B6F     		ldr	r3, [r7, #116]
 530              		.loc 1 250 44
 531 00d8 1B68     		ldr	r3, [r3]
 532 00da FB66     		str	r3, [r7, #108]
 533              	.LBB54:
 534              	.LBB55:
 535              		.loc 2 498 10
 536 00dc FB6E     		ldr	r3, [r7, #108]
 537 00de 1BBA     		rev	r3, r3
 538              	.LBE55:
 539              	.LBE54:
 540              		.loc 1 250 42
 541 00e0 7B61     		str	r3, [r7, #20]
 251:./Library/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 542              		.loc 1 251 9
 543 00e2 7B6F     		ldr	r3, [r7, #116]
 544 00e4 0433     		adds	r3, r3, #4
 545 00e6 7B67     		str	r3, [r7, #116]
 252:./Library/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 546              		.loc 1 252 51
 547 00e8 7B6F     		ldr	r3, [r7, #116]
 548              		.loc 1 252 44
 549 00ea 1B68     		ldr	r3, [r3]
 550 00ec 3B67     		str	r3, [r7, #112]
 551              	.LBB56:
 552              	.LBB57:
 553              		.loc 2 498 10
 554 00ee 3B6F     		ldr	r3, [r7, #112]
 555 00f0 1BBA     		rev	r3, r3
 556              	.LBE57:
 557              	.LBE56:
 558              		.loc 1 252 42
 559 00f2 BB61     		str	r3, [r7, #24]
 253:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 560              		.loc 1 253 3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 24


 561 00f4 07F11403 		add	r3, r7, #20
 562 00f8 1846     		mov	r0, r3
 563 00fa FFF7FEFF 		bl	CRYP_IVInit
 254:./Library/stm32f4xx_cryp_tdes.c ****   
 255:./Library/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 256:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 564              		.loc 1 256 3
 565 00fe FFF7FEFF 		bl	CRYP_FIFOFlush
 257:./Library/stm32f4xx_cryp_tdes.c ****   
 258:./Library/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 259:./Library/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 566              		.loc 1 259 3
 567 0102 0120     		movs	r0, #1
 568 0104 FFF7FEFF 		bl	CRYP_Cmd
 260:./Library/stm32f4xx_cryp_tdes.c ****   
 261:./Library/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 569              		.loc 1 261 6
 570 0108 FFF7FEFF 		bl	CRYP_GetCmdStatus
 571 010c 0346     		mov	r3, r0
 572              		.loc 1 261 5
 573 010e 002B     		cmp	r3, #0
 574 0110 03D1     		bne	.L31
 262:./Library/stm32f4xx_cryp_tdes.c ****   {
 263:./Library/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 264:./Library/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 265:./Library/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 575              		.loc 1 265 12
 576 0112 0023     		movs	r3, #0
 577 0114 87F88F30 		strb	r3, [r7, #143]
 578 0118 59E0     		b	.L32
 579              	.L31:
 266:./Library/stm32f4xx_cryp_tdes.c ****   }
 267:./Library/stm32f4xx_cryp_tdes.c ****   else
 268:./Library/stm32f4xx_cryp_tdes.c ****   {
 269:./Library/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 580              		.loc 1 269 10
 581 011a 0023     		movs	r3, #0
 582 011c C7F88030 		str	r3, [r7, #128]
 583              		.loc 1 269 5
 584 0120 48E0     		b	.L33
 585              	.L39:
 270:./Library/stm32f4xx_cryp_tdes.c ****     {
 271:./Library/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 272:./Library/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 586              		.loc 1 272 20
 587 0122 D7F88830 		ldr	r3, [r7, #136]
 588              		.loc 1 272 7
 589 0126 1B68     		ldr	r3, [r3]
 590 0128 1846     		mov	r0, r3
 591 012a FFF7FEFF 		bl	CRYP_DataIn
 273:./Library/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 592              		.loc 1 273 16
 593 012e D7F88830 		ldr	r3, [r7, #136]
 594 0132 0433     		adds	r3, r3, #4
 595 0134 C7F88830 		str	r3, [r7, #136]
 274:./Library/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 596              		.loc 1 274 20
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 25


 597 0138 D7F88830 		ldr	r3, [r7, #136]
 598              		.loc 1 274 7
 599 013c 1B68     		ldr	r3, [r3]
 600 013e 1846     		mov	r0, r3
 601 0140 FFF7FEFF 		bl	CRYP_DataIn
 275:./Library/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 602              		.loc 1 275 16
 603 0144 D7F88830 		ldr	r3, [r7, #136]
 604 0148 0433     		adds	r3, r3, #4
 605 014a C7F88830 		str	r3, [r7, #136]
 276:./Library/stm32f4xx_cryp_tdes.c ****       
 277:./Library/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 278:./Library/stm32f4xx_cryp_tdes.c ****       counter = 0;
 606              		.loc 1 278 15
 607 014e 0023     		movs	r3, #0
 608 0150 3B61     		str	r3, [r7, #16]
 609              	.L35:
 279:./Library/stm32f4xx_cryp_tdes.c ****       do
 280:./Library/stm32f4xx_cryp_tdes.c ****       {
 281:./Library/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 610              		.loc 1 281 22 discriminator 2
 611 0152 1020     		movs	r0, #16
 612 0154 FFF7FEFF 		bl	CRYP_GetFlagStatus
 613 0158 0346     		mov	r3, r0
 614              		.loc 1 281 20 discriminator 2
 615 015a FB67     		str	r3, [r7, #124]
 282:./Library/stm32f4xx_cryp_tdes.c ****         counter++;
 616              		.loc 1 282 16 discriminator 2
 617 015c 3B69     		ldr	r3, [r7, #16]
 618 015e 0133     		adds	r3, r3, #1
 619 0160 3B61     		str	r3, [r7, #16]
 283:./Library/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 620              		.loc 1 283 24 discriminator 2
 621 0162 3B69     		ldr	r3, [r7, #16]
 622              		.loc 1 283 7 discriminator 2
 623 0164 B3F5803F 		cmp	r3, #65536
 624 0168 02D0     		beq	.L34
 625              		.loc 1 283 45 discriminator 1
 626 016a FB6F     		ldr	r3, [r7, #124]
 627 016c 002B     		cmp	r3, #0
 628 016e F0D1     		bne	.L35
 629              	.L34:
 284:./Library/stm32f4xx_cryp_tdes.c ****       
 285:./Library/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 630              		.loc 1 285 10
 631 0170 FB6F     		ldr	r3, [r7, #124]
 632 0172 002B     		cmp	r3, #0
 633 0174 03D0     		beq	.L36
 286:./Library/stm32f4xx_cryp_tdes.c ****       {
 287:./Library/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 634              		.loc 1 287 16
 635 0176 0023     		movs	r3, #0
 636 0178 87F88F30 		strb	r3, [r7, #143]
 637 017c 15E0     		b	.L37
 638              	.L36:
 288:./Library/stm32f4xx_cryp_tdes.c ****       }
 289:./Library/stm32f4xx_cryp_tdes.c ****       else
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 26


 290:./Library/stm32f4xx_cryp_tdes.c ****       {
 291:./Library/stm32f4xx_cryp_tdes.c ****         
 292:./Library/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 293:./Library/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 639              		.loc 1 293 10
 640 017e D7F88440 		ldr	r4, [r7, #132]
 641              		.loc 1 293 36
 642 0182 FFF7FEFF 		bl	CRYP_DataOut
 643 0186 0346     		mov	r3, r0
 644              		.loc 1 293 34
 645 0188 2360     		str	r3, [r4]
 294:./Library/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 646              		.loc 1 294 19
 647 018a D7F88430 		ldr	r3, [r7, #132]
 648 018e 0433     		adds	r3, r3, #4
 649 0190 C7F88430 		str	r3, [r7, #132]
 295:./Library/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 650              		.loc 1 295 10
 651 0194 D7F88440 		ldr	r4, [r7, #132]
 652              		.loc 1 295 36
 653 0198 FFF7FEFF 		bl	CRYP_DataOut
 654 019c 0346     		mov	r3, r0
 655              		.loc 1 295 34
 656 019e 2360     		str	r3, [r4]
 296:./Library/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 657              		.loc 1 296 19
 658 01a0 D7F88430 		ldr	r3, [r7, #132]
 659 01a4 0433     		adds	r3, r3, #4
 660 01a6 C7F88430 		str	r3, [r7, #132]
 661              	.L37:
 269:./Library/stm32f4xx_cryp_tdes.c ****     {
 662              		.loc 1 269 51 discriminator 2
 663 01aa D7F88030 		ldr	r3, [r7, #128]
 664 01ae 0833     		adds	r3, r3, #8
 665 01b0 C7F88030 		str	r3, [r7, #128]
 666              	.L33:
 269:./Library/stm32f4xx_cryp_tdes.c ****     {
 667              		.loc 1 269 5 discriminator 1
 668 01b4 D7F88020 		ldr	r2, [r7, #128]
 669 01b8 D7F8A030 		ldr	r3, [r7, #160]
 670 01bc 9A42     		cmp	r2, r3
 671 01be 03D2     		bcs	.L38
 269:./Library/stm32f4xx_cryp_tdes.c ****     {
 672              		.loc 1 269 27 discriminator 3
 673 01c0 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 674 01c4 002B     		cmp	r3, #0
 675 01c6 ACD1     		bne	.L39
 676              	.L38:
 297:./Library/stm32f4xx_cryp_tdes.c ****       }
 298:./Library/stm32f4xx_cryp_tdes.c ****     }
 299:./Library/stm32f4xx_cryp_tdes.c ****     
 300:./Library/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 301:./Library/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 677              		.loc 1 301 5
 678 01c8 0020     		movs	r0, #0
 679 01ca FFF7FEFF 		bl	CRYP_Cmd
 680              	.L32:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 27


 302:./Library/stm32f4xx_cryp_tdes.c ****   }
 303:./Library/stm32f4xx_cryp_tdes.c ****   return status; 
 681              		.loc 1 303 10
 682 01ce 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 304:./Library/stm32f4xx_cryp_tdes.c **** }
 683              		.loc 1 304 1
 684 01d2 1846     		mov	r0, r3
 685 01d4 9437     		adds	r7, r7, #148
 686              	.LCFI8:
 687              		.cfi_def_cfa_offset 12
 688 01d6 BD46     		mov	sp, r7
 689              	.LCFI9:
 690              		.cfi_def_cfa_register 13
 691              		@ sp needed
 692 01d8 90BD     		pop	{r4, r7, pc}
 693              		.cfi_endproc
 694              	.LFE124:
 696              		.text
 697              	.Letext0:
 698              		.file 3 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 699              		.file 4 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 700              		.file 5 "./CORE/stm32f4xx.h"
 701              		.file 6 "./Library/stm32f4xx_cryp.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_tdes.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s:20     .text.CRYP_TDES_ECB:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s:26     .text.CRYP_TDES_ECB:0000000000000000 CRYP_TDES_ECB
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s:340    .text.CRYP_TDES_CBC:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccdJrca1.s:346    .text.CRYP_TDES_CBC:0000000000000000 CRYP_TDES_CBC

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
