ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART_DeInit,"ax",%progbits
  20              		.align	1
  21              		.global	USART_DeInit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	USART_DeInit:
  27              	.LFB123:
  28              		.file 1 "./Library/stm32f4xx_usart.c"
   1:./Library/stm32f4xx_usart.c **** /**
   2:./Library/stm32f4xx_usart.c ****   ******************************************************************************
   3:./Library/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:./Library/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_usart.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_usart.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:./Library/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:./Library/stm32f4xx_usart.c ****   *           + Initialization and Configuration
  11:./Library/stm32f4xx_usart.c ****   *           + Data transfers
  12:./Library/stm32f4xx_usart.c ****   *           + Multi-Processor Communication
  13:./Library/stm32f4xx_usart.c ****   *           + LIN mode
  14:./Library/stm32f4xx_usart.c ****   *           + Half-duplex mode
  15:./Library/stm32f4xx_usart.c ****   *           + Smartcard mode
  16:./Library/stm32f4xx_usart.c ****   *           + IrDA mode
  17:./Library/stm32f4xx_usart.c ****   *           + DMA transfers management
  18:./Library/stm32f4xx_usart.c ****   *           + Interrupts and flags management 
  19:./Library/stm32f4xx_usart.c ****   *           
  20:./Library/stm32f4xx_usart.c ****   @verbatim       
  21:./Library/stm32f4xx_usart.c ****  ===============================================================================
  22:./Library/stm32f4xx_usart.c ****                         ##### How to use this driver #####
  23:./Library/stm32f4xx_usart.c ****  ===============================================================================
  24:./Library/stm32f4xx_usart.c ****     [..]
  25:./Library/stm32f4xx_usart.c ****       (#) Enable peripheral clock using the following functions
  26:./Library/stm32f4xx_usart.c ****           RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:./Library/stm32f4xx_usart.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, 
  28:./Library/stm32f4xx_usart.c ****           UART4 or UART5.
  29:./Library/stm32f4xx_usart.c ****   
  30:./Library/stm32f4xx_usart.c ****       (#) According to the USART mode, enable the GPIO clocks using 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 2


  31:./Library/stm32f4xx_usart.c ****           RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  32:./Library/stm32f4xx_usart.c ****           or/and SCLK). 
  33:./Library/stm32f4xx_usart.c ****   
  34:./Library/stm32f4xx_usart.c ****       (#) Peripheral's alternate function: 
  35:./Library/stm32f4xx_usart.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  36:./Library/stm32f4xx_usart.c ****             Function (AF) using GPIO_PinAFConfig() function
  37:./Library/stm32f4xx_usart.c ****         (++) Configure the desired pin in alternate function by:
  38:./Library/stm32f4xx_usart.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  39:./Library/stm32f4xx_usart.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  40:./Library/stm32f4xx_usart.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  41:./Library/stm32f4xx_usart.c ****         (++) Call GPIO_Init() function
  42:./Library/stm32f4xx_usart.c ****           
  43:./Library/stm32f4xx_usart.c ****       (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  44:./Library/stm32f4xx_usart.c ****           flow control and Mode(Receiver/Transmitter) using the USART_Init()
  45:./Library/stm32f4xx_usart.c ****           function.
  46:./Library/stm32f4xx_usart.c ****   
  47:./Library/stm32f4xx_usart.c ****       (#) For synchronous mode, enable the clock and program the polarity,
  48:./Library/stm32f4xx_usart.c ****           phase and last bit using the USART_ClockInit() function.
  49:./Library/stm32f4xx_usart.c ****   
  50:./Library/stm32f4xx_usart.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  51:./Library/stm32f4xx_usart.c ****          USART_ITConfig() if you need to use interrupt mode. 
  52:./Library/stm32f4xx_usart.c ****   
  53:./Library/stm32f4xx_usart.c ****       (#) When using the DMA mode 
  54:./Library/stm32f4xx_usart.c ****         (++) Configure the DMA using DMA_Init() function
  55:./Library/stm32f4xx_usart.c ****         (++) Active the needed channel Request using USART_DMACmd() function
  56:./Library/stm32f4xx_usart.c ****    
  57:./Library/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
  58:./Library/stm32f4xx_usart.c ****    
  59:./Library/stm32f4xx_usart.c ****       (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  60:./Library/stm32f4xx_usart.c ****     
  61:./Library/stm32f4xx_usart.c ****       -@- Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  62:./Library/stm32f4xx_usart.c ****           for more details
  63:./Library/stm32f4xx_usart.c ****     
  64:./Library/stm32f4xx_usart.c ****     [..]        
  65:./Library/stm32f4xx_usart.c ****     In order to reach higher communication baudrates, it is possible to
  66:./Library/stm32f4xx_usart.c ****     enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  67:./Library/stm32f4xx_usart.c ****     This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd())
  68:./Library/stm32f4xx_usart.c ****     and before calling the function USART_Init().
  69:./Library/stm32f4xx_usart.c ****             
  70:./Library/stm32f4xx_usart.c ****     @endverbatim        
  71:./Library/stm32f4xx_usart.c ****   ******************************************************************************
  72:./Library/stm32f4xx_usart.c ****   * @attention
  73:./Library/stm32f4xx_usart.c ****   *
  74:./Library/stm32f4xx_usart.c ****   * Copyright (c) 2016 STMicroelectronics.
  75:./Library/stm32f4xx_usart.c ****   * All rights reserved.
  76:./Library/stm32f4xx_usart.c ****   *
  77:./Library/stm32f4xx_usart.c ****   * This software is licensed under terms that can be found in the LICENSE file
  78:./Library/stm32f4xx_usart.c ****   * in the root directory of this software component.
  79:./Library/stm32f4xx_usart.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  80:./Library/stm32f4xx_usart.c ****   *
  81:./Library/stm32f4xx_usart.c ****   ******************************************************************************
  82:./Library/stm32f4xx_usart.c ****   */
  83:./Library/stm32f4xx_usart.c **** 
  84:./Library/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:./Library/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:./Library/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:./Library/stm32f4xx_usart.c **** 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 3


  88:./Library/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:./Library/stm32f4xx_usart.c ****   * @{
  90:./Library/stm32f4xx_usart.c ****   */
  91:./Library/stm32f4xx_usart.c **** 
  92:./Library/stm32f4xx_usart.c **** /** @defgroup USART 
  93:./Library/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:./Library/stm32f4xx_usart.c ****   * @{
  95:./Library/stm32f4xx_usart.c ****   */
  96:./Library/stm32f4xx_usart.c **** 
  97:./Library/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:./Library/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:./Library/stm32f4xx_usart.c **** 
 100:./Library/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:./Library/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:./Library/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:./Library/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:./Library/stm32f4xx_usart.c **** 
 105:./Library/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:./Library/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:./Library/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:./Library/stm32f4xx_usart.c **** 
 109:./Library/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:./Library/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:./Library/stm32f4xx_usart.c **** 
 112:./Library/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:./Library/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:./Library/stm32f4xx_usart.c **** 
 115:./Library/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:./Library/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:./Library/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:./Library/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:./Library/stm32f4xx_usart.c **** 
 120:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:./Library/stm32f4xx_usart.c ****   * @{
 122:./Library/stm32f4xx_usart.c ****   */
 123:./Library/stm32f4xx_usart.c **** 
 124:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:./Library/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:./Library/stm32f4xx_usart.c ****  *
 127:./Library/stm32f4xx_usart.c **** @verbatim   
 128:./Library/stm32f4xx_usart.c ****  ===============================================================================
 129:./Library/stm32f4xx_usart.c ****             ##### Initialization and Configuration functions #####
 130:./Library/stm32f4xx_usart.c ****  ===============================================================================  
 131:./Library/stm32f4xx_usart.c ****     [..]
 132:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to initialize the USART 
 133:./Library/stm32f4xx_usart.c ****     in asynchronous and in synchronous modes.
 134:./Library/stm32f4xx_usart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 135:./Library/stm32f4xx_usart.c ****         (++) Baud Rate
 136:./Library/stm32f4xx_usart.c ****         (++) Word Length 
 137:./Library/stm32f4xx_usart.c ****         (++) Stop Bit
 138:./Library/stm32f4xx_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 139:./Library/stm32f4xx_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 140:./Library/stm32f4xx_usart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:./Library/stm32f4xx_usart.c ****              the possible USART frame formats are as listed in the following table:
 142:./Library/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:./Library/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:./Library/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 4


 145:./Library/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:./Library/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:./Library/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:./Library/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:./Library/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:./Library/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:./Library/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:./Library/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:./Library/stm32f4xx_usart.c ****         (++) Hardware flow control
 154:./Library/stm32f4xx_usart.c ****         (++) Receiver/transmitter modes
 155:./Library/stm32f4xx_usart.c **** 
 156:./Library/stm32f4xx_usart.c ****     [..]
 157:./Library/stm32f4xx_usart.c ****     The USART_Init() function follows the USART  asynchronous configuration 
 158:./Library/stm32f4xx_usart.c ****     procedure (details for the procedure are available in reference manual (RM0090)).
 159:./Library/stm32f4xx_usart.c **** 
 160:./Library/stm32f4xx_usart.c ****      (+) For the synchronous mode in addition to the asynchronous mode parameters these 
 161:./Library/stm32f4xx_usart.c ****          parameters should be also configured:
 162:./Library/stm32f4xx_usart.c ****         (++) USART Clock Enabled
 163:./Library/stm32f4xx_usart.c ****         (++) USART polarity
 164:./Library/stm32f4xx_usart.c ****         (++) USART phase
 165:./Library/stm32f4xx_usart.c ****         (++) USART LastBit
 166:./Library/stm32f4xx_usart.c ****   
 167:./Library/stm32f4xx_usart.c ****     [..]
 168:./Library/stm32f4xx_usart.c ****     These parameters can be configured using the USART_ClockInit() function.
 169:./Library/stm32f4xx_usart.c **** 
 170:./Library/stm32f4xx_usart.c **** @endverbatim
 171:./Library/stm32f4xx_usart.c ****   * @{
 172:./Library/stm32f4xx_usart.c ****   */
 173:./Library/stm32f4xx_usart.c ****   
 174:./Library/stm32f4xx_usart.c **** /**
 175:./Library/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 176:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 177:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 178:./Library/stm32f4xx_usart.c ****   * @retval None
 179:./Library/stm32f4xx_usart.c ****   */
 180:./Library/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 181:./Library/stm32f4xx_usart.c **** {
  29              		.loc 1 181 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 182:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 183:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 184:./Library/stm32f4xx_usart.c **** 
 185:./Library/stm32f4xx_usart.c ****   if (USARTx == USART1)
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 5


  45              		.loc 1 185 6
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 3B4A     		ldr	r2, .L11
  48 000c 9342     		cmp	r3, r2
  49 000e 08D1     		bne	.L2
 186:./Library/stm32f4xx_usart.c ****   {
 187:./Library/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  50              		.loc 1 187 5
  51 0010 0121     		movs	r1, #1
  52 0012 1020     		movs	r0, #16
  53 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 188:./Library/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  54              		.loc 1 188 5
  55 0018 0021     		movs	r1, #0
  56 001a 1020     		movs	r0, #16
  57 001c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 189:./Library/stm32f4xx_usart.c ****   }
 190:./Library/stm32f4xx_usart.c ****   else if (USARTx == USART2)
 191:./Library/stm32f4xx_usart.c ****   {
 192:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 193:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 194:./Library/stm32f4xx_usart.c ****   }
 195:./Library/stm32f4xx_usart.c ****   else if (USARTx == USART3)
 196:./Library/stm32f4xx_usart.c ****   {
 197:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 198:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 199:./Library/stm32f4xx_usart.c ****   }    
 200:./Library/stm32f4xx_usart.c ****   else if (USARTx == UART4)
 201:./Library/stm32f4xx_usart.c ****   {
 202:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 203:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 204:./Library/stm32f4xx_usart.c ****   }
 205:./Library/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 206:./Library/stm32f4xx_usart.c ****   {
 207:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 208:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 209:./Library/stm32f4xx_usart.c ****   }  
 210:./Library/stm32f4xx_usart.c ****   else if (USARTx == USART6)
 211:./Library/stm32f4xx_usart.c ****   {
 212:./Library/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 213:./Library/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 214:./Library/stm32f4xx_usart.c ****   }
 215:./Library/stm32f4xx_usart.c ****   else if (USARTx == UART7)
 216:./Library/stm32f4xx_usart.c ****   {
 217:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 218:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 219:./Library/stm32f4xx_usart.c ****   }     
 220:./Library/stm32f4xx_usart.c ****   else
 221:./Library/stm32f4xx_usart.c ****   {
 222:./Library/stm32f4xx_usart.c ****     if (USARTx == UART8)
 223:./Library/stm32f4xx_usart.c ****     { 
 224:./Library/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 225:./Library/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 226:./Library/stm32f4xx_usart.c ****     }
 227:./Library/stm32f4xx_usart.c ****   }
 228:./Library/stm32f4xx_usart.c **** }
  58              		.loc 1 228 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 6


  59 0020 65E0     		b	.L10
  60              	.L2:
 190:./Library/stm32f4xx_usart.c ****   {
  61              		.loc 1 190 11
  62 0022 7B68     		ldr	r3, [r7, #4]
  63 0024 354A     		ldr	r2, .L11+4
  64 0026 9342     		cmp	r3, r2
  65 0028 0AD1     		bne	.L4
 192:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  66              		.loc 1 192 5
  67 002a 0121     		movs	r1, #1
  68 002c 4FF40030 		mov	r0, #131072
  69 0030 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 193:./Library/stm32f4xx_usart.c ****   }
  70              		.loc 1 193 5
  71 0034 0021     		movs	r1, #0
  72 0036 4FF40030 		mov	r0, #131072
  73 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  74              		.loc 1 228 1
  75 003e 56E0     		b	.L10
  76              	.L4:
 195:./Library/stm32f4xx_usart.c ****   {
  77              		.loc 1 195 11
  78 0040 7B68     		ldr	r3, [r7, #4]
  79 0042 2F4A     		ldr	r2, .L11+8
  80 0044 9342     		cmp	r3, r2
  81 0046 0AD1     		bne	.L5
 197:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  82              		.loc 1 197 5
  83 0048 0121     		movs	r1, #1
  84 004a 4FF48020 		mov	r0, #262144
  85 004e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 198:./Library/stm32f4xx_usart.c ****   }    
  86              		.loc 1 198 5
  87 0052 0021     		movs	r1, #0
  88 0054 4FF48020 		mov	r0, #262144
  89 0058 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90              		.loc 1 228 1
  91 005c 47E0     		b	.L10
  92              	.L5:
 200:./Library/stm32f4xx_usart.c ****   {
  93              		.loc 1 200 11
  94 005e 7B68     		ldr	r3, [r7, #4]
  95 0060 284A     		ldr	r2, .L11+12
  96 0062 9342     		cmp	r3, r2
  97 0064 0AD1     		bne	.L6
 202:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  98              		.loc 1 202 5
  99 0066 0121     		movs	r1, #1
 100 0068 4FF40020 		mov	r0, #524288
 101 006c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 203:./Library/stm32f4xx_usart.c ****   }
 102              		.loc 1 203 5
 103 0070 0021     		movs	r1, #0
 104 0072 4FF40020 		mov	r0, #524288
 105 0076 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 106              		.loc 1 228 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 7


 107 007a 38E0     		b	.L10
 108              	.L6:
 205:./Library/stm32f4xx_usart.c ****   {
 109              		.loc 1 205 11
 110 007c 7B68     		ldr	r3, [r7, #4]
 111 007e 224A     		ldr	r2, .L11+16
 112 0080 9342     		cmp	r3, r2
 113 0082 0AD1     		bne	.L7
 207:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 114              		.loc 1 207 5
 115 0084 0121     		movs	r1, #1
 116 0086 4FF48010 		mov	r0, #1048576
 117 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 208:./Library/stm32f4xx_usart.c ****   }  
 118              		.loc 1 208 5
 119 008e 0021     		movs	r1, #0
 120 0090 4FF48010 		mov	r0, #1048576
 121 0094 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122              		.loc 1 228 1
 123 0098 29E0     		b	.L10
 124              	.L7:
 210:./Library/stm32f4xx_usart.c ****   {
 125              		.loc 1 210 11
 126 009a 7B68     		ldr	r3, [r7, #4]
 127 009c 1B4A     		ldr	r2, .L11+20
 128 009e 9342     		cmp	r3, r2
 129 00a0 08D1     		bne	.L8
 212:./Library/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 130              		.loc 1 212 5
 131 00a2 0121     		movs	r1, #1
 132 00a4 2020     		movs	r0, #32
 133 00a6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:./Library/stm32f4xx_usart.c ****   }
 134              		.loc 1 213 5
 135 00aa 0021     		movs	r1, #0
 136 00ac 2020     		movs	r0, #32
 137 00ae FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 138              		.loc 1 228 1
 139 00b2 1CE0     		b	.L10
 140              	.L8:
 215:./Library/stm32f4xx_usart.c ****   {
 141              		.loc 1 215 11
 142 00b4 7B68     		ldr	r3, [r7, #4]
 143 00b6 164A     		ldr	r2, .L11+24
 144 00b8 9342     		cmp	r3, r2
 145 00ba 0AD1     		bne	.L9
 217:./Library/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 146              		.loc 1 217 5
 147 00bc 0121     		movs	r1, #1
 148 00be 4FF08040 		mov	r0, #1073741824
 149 00c2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 218:./Library/stm32f4xx_usart.c ****   }     
 150              		.loc 1 218 5
 151 00c6 0021     		movs	r1, #0
 152 00c8 4FF08040 		mov	r0, #1073741824
 153 00cc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 154              		.loc 1 228 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 8


 155 00d0 0DE0     		b	.L10
 156              	.L9:
 222:./Library/stm32f4xx_usart.c ****     { 
 157              		.loc 1 222 8
 158 00d2 7B68     		ldr	r3, [r7, #4]
 159 00d4 0F4A     		ldr	r2, .L11+28
 160 00d6 9342     		cmp	r3, r2
 161 00d8 09D1     		bne	.L10
 224:./Library/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 162              		.loc 1 224 7
 163 00da 0121     		movs	r1, #1
 164 00dc 4FF00040 		mov	r0, #-2147483648
 165 00e0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 225:./Library/stm32f4xx_usart.c ****     }
 166              		.loc 1 225 7
 167 00e4 0021     		movs	r1, #0
 168 00e6 4FF00040 		mov	r0, #-2147483648
 169 00ea FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 170              	.L10:
 171              		.loc 1 228 1
 172 00ee 00BF     		nop
 173 00f0 0837     		adds	r7, r7, #8
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 8
 176 00f2 BD46     		mov	sp, r7
 177              	.LCFI4:
 178              		.cfi_def_cfa_register 13
 179              		@ sp needed
 180 00f4 80BD     		pop	{r7, pc}
 181              	.L12:
 182 00f6 00BF     		.align	2
 183              	.L11:
 184 00f8 00100140 		.word	1073811456
 185 00fc 00440040 		.word	1073759232
 186 0100 00480040 		.word	1073760256
 187 0104 004C0040 		.word	1073761280
 188 0108 00500040 		.word	1073762304
 189 010c 00140140 		.word	1073812480
 190 0110 00780040 		.word	1073772544
 191 0114 007C0040 		.word	1073773568
 192              		.cfi_endproc
 193              	.LFE123:
 195              		.section	.text.USART_Init,"ax",%progbits
 196              		.align	1
 197              		.global	USART_Init
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 202              	USART_Init:
 203              	.LFB124:
 229:./Library/stm32f4xx_usart.c **** 
 230:./Library/stm32f4xx_usart.c **** /**
 231:./Library/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 232:./Library/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 233:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 234:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 235:./Library/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 9


 236:./Library/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 237:./Library/stm32f4xx_usart.c ****   * @retval None
 238:./Library/stm32f4xx_usart.c ****   */
 239:./Library/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 240:./Library/stm32f4xx_usart.c **** {
 204              		.loc 1 240 1
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 40
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0000 80B5     		push	{r7, lr}
 209              	.LCFI5:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 8AB0     		sub	sp, sp, #40
 214              	.LCFI6:
 215              		.cfi_def_cfa_offset 48
 216 0004 00AF     		add	r7, sp, #0
 217              	.LCFI7:
 218              		.cfi_def_cfa_register 7
 219 0006 7860     		str	r0, [r7, #4]
 220 0008 3960     		str	r1, [r7]
 241:./Library/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 221              		.loc 1 241 12
 222 000a 0023     		movs	r3, #0
 223 000c 7B62     		str	r3, [r7, #36]
 224              		.loc 1 241 27
 225 000e 0023     		movs	r3, #0
 226 0010 3B62     		str	r3, [r7, #32]
 242:./Library/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 227              		.loc 1 242 12
 228 0012 0023     		movs	r3, #0
 229 0014 FB61     		str	r3, [r7, #28]
 243:./Library/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 230              		.loc 1 243 12
 231 0016 0023     		movs	r3, #0
 232 0018 BB61     		str	r3, [r7, #24]
 244:./Library/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 245:./Library/stm32f4xx_usart.c **** 
 246:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 247:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 248:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 249:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 250:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 251:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 252:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 253:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 254:./Library/stm32f4xx_usart.c **** 
 255:./Library/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 256:./Library/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 257:./Library/stm32f4xx_usart.c ****   {
 258:./Library/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 259:./Library/stm32f4xx_usart.c ****   }
 260:./Library/stm32f4xx_usart.c **** 
 261:./Library/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 262:./Library/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 233              		.loc 1 262 18
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 10


 234 001a 7B68     		ldr	r3, [r7, #4]
 235 001c 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 236 001e 9BB2     		uxth	r3, r3
 237              		.loc 1 262 10
 238 0020 7B62     		str	r3, [r7, #36]
 263:./Library/stm32f4xx_usart.c **** 
 264:./Library/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 265:./Library/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 239              		.loc 1 265 10
 240 0022 7B6A     		ldr	r3, [r7, #36]
 241 0024 23F44053 		bic	r3, r3, #12288
 242 0028 7B62     		str	r3, [r7, #36]
 266:./Library/stm32f4xx_usart.c **** 
 267:./Library/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 268:./Library/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 269:./Library/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 243              		.loc 1 269 39
 244 002a 3B68     		ldr	r3, [r7]
 245 002c DB88     		ldrh	r3, [r3, #6]
 246              		.loc 1 269 13
 247 002e 1A46     		mov	r2, r3
 248              		.loc 1 269 10
 249 0030 7B6A     		ldr	r3, [r7, #36]
 250 0032 1343     		orrs	r3, r3, r2
 251 0034 7B62     		str	r3, [r7, #36]
 270:./Library/stm32f4xx_usart.c ****   
 271:./Library/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 272:./Library/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 252              		.loc 1 272 17
 253 0036 7B6A     		ldr	r3, [r7, #36]
 254 0038 9AB2     		uxth	r2, r3
 255              		.loc 1 272 15
 256 003a 7B68     		ldr	r3, [r7, #4]
 257 003c 1A82     		strh	r2, [r3, #16]	@ movhi
 273:./Library/stm32f4xx_usart.c **** 
 274:./Library/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 275:./Library/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 258              		.loc 1 275 18
 259 003e 7B68     		ldr	r3, [r7, #4]
 260 0040 9B89     		ldrh	r3, [r3, #12]	@ movhi
 261 0042 9BB2     		uxth	r3, r3
 262              		.loc 1 275 10
 263 0044 7B62     		str	r3, [r7, #36]
 276:./Library/stm32f4xx_usart.c **** 
 277:./Library/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 278:./Library/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 264              		.loc 1 278 10
 265 0046 7B6A     		ldr	r3, [r7, #36]
 266 0048 23F4B053 		bic	r3, r3, #5632
 267 004c 23F00C03 		bic	r3, r3, #12
 268 0050 7B62     		str	r3, [r7, #36]
 279:./Library/stm32f4xx_usart.c **** 
 280:./Library/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 281:./Library/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 282:./Library/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 283:./Library/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 284:./Library/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 11


 269              		.loc 1 284 39
 270 0052 3B68     		ldr	r3, [r7]
 271 0054 9A88     		ldrh	r2, [r3, #4]
 272              		.loc 1 284 76
 273 0056 3B68     		ldr	r3, [r7]
 274 0058 1B89     		ldrh	r3, [r3, #8]
 275              		.loc 1 284 91
 276 005a 1343     		orrs	r3, r3, r2
 277 005c 9AB2     		uxth	r2, r3
 285:./Library/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 278              		.loc 1 285 29
 279 005e 3B68     		ldr	r3, [r7]
 280 0060 5B89     		ldrh	r3, [r3, #10]
 284:./Library/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 281              		.loc 1 284 91
 282 0062 1343     		orrs	r3, r3, r2
 283 0064 9BB2     		uxth	r3, r3
 284 0066 1A46     		mov	r2, r3
 284:./Library/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 285              		.loc 1 284 10
 286 0068 7B6A     		ldr	r3, [r7, #36]
 287 006a 1343     		orrs	r3, r3, r2
 288 006c 7B62     		str	r3, [r7, #36]
 286:./Library/stm32f4xx_usart.c **** 
 287:./Library/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 288:./Library/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 289              		.loc 1 288 17
 290 006e 7B6A     		ldr	r3, [r7, #36]
 291 0070 9AB2     		uxth	r2, r3
 292              		.loc 1 288 15
 293 0072 7B68     		ldr	r3, [r7, #4]
 294 0074 9A81     		strh	r2, [r3, #12]	@ movhi
 289:./Library/stm32f4xx_usart.c **** 
 290:./Library/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 291:./Library/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 295              		.loc 1 291 18
 296 0076 7B68     		ldr	r3, [r7, #4]
 297 0078 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 298 007a 9BB2     		uxth	r3, r3
 299              		.loc 1 291 10
 300 007c 7B62     		str	r3, [r7, #36]
 292:./Library/stm32f4xx_usart.c **** 
 293:./Library/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 294:./Library/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 301              		.loc 1 294 10
 302 007e 7B6A     		ldr	r3, [r7, #36]
 303 0080 23F44073 		bic	r3, r3, #768
 304 0084 7B62     		str	r3, [r7, #36]
 295:./Library/stm32f4xx_usart.c **** 
 296:./Library/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 297:./Library/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 298:./Library/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 305              		.loc 1 298 29
 306 0086 3B68     		ldr	r3, [r7]
 307 0088 9B89     		ldrh	r3, [r3, #12]
 308 008a 1A46     		mov	r2, r3
 309              		.loc 1 298 10
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 12


 310 008c 7B6A     		ldr	r3, [r7, #36]
 311 008e 1343     		orrs	r3, r3, r2
 312 0090 7B62     		str	r3, [r7, #36]
 299:./Library/stm32f4xx_usart.c **** 
 300:./Library/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 301:./Library/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 313              		.loc 1 301 17
 314 0092 7B6A     		ldr	r3, [r7, #36]
 315 0094 9AB2     		uxth	r2, r3
 316              		.loc 1 301 15
 317 0096 7B68     		ldr	r3, [r7, #4]
 318 0098 9A82     		strh	r2, [r3, #20]	@ movhi
 302:./Library/stm32f4xx_usart.c **** 
 303:./Library/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 304:./Library/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 305:./Library/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 319              		.loc 1 305 3
 320 009a 07F10803 		add	r3, r7, #8
 321 009e 1846     		mov	r0, r3
 322 00a0 FFF7FEFF 		bl	RCC_GetClocksFreq
 306:./Library/stm32f4xx_usart.c **** 
 307:./Library/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 323              		.loc 1 307 6
 324 00a4 7B68     		ldr	r3, [r7, #4]
 325 00a6 304A     		ldr	r2, .L21
 326 00a8 9342     		cmp	r3, r2
 327 00aa 03D0     		beq	.L14
 328              		.loc 1 307 26 discriminator 1
 329 00ac 7B68     		ldr	r3, [r7, #4]
 330 00ae 2F4A     		ldr	r2, .L21+4
 331 00b0 9342     		cmp	r3, r2
 332 00b2 02D1     		bne	.L15
 333              	.L14:
 308:./Library/stm32f4xx_usart.c ****   {
 309:./Library/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 334              		.loc 1 309 14
 335 00b4 7B69     		ldr	r3, [r7, #20]
 336 00b6 3B62     		str	r3, [r7, #32]
 337 00b8 01E0     		b	.L16
 338              	.L15:
 310:./Library/stm32f4xx_usart.c ****   }
 311:./Library/stm32f4xx_usart.c ****   else
 312:./Library/stm32f4xx_usart.c ****   {
 313:./Library/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 339              		.loc 1 313 14
 340 00ba 3B69     		ldr	r3, [r7, #16]
 341 00bc 3B62     		str	r3, [r7, #32]
 342              	.L16:
 314:./Library/stm32f4xx_usart.c ****   }
 315:./Library/stm32f4xx_usart.c ****   
 316:./Library/stm32f4xx_usart.c ****   /* Determine the integer part */
 317:./Library/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 343              		.loc 1 317 14
 344 00be 7B68     		ldr	r3, [r7, #4]
 345 00c0 9B89     		ldrh	r3, [r3, #12]	@ movhi
 346 00c2 9BB2     		uxth	r3, r3
 347              		.loc 1 317 39
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 13


 348 00c4 1BB2     		sxth	r3, r3
 349              		.loc 1 317 6
 350 00c6 002B     		cmp	r3, #0
 351 00c8 0CDA     		bge	.L17
 318:./Library/stm32f4xx_usart.c ****   {
 319:./Library/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 320:./Library/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 352              		.loc 1 320 27
 353 00ca 3A6A     		ldr	r2, [r7, #32]
 354 00cc 1346     		mov	r3, r2
 355 00ce 9B00     		lsls	r3, r3, #2
 356 00d0 1344     		add	r3, r3, r2
 357 00d2 9A00     		lsls	r2, r3, #2
 358 00d4 1A44     		add	r2, r2, r3
 359              		.loc 1 320 63
 360 00d6 3B68     		ldr	r3, [r7]
 361 00d8 1B68     		ldr	r3, [r3]
 362              		.loc 1 320 44
 363 00da 5B00     		lsls	r3, r3, #1
 364              		.loc 1 320 20
 365 00dc B2FBF3F3 		udiv	r3, r2, r3
 366 00e0 FB61     		str	r3, [r7, #28]
 367 00e2 0BE0     		b	.L18
 368              	.L17:
 321:./Library/stm32f4xx_usart.c ****   }
 322:./Library/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 323:./Library/stm32f4xx_usart.c ****   {
 324:./Library/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 325:./Library/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 369              		.loc 1 325 27
 370 00e4 3A6A     		ldr	r2, [r7, #32]
 371 00e6 1346     		mov	r3, r2
 372 00e8 9B00     		lsls	r3, r3, #2
 373 00ea 1344     		add	r3, r3, r2
 374 00ec 9A00     		lsls	r2, r3, #2
 375 00ee 1A44     		add	r2, r2, r3
 376              		.loc 1 325 63
 377 00f0 3B68     		ldr	r3, [r7]
 378 00f2 1B68     		ldr	r3, [r3]
 379              		.loc 1 325 44
 380 00f4 9B00     		lsls	r3, r3, #2
 381              		.loc 1 325 20
 382 00f6 B2FBF3F3 		udiv	r3, r2, r3
 383 00fa FB61     		str	r3, [r7, #28]
 384              	.L18:
 326:./Library/stm32f4xx_usart.c ****   }
 327:./Library/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 385              		.loc 1 327 28
 386 00fc FB69     		ldr	r3, [r7, #28]
 387 00fe 1C4A     		ldr	r2, .L21+8
 388 0100 A2FB0323 		umull	r2, r3, r2, r3
 389 0104 5B09     		lsrs	r3, r3, #5
 390              		.loc 1 327 10
 391 0106 1B01     		lsls	r3, r3, #4
 392 0108 7B62     		str	r3, [r7, #36]
 328:./Library/stm32f4xx_usart.c **** 
 329:./Library/stm32f4xx_usart.c ****   /* Determine the fractional part */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 14


 330:./Library/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 393              		.loc 1 330 55
 394 010a 7B6A     		ldr	r3, [r7, #36]
 395 010c 1B09     		lsrs	r3, r3, #4
 396              		.loc 1 330 45
 397 010e 6422     		movs	r2, #100
 398 0110 02FB03F3 		mul	r3, r2, r3
 399              		.loc 1 330 21
 400 0114 FA69     		ldr	r2, [r7, #28]
 401 0116 D31A     		subs	r3, r2, r3
 402 0118 BB61     		str	r3, [r7, #24]
 331:./Library/stm32f4xx_usart.c **** 
 332:./Library/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 333:./Library/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 403              		.loc 1 333 14
 404 011a 7B68     		ldr	r3, [r7, #4]
 405 011c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 406 011e 9BB2     		uxth	r3, r3
 407              		.loc 1 333 39
 408 0120 1BB2     		sxth	r3, r3
 409              		.loc 1 333 6
 410 0122 002B     		cmp	r3, #0
 411 0124 0CDA     		bge	.L19
 334:./Library/stm32f4xx_usart.c ****   {
 335:./Library/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 412              		.loc 1 335 37
 413 0126 BB69     		ldr	r3, [r7, #24]
 414 0128 DB00     		lsls	r3, r3, #3
 415              		.loc 1 335 42
 416 012a 3233     		adds	r3, r3, #50
 417              		.loc 1 335 48
 418 012c 104A     		ldr	r2, .L21+8
 419 012e A2FB0323 		umull	r2, r3, r2, r3
 420 0132 5B09     		lsrs	r3, r3, #5
 421              		.loc 1 335 56
 422 0134 03F00703 		and	r3, r3, #7
 423              		.loc 1 335 12
 424 0138 7A6A     		ldr	r2, [r7, #36]
 425 013a 1343     		orrs	r3, r3, r2
 426 013c 7B62     		str	r3, [r7, #36]
 427 013e 0BE0     		b	.L20
 428              	.L19:
 336:./Library/stm32f4xx_usart.c ****   }
 337:./Library/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 338:./Library/stm32f4xx_usart.c ****   {
 339:./Library/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 429              		.loc 1 339 37
 430 0140 BB69     		ldr	r3, [r7, #24]
 431 0142 1B01     		lsls	r3, r3, #4
 432              		.loc 1 339 43
 433 0144 3233     		adds	r3, r3, #50
 434              		.loc 1 339 49
 435 0146 0A4A     		ldr	r2, .L21+8
 436 0148 A2FB0323 		umull	r2, r3, r2, r3
 437 014c 5B09     		lsrs	r3, r3, #5
 438              		.loc 1 339 57
 439 014e 03F00F03 		and	r3, r3, #15
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 15


 440              		.loc 1 339 12
 441 0152 7A6A     		ldr	r2, [r7, #36]
 442 0154 1343     		orrs	r3, r3, r2
 443 0156 7B62     		str	r3, [r7, #36]
 444              	.L20:
 340:./Library/stm32f4xx_usart.c ****   }
 341:./Library/stm32f4xx_usart.c ****   
 342:./Library/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 343:./Library/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 445              		.loc 1 343 17
 446 0158 7B6A     		ldr	r3, [r7, #36]
 447 015a 9AB2     		uxth	r2, r3
 448              		.loc 1 343 15
 449 015c 7B68     		ldr	r3, [r7, #4]
 450 015e 1A81     		strh	r2, [r3, #8]	@ movhi
 344:./Library/stm32f4xx_usart.c **** }
 451              		.loc 1 344 1
 452 0160 00BF     		nop
 453 0162 2837     		adds	r7, r7, #40
 454              	.LCFI8:
 455              		.cfi_def_cfa_offset 8
 456 0164 BD46     		mov	sp, r7
 457              	.LCFI9:
 458              		.cfi_def_cfa_register 13
 459              		@ sp needed
 460 0166 80BD     		pop	{r7, pc}
 461              	.L22:
 462              		.align	2
 463              	.L21:
 464 0168 00100140 		.word	1073811456
 465 016c 00140140 		.word	1073812480
 466 0170 1F85EB51 		.word	1374389535
 467              		.cfi_endproc
 468              	.LFE124:
 470              		.section	.text.USART_StructInit,"ax",%progbits
 471              		.align	1
 472              		.global	USART_StructInit
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 477              	USART_StructInit:
 478              	.LFB125:
 345:./Library/stm32f4xx_usart.c **** 
 346:./Library/stm32f4xx_usart.c **** /**
 347:./Library/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 348:./Library/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 349:./Library/stm32f4xx_usart.c ****   *         be initialized.
 350:./Library/stm32f4xx_usart.c ****   * @retval None
 351:./Library/stm32f4xx_usart.c ****   */
 352:./Library/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 353:./Library/stm32f4xx_usart.c **** {
 479              		.loc 1 353 1
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 80B4     		push	{r7}
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 16


 485              	.LCFI10:
 486              		.cfi_def_cfa_offset 4
 487              		.cfi_offset 7, -4
 488 0002 83B0     		sub	sp, sp, #12
 489              	.LCFI11:
 490              		.cfi_def_cfa_offset 16
 491 0004 00AF     		add	r7, sp, #0
 492              	.LCFI12:
 493              		.cfi_def_cfa_register 7
 494 0006 7860     		str	r0, [r7, #4]
 354:./Library/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 355:./Library/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 495              		.loc 1 355 36
 496 0008 7B68     		ldr	r3, [r7, #4]
 497 000a 4FF41652 		mov	r2, #9600
 498 000e 1A60     		str	r2, [r3]
 356:./Library/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 499              		.loc 1 356 38
 500 0010 7B68     		ldr	r3, [r7, #4]
 501 0012 0022     		movs	r2, #0
 502 0014 9A80     		strh	r2, [r3, #4]	@ movhi
 357:./Library/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 503              		.loc 1 357 36
 504 0016 7B68     		ldr	r3, [r7, #4]
 505 0018 0022     		movs	r2, #0
 506 001a DA80     		strh	r2, [r3, #6]	@ movhi
 358:./Library/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 507              		.loc 1 358 34
 508 001c 7B68     		ldr	r3, [r7, #4]
 509 001e 0022     		movs	r2, #0
 510 0020 1A81     		strh	r2, [r3, #8]	@ movhi
 359:./Library/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 511              		.loc 1 359 32
 512 0022 7B68     		ldr	r3, [r7, #4]
 513 0024 0C22     		movs	r2, #12
 514 0026 5A81     		strh	r2, [r3, #10]	@ movhi
 360:./Library/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 515              		.loc 1 360 47
 516 0028 7B68     		ldr	r3, [r7, #4]
 517 002a 0022     		movs	r2, #0
 518 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 361:./Library/stm32f4xx_usart.c **** }
 519              		.loc 1 361 1
 520 002e 00BF     		nop
 521 0030 0C37     		adds	r7, r7, #12
 522              	.LCFI13:
 523              		.cfi_def_cfa_offset 4
 524 0032 BD46     		mov	sp, r7
 525              	.LCFI14:
 526              		.cfi_def_cfa_register 13
 527              		@ sp needed
 528 0034 5DF8047B 		ldr	r7, [sp], #4
 529              	.LCFI15:
 530              		.cfi_restore 7
 531              		.cfi_def_cfa_offset 0
 532 0038 7047     		bx	lr
 533              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 17


 534              	.LFE125:
 536              		.section	.text.USART_ClockInit,"ax",%progbits
 537              		.align	1
 538              		.global	USART_ClockInit
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 543              	USART_ClockInit:
 544              	.LFB126:
 362:./Library/stm32f4xx_usart.c **** 
 363:./Library/stm32f4xx_usart.c **** /**
 364:./Library/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 365:./Library/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 366:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 367:./Library/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 368:./Library/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 369:./Library/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 370:./Library/stm32f4xx_usart.c ****   * @retval None
 371:./Library/stm32f4xx_usart.c ****   */
 372:./Library/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 373:./Library/stm32f4xx_usart.c **** {
 545              		.loc 1 373 1
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 16
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549              		@ link register save eliminated.
 550 0000 80B4     		push	{r7}
 551              	.LCFI16:
 552              		.cfi_def_cfa_offset 4
 553              		.cfi_offset 7, -4
 554 0002 85B0     		sub	sp, sp, #20
 555              	.LCFI17:
 556              		.cfi_def_cfa_offset 24
 557 0004 00AF     		add	r7, sp, #0
 558              	.LCFI18:
 559              		.cfi_def_cfa_register 7
 560 0006 7860     		str	r0, [r7, #4]
 561 0008 3960     		str	r1, [r7]
 374:./Library/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 562              		.loc 1 374 12
 563 000a 0023     		movs	r3, #0
 564 000c FB60     		str	r3, [r7, #12]
 375:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 376:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 377:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 378:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 379:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 380:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 381:./Library/stm32f4xx_usart.c ****   
 382:./Library/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 383:./Library/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 565              		.loc 1 383 18
 566 000e 7B68     		ldr	r3, [r7, #4]
 567 0010 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 568 0012 9BB2     		uxth	r3, r3
 569              		.loc 1 383 10
 570 0014 FB60     		str	r3, [r7, #12]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 18


 384:./Library/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 385:./Library/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 571              		.loc 1 385 10
 572 0016 FB68     		ldr	r3, [r7, #12]
 573 0018 23F47063 		bic	r3, r3, #3840
 574 001c FB60     		str	r3, [r7, #12]
 386:./Library/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 387:./Library/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 388:./Library/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 389:./Library/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 390:./Library/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 391:./Library/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 575              		.loc 1 391 44
 576 001e 3B68     		ldr	r3, [r7]
 577 0020 1A88     		ldrh	r2, [r3]
 578              		.loc 1 391 81
 579 0022 3B68     		ldr	r3, [r7]
 580 0024 5B88     		ldrh	r3, [r3, #2]
 392:./Library/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 581              		.loc 1 392 52
 582 0026 1343     		orrs	r3, r3, r2
 583 0028 9AB2     		uxth	r2, r3
 584              		.loc 1 392 39
 585 002a 3B68     		ldr	r3, [r7]
 586 002c 9B88     		ldrh	r3, [r3, #4]
 587              		.loc 1 392 52
 588 002e 1343     		orrs	r3, r3, r2
 589 0030 9AB2     		uxth	r2, r3
 590              		.loc 1 392 75
 591 0032 3B68     		ldr	r3, [r7]
 592 0034 DB88     		ldrh	r3, [r3, #6]
 593              		.loc 1 392 52
 594 0036 1343     		orrs	r3, r3, r2
 595 0038 9BB2     		uxth	r3, r3
 596 003a 1A46     		mov	r2, r3
 391:./Library/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 597              		.loc 1 391 10
 598 003c FB68     		ldr	r3, [r7, #12]
 599 003e 1343     		orrs	r3, r3, r2
 600 0040 FB60     		str	r3, [r7, #12]
 393:./Library/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 394:./Library/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 601              		.loc 1 394 17
 602 0042 FB68     		ldr	r3, [r7, #12]
 603 0044 9AB2     		uxth	r2, r3
 604              		.loc 1 394 15
 605 0046 7B68     		ldr	r3, [r7, #4]
 606 0048 1A82     		strh	r2, [r3, #16]	@ movhi
 395:./Library/stm32f4xx_usart.c **** }
 607              		.loc 1 395 1
 608 004a 00BF     		nop
 609 004c 1437     		adds	r7, r7, #20
 610              	.LCFI19:
 611              		.cfi_def_cfa_offset 4
 612 004e BD46     		mov	sp, r7
 613              	.LCFI20:
 614              		.cfi_def_cfa_register 13
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 19


 615              		@ sp needed
 616 0050 5DF8047B 		ldr	r7, [sp], #4
 617              	.LCFI21:
 618              		.cfi_restore 7
 619              		.cfi_def_cfa_offset 0
 620 0054 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE126:
 624              		.section	.text.USART_ClockStructInit,"ax",%progbits
 625              		.align	1
 626              		.global	USART_ClockStructInit
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 631              	USART_ClockStructInit:
 632              	.LFB127:
 396:./Library/stm32f4xx_usart.c **** 
 397:./Library/stm32f4xx_usart.c **** /**
 398:./Library/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 399:./Library/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 400:./Library/stm32f4xx_usart.c ****   *         which will be initialized.
 401:./Library/stm32f4xx_usart.c ****   * @retval None
 402:./Library/stm32f4xx_usart.c ****   */
 403:./Library/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 404:./Library/stm32f4xx_usart.c **** {
 633              		.loc 1 404 1
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638 0000 80B4     		push	{r7}
 639              	.LCFI22:
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 7, -4
 642 0002 83B0     		sub	sp, sp, #12
 643              	.LCFI23:
 644              		.cfi_def_cfa_offset 16
 645 0004 00AF     		add	r7, sp, #0
 646              	.LCFI24:
 647              		.cfi_def_cfa_register 7
 648 0006 7860     		str	r0, [r7, #4]
 405:./Library/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 406:./Library/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 649              		.loc 1 406 38
 650 0008 7B68     		ldr	r3, [r7, #4]
 651 000a 0022     		movs	r2, #0
 652 000c 1A80     		strh	r2, [r3]	@ movhi
 407:./Library/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 653              		.loc 1 407 37
 654 000e 7B68     		ldr	r3, [r7, #4]
 655 0010 0022     		movs	r2, #0
 656 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 408:./Library/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 657              		.loc 1 408 37
 658 0014 7B68     		ldr	r3, [r7, #4]
 659 0016 0022     		movs	r2, #0
 660 0018 9A80     		strh	r2, [r3, #4]	@ movhi
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 20


 409:./Library/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 661              		.loc 1 409 40
 662 001a 7B68     		ldr	r3, [r7, #4]
 663 001c 0022     		movs	r2, #0
 664 001e DA80     		strh	r2, [r3, #6]	@ movhi
 410:./Library/stm32f4xx_usart.c **** }
 665              		.loc 1 410 1
 666 0020 00BF     		nop
 667 0022 0C37     		adds	r7, r7, #12
 668              	.LCFI25:
 669              		.cfi_def_cfa_offset 4
 670 0024 BD46     		mov	sp, r7
 671              	.LCFI26:
 672              		.cfi_def_cfa_register 13
 673              		@ sp needed
 674 0026 5DF8047B 		ldr	r7, [sp], #4
 675              	.LCFI27:
 676              		.cfi_restore 7
 677              		.cfi_def_cfa_offset 0
 678 002a 7047     		bx	lr
 679              		.cfi_endproc
 680              	.LFE127:
 682              		.section	.text.USART_Cmd,"ax",%progbits
 683              		.align	1
 684              		.global	USART_Cmd
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 689              	USART_Cmd:
 690              	.LFB128:
 411:./Library/stm32f4xx_usart.c **** 
 412:./Library/stm32f4xx_usart.c **** /**
 413:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 414:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 415:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 416:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 417:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 418:./Library/stm32f4xx_usart.c ****   * @retval None
 419:./Library/stm32f4xx_usart.c ****   */
 420:./Library/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 421:./Library/stm32f4xx_usart.c **** {
 691              		.loc 1 421 1
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 8
 694              		@ frame_needed = 1, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 696 0000 80B4     		push	{r7}
 697              	.LCFI28:
 698              		.cfi_def_cfa_offset 4
 699              		.cfi_offset 7, -4
 700 0002 83B0     		sub	sp, sp, #12
 701              	.LCFI29:
 702              		.cfi_def_cfa_offset 16
 703 0004 00AF     		add	r7, sp, #0
 704              	.LCFI30:
 705              		.cfi_def_cfa_register 7
 706 0006 7860     		str	r0, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 21


 707 0008 0B46     		mov	r3, r1
 708 000a FB70     		strb	r3, [r7, #3]
 422:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 423:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 424:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 425:./Library/stm32f4xx_usart.c ****   
 426:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 709              		.loc 1 426 6
 710 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 711 000e 002B     		cmp	r3, #0
 712 0010 08D0     		beq	.L27
 427:./Library/stm32f4xx_usart.c ****   {
 428:./Library/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 429:./Library/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 713              		.loc 1 429 17
 714 0012 7B68     		ldr	r3, [r7, #4]
 715 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 716 0016 9BB2     		uxth	r3, r3
 717 0018 43F40053 		orr	r3, r3, #8192
 718 001c 9AB2     		uxth	r2, r3
 719 001e 7B68     		ldr	r3, [r7, #4]
 720 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 430:./Library/stm32f4xx_usart.c ****   }
 431:./Library/stm32f4xx_usart.c ****   else
 432:./Library/stm32f4xx_usart.c ****   {
 433:./Library/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 434:./Library/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 435:./Library/stm32f4xx_usart.c ****   }
 436:./Library/stm32f4xx_usart.c **** }
 721              		.loc 1 436 1
 722 0022 07E0     		b	.L29
 723              	.L27:
 434:./Library/stm32f4xx_usart.c ****   }
 724              		.loc 1 434 17
 725 0024 7B68     		ldr	r3, [r7, #4]
 726 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 727 0028 9BB2     		uxth	r3, r3
 728 002a 23F40053 		bic	r3, r3, #8192
 729 002e 9AB2     		uxth	r2, r3
 730 0030 7B68     		ldr	r3, [r7, #4]
 731 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 732              	.L29:
 733              		.loc 1 436 1
 734 0034 00BF     		nop
 735 0036 0C37     		adds	r7, r7, #12
 736              	.LCFI31:
 737              		.cfi_def_cfa_offset 4
 738 0038 BD46     		mov	sp, r7
 739              	.LCFI32:
 740              		.cfi_def_cfa_register 13
 741              		@ sp needed
 742 003a 5DF8047B 		ldr	r7, [sp], #4
 743              	.LCFI33:
 744              		.cfi_restore 7
 745              		.cfi_def_cfa_offset 0
 746 003e 7047     		bx	lr
 747              		.cfi_endproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 22


 748              	.LFE128:
 750              		.section	.text.USART_SetPrescaler,"ax",%progbits
 751              		.align	1
 752              		.global	USART_SetPrescaler
 753              		.syntax unified
 754              		.thumb
 755              		.thumb_func
 757              	USART_SetPrescaler:
 758              	.LFB129:
 437:./Library/stm32f4xx_usart.c **** 
 438:./Library/stm32f4xx_usart.c **** /**
 439:./Library/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 440:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 441:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 442:./Library/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 443:./Library/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 444:./Library/stm32f4xx_usart.c ****   * @retval None
 445:./Library/stm32f4xx_usart.c ****   */
 446:./Library/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 447:./Library/stm32f4xx_usart.c **** { 
 759              		.loc 1 447 1
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 8
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763              		@ link register save eliminated.
 764 0000 80B4     		push	{r7}
 765              	.LCFI34:
 766              		.cfi_def_cfa_offset 4
 767              		.cfi_offset 7, -4
 768 0002 83B0     		sub	sp, sp, #12
 769              	.LCFI35:
 770              		.cfi_def_cfa_offset 16
 771 0004 00AF     		add	r7, sp, #0
 772              	.LCFI36:
 773              		.cfi_def_cfa_register 7
 774 0006 7860     		str	r0, [r7, #4]
 775 0008 0B46     		mov	r3, r1
 776 000a FB70     		strb	r3, [r7, #3]
 448:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 449:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 450:./Library/stm32f4xx_usart.c ****   
 451:./Library/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 452:./Library/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 777              		.loc 1 452 16
 778 000c 7B68     		ldr	r3, [r7, #4]
 779 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 780 0010 9BB2     		uxth	r3, r3
 781 0012 23F0FF03 		bic	r3, r3, #255
 782 0016 9AB2     		uxth	r2, r3
 783 0018 7B68     		ldr	r3, [r7, #4]
 784 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 453:./Library/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 454:./Library/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 785              		.loc 1 454 16
 786 001c 7B68     		ldr	r3, [r7, #4]
 787 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 788 0020 9AB2     		uxth	r2, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 23


 789 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 790 0024 9BB2     		uxth	r3, r3
 791 0026 1343     		orrs	r3, r3, r2
 792 0028 9AB2     		uxth	r2, r3
 793 002a 7B68     		ldr	r3, [r7, #4]
 794 002c 1A83     		strh	r2, [r3, #24]	@ movhi
 455:./Library/stm32f4xx_usart.c **** }
 795              		.loc 1 455 1
 796 002e 00BF     		nop
 797 0030 0C37     		adds	r7, r7, #12
 798              	.LCFI37:
 799              		.cfi_def_cfa_offset 4
 800 0032 BD46     		mov	sp, r7
 801              	.LCFI38:
 802              		.cfi_def_cfa_register 13
 803              		@ sp needed
 804 0034 5DF8047B 		ldr	r7, [sp], #4
 805              	.LCFI39:
 806              		.cfi_restore 7
 807              		.cfi_def_cfa_offset 0
 808 0038 7047     		bx	lr
 809              		.cfi_endproc
 810              	.LFE129:
 812              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 813              		.align	1
 814              		.global	USART_OverSampling8Cmd
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 819              	USART_OverSampling8Cmd:
 820              	.LFB130:
 456:./Library/stm32f4xx_usart.c **** 
 457:./Library/stm32f4xx_usart.c **** /**
 458:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 459:./Library/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 460:./Library/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 461:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 462:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 463:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 464:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 465:./Library/stm32f4xx_usart.c ****   * @retval None
 466:./Library/stm32f4xx_usart.c ****   */
 467:./Library/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 468:./Library/stm32f4xx_usart.c **** {
 821              		.loc 1 468 1
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 8
 824              		@ frame_needed = 1, uses_anonymous_args = 0
 825              		@ link register save eliminated.
 826 0000 80B4     		push	{r7}
 827              	.LCFI40:
 828              		.cfi_def_cfa_offset 4
 829              		.cfi_offset 7, -4
 830 0002 83B0     		sub	sp, sp, #12
 831              	.LCFI41:
 832              		.cfi_def_cfa_offset 16
 833 0004 00AF     		add	r7, sp, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 24


 834              	.LCFI42:
 835              		.cfi_def_cfa_register 7
 836 0006 7860     		str	r0, [r7, #4]
 837 0008 0B46     		mov	r3, r1
 838 000a FB70     		strb	r3, [r7, #3]
 469:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 470:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 471:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 472:./Library/stm32f4xx_usart.c ****   
 473:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 839              		.loc 1 473 6
 840 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 841 000e 002B     		cmp	r3, #0
 842 0010 0AD0     		beq	.L32
 474:./Library/stm32f4xx_usart.c ****   {
 475:./Library/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 476:./Library/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 843              		.loc 1 476 17
 844 0012 7B68     		ldr	r3, [r7, #4]
 845 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 846 0016 9BB2     		uxth	r3, r3
 847 0018 6FEA4343 		mvn	r3, r3, lsl #17
 848 001c 6FEA5343 		mvn	r3, r3, lsr #17
 849 0020 9AB2     		uxth	r2, r3
 850 0022 7B68     		ldr	r3, [r7, #4]
 851 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 477:./Library/stm32f4xx_usart.c ****   }
 478:./Library/stm32f4xx_usart.c ****   else
 479:./Library/stm32f4xx_usart.c ****   {
 480:./Library/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 481:./Library/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 482:./Library/stm32f4xx_usart.c ****   }
 483:./Library/stm32f4xx_usart.c **** }  
 852              		.loc 1 483 1
 853 0026 07E0     		b	.L34
 854              	.L32:
 481:./Library/stm32f4xx_usart.c ****   }
 855              		.loc 1 481 17
 856 0028 7B68     		ldr	r3, [r7, #4]
 857 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 858 002c 9BB2     		uxth	r3, r3
 859 002e C3F30E03 		ubfx	r3, r3, #0, #15
 860 0032 9AB2     		uxth	r2, r3
 861 0034 7B68     		ldr	r3, [r7, #4]
 862 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 863              	.L34:
 864              		.loc 1 483 1
 865 0038 00BF     		nop
 866 003a 0C37     		adds	r7, r7, #12
 867              	.LCFI43:
 868              		.cfi_def_cfa_offset 4
 869 003c BD46     		mov	sp, r7
 870              	.LCFI44:
 871              		.cfi_def_cfa_register 13
 872              		@ sp needed
 873 003e 5DF8047B 		ldr	r7, [sp], #4
 874              	.LCFI45:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 25


 875              		.cfi_restore 7
 876              		.cfi_def_cfa_offset 0
 877 0042 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE130:
 881              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 882              		.align	1
 883              		.global	USART_OneBitMethodCmd
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 888              	USART_OneBitMethodCmd:
 889              	.LFB131:
 484:./Library/stm32f4xx_usart.c **** 
 485:./Library/stm32f4xx_usart.c **** /**
 486:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 487:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 488:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 489:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 490:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 491:./Library/stm32f4xx_usart.c ****   * @retval None
 492:./Library/stm32f4xx_usart.c ****   */
 493:./Library/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 494:./Library/stm32f4xx_usart.c **** {
 890              		.loc 1 494 1
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 8
 893              		@ frame_needed = 1, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895 0000 80B4     		push	{r7}
 896              	.LCFI46:
 897              		.cfi_def_cfa_offset 4
 898              		.cfi_offset 7, -4
 899 0002 83B0     		sub	sp, sp, #12
 900              	.LCFI47:
 901              		.cfi_def_cfa_offset 16
 902 0004 00AF     		add	r7, sp, #0
 903              	.LCFI48:
 904              		.cfi_def_cfa_register 7
 905 0006 7860     		str	r0, [r7, #4]
 906 0008 0B46     		mov	r3, r1
 907 000a FB70     		strb	r3, [r7, #3]
 495:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 496:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 497:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 498:./Library/stm32f4xx_usart.c ****   
 499:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 908              		.loc 1 499 6
 909 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 910 000e 002B     		cmp	r3, #0
 911 0010 08D0     		beq	.L36
 500:./Library/stm32f4xx_usart.c ****   {
 501:./Library/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 502:./Library/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 912              		.loc 1 502 17
 913 0012 7B68     		ldr	r3, [r7, #4]
 914 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 26


 915 0016 9BB2     		uxth	r3, r3
 916 0018 43F40063 		orr	r3, r3, #2048
 917 001c 9AB2     		uxth	r2, r3
 918 001e 7B68     		ldr	r3, [r7, #4]
 919 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 503:./Library/stm32f4xx_usart.c ****   }
 504:./Library/stm32f4xx_usart.c ****   else
 505:./Library/stm32f4xx_usart.c ****   {
 506:./Library/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 507:./Library/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 508:./Library/stm32f4xx_usart.c ****   }
 509:./Library/stm32f4xx_usart.c **** }
 920              		.loc 1 509 1
 921 0022 07E0     		b	.L38
 922              	.L36:
 507:./Library/stm32f4xx_usart.c ****   }
 923              		.loc 1 507 17
 924 0024 7B68     		ldr	r3, [r7, #4]
 925 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 926 0028 9BB2     		uxth	r3, r3
 927 002a 23F40063 		bic	r3, r3, #2048
 928 002e 9AB2     		uxth	r2, r3
 929 0030 7B68     		ldr	r3, [r7, #4]
 930 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 931              	.L38:
 932              		.loc 1 509 1
 933 0034 00BF     		nop
 934 0036 0C37     		adds	r7, r7, #12
 935              	.LCFI49:
 936              		.cfi_def_cfa_offset 4
 937 0038 BD46     		mov	sp, r7
 938              	.LCFI50:
 939              		.cfi_def_cfa_register 13
 940              		@ sp needed
 941 003a 5DF8047B 		ldr	r7, [sp], #4
 942              	.LCFI51:
 943              		.cfi_restore 7
 944              		.cfi_def_cfa_offset 0
 945 003e 7047     		bx	lr
 946              		.cfi_endproc
 947              	.LFE131:
 949              		.section	.text.USART_SendData,"ax",%progbits
 950              		.align	1
 951              		.global	USART_SendData
 952              		.syntax unified
 953              		.thumb
 954              		.thumb_func
 956              	USART_SendData:
 957              	.LFB132:
 510:./Library/stm32f4xx_usart.c **** 
 511:./Library/stm32f4xx_usart.c **** /**
 512:./Library/stm32f4xx_usart.c ****   * @}
 513:./Library/stm32f4xx_usart.c ****   */
 514:./Library/stm32f4xx_usart.c **** 
 515:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 516:./Library/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 517:./Library/stm32f4xx_usart.c ****  *
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 27


 518:./Library/stm32f4xx_usart.c **** @verbatim   
 519:./Library/stm32f4xx_usart.c ****  ===============================================================================
 520:./Library/stm32f4xx_usart.c ****                       ##### Data transfers functions #####
 521:./Library/stm32f4xx_usart.c ****  ===============================================================================  
 522:./Library/stm32f4xx_usart.c ****     [..]
 523:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART data 
 524:./Library/stm32f4xx_usart.c ****     transfers.
 525:./Library/stm32f4xx_usart.c ****     [..]
 526:./Library/stm32f4xx_usart.c ****     During an USART reception, data shifts in least significant bit first through 
 527:./Library/stm32f4xx_usart.c ****     the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 528:./Library/stm32f4xx_usart.c ****     between the internal bus and the received shift register.
 529:./Library/stm32f4xx_usart.c ****     [..]
 530:./Library/stm32f4xx_usart.c ****     When a transmission is taking place, a write instruction to the USART_DR register 
 531:./Library/stm32f4xx_usart.c ****     stores the data in the TDR register and which is copied in the shift register 
 532:./Library/stm32f4xx_usart.c ****     at the end of the current transmission.
 533:./Library/stm32f4xx_usart.c ****     [..]
 534:./Library/stm32f4xx_usart.c ****     The read access of the USART_DR register can be done using the USART_ReceiveData()
 535:./Library/stm32f4xx_usart.c ****     function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 536:./Library/stm32f4xx_usart.c ****     can be done using USART_SendData() function and stores the written data into 
 537:./Library/stm32f4xx_usart.c ****     TDR buffer.
 538:./Library/stm32f4xx_usart.c **** 
 539:./Library/stm32f4xx_usart.c **** @endverbatim
 540:./Library/stm32f4xx_usart.c ****   * @{
 541:./Library/stm32f4xx_usart.c ****   */
 542:./Library/stm32f4xx_usart.c **** 
 543:./Library/stm32f4xx_usart.c **** /**
 544:./Library/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 545:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 546:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 547:./Library/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 548:./Library/stm32f4xx_usart.c ****   * @retval None
 549:./Library/stm32f4xx_usart.c ****   */
 550:./Library/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 551:./Library/stm32f4xx_usart.c **** {
 958              		.loc 1 551 1
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 8
 961              		@ frame_needed = 1, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963 0000 80B4     		push	{r7}
 964              	.LCFI52:
 965              		.cfi_def_cfa_offset 4
 966              		.cfi_offset 7, -4
 967 0002 83B0     		sub	sp, sp, #12
 968              	.LCFI53:
 969              		.cfi_def_cfa_offset 16
 970 0004 00AF     		add	r7, sp, #0
 971              	.LCFI54:
 972              		.cfi_def_cfa_register 7
 973 0006 7860     		str	r0, [r7, #4]
 974 0008 0B46     		mov	r3, r1
 975 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 552:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 553:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 554:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 555:./Library/stm32f4xx_usart.c ****     
 556:./Library/stm32f4xx_usart.c ****   /* Transmit Data */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 28


 557:./Library/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 976              		.loc 1 557 22
 977 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 978 000e C3F30803 		ubfx	r3, r3, #0, #9
 979 0012 9AB2     		uxth	r2, r3
 980              		.loc 1 557 14
 981 0014 7B68     		ldr	r3, [r7, #4]
 982 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 558:./Library/stm32f4xx_usart.c **** }
 983              		.loc 1 558 1
 984 0018 00BF     		nop
 985 001a 0C37     		adds	r7, r7, #12
 986              	.LCFI55:
 987              		.cfi_def_cfa_offset 4
 988 001c BD46     		mov	sp, r7
 989              	.LCFI56:
 990              		.cfi_def_cfa_register 13
 991              		@ sp needed
 992 001e 5DF8047B 		ldr	r7, [sp], #4
 993              	.LCFI57:
 994              		.cfi_restore 7
 995              		.cfi_def_cfa_offset 0
 996 0022 7047     		bx	lr
 997              		.cfi_endproc
 998              	.LFE132:
 1000              		.section	.text.USART_ReceiveData,"ax",%progbits
 1001              		.align	1
 1002              		.global	USART_ReceiveData
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1007              	USART_ReceiveData:
 1008              	.LFB133:
 559:./Library/stm32f4xx_usart.c **** 
 560:./Library/stm32f4xx_usart.c **** /**
 561:./Library/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 562:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 563:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 564:./Library/stm32f4xx_usart.c ****   * @retval The received data.
 565:./Library/stm32f4xx_usart.c ****   */
 566:./Library/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 567:./Library/stm32f4xx_usart.c **** {
 1009              		.loc 1 567 1
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 8
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013              		@ link register save eliminated.
 1014 0000 80B4     		push	{r7}
 1015              	.LCFI58:
 1016              		.cfi_def_cfa_offset 4
 1017              		.cfi_offset 7, -4
 1018 0002 83B0     		sub	sp, sp, #12
 1019              	.LCFI59:
 1020              		.cfi_def_cfa_offset 16
 1021 0004 00AF     		add	r7, sp, #0
 1022              	.LCFI60:
 1023              		.cfi_def_cfa_register 7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 29


 1024 0006 7860     		str	r0, [r7, #4]
 568:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 569:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 570:./Library/stm32f4xx_usart.c ****   
 571:./Library/stm32f4xx_usart.c ****   /* Receive Data */
 572:./Library/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 1025              		.loc 1 572 27
 1026 0008 7B68     		ldr	r3, [r7, #4]
 1027 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1028 000c 9BB2     		uxth	r3, r3
 1029              		.loc 1 572 10
 1030 000e C3F30803 		ubfx	r3, r3, #0, #9
 1031 0012 9BB2     		uxth	r3, r3
 573:./Library/stm32f4xx_usart.c **** }
 1032              		.loc 1 573 1
 1033 0014 1846     		mov	r0, r3
 1034 0016 0C37     		adds	r7, r7, #12
 1035              	.LCFI61:
 1036              		.cfi_def_cfa_offset 4
 1037 0018 BD46     		mov	sp, r7
 1038              	.LCFI62:
 1039              		.cfi_def_cfa_register 13
 1040              		@ sp needed
 1041 001a 5DF8047B 		ldr	r7, [sp], #4
 1042              	.LCFI63:
 1043              		.cfi_restore 7
 1044              		.cfi_def_cfa_offset 0
 1045 001e 7047     		bx	lr
 1046              		.cfi_endproc
 1047              	.LFE133:
 1049              		.section	.text.USART_SetAddress,"ax",%progbits
 1050              		.align	1
 1051              		.global	USART_SetAddress
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1056              	USART_SetAddress:
 1057              	.LFB134:
 574:./Library/stm32f4xx_usart.c **** 
 575:./Library/stm32f4xx_usart.c **** /**
 576:./Library/stm32f4xx_usart.c ****   * @}
 577:./Library/stm32f4xx_usart.c ****   */
 578:./Library/stm32f4xx_usart.c **** 
 579:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 580:./Library/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 581:./Library/stm32f4xx_usart.c ****  *
 582:./Library/stm32f4xx_usart.c **** @verbatim   
 583:./Library/stm32f4xx_usart.c ****  ===============================================================================
 584:./Library/stm32f4xx_usart.c ****               ##### Multi-Processor Communication functions #####
 585:./Library/stm32f4xx_usart.c ****  ===============================================================================  
 586:./Library/stm32f4xx_usart.c ****     [..]
 587:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 588:./Library/stm32f4xx_usart.c ****     multiprocessor communication.
 589:./Library/stm32f4xx_usart.c ****     [..]
 590:./Library/stm32f4xx_usart.c ****     For instance one of the USARTs can be the master, its TX output is connected 
 591:./Library/stm32f4xx_usart.c ****     to the RX input of the other USART. The others are slaves, their respective 
 592:./Library/stm32f4xx_usart.c ****     TX outputs are logically ANDed together and connected to the RX input of the 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 30


 593:./Library/stm32f4xx_usart.c ****     master.
 594:./Library/stm32f4xx_usart.c ****     [..]
 595:./Library/stm32f4xx_usart.c ****     USART multiprocessor communication is possible through the following procedure:
 596:./Library/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode 
 597:./Library/stm32f4xx_usart.c ****           transmitter or Mode receiver and hardware flow control values using 
 598:./Library/stm32f4xx_usart.c ****           the USART_Init() function.
 599:./Library/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 600:./Library/stm32f4xx_usart.c ****       (#) Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 601:./Library/stm32f4xx_usart.c ****           using USART_WakeUpConfig() function only for the slaves.
 602:./Library/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 603:./Library/stm32f4xx_usart.c ****       (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 604:./Library/stm32f4xx_usart.c ****     [..]
 605:./Library/stm32f4xx_usart.c ****     The USART Slave exit from mute mode when receive the wake up condition.
 606:./Library/stm32f4xx_usart.c **** 
 607:./Library/stm32f4xx_usart.c **** @endverbatim
 608:./Library/stm32f4xx_usart.c ****   * @{
 609:./Library/stm32f4xx_usart.c ****   */
 610:./Library/stm32f4xx_usart.c **** 
 611:./Library/stm32f4xx_usart.c **** /**
 612:./Library/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 613:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 614:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 615:./Library/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 616:./Library/stm32f4xx_usart.c ****   * @retval None
 617:./Library/stm32f4xx_usart.c ****   */
 618:./Library/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 619:./Library/stm32f4xx_usart.c **** {
 1058              		.loc 1 619 1
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 8
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063 0000 80B4     		push	{r7}
 1064              	.LCFI64:
 1065              		.cfi_def_cfa_offset 4
 1066              		.cfi_offset 7, -4
 1067 0002 83B0     		sub	sp, sp, #12
 1068              	.LCFI65:
 1069              		.cfi_def_cfa_offset 16
 1070 0004 00AF     		add	r7, sp, #0
 1071              	.LCFI66:
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
 1074 0008 0B46     		mov	r3, r1
 1075 000a FB70     		strb	r3, [r7, #3]
 620:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 621:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 622:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 623:./Library/stm32f4xx_usart.c ****     
 624:./Library/stm32f4xx_usart.c ****   /* Clear the USART address */
 625:./Library/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 1076              		.loc 1 625 15
 1077 000c 7B68     		ldr	r3, [r7, #4]
 1078 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1079 0010 9BB2     		uxth	r3, r3
 1080 0012 23F00F03 		bic	r3, r3, #15
 1081 0016 9AB2     		uxth	r2, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 31


 1082 0018 7B68     		ldr	r3, [r7, #4]
 1083 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 626:./Library/stm32f4xx_usart.c ****   /* Set the USART address node */
 627:./Library/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 1084              		.loc 1 627 15
 1085 001c 7B68     		ldr	r3, [r7, #4]
 1086 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1087 0020 9AB2     		uxth	r2, r3
 1088 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1089 0024 9BB2     		uxth	r3, r3
 1090 0026 1343     		orrs	r3, r3, r2
 1091 0028 9AB2     		uxth	r2, r3
 1092 002a 7B68     		ldr	r3, [r7, #4]
 1093 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 628:./Library/stm32f4xx_usart.c **** }
 1094              		.loc 1 628 1
 1095 002e 00BF     		nop
 1096 0030 0C37     		adds	r7, r7, #12
 1097              	.LCFI67:
 1098              		.cfi_def_cfa_offset 4
 1099 0032 BD46     		mov	sp, r7
 1100              	.LCFI68:
 1101              		.cfi_def_cfa_register 13
 1102              		@ sp needed
 1103 0034 5DF8047B 		ldr	r7, [sp], #4
 1104              	.LCFI69:
 1105              		.cfi_restore 7
 1106              		.cfi_def_cfa_offset 0
 1107 0038 7047     		bx	lr
 1108              		.cfi_endproc
 1109              	.LFE134:
 1111              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 1112              		.align	1
 1113              		.global	USART_ReceiverWakeUpCmd
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1118              	USART_ReceiverWakeUpCmd:
 1119              	.LFB135:
 629:./Library/stm32f4xx_usart.c **** 
 630:./Library/stm32f4xx_usart.c **** /**
 631:./Library/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 632:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 633:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 634:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 635:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 636:./Library/stm32f4xx_usart.c ****   * @retval None
 637:./Library/stm32f4xx_usart.c ****   */
 638:./Library/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 639:./Library/stm32f4xx_usart.c **** {
 1120              		.loc 1 639 1
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 8
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 1125 0000 80B4     		push	{r7}
 1126              	.LCFI70:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 32


 1127              		.cfi_def_cfa_offset 4
 1128              		.cfi_offset 7, -4
 1129 0002 83B0     		sub	sp, sp, #12
 1130              	.LCFI71:
 1131              		.cfi_def_cfa_offset 16
 1132 0004 00AF     		add	r7, sp, #0
 1133              	.LCFI72:
 1134              		.cfi_def_cfa_register 7
 1135 0006 7860     		str	r0, [r7, #4]
 1136 0008 0B46     		mov	r3, r1
 1137 000a FB70     		strb	r3, [r7, #3]
 640:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 641:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 642:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 643:./Library/stm32f4xx_usart.c ****   
 644:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1138              		.loc 1 644 6
 1139 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1140 000e 002B     		cmp	r3, #0
 1141 0010 08D0     		beq	.L44
 645:./Library/stm32f4xx_usart.c ****   {
 646:./Library/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 647:./Library/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 1142              		.loc 1 647 17
 1143 0012 7B68     		ldr	r3, [r7, #4]
 1144 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1145 0016 9BB2     		uxth	r3, r3
 1146 0018 43F00203 		orr	r3, r3, #2
 1147 001c 9AB2     		uxth	r2, r3
 1148 001e 7B68     		ldr	r3, [r7, #4]
 1149 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 648:./Library/stm32f4xx_usart.c ****   }
 649:./Library/stm32f4xx_usart.c ****   else
 650:./Library/stm32f4xx_usart.c ****   {
 651:./Library/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 652:./Library/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 653:./Library/stm32f4xx_usart.c ****   }
 654:./Library/stm32f4xx_usart.c **** }
 1150              		.loc 1 654 1
 1151 0022 07E0     		b	.L46
 1152              	.L44:
 652:./Library/stm32f4xx_usart.c ****   }
 1153              		.loc 1 652 17
 1154 0024 7B68     		ldr	r3, [r7, #4]
 1155 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1156 0028 9BB2     		uxth	r3, r3
 1157 002a 23F00203 		bic	r3, r3, #2
 1158 002e 9AB2     		uxth	r2, r3
 1159 0030 7B68     		ldr	r3, [r7, #4]
 1160 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 1161              	.L46:
 1162              		.loc 1 654 1
 1163 0034 00BF     		nop
 1164 0036 0C37     		adds	r7, r7, #12
 1165              	.LCFI73:
 1166              		.cfi_def_cfa_offset 4
 1167 0038 BD46     		mov	sp, r7
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 33


 1168              	.LCFI74:
 1169              		.cfi_def_cfa_register 13
 1170              		@ sp needed
 1171 003a 5DF8047B 		ldr	r7, [sp], #4
 1172              	.LCFI75:
 1173              		.cfi_restore 7
 1174              		.cfi_def_cfa_offset 0
 1175 003e 7047     		bx	lr
 1176              		.cfi_endproc
 1177              	.LFE135:
 1179              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 1180              		.align	1
 1181              		.global	USART_WakeUpConfig
 1182              		.syntax unified
 1183              		.thumb
 1184              		.thumb_func
 1186              	USART_WakeUpConfig:
 1187              	.LFB136:
 655:./Library/stm32f4xx_usart.c **** /**
 656:./Library/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 657:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 658:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 659:./Library/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 660:./Library/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 661:./Library/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 662:./Library/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 663:./Library/stm32f4xx_usart.c ****   * @retval None
 664:./Library/stm32f4xx_usart.c ****   */
 665:./Library/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 666:./Library/stm32f4xx_usart.c **** {
 1188              		.loc 1 666 1
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 8
 1191              		@ frame_needed = 1, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
 1193 0000 80B4     		push	{r7}
 1194              	.LCFI76:
 1195              		.cfi_def_cfa_offset 4
 1196              		.cfi_offset 7, -4
 1197 0002 83B0     		sub	sp, sp, #12
 1198              	.LCFI77:
 1199              		.cfi_def_cfa_offset 16
 1200 0004 00AF     		add	r7, sp, #0
 1201              	.LCFI78:
 1202              		.cfi_def_cfa_register 7
 1203 0006 7860     		str	r0, [r7, #4]
 1204 0008 0B46     		mov	r3, r1
 1205 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 667:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 668:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 669:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 670:./Library/stm32f4xx_usart.c ****   
 671:./Library/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 1206              		.loc 1 671 15
 1207 000c 7B68     		ldr	r3, [r7, #4]
 1208 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1209 0010 9BB2     		uxth	r3, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 34


 1210 0012 23F40063 		bic	r3, r3, #2048
 1211 0016 9AB2     		uxth	r2, r3
 1212 0018 7B68     		ldr	r3, [r7, #4]
 1213 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 672:./Library/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1214              		.loc 1 672 15
 1215 001c 7B68     		ldr	r3, [r7, #4]
 1216 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1217 0020 9AB2     		uxth	r2, r3
 1218 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1219 0024 1343     		orrs	r3, r3, r2
 1220 0026 9AB2     		uxth	r2, r3
 1221 0028 7B68     		ldr	r3, [r7, #4]
 1222 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 673:./Library/stm32f4xx_usart.c **** }
 1223              		.loc 1 673 1
 1224 002c 00BF     		nop
 1225 002e 0C37     		adds	r7, r7, #12
 1226              	.LCFI79:
 1227              		.cfi_def_cfa_offset 4
 1228 0030 BD46     		mov	sp, r7
 1229              	.LCFI80:
 1230              		.cfi_def_cfa_register 13
 1231              		@ sp needed
 1232 0032 5DF8047B 		ldr	r7, [sp], #4
 1233              	.LCFI81:
 1234              		.cfi_restore 7
 1235              		.cfi_def_cfa_offset 0
 1236 0036 7047     		bx	lr
 1237              		.cfi_endproc
 1238              	.LFE136:
 1240              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1241              		.align	1
 1242              		.global	USART_LINBreakDetectLengthConfig
 1243              		.syntax unified
 1244              		.thumb
 1245              		.thumb_func
 1247              	USART_LINBreakDetectLengthConfig:
 1248              	.LFB137:
 674:./Library/stm32f4xx_usart.c **** 
 675:./Library/stm32f4xx_usart.c **** /**
 676:./Library/stm32f4xx_usart.c ****   * @}
 677:./Library/stm32f4xx_usart.c ****   */
 678:./Library/stm32f4xx_usart.c **** 
 679:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 680:./Library/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 681:./Library/stm32f4xx_usart.c ****  *
 682:./Library/stm32f4xx_usart.c **** @verbatim   
 683:./Library/stm32f4xx_usart.c ****  ===============================================================================
 684:./Library/stm32f4xx_usart.c ****                         ##### LIN mode functions #####
 685:./Library/stm32f4xx_usart.c ****  ===============================================================================  
 686:./Library/stm32f4xx_usart.c ****     [..]
 687:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART LIN 
 688:./Library/stm32f4xx_usart.c ****     Mode communication.
 689:./Library/stm32f4xx_usart.c ****     [..]
 690:./Library/stm32f4xx_usart.c ****     In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 691:./Library/stm32f4xx_usart.c ****     the LIN standard.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 35


 692:./Library/stm32f4xx_usart.c ****     [..]
 693:./Library/stm32f4xx_usart.c ****     Only this LIN Feature is supported by the USART IP:
 694:./Library/stm32f4xx_usart.c ****       (+) LIN Master Synchronous Break send capability and LIN slave break detection
 695:./Library/stm32f4xx_usart.c ****           capability :  13-bit break generation and 10/11 bit break detection
 696:./Library/stm32f4xx_usart.c **** 
 697:./Library/stm32f4xx_usart.c ****     [..]
 698:./Library/stm32f4xx_usart.c ****     USART LIN Master transmitter communication is possible through the following 
 699:./Library/stm32f4xx_usart.c ****     procedure:
 700:./Library/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 701:./Library/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 702:./Library/stm32f4xx_usart.c ****         the USART_Init() function.
 703:./Library/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 704:./Library/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 705:./Library/stm32f4xx_usart.c ****       (#) Send the break character using USART_SendBreak() function.
 706:./Library/stm32f4xx_usart.c ****     [..]
 707:./Library/stm32f4xx_usart.c ****     USART LIN Master receiver communication is possible through the following procedure:
 708:./Library/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 709:./Library/stm32f4xx_usart.c ****           Mode transmitter or Mode receiver and hardware flow control values using 
 710:./Library/stm32f4xx_usart.c ****           the USART_Init() function.
 711:./Library/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 712:./Library/stm32f4xx_usart.c ****       (#) Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 713:./Library/stm32f4xx_usart.c ****           function.
 714:./Library/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 715:./Library/stm32f4xx_usart.c **** 
 716:./Library/stm32f4xx_usart.c ****       -@- In LIN mode, the following bits must be kept cleared:
 717:./Library/stm32f4xx_usart.c ****        (+@) CLKEN in the USART_CR2 register,
 718:./Library/stm32f4xx_usart.c ****        (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 719:./Library/stm32f4xx_usart.c **** 
 720:./Library/stm32f4xx_usart.c **** @endverbatim
 721:./Library/stm32f4xx_usart.c ****   * @{
 722:./Library/stm32f4xx_usart.c ****   */
 723:./Library/stm32f4xx_usart.c **** 
 724:./Library/stm32f4xx_usart.c **** /**
 725:./Library/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 726:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 727:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 728:./Library/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 729:./Library/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 730:./Library/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 731:./Library/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 732:./Library/stm32f4xx_usart.c ****   * @retval None
 733:./Library/stm32f4xx_usart.c ****   */
 734:./Library/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 735:./Library/stm32f4xx_usart.c **** {
 1249              		.loc 1 735 1
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 8
 1252              		@ frame_needed = 1, uses_anonymous_args = 0
 1253              		@ link register save eliminated.
 1254 0000 80B4     		push	{r7}
 1255              	.LCFI82:
 1256              		.cfi_def_cfa_offset 4
 1257              		.cfi_offset 7, -4
 1258 0002 83B0     		sub	sp, sp, #12
 1259              	.LCFI83:
 1260              		.cfi_def_cfa_offset 16
 1261 0004 00AF     		add	r7, sp, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 36


 1262              	.LCFI84:
 1263              		.cfi_def_cfa_register 7
 1264 0006 7860     		str	r0, [r7, #4]
 1265 0008 0B46     		mov	r3, r1
 1266 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 736:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 737:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 738:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 739:./Library/stm32f4xx_usart.c ****   
 740:./Library/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1267              		.loc 1 740 15
 1268 000c 7B68     		ldr	r3, [r7, #4]
 1269 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1270 0010 9BB2     		uxth	r3, r3
 1271 0012 23F02003 		bic	r3, r3, #32
 1272 0016 9AB2     		uxth	r2, r3
 1273 0018 7B68     		ldr	r3, [r7, #4]
 1274 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 741:./Library/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1275              		.loc 1 741 15
 1276 001c 7B68     		ldr	r3, [r7, #4]
 1277 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1278 0020 9AB2     		uxth	r2, r3
 1279 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1280 0024 1343     		orrs	r3, r3, r2
 1281 0026 9AB2     		uxth	r2, r3
 1282 0028 7B68     		ldr	r3, [r7, #4]
 1283 002a 1A82     		strh	r2, [r3, #16]	@ movhi
 742:./Library/stm32f4xx_usart.c **** }
 1284              		.loc 1 742 1
 1285 002c 00BF     		nop
 1286 002e 0C37     		adds	r7, r7, #12
 1287              	.LCFI85:
 1288              		.cfi_def_cfa_offset 4
 1289 0030 BD46     		mov	sp, r7
 1290              	.LCFI86:
 1291              		.cfi_def_cfa_register 13
 1292              		@ sp needed
 1293 0032 5DF8047B 		ldr	r7, [sp], #4
 1294              	.LCFI87:
 1295              		.cfi_restore 7
 1296              		.cfi_def_cfa_offset 0
 1297 0036 7047     		bx	lr
 1298              		.cfi_endproc
 1299              	.LFE137:
 1301              		.section	.text.USART_LINCmd,"ax",%progbits
 1302              		.align	1
 1303              		.global	USART_LINCmd
 1304              		.syntax unified
 1305              		.thumb
 1306              		.thumb_func
 1308              	USART_LINCmd:
 1309              	.LFB138:
 743:./Library/stm32f4xx_usart.c **** 
 744:./Library/stm32f4xx_usart.c **** /**
 745:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 746:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 37


 747:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 748:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 749:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 750:./Library/stm32f4xx_usart.c ****   * @retval None
 751:./Library/stm32f4xx_usart.c ****   */
 752:./Library/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 753:./Library/stm32f4xx_usart.c **** {
 1310              		.loc 1 753 1
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 8
 1313              		@ frame_needed = 1, uses_anonymous_args = 0
 1314              		@ link register save eliminated.
 1315 0000 80B4     		push	{r7}
 1316              	.LCFI88:
 1317              		.cfi_def_cfa_offset 4
 1318              		.cfi_offset 7, -4
 1319 0002 83B0     		sub	sp, sp, #12
 1320              	.LCFI89:
 1321              		.cfi_def_cfa_offset 16
 1322 0004 00AF     		add	r7, sp, #0
 1323              	.LCFI90:
 1324              		.cfi_def_cfa_register 7
 1325 0006 7860     		str	r0, [r7, #4]
 1326 0008 0B46     		mov	r3, r1
 1327 000a FB70     		strb	r3, [r7, #3]
 754:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 755:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 756:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 757:./Library/stm32f4xx_usart.c ****   
 758:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1328              		.loc 1 758 6
 1329 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1330 000e 002B     		cmp	r3, #0
 1331 0010 08D0     		beq	.L50
 759:./Library/stm32f4xx_usart.c ****   {
 760:./Library/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 761:./Library/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1332              		.loc 1 761 17
 1333 0012 7B68     		ldr	r3, [r7, #4]
 1334 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1335 0016 9BB2     		uxth	r3, r3
 1336 0018 43F48043 		orr	r3, r3, #16384
 1337 001c 9AB2     		uxth	r2, r3
 1338 001e 7B68     		ldr	r3, [r7, #4]
 1339 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 762:./Library/stm32f4xx_usart.c ****   }
 763:./Library/stm32f4xx_usart.c ****   else
 764:./Library/stm32f4xx_usart.c ****   {
 765:./Library/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 766:./Library/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 767:./Library/stm32f4xx_usart.c ****   }
 768:./Library/stm32f4xx_usart.c **** }
 1340              		.loc 1 768 1
 1341 0022 07E0     		b	.L52
 1342              	.L50:
 766:./Library/stm32f4xx_usart.c ****   }
 1343              		.loc 1 766 17
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 38


 1344 0024 7B68     		ldr	r3, [r7, #4]
 1345 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1346 0028 9BB2     		uxth	r3, r3
 1347 002a 23F48043 		bic	r3, r3, #16384
 1348 002e 9AB2     		uxth	r2, r3
 1349 0030 7B68     		ldr	r3, [r7, #4]
 1350 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 1351              	.L52:
 1352              		.loc 1 768 1
 1353 0034 00BF     		nop
 1354 0036 0C37     		adds	r7, r7, #12
 1355              	.LCFI91:
 1356              		.cfi_def_cfa_offset 4
 1357 0038 BD46     		mov	sp, r7
 1358              	.LCFI92:
 1359              		.cfi_def_cfa_register 13
 1360              		@ sp needed
 1361 003a 5DF8047B 		ldr	r7, [sp], #4
 1362              	.LCFI93:
 1363              		.cfi_restore 7
 1364              		.cfi_def_cfa_offset 0
 1365 003e 7047     		bx	lr
 1366              		.cfi_endproc
 1367              	.LFE138:
 1369              		.section	.text.USART_SendBreak,"ax",%progbits
 1370              		.align	1
 1371              		.global	USART_SendBreak
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1376              	USART_SendBreak:
 1377              	.LFB139:
 769:./Library/stm32f4xx_usart.c **** 
 770:./Library/stm32f4xx_usart.c **** /**
 771:./Library/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 772:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 773:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 774:./Library/stm32f4xx_usart.c ****   * @retval None
 775:./Library/stm32f4xx_usart.c ****   */
 776:./Library/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 777:./Library/stm32f4xx_usart.c **** {
 1378              		.loc 1 777 1
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 8
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383 0000 80B4     		push	{r7}
 1384              	.LCFI94:
 1385              		.cfi_def_cfa_offset 4
 1386              		.cfi_offset 7, -4
 1387 0002 83B0     		sub	sp, sp, #12
 1388              	.LCFI95:
 1389              		.cfi_def_cfa_offset 16
 1390 0004 00AF     		add	r7, sp, #0
 1391              	.LCFI96:
 1392              		.cfi_def_cfa_register 7
 1393 0006 7860     		str	r0, [r7, #4]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 39


 778:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 779:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 780:./Library/stm32f4xx_usart.c ****   
 781:./Library/stm32f4xx_usart.c ****   /* Send break characters */
 782:./Library/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1394              		.loc 1 782 15
 1395 0008 7B68     		ldr	r3, [r7, #4]
 1396 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1397 000c 9BB2     		uxth	r3, r3
 1398 000e 43F00103 		orr	r3, r3, #1
 1399 0012 9AB2     		uxth	r2, r3
 1400 0014 7B68     		ldr	r3, [r7, #4]
 1401 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 783:./Library/stm32f4xx_usart.c **** }
 1402              		.loc 1 783 1
 1403 0018 00BF     		nop
 1404 001a 0C37     		adds	r7, r7, #12
 1405              	.LCFI97:
 1406              		.cfi_def_cfa_offset 4
 1407 001c BD46     		mov	sp, r7
 1408              	.LCFI98:
 1409              		.cfi_def_cfa_register 13
 1410              		@ sp needed
 1411 001e 5DF8047B 		ldr	r7, [sp], #4
 1412              	.LCFI99:
 1413              		.cfi_restore 7
 1414              		.cfi_def_cfa_offset 0
 1415 0022 7047     		bx	lr
 1416              		.cfi_endproc
 1417              	.LFE139:
 1419              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1420              		.align	1
 1421              		.global	USART_HalfDuplexCmd
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1426              	USART_HalfDuplexCmd:
 1427              	.LFB140:
 784:./Library/stm32f4xx_usart.c **** 
 785:./Library/stm32f4xx_usart.c **** /**
 786:./Library/stm32f4xx_usart.c ****   * @}
 787:./Library/stm32f4xx_usart.c ****   */
 788:./Library/stm32f4xx_usart.c **** 
 789:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 790:./Library/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 791:./Library/stm32f4xx_usart.c ****  *
 792:./Library/stm32f4xx_usart.c **** @verbatim   
 793:./Library/stm32f4xx_usart.c ****  ===============================================================================
 794:./Library/stm32f4xx_usart.c ****                     ##### Half-duplex mode function #####
 795:./Library/stm32f4xx_usart.c ****  ===============================================================================  
 796:./Library/stm32f4xx_usart.c ****     [..]
 797:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 798:./Library/stm32f4xx_usart.c ****     Half-duplex communication.
 799:./Library/stm32f4xx_usart.c ****     [..]
 800:./Library/stm32f4xx_usart.c ****     The USART can be configured to follow a single-wire half-duplex protocol where 
 801:./Library/stm32f4xx_usart.c ****     the TX and RX lines are internally connected.
 802:./Library/stm32f4xx_usart.c ****     [..]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 40


 803:./Library/stm32f4xx_usart.c ****     USART Half duplex communication is possible through the following procedure:
 804:./Library/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 805:./Library/stm32f4xx_usart.c ****           or Mode receiver and hardware flow control values using the USART_Init()
 806:./Library/stm32f4xx_usart.c ****           function.
 807:./Library/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 808:./Library/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 809:./Library/stm32f4xx_usart.c ****       (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
 810:./Library/stm32f4xx_usart.c **** 
 811:./Library/stm32f4xx_usart.c **** 
 812:./Library/stm32f4xx_usart.c ****     -@- The RX pin is no longer used
 813:./Library/stm32f4xx_usart.c ****     -@- In Half-duplex mode the following bits must be kept cleared:
 814:./Library/stm32f4xx_usart.c ****       (+@) LINEN and CLKEN bits in the USART_CR2 register.
 815:./Library/stm32f4xx_usart.c ****       (+@) SCEN and IREN bits in the USART_CR3 register.
 816:./Library/stm32f4xx_usart.c **** 
 817:./Library/stm32f4xx_usart.c **** @endverbatim
 818:./Library/stm32f4xx_usart.c ****   * @{
 819:./Library/stm32f4xx_usart.c ****   */
 820:./Library/stm32f4xx_usart.c **** 
 821:./Library/stm32f4xx_usart.c **** /**
 822:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 823:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 824:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 825:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 826:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 827:./Library/stm32f4xx_usart.c ****   * @retval None
 828:./Library/stm32f4xx_usart.c ****   */
 829:./Library/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 830:./Library/stm32f4xx_usart.c **** {
 1428              		.loc 1 830 1
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 8
 1431              		@ frame_needed = 1, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
 1433 0000 80B4     		push	{r7}
 1434              	.LCFI100:
 1435              		.cfi_def_cfa_offset 4
 1436              		.cfi_offset 7, -4
 1437 0002 83B0     		sub	sp, sp, #12
 1438              	.LCFI101:
 1439              		.cfi_def_cfa_offset 16
 1440 0004 00AF     		add	r7, sp, #0
 1441              	.LCFI102:
 1442              		.cfi_def_cfa_register 7
 1443 0006 7860     		str	r0, [r7, #4]
 1444 0008 0B46     		mov	r3, r1
 1445 000a FB70     		strb	r3, [r7, #3]
 831:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 832:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 833:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 834:./Library/stm32f4xx_usart.c ****   
 835:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1446              		.loc 1 835 6
 1447 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1448 000e 002B     		cmp	r3, #0
 1449 0010 08D0     		beq	.L55
 836:./Library/stm32f4xx_usart.c ****   {
 837:./Library/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 41


 838:./Library/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1450              		.loc 1 838 17
 1451 0012 7B68     		ldr	r3, [r7, #4]
 1452 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1453 0016 9BB2     		uxth	r3, r3
 1454 0018 43F00803 		orr	r3, r3, #8
 1455 001c 9AB2     		uxth	r2, r3
 1456 001e 7B68     		ldr	r3, [r7, #4]
 1457 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 839:./Library/stm32f4xx_usart.c ****   }
 840:./Library/stm32f4xx_usart.c ****   else
 841:./Library/stm32f4xx_usart.c ****   {
 842:./Library/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 843:./Library/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 844:./Library/stm32f4xx_usart.c ****   }
 845:./Library/stm32f4xx_usart.c **** }
 1458              		.loc 1 845 1
 1459 0022 07E0     		b	.L57
 1460              	.L55:
 843:./Library/stm32f4xx_usart.c ****   }
 1461              		.loc 1 843 17
 1462 0024 7B68     		ldr	r3, [r7, #4]
 1463 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1464 0028 9BB2     		uxth	r3, r3
 1465 002a 23F00803 		bic	r3, r3, #8
 1466 002e 9AB2     		uxth	r2, r3
 1467 0030 7B68     		ldr	r3, [r7, #4]
 1468 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1469              	.L57:
 1470              		.loc 1 845 1
 1471 0034 00BF     		nop
 1472 0036 0C37     		adds	r7, r7, #12
 1473              	.LCFI103:
 1474              		.cfi_def_cfa_offset 4
 1475 0038 BD46     		mov	sp, r7
 1476              	.LCFI104:
 1477              		.cfi_def_cfa_register 13
 1478              		@ sp needed
 1479 003a 5DF8047B 		ldr	r7, [sp], #4
 1480              	.LCFI105:
 1481              		.cfi_restore 7
 1482              		.cfi_def_cfa_offset 0
 1483 003e 7047     		bx	lr
 1484              		.cfi_endproc
 1485              	.LFE140:
 1487              		.section	.text.USART_SetGuardTime,"ax",%progbits
 1488              		.align	1
 1489              		.global	USART_SetGuardTime
 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
 1494              	USART_SetGuardTime:
 1495              	.LFB141:
 846:./Library/stm32f4xx_usart.c **** 
 847:./Library/stm32f4xx_usart.c **** /**
 848:./Library/stm32f4xx_usart.c ****   * @}
 849:./Library/stm32f4xx_usart.c ****   */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 42


 850:./Library/stm32f4xx_usart.c **** 
 851:./Library/stm32f4xx_usart.c **** 
 852:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 853:./Library/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 854:./Library/stm32f4xx_usart.c ****  *
 855:./Library/stm32f4xx_usart.c **** @verbatim   
 856:./Library/stm32f4xx_usart.c ****  ===============================================================================
 857:./Library/stm32f4xx_usart.c ****                               ##### Smartcard mode functions #####
 858:./Library/stm32f4xx_usart.c ****  ===============================================================================  
 859:./Library/stm32f4xx_usart.c ****     [..]
 860:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 861:./Library/stm32f4xx_usart.c ****     Smartcard communication.
 862:./Library/stm32f4xx_usart.c ****     [..]
 863:./Library/stm32f4xx_usart.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 864:./Library/stm32f4xx_usart.c ****     defined in the ISO 7816-3 standard.
 865:./Library/stm32f4xx_usart.c ****     [..]
 866:./Library/stm32f4xx_usart.c ****     The USART can provide a clock to the smartcard through the SCLK output.
 867:./Library/stm32f4xx_usart.c ****     In smartcard mode, SCLK is not associated to the communication but is simply derived 
 868:./Library/stm32f4xx_usart.c ****     from the internal peripheral input clock through a 5-bit prescaler.
 869:./Library/stm32f4xx_usart.c ****     [..]
 870:./Library/stm32f4xx_usart.c ****     Smartcard communication is possible through the following procedure:
 871:./Library/stm32f4xx_usart.c ****       (#) Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 872:./Library/stm32f4xx_usart.c ****       (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 873:./Library/stm32f4xx_usart.c ****       (#) Program the USART clock using the USART_ClockInit() function as following:
 874:./Library/stm32f4xx_usart.c ****         (++) USART Clock enabled
 875:./Library/stm32f4xx_usart.c ****         (++) USART CPOL Low
 876:./Library/stm32f4xx_usart.c ****         (++) USART CPHA on first edge
 877:./Library/stm32f4xx_usart.c ****         (++) USART Last Bit Clock Enabled
 878:./Library/stm32f4xx_usart.c ****       (#) Program the Smartcard interface using the USART_Init() function as following:
 879:./Library/stm32f4xx_usart.c ****         (++) Word Length = 9 Bits
 880:./Library/stm32f4xx_usart.c ****         (++) 1.5 Stop Bit
 881:./Library/stm32f4xx_usart.c ****         (++) Even parity
 882:./Library/stm32f4xx_usart.c ****         (++) BaudRate = 12096 baud
 883:./Library/stm32f4xx_usart.c ****         (++) Hardware flow control disabled (RTS and CTS signals)
 884:./Library/stm32f4xx_usart.c ****         (++) Tx and Rx enabled
 885:./Library/stm32f4xx_usart.c ****       (#) POptionally you can enable the parity error interrupt using the USART_ITConfig()
 886:./Library/stm32f4xx_usart.c ****           function
 887:./Library/stm32f4xx_usart.c ****       (#) PEnable the USART using the USART_Cmd() function.
 888:./Library/stm32f4xx_usart.c ****       (#) PEnable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 889:./Library/stm32f4xx_usart.c ****       (#) PEnable the Smartcard interface using the USART_SmartCardCmd() function.
 890:./Library/stm32f4xx_usart.c **** 
 891:./Library/stm32f4xx_usart.c ****     Please refer to the ISO 7816-3 specification for more details.
 892:./Library/stm32f4xx_usart.c **** 
 893:./Library/stm32f4xx_usart.c ****       -@- It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 894:./Library/stm32f4xx_usart.c ****           to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 895:./Library/stm32f4xx_usart.c ****           between the two configurations.
 896:./Library/stm32f4xx_usart.c ****       -@- In smartcard mode, the following bits must be kept cleared:
 897:./Library/stm32f4xx_usart.c ****         (+@) LINEN bit in the USART_CR2 register.
 898:./Library/stm32f4xx_usart.c ****         (+@) HDSEL and IREN bits in the USART_CR3 register.
 899:./Library/stm32f4xx_usart.c ****       -@- Smartcard mode is available on USART peripherals only (not available on UART4 
 900:./Library/stm32f4xx_usart.c ****           and UART5 peripherals).
 901:./Library/stm32f4xx_usart.c **** 
 902:./Library/stm32f4xx_usart.c **** @endverbatim
 903:./Library/stm32f4xx_usart.c ****   * @{
 904:./Library/stm32f4xx_usart.c ****   */
 905:./Library/stm32f4xx_usart.c **** 
 906:./Library/stm32f4xx_usart.c **** /**
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 43


 907:./Library/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 908:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 909:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 910:./Library/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 911:./Library/stm32f4xx_usart.c ****   * @retval None
 912:./Library/stm32f4xx_usart.c ****   */
 913:./Library/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 914:./Library/stm32f4xx_usart.c **** {    
 1496              		.loc 1 914 1
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 8
 1499              		@ frame_needed = 1, uses_anonymous_args = 0
 1500              		@ link register save eliminated.
 1501 0000 80B4     		push	{r7}
 1502              	.LCFI106:
 1503              		.cfi_def_cfa_offset 4
 1504              		.cfi_offset 7, -4
 1505 0002 83B0     		sub	sp, sp, #12
 1506              	.LCFI107:
 1507              		.cfi_def_cfa_offset 16
 1508 0004 00AF     		add	r7, sp, #0
 1509              	.LCFI108:
 1510              		.cfi_def_cfa_register 7
 1511 0006 7860     		str	r0, [r7, #4]
 1512 0008 0B46     		mov	r3, r1
 1513 000a FB70     		strb	r3, [r7, #3]
 915:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 916:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 917:./Library/stm32f4xx_usart.c ****   
 918:./Library/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 919:./Library/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1514              		.loc 1 919 16
 1515 000c 7B68     		ldr	r3, [r7, #4]
 1516 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1517 0010 9BB2     		uxth	r3, r3
 1518 0012 DBB2     		uxtb	r3, r3
 1519 0014 9AB2     		uxth	r2, r3
 1520 0016 7B68     		ldr	r3, [r7, #4]
 1521 0018 1A83     		strh	r2, [r3, #24]	@ movhi
 920:./Library/stm32f4xx_usart.c ****   /* Set the USART guard time */
 921:./Library/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1522              		.loc 1 921 16
 1523 001a 7B68     		ldr	r3, [r7, #4]
 1524 001c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1525 001e 9AB2     		uxth	r2, r3
 1526              		.loc 1 921 19
 1527 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1528 0022 9BB2     		uxth	r3, r3
 1529 0024 1B02     		lsls	r3, r3, #8
 1530 0026 9BB2     		uxth	r3, r3
 1531              		.loc 1 921 16
 1532 0028 1343     		orrs	r3, r3, r2
 1533 002a 9AB2     		uxth	r2, r3
 1534 002c 7B68     		ldr	r3, [r7, #4]
 1535 002e 1A83     		strh	r2, [r3, #24]	@ movhi
 922:./Library/stm32f4xx_usart.c **** }
 1536              		.loc 1 922 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 44


 1537 0030 00BF     		nop
 1538 0032 0C37     		adds	r7, r7, #12
 1539              	.LCFI109:
 1540              		.cfi_def_cfa_offset 4
 1541 0034 BD46     		mov	sp, r7
 1542              	.LCFI110:
 1543              		.cfi_def_cfa_register 13
 1544              		@ sp needed
 1545 0036 5DF8047B 		ldr	r7, [sp], #4
 1546              	.LCFI111:
 1547              		.cfi_restore 7
 1548              		.cfi_def_cfa_offset 0
 1549 003a 7047     		bx	lr
 1550              		.cfi_endproc
 1551              	.LFE141:
 1553              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1554              		.align	1
 1555              		.global	USART_SmartCardCmd
 1556              		.syntax unified
 1557              		.thumb
 1558              		.thumb_func
 1560              	USART_SmartCardCmd:
 1561              	.LFB142:
 923:./Library/stm32f4xx_usart.c **** 
 924:./Library/stm32f4xx_usart.c **** /**
 925:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 926:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 927:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 928:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 929:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 930:./Library/stm32f4xx_usart.c ****   * @retval None
 931:./Library/stm32f4xx_usart.c ****   */
 932:./Library/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 933:./Library/stm32f4xx_usart.c **** {
 1562              		.loc 1 933 1
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 8
 1565              		@ frame_needed = 1, uses_anonymous_args = 0
 1566              		@ link register save eliminated.
 1567 0000 80B4     		push	{r7}
 1568              	.LCFI112:
 1569              		.cfi_def_cfa_offset 4
 1570              		.cfi_offset 7, -4
 1571 0002 83B0     		sub	sp, sp, #12
 1572              	.LCFI113:
 1573              		.cfi_def_cfa_offset 16
 1574 0004 00AF     		add	r7, sp, #0
 1575              	.LCFI114:
 1576              		.cfi_def_cfa_register 7
 1577 0006 7860     		str	r0, [r7, #4]
 1578 0008 0B46     		mov	r3, r1
 1579 000a FB70     		strb	r3, [r7, #3]
 934:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 935:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 936:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 937:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1580              		.loc 1 937 6
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 45


 1581 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1582 000e 002B     		cmp	r3, #0
 1583 0010 08D0     		beq	.L60
 938:./Library/stm32f4xx_usart.c ****   {
 939:./Library/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 940:./Library/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1584              		.loc 1 940 17
 1585 0012 7B68     		ldr	r3, [r7, #4]
 1586 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1587 0016 9BB2     		uxth	r3, r3
 1588 0018 43F02003 		orr	r3, r3, #32
 1589 001c 9AB2     		uxth	r2, r3
 1590 001e 7B68     		ldr	r3, [r7, #4]
 1591 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 941:./Library/stm32f4xx_usart.c ****   }
 942:./Library/stm32f4xx_usart.c ****   else
 943:./Library/stm32f4xx_usart.c ****   {
 944:./Library/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 945:./Library/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 946:./Library/stm32f4xx_usart.c ****   }
 947:./Library/stm32f4xx_usart.c **** }
 1592              		.loc 1 947 1
 1593 0022 07E0     		b	.L62
 1594              	.L60:
 945:./Library/stm32f4xx_usart.c ****   }
 1595              		.loc 1 945 17
 1596 0024 7B68     		ldr	r3, [r7, #4]
 1597 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1598 0028 9BB2     		uxth	r3, r3
 1599 002a 23F02003 		bic	r3, r3, #32
 1600 002e 9AB2     		uxth	r2, r3
 1601 0030 7B68     		ldr	r3, [r7, #4]
 1602 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1603              	.L62:
 1604              		.loc 1 947 1
 1605 0034 00BF     		nop
 1606 0036 0C37     		adds	r7, r7, #12
 1607              	.LCFI115:
 1608              		.cfi_def_cfa_offset 4
 1609 0038 BD46     		mov	sp, r7
 1610              	.LCFI116:
 1611              		.cfi_def_cfa_register 13
 1612              		@ sp needed
 1613 003a 5DF8047B 		ldr	r7, [sp], #4
 1614              	.LCFI117:
 1615              		.cfi_restore 7
 1616              		.cfi_def_cfa_offset 0
 1617 003e 7047     		bx	lr
 1618              		.cfi_endproc
 1619              	.LFE142:
 1621              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1622              		.align	1
 1623              		.global	USART_SmartCardNACKCmd
 1624              		.syntax unified
 1625              		.thumb
 1626              		.thumb_func
 1628              	USART_SmartCardNACKCmd:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 46


 1629              	.LFB143:
 948:./Library/stm32f4xx_usart.c **** 
 949:./Library/stm32f4xx_usart.c **** /**
 950:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 951:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 952:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
 953:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 954:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 955:./Library/stm32f4xx_usart.c ****   * @retval None
 956:./Library/stm32f4xx_usart.c ****   */
 957:./Library/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 958:./Library/stm32f4xx_usart.c **** {
 1630              		.loc 1 958 1
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 8
 1633              		@ frame_needed = 1, uses_anonymous_args = 0
 1634              		@ link register save eliminated.
 1635 0000 80B4     		push	{r7}
 1636              	.LCFI118:
 1637              		.cfi_def_cfa_offset 4
 1638              		.cfi_offset 7, -4
 1639 0002 83B0     		sub	sp, sp, #12
 1640              	.LCFI119:
 1641              		.cfi_def_cfa_offset 16
 1642 0004 00AF     		add	r7, sp, #0
 1643              	.LCFI120:
 1644              		.cfi_def_cfa_register 7
 1645 0006 7860     		str	r0, [r7, #4]
 1646 0008 0B46     		mov	r3, r1
 1647 000a FB70     		strb	r3, [r7, #3]
 959:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
 960:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 961:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 962:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1648              		.loc 1 962 6
 1649 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1650 000e 002B     		cmp	r3, #0
 1651 0010 08D0     		beq	.L64
 963:./Library/stm32f4xx_usart.c ****   {
 964:./Library/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 965:./Library/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1652              		.loc 1 965 17
 1653 0012 7B68     		ldr	r3, [r7, #4]
 1654 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1655 0016 9BB2     		uxth	r3, r3
 1656 0018 43F01003 		orr	r3, r3, #16
 1657 001c 9AB2     		uxth	r2, r3
 1658 001e 7B68     		ldr	r3, [r7, #4]
 1659 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 966:./Library/stm32f4xx_usart.c ****   }
 967:./Library/stm32f4xx_usart.c ****   else
 968:./Library/stm32f4xx_usart.c ****   {
 969:./Library/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 970:./Library/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 971:./Library/stm32f4xx_usart.c ****   }
 972:./Library/stm32f4xx_usart.c **** }
 1660              		.loc 1 972 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 47


 1661 0022 07E0     		b	.L66
 1662              	.L64:
 970:./Library/stm32f4xx_usart.c ****   }
 1663              		.loc 1 970 17
 1664 0024 7B68     		ldr	r3, [r7, #4]
 1665 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1666 0028 9BB2     		uxth	r3, r3
 1667 002a 23F01003 		bic	r3, r3, #16
 1668 002e 9AB2     		uxth	r2, r3
 1669 0030 7B68     		ldr	r3, [r7, #4]
 1670 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1671              	.L66:
 1672              		.loc 1 972 1
 1673 0034 00BF     		nop
 1674 0036 0C37     		adds	r7, r7, #12
 1675              	.LCFI121:
 1676              		.cfi_def_cfa_offset 4
 1677 0038 BD46     		mov	sp, r7
 1678              	.LCFI122:
 1679              		.cfi_def_cfa_register 13
 1680              		@ sp needed
 1681 003a 5DF8047B 		ldr	r7, [sp], #4
 1682              	.LCFI123:
 1683              		.cfi_restore 7
 1684              		.cfi_def_cfa_offset 0
 1685 003e 7047     		bx	lr
 1686              		.cfi_endproc
 1687              	.LFE143:
 1689              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1690              		.align	1
 1691              		.global	USART_IrDAConfig
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1696              	USART_IrDAConfig:
 1697              	.LFB144:
 973:./Library/stm32f4xx_usart.c **** 
 974:./Library/stm32f4xx_usart.c **** /**
 975:./Library/stm32f4xx_usart.c ****   * @}
 976:./Library/stm32f4xx_usart.c ****   */
 977:./Library/stm32f4xx_usart.c **** 
 978:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 979:./Library/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 980:./Library/stm32f4xx_usart.c ****  *
 981:./Library/stm32f4xx_usart.c **** @verbatim   
 982:./Library/stm32f4xx_usart.c ****  ===============================================================================
 983:./Library/stm32f4xx_usart.c ****                         ##### IrDA mode functions #####
 984:./Library/stm32f4xx_usart.c ****  ===============================================================================  
 985:./Library/stm32f4xx_usart.c ****     [..]
 986:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 987:./Library/stm32f4xx_usart.c ****     IrDA communication.
 988:./Library/stm32f4xx_usart.c ****     [..]
 989:./Library/stm32f4xx_usart.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 990:./Library/stm32f4xx_usart.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 991:./Library/stm32f4xx_usart.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 992:./Library/stm32f4xx_usart.c ****     While receiving data, transmission should be avoided as the data to be transmitted
 993:./Library/stm32f4xx_usart.c ****     could be corrupted.
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 48


 994:./Library/stm32f4xx_usart.c ****     [..]
 995:./Library/stm32f4xx_usart.c ****     IrDA communication is possible through the following procedure:
 996:./Library/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 997:./Library/stm32f4xx_usart.c ****           modes and hardware flow control values using the USART_Init() function.
 998:./Library/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 999:./Library/stm32f4xx_usart.c ****       (#) Configures the IrDA pulse width by configuring the prescaler using  
1000:./Library/stm32f4xx_usart.c ****           the USART_SetPrescaler() function.
1001:./Library/stm32f4xx_usart.c ****       (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
1002:./Library/stm32f4xx_usart.c ****           using the USART_IrDAConfig() function.
1003:./Library/stm32f4xx_usart.c ****       (#) Enable the IrDA using the USART_IrDACmd() function.
1004:./Library/stm32f4xx_usart.c **** 
1005:./Library/stm32f4xx_usart.c ****       -@- A pulse of width less than two and greater than one PSC period(s) may or may
1006:./Library/stm32f4xx_usart.c ****           not be rejected.
1007:./Library/stm32f4xx_usart.c ****       -@- The receiver set up time should be managed by software. The IrDA physical layer
1008:./Library/stm32f4xx_usart.c ****           specification specifies a minimum of 10 ms delay between transmission and 
1009:./Library/stm32f4xx_usart.c ****           reception (IrDA is a half duplex protocol).
1010:./Library/stm32f4xx_usart.c ****       -@- In IrDA mode, the following bits must be kept cleared:
1011:./Library/stm32f4xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1012:./Library/stm32f4xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1013:./Library/stm32f4xx_usart.c **** 
1014:./Library/stm32f4xx_usart.c **** @endverbatim
1015:./Library/stm32f4xx_usart.c ****   * @{
1016:./Library/stm32f4xx_usart.c ****   */
1017:./Library/stm32f4xx_usart.c **** 
1018:./Library/stm32f4xx_usart.c **** /**
1019:./Library/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1020:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1021:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1022:./Library/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1023:./Library/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1024:./Library/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1025:./Library/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1026:./Library/stm32f4xx_usart.c ****   * @retval None
1027:./Library/stm32f4xx_usart.c ****   */
1028:./Library/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1029:./Library/stm32f4xx_usart.c **** {
 1698              		.loc 1 1029 1
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 8
 1701              		@ frame_needed = 1, uses_anonymous_args = 0
 1702              		@ link register save eliminated.
 1703 0000 80B4     		push	{r7}
 1704              	.LCFI124:
 1705              		.cfi_def_cfa_offset 4
 1706              		.cfi_offset 7, -4
 1707 0002 83B0     		sub	sp, sp, #12
 1708              	.LCFI125:
 1709              		.cfi_def_cfa_offset 16
 1710 0004 00AF     		add	r7, sp, #0
 1711              	.LCFI126:
 1712              		.cfi_def_cfa_register 7
 1713 0006 7860     		str	r0, [r7, #4]
 1714 0008 0B46     		mov	r3, r1
 1715 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1030:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1031:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1032:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 49


1033:./Library/stm32f4xx_usart.c ****     
1034:./Library/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1716              		.loc 1 1034 15
 1717 000c 7B68     		ldr	r3, [r7, #4]
 1718 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1719 0010 9BB2     		uxth	r3, r3
 1720 0012 23F00403 		bic	r3, r3, #4
 1721 0016 9AB2     		uxth	r2, r3
 1722 0018 7B68     		ldr	r3, [r7, #4]
 1723 001a 9A82     		strh	r2, [r3, #20]	@ movhi
1035:./Library/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1724              		.loc 1 1035 15
 1725 001c 7B68     		ldr	r3, [r7, #4]
 1726 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1727 0020 9AB2     		uxth	r2, r3
 1728 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1729 0024 1343     		orrs	r3, r3, r2
 1730 0026 9AB2     		uxth	r2, r3
 1731 0028 7B68     		ldr	r3, [r7, #4]
 1732 002a 9A82     		strh	r2, [r3, #20]	@ movhi
1036:./Library/stm32f4xx_usart.c **** }
 1733              		.loc 1 1036 1
 1734 002c 00BF     		nop
 1735 002e 0C37     		adds	r7, r7, #12
 1736              	.LCFI127:
 1737              		.cfi_def_cfa_offset 4
 1738 0030 BD46     		mov	sp, r7
 1739              	.LCFI128:
 1740              		.cfi_def_cfa_register 13
 1741              		@ sp needed
 1742 0032 5DF8047B 		ldr	r7, [sp], #4
 1743              	.LCFI129:
 1744              		.cfi_restore 7
 1745              		.cfi_def_cfa_offset 0
 1746 0036 7047     		bx	lr
 1747              		.cfi_endproc
 1748              	.LFE144:
 1750              		.section	.text.USART_IrDACmd,"ax",%progbits
 1751              		.align	1
 1752              		.global	USART_IrDACmd
 1753              		.syntax unified
 1754              		.thumb
 1755              		.thumb_func
 1757              	USART_IrDACmd:
 1758              	.LFB145:
1037:./Library/stm32f4xx_usart.c **** 
1038:./Library/stm32f4xx_usart.c **** /**
1039:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1040:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1041:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1042:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1043:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1044:./Library/stm32f4xx_usart.c ****   * @retval None
1045:./Library/stm32f4xx_usart.c ****   */
1046:./Library/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1047:./Library/stm32f4xx_usart.c **** {
 1759              		.loc 1 1047 1
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 50


 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 8
 1762              		@ frame_needed = 1, uses_anonymous_args = 0
 1763              		@ link register save eliminated.
 1764 0000 80B4     		push	{r7}
 1765              	.LCFI130:
 1766              		.cfi_def_cfa_offset 4
 1767              		.cfi_offset 7, -4
 1768 0002 83B0     		sub	sp, sp, #12
 1769              	.LCFI131:
 1770              		.cfi_def_cfa_offset 16
 1771 0004 00AF     		add	r7, sp, #0
 1772              	.LCFI132:
 1773              		.cfi_def_cfa_register 7
 1774 0006 7860     		str	r0, [r7, #4]
 1775 0008 0B46     		mov	r3, r1
 1776 000a FB70     		strb	r3, [r7, #3]
1048:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1049:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1050:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1051:./Library/stm32f4xx_usart.c ****     
1052:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1777              		.loc 1 1052 6
 1778 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1779 000e 002B     		cmp	r3, #0
 1780 0010 08D0     		beq	.L69
1053:./Library/stm32f4xx_usart.c ****   {
1054:./Library/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1055:./Library/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1781              		.loc 1 1055 17
 1782 0012 7B68     		ldr	r3, [r7, #4]
 1783 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1784 0016 9BB2     		uxth	r3, r3
 1785 0018 43F00203 		orr	r3, r3, #2
 1786 001c 9AB2     		uxth	r2, r3
 1787 001e 7B68     		ldr	r3, [r7, #4]
 1788 0020 9A82     		strh	r2, [r3, #20]	@ movhi
1056:./Library/stm32f4xx_usart.c ****   }
1057:./Library/stm32f4xx_usart.c ****   else
1058:./Library/stm32f4xx_usart.c ****   {
1059:./Library/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1060:./Library/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
1061:./Library/stm32f4xx_usart.c ****   }
1062:./Library/stm32f4xx_usart.c **** }
 1789              		.loc 1 1062 1
 1790 0022 07E0     		b	.L71
 1791              	.L69:
1060:./Library/stm32f4xx_usart.c ****   }
 1792              		.loc 1 1060 17
 1793 0024 7B68     		ldr	r3, [r7, #4]
 1794 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1795 0028 9BB2     		uxth	r3, r3
 1796 002a 23F00203 		bic	r3, r3, #2
 1797 002e 9AB2     		uxth	r2, r3
 1798 0030 7B68     		ldr	r3, [r7, #4]
 1799 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1800              	.L71:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 51


 1801              		.loc 1 1062 1
 1802 0034 00BF     		nop
 1803 0036 0C37     		adds	r7, r7, #12
 1804              	.LCFI133:
 1805              		.cfi_def_cfa_offset 4
 1806 0038 BD46     		mov	sp, r7
 1807              	.LCFI134:
 1808              		.cfi_def_cfa_register 13
 1809              		@ sp needed
 1810 003a 5DF8047B 		ldr	r7, [sp], #4
 1811              	.LCFI135:
 1812              		.cfi_restore 7
 1813              		.cfi_def_cfa_offset 0
 1814 003e 7047     		bx	lr
 1815              		.cfi_endproc
 1816              	.LFE145:
 1818              		.section	.text.USART_DMACmd,"ax",%progbits
 1819              		.align	1
 1820              		.global	USART_DMACmd
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1825              	USART_DMACmd:
 1826              	.LFB146:
1063:./Library/stm32f4xx_usart.c **** 
1064:./Library/stm32f4xx_usart.c **** /**
1065:./Library/stm32f4xx_usart.c ****   * @}
1066:./Library/stm32f4xx_usart.c ****   */
1067:./Library/stm32f4xx_usart.c **** 
1068:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1069:./Library/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1070:./Library/stm32f4xx_usart.c ****  *
1071:./Library/stm32f4xx_usart.c **** @verbatim   
1072:./Library/stm32f4xx_usart.c ****  ===============================================================================
1073:./Library/stm32f4xx_usart.c ****               ##### DMA transfers management functions #####
1074:./Library/stm32f4xx_usart.c ****  ===============================================================================  
1075:./Library/stm32f4xx_usart.c **** 
1076:./Library/stm32f4xx_usart.c **** @endverbatim
1077:./Library/stm32f4xx_usart.c ****   * @{
1078:./Library/stm32f4xx_usart.c ****   */
1079:./Library/stm32f4xx_usart.c ****   
1080:./Library/stm32f4xx_usart.c **** /**
1081:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1082:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1083:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1084:./Library/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1085:./Library/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1086:./Library/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1087:./Library/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1088:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1089:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1090:./Library/stm32f4xx_usart.c ****   * @retval None
1091:./Library/stm32f4xx_usart.c ****   */
1092:./Library/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1093:./Library/stm32f4xx_usart.c **** {
 1827              		.loc 1 1093 1
 1828              		.cfi_startproc
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 52


 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832 0000 80B4     		push	{r7}
 1833              	.LCFI136:
 1834              		.cfi_def_cfa_offset 4
 1835              		.cfi_offset 7, -4
 1836 0002 83B0     		sub	sp, sp, #12
 1837              	.LCFI137:
 1838              		.cfi_def_cfa_offset 16
 1839 0004 00AF     		add	r7, sp, #0
 1840              	.LCFI138:
 1841              		.cfi_def_cfa_register 7
 1842 0006 7860     		str	r0, [r7, #4]
 1843 0008 0B46     		mov	r3, r1
 1844 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 1845 000c 1346     		mov	r3, r2
 1846 000e 7B70     		strb	r3, [r7, #1]
1094:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1095:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1096:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1097:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1098:./Library/stm32f4xx_usart.c **** 
1099:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1847              		.loc 1 1099 6
 1848 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1849 0012 002B     		cmp	r3, #0
 1850 0014 08D0     		beq	.L73
1100:./Library/stm32f4xx_usart.c ****   {
1101:./Library/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1102:./Library/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1103:./Library/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1851              		.loc 1 1103 17
 1852 0016 7B68     		ldr	r3, [r7, #4]
 1853 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1854 001a 9AB2     		uxth	r2, r3
 1855 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1856 001e 1343     		orrs	r3, r3, r2
 1857 0020 9AB2     		uxth	r2, r3
 1858 0022 7B68     		ldr	r3, [r7, #4]
 1859 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1104:./Library/stm32f4xx_usart.c ****   }
1105:./Library/stm32f4xx_usart.c ****   else
1106:./Library/stm32f4xx_usart.c ****   {
1107:./Library/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1108:./Library/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1109:./Library/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
1110:./Library/stm32f4xx_usart.c ****   }
1111:./Library/stm32f4xx_usart.c **** }
 1860              		.loc 1 1111 1
 1861 0026 09E0     		b	.L75
 1862              	.L73:
1109:./Library/stm32f4xx_usart.c ****   }
 1863              		.loc 1 1109 17
 1864 0028 7B68     		ldr	r3, [r7, #4]
 1865 002a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1866 002c 9AB2     		uxth	r2, r3
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 53


1109:./Library/stm32f4xx_usart.c ****   }
 1867              		.loc 1 1109 20
 1868 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1869 0030 DB43     		mvns	r3, r3
 1870 0032 9BB2     		uxth	r3, r3
1109:./Library/stm32f4xx_usart.c ****   }
 1871              		.loc 1 1109 17
 1872 0034 1340     		ands	r3, r3, r2
 1873 0036 9AB2     		uxth	r2, r3
 1874 0038 7B68     		ldr	r3, [r7, #4]
 1875 003a 9A82     		strh	r2, [r3, #20]	@ movhi
 1876              	.L75:
 1877              		.loc 1 1111 1
 1878 003c 00BF     		nop
 1879 003e 0C37     		adds	r7, r7, #12
 1880              	.LCFI139:
 1881              		.cfi_def_cfa_offset 4
 1882 0040 BD46     		mov	sp, r7
 1883              	.LCFI140:
 1884              		.cfi_def_cfa_register 13
 1885              		@ sp needed
 1886 0042 5DF8047B 		ldr	r7, [sp], #4
 1887              	.LCFI141:
 1888              		.cfi_restore 7
 1889              		.cfi_def_cfa_offset 0
 1890 0046 7047     		bx	lr
 1891              		.cfi_endproc
 1892              	.LFE146:
 1894              		.section	.text.USART_ITConfig,"ax",%progbits
 1895              		.align	1
 1896              		.global	USART_ITConfig
 1897              		.syntax unified
 1898              		.thumb
 1899              		.thumb_func
 1901              	USART_ITConfig:
 1902              	.LFB147:
1112:./Library/stm32f4xx_usart.c **** 
1113:./Library/stm32f4xx_usart.c **** /**
1114:./Library/stm32f4xx_usart.c ****   * @}
1115:./Library/stm32f4xx_usart.c ****   */
1116:./Library/stm32f4xx_usart.c ****   
1117:./Library/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1118:./Library/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1119:./Library/stm32f4xx_usart.c ****  *
1120:./Library/stm32f4xx_usart.c **** @verbatim   
1121:./Library/stm32f4xx_usart.c ****  ===============================================================================
1122:./Library/stm32f4xx_usart.c ****             ##### Interrupts and flags management functions #####
1123:./Library/stm32f4xx_usart.c ****  ===============================================================================  
1124:./Library/stm32f4xx_usart.c ****     [..]
1125:./Library/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to configure the USART 
1126:./Library/stm32f4xx_usart.c ****     Interrupts sources, DMA channels requests and check or clear the flags or 
1127:./Library/stm32f4xx_usart.c ****     pending bits status.
1128:./Library/stm32f4xx_usart.c ****     The user should identify which mode will be used in his application to manage 
1129:./Library/stm32f4xx_usart.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
1130:./Library/stm32f4xx_usart.c ****     
1131:./Library/stm32f4xx_usart.c ****     *** Polling Mode ***
1132:./Library/stm32f4xx_usart.c ****     ====================
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 54


1133:./Library/stm32f4xx_usart.c ****     [..]
1134:./Library/stm32f4xx_usart.c ****     In Polling Mode, the SPI communication can be managed by 10 flags:
1135:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_TXE : to indicate the status of the transmit buffer register
1136:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_RXNE : to indicate the status of the receive buffer register
1137:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_TC : to indicate the status of the transmit operation
1138:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_IDLE : to indicate the status of the Idle Line             
1139:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_CTS : to indicate the status of the nCTS input
1140:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_LBD : to indicate the status of the LIN break detection
1141:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_NE : to indicate if a noise error occur
1142:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_FE : to indicate if a frame error occur
1143:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_PE : to indicate if a parity error occur
1144:./Library/stm32f4xx_usart.c ****       (#) USART_FLAG_ORE : to indicate if an Overrun error occur
1145:./Library/stm32f4xx_usart.c ****     [..]
1146:./Library/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1147:./Library/stm32f4xx_usart.c ****       (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1148:./Library/stm32f4xx_usart.c ****       (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1149:./Library/stm32f4xx_usart.c **** 
1150:./Library/stm32f4xx_usart.c ****     *** Interrupt Mode ***
1151:./Library/stm32f4xx_usart.c ****     ======================
1152:./Library/stm32f4xx_usart.c ****     [..]
1153:./Library/stm32f4xx_usart.c ****     In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1154:./Library/stm32f4xx_usart.c ****     and 10 pending bits: 
1155:./Library/stm32f4xx_usart.c **** 
1156:./Library/stm32f4xx_usart.c ****       (#) Pending Bits:
1157:./Library/stm32f4xx_usart.c **** 
1158:./Library/stm32f4xx_usart.c ****         (##) USART_IT_TXE : to indicate the status of the transmit buffer register
1159:./Library/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : to indicate the status of the receive buffer register
1160:./Library/stm32f4xx_usart.c ****         (##) USART_IT_TC : to indicate the status of the transmit operation
1161:./Library/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : to indicate the status of the Idle Line             
1162:./Library/stm32f4xx_usart.c ****         (##) USART_IT_CTS : to indicate the status of the nCTS input
1163:./Library/stm32f4xx_usart.c ****         (##) USART_IT_LBD : to indicate the status of the LIN break detection
1164:./Library/stm32f4xx_usart.c ****         (##) USART_IT_NE : to indicate if a noise error occur
1165:./Library/stm32f4xx_usart.c ****         (##) USART_IT_FE : to indicate if a frame error occur
1166:./Library/stm32f4xx_usart.c ****         (##) USART_IT_PE : to indicate if a parity error occur
1167:./Library/stm32f4xx_usart.c ****         (##) USART_IT_ORE : to indicate if an Overrun error occur
1168:./Library/stm32f4xx_usart.c **** 
1169:./Library/stm32f4xx_usart.c ****       (#) Interrupt Source:
1170:./Library/stm32f4xx_usart.c **** 
1171:./Library/stm32f4xx_usart.c ****         (##) USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1172:./Library/stm32f4xx_usart.c ****                             interrupt. 
1173:./Library/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1174:./Library/stm32f4xx_usart.c ****                              empty interrupt.
1175:./Library/stm32f4xx_usart.c ****         (##) USART_IT_TC : specifies the interrupt source for the Transmit complete 
1176:./Library/stm32f4xx_usart.c ****                            interrupt. 
1177:./Library/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.           
1178:./Library/stm32f4xx_usart.c ****         (##) USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1179:./Library/stm32f4xx_usart.c ****         (##) USART_IT_LBD : specifies the interrupt source for the LIN break detection
1180:./Library/stm32f4xx_usart.c ****                             interrupt. 
1181:./Library/stm32f4xx_usart.c ****         (##) USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1182:./Library/stm32f4xx_usart.c ****         (##) USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1183:./Library/stm32f4xx_usart.c **** 
1184:./Library/stm32f4xx_usart.c ****       -@@- Some parameters are coded in order to use them as interrupt source 
1185:./Library/stm32f4xx_usart.c ****           or as pending bits.
1186:./Library/stm32f4xx_usart.c ****     [..]
1187:./Library/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1188:./Library/stm32f4xx_usart.c ****       (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1189:./Library/stm32f4xx_usart.c ****       (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 55


1190:./Library/stm32f4xx_usart.c ****       (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1191:./Library/stm32f4xx_usart.c **** 
1192:./Library/stm32f4xx_usart.c ****     *** DMA Mode ***
1193:./Library/stm32f4xx_usart.c ****     ================
1194:./Library/stm32f4xx_usart.c ****     [..]
1195:./Library/stm32f4xx_usart.c ****     In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1196:./Library/stm32f4xx_usart.c ****       (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1197:./Library/stm32f4xx_usart.c ****       (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1198:./Library/stm32f4xx_usart.c ****     [..]
1199:./Library/stm32f4xx_usart.c ****     In this Mode it is advised to use the following function:
1200:./Library/stm32f4xx_usart.c ****       (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1201:./Library/stm32f4xx_usart.c **** 
1202:./Library/stm32f4xx_usart.c **** @endverbatim
1203:./Library/stm32f4xx_usart.c ****   * @{
1204:./Library/stm32f4xx_usart.c ****   */
1205:./Library/stm32f4xx_usart.c **** 
1206:./Library/stm32f4xx_usart.c **** /**
1207:./Library/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1208:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1209:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1210:./Library/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1211:./Library/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1212:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1213:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1214:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1215:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1216:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1217:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1218:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1219:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1220:./Library/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1221:./Library/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1222:./Library/stm32f4xx_usart.c ****   * @retval None
1223:./Library/stm32f4xx_usart.c ****   */
1224:./Library/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1225:./Library/stm32f4xx_usart.c **** {
 1903              		.loc 1 1225 1
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 24
 1906              		@ frame_needed = 1, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 1908 0000 80B4     		push	{r7}
 1909              	.LCFI142:
 1910              		.cfi_def_cfa_offset 4
 1911              		.cfi_offset 7, -4
 1912 0002 87B0     		sub	sp, sp, #28
 1913              	.LCFI143:
 1914              		.cfi_def_cfa_offset 32
 1915 0004 00AF     		add	r7, sp, #0
 1916              	.LCFI144:
 1917              		.cfi_def_cfa_register 7
 1918 0006 7860     		str	r0, [r7, #4]
 1919 0008 0B46     		mov	r3, r1
 1920 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 1921 000c 1346     		mov	r3, r2
 1922 000e 7B70     		strb	r3, [r7, #1]
1226:./Library/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 56


 1923              		.loc 1 1226 12
 1924 0010 0023     		movs	r3, #0
 1925 0012 3B61     		str	r3, [r7, #16]
 1926              		.loc 1 1226 29
 1927 0014 0023     		movs	r3, #0
 1928 0016 FB60     		str	r3, [r7, #12]
 1929              		.loc 1 1226 43
 1930 0018 0023     		movs	r3, #0
 1931 001a BB60     		str	r3, [r7, #8]
1227:./Library/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1932              		.loc 1 1227 12
 1933 001c 0023     		movs	r3, #0
 1934 001e 7B61     		str	r3, [r7, #20]
1228:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1229:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1230:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1231:./Library/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1232:./Library/stm32f4xx_usart.c **** 
1233:./Library/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1234:./Library/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1235:./Library/stm32f4xx_usart.c ****   {
1236:./Library/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1237:./Library/stm32f4xx_usart.c ****   } 
1238:./Library/stm32f4xx_usart.c ****     
1239:./Library/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1935              		.loc 1 1239 14
 1936 0020 7B68     		ldr	r3, [r7, #4]
 1937 0022 7B61     		str	r3, [r7, #20]
1240:./Library/stm32f4xx_usart.c **** 
1241:./Library/stm32f4xx_usart.c ****   /* Get the USART register index */
1242:./Library/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1938              		.loc 1 1242 16
 1939 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1940 0026 DBB2     		uxtb	r3, r3
 1941              		.loc 1 1242 35
 1942 0028 5B09     		lsrs	r3, r3, #5
 1943 002a DBB2     		uxtb	r3, r3
 1944              		.loc 1 1242 12
 1945 002c 3B61     		str	r3, [r7, #16]
1243:./Library/stm32f4xx_usart.c **** 
1244:./Library/stm32f4xx_usart.c ****   /* Get the interrupt position */
1245:./Library/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1946              		.loc 1 1245 20
 1947 002e 7B88     		ldrh	r3, [r7, #2]
 1948              		.loc 1 1245 9
 1949 0030 03F01F03 		and	r3, r3, #31
 1950 0034 FB60     		str	r3, [r7, #12]
1246:./Library/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1951              		.loc 1 1246 10
 1952 0036 0122     		movs	r2, #1
 1953 0038 FB68     		ldr	r3, [r7, #12]
 1954 003a 02FA03F3 		lsl	r3, r2, r3
 1955 003e BB60     		str	r3, [r7, #8]
1247:./Library/stm32f4xx_usart.c ****     
1248:./Library/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1956              		.loc 1 1248 6
 1957 0040 3B69     		ldr	r3, [r7, #16]
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 57


 1958 0042 012B     		cmp	r3, #1
 1959 0044 03D1     		bne	.L77
1249:./Library/stm32f4xx_usart.c ****   {
1250:./Library/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1960              		.loc 1 1250 16
 1961 0046 7B69     		ldr	r3, [r7, #20]
 1962 0048 0C33     		adds	r3, r3, #12
 1963 004a 7B61     		str	r3, [r7, #20]
 1964 004c 09E0     		b	.L78
 1965              	.L77:
1251:./Library/stm32f4xx_usart.c ****   }
1252:./Library/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1966              		.loc 1 1252 11
 1967 004e 3B69     		ldr	r3, [r7, #16]
 1968 0050 022B     		cmp	r3, #2
 1969 0052 03D1     		bne	.L79
1253:./Library/stm32f4xx_usart.c ****   {
1254:./Library/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1970              		.loc 1 1254 16
 1971 0054 7B69     		ldr	r3, [r7, #20]
 1972 0056 1033     		adds	r3, r3, #16
 1973 0058 7B61     		str	r3, [r7, #20]
 1974 005a 02E0     		b	.L78
 1975              	.L79:
1255:./Library/stm32f4xx_usart.c ****   }
1256:./Library/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1257:./Library/stm32f4xx_usart.c ****   {
1258:./Library/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1976              		.loc 1 1258 16
 1977 005c 7B69     		ldr	r3, [r7, #20]
 1978 005e 1433     		adds	r3, r3, #20
 1979 0060 7B61     		str	r3, [r7, #20]
 1980              	.L78:
1259:./Library/stm32f4xx_usart.c ****   }
1260:./Library/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1981              		.loc 1 1260 6
 1982 0062 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1983 0064 002B     		cmp	r3, #0
 1984 0066 06D0     		beq	.L80
1261:./Library/stm32f4xx_usart.c ****   {
1262:./Library/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1985              		.loc 1 1262 34
 1986 0068 7B69     		ldr	r3, [r7, #20]
 1987 006a 1968     		ldr	r1, [r3]
 1988 006c 7B69     		ldr	r3, [r7, #20]
 1989 006e BA68     		ldr	r2, [r7, #8]
 1990 0070 0A43     		orrs	r2, r2, r1
 1991 0072 1A60     		str	r2, [r3]
1263:./Library/stm32f4xx_usart.c ****   }
1264:./Library/stm32f4xx_usart.c ****   else
1265:./Library/stm32f4xx_usart.c ****   {
1266:./Library/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
1267:./Library/stm32f4xx_usart.c ****   }
1268:./Library/stm32f4xx_usart.c **** }
 1992              		.loc 1 1268 1
 1993 0074 06E0     		b	.L82
 1994              	.L80:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 58


1266:./Library/stm32f4xx_usart.c ****   }
 1995              		.loc 1 1266 33
 1996 0076 7B69     		ldr	r3, [r7, #20]
 1997 0078 1968     		ldr	r1, [r3]
1266:./Library/stm32f4xx_usart.c ****   }
 1998              		.loc 1 1266 36
 1999 007a BB68     		ldr	r3, [r7, #8]
 2000 007c DA43     		mvns	r2, r3
1266:./Library/stm32f4xx_usart.c ****   }
 2001              		.loc 1 1266 33
 2002 007e 7B69     		ldr	r3, [r7, #20]
 2003 0080 0A40     		ands	r2, r2, r1
 2004 0082 1A60     		str	r2, [r3]
 2005              	.L82:
 2006              		.loc 1 1268 1
 2007 0084 00BF     		nop
 2008 0086 1C37     		adds	r7, r7, #28
 2009              	.LCFI145:
 2010              		.cfi_def_cfa_offset 4
 2011 0088 BD46     		mov	sp, r7
 2012              	.LCFI146:
 2013              		.cfi_def_cfa_register 13
 2014              		@ sp needed
 2015 008a 5DF8047B 		ldr	r7, [sp], #4
 2016              	.LCFI147:
 2017              		.cfi_restore 7
 2018              		.cfi_def_cfa_offset 0
 2019 008e 7047     		bx	lr
 2020              		.cfi_endproc
 2021              	.LFE147:
 2023              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 2024              		.align	1
 2025              		.global	USART_GetFlagStatus
 2026              		.syntax unified
 2027              		.thumb
 2028              		.thumb_func
 2030              	USART_GetFlagStatus:
 2031              	.LFB148:
1269:./Library/stm32f4xx_usart.c **** 
1270:./Library/stm32f4xx_usart.c **** /**
1271:./Library/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1272:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1273:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1274:./Library/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1275:./Library/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1276:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1277:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1278:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1279:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1280:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1281:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1282:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1283:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1284:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1285:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1286:./Library/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1287:./Library/stm32f4xx_usart.c ****   */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 59


1288:./Library/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1289:./Library/stm32f4xx_usart.c **** {
 2032              		.loc 1 1289 1
 2033              		.cfi_startproc
 2034              		@ args = 0, pretend = 0, frame = 16
 2035              		@ frame_needed = 1, uses_anonymous_args = 0
 2036              		@ link register save eliminated.
 2037 0000 80B4     		push	{r7}
 2038              	.LCFI148:
 2039              		.cfi_def_cfa_offset 4
 2040              		.cfi_offset 7, -4
 2041 0002 85B0     		sub	sp, sp, #20
 2042              	.LCFI149:
 2043              		.cfi_def_cfa_offset 24
 2044 0004 00AF     		add	r7, sp, #0
 2045              	.LCFI150:
 2046              		.cfi_def_cfa_register 7
 2047 0006 7860     		str	r0, [r7, #4]
 2048 0008 0B46     		mov	r3, r1
 2049 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1290:./Library/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 2050              		.loc 1 1290 14
 2051 000c 0023     		movs	r3, #0
 2052 000e FB73     		strb	r3, [r7, #15]
1291:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1292:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1293:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1294:./Library/stm32f4xx_usart.c **** 
1295:./Library/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1296:./Library/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1297:./Library/stm32f4xx_usart.c ****   {
1298:./Library/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1299:./Library/stm32f4xx_usart.c ****   } 
1300:./Library/stm32f4xx_usart.c ****     
1301:./Library/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 2053              		.loc 1 1301 14
 2054 0010 7B68     		ldr	r3, [r7, #4]
 2055 0012 1B88     		ldrh	r3, [r3]	@ movhi
 2056 0014 9AB2     		uxth	r2, r3
 2057              		.loc 1 1301 33
 2058 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2059 0018 1340     		ands	r3, r3, r2
 2060 001a 9BB2     		uxth	r3, r3
 2061              		.loc 1 1301 6
 2062 001c 002B     		cmp	r3, #0
 2063 001e 02D0     		beq	.L84
1302:./Library/stm32f4xx_usart.c ****   {
1303:./Library/stm32f4xx_usart.c ****     bitstatus = SET;
 2064              		.loc 1 1303 15
 2065 0020 0123     		movs	r3, #1
 2066 0022 FB73     		strb	r3, [r7, #15]
 2067 0024 01E0     		b	.L85
 2068              	.L84:
1304:./Library/stm32f4xx_usart.c ****   }
1305:./Library/stm32f4xx_usart.c ****   else
1306:./Library/stm32f4xx_usart.c ****   {
1307:./Library/stm32f4xx_usart.c ****     bitstatus = RESET;
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 60


 2069              		.loc 1 1307 15
 2070 0026 0023     		movs	r3, #0
 2071 0028 FB73     		strb	r3, [r7, #15]
 2072              	.L85:
1308:./Library/stm32f4xx_usart.c ****   }
1309:./Library/stm32f4xx_usart.c ****   return bitstatus;
 2073              		.loc 1 1309 10
 2074 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1310:./Library/stm32f4xx_usart.c **** }
 2075              		.loc 1 1310 1
 2076 002c 1846     		mov	r0, r3
 2077 002e 1437     		adds	r7, r7, #20
 2078              	.LCFI151:
 2079              		.cfi_def_cfa_offset 4
 2080 0030 BD46     		mov	sp, r7
 2081              	.LCFI152:
 2082              		.cfi_def_cfa_register 13
 2083              		@ sp needed
 2084 0032 5DF8047B 		ldr	r7, [sp], #4
 2085              	.LCFI153:
 2086              		.cfi_restore 7
 2087              		.cfi_def_cfa_offset 0
 2088 0036 7047     		bx	lr
 2089              		.cfi_endproc
 2090              	.LFE148:
 2092              		.section	.text.USART_ClearFlag,"ax",%progbits
 2093              		.align	1
 2094              		.global	USART_ClearFlag
 2095              		.syntax unified
 2096              		.thumb
 2097              		.thumb_func
 2099              	USART_ClearFlag:
 2100              	.LFB149:
1311:./Library/stm32f4xx_usart.c **** 
1312:./Library/stm32f4xx_usart.c **** /**
1313:./Library/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1314:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1315:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1316:./Library/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1317:./Library/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1318:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1319:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1320:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1321:./Library/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1322:./Library/stm32f4xx_usart.c ****   *   
1323:./Library/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1324:./Library/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1325:./Library/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1326:./Library/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1327:./Library/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1328:./Library/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1329:./Library/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1330:./Library/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1331:./Library/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1332:./Library/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1333:./Library/stm32f4xx_usart.c ****   *          (USART_SendData()).
1334:./Library/stm32f4xx_usart.c ****   *   
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 61


1335:./Library/stm32f4xx_usart.c ****   * @retval None
1336:./Library/stm32f4xx_usart.c ****   */
1337:./Library/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1338:./Library/stm32f4xx_usart.c **** {
 2101              		.loc 1 1338 1
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 8
 2104              		@ frame_needed = 1, uses_anonymous_args = 0
 2105              		@ link register save eliminated.
 2106 0000 80B4     		push	{r7}
 2107              	.LCFI154:
 2108              		.cfi_def_cfa_offset 4
 2109              		.cfi_offset 7, -4
 2110 0002 83B0     		sub	sp, sp, #12
 2111              	.LCFI155:
 2112              		.cfi_def_cfa_offset 16
 2113 0004 00AF     		add	r7, sp, #0
 2114              	.LCFI156:
 2115              		.cfi_def_cfa_register 7
 2116 0006 7860     		str	r0, [r7, #4]
 2117 0008 0B46     		mov	r3, r1
 2118 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1339:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1340:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1341:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1342:./Library/stm32f4xx_usart.c **** 
1343:./Library/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1344:./Library/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1345:./Library/stm32f4xx_usart.c ****   {
1346:./Library/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1347:./Library/stm32f4xx_usart.c ****   } 
1348:./Library/stm32f4xx_usart.c ****        
1349:./Library/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 2119              		.loc 1 1349 16
 2120 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2121 000e DB43     		mvns	r3, r3
 2122 0010 9AB2     		uxth	r2, r3
 2123              		.loc 1 1349 14
 2124 0012 7B68     		ldr	r3, [r7, #4]
 2125 0014 1A80     		strh	r2, [r3]	@ movhi
1350:./Library/stm32f4xx_usart.c **** }
 2126              		.loc 1 1350 1
 2127 0016 00BF     		nop
 2128 0018 0C37     		adds	r7, r7, #12
 2129              	.LCFI157:
 2130              		.cfi_def_cfa_offset 4
 2131 001a BD46     		mov	sp, r7
 2132              	.LCFI158:
 2133              		.cfi_def_cfa_register 13
 2134              		@ sp needed
 2135 001c 5DF8047B 		ldr	r7, [sp], #4
 2136              	.LCFI159:
 2137              		.cfi_restore 7
 2138              		.cfi_def_cfa_offset 0
 2139 0020 7047     		bx	lr
 2140              		.cfi_endproc
 2141              	.LFE149:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 62


 2143              		.section	.text.USART_GetITStatus,"ax",%progbits
 2144              		.align	1
 2145              		.global	USART_GetITStatus
 2146              		.syntax unified
 2147              		.thumb
 2148              		.thumb_func
 2150              	USART_GetITStatus:
 2151              	.LFB150:
1351:./Library/stm32f4xx_usart.c **** 
1352:./Library/stm32f4xx_usart.c **** /**
1353:./Library/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1354:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1355:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1356:./Library/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1357:./Library/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1358:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1359:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1360:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1361:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1362:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1363:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1364:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1365:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1366:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1367:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1368:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1369:./Library/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1370:./Library/stm32f4xx_usart.c ****   */
1371:./Library/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1372:./Library/stm32f4xx_usart.c **** {
 2152              		.loc 1 1372 1
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 24
 2155              		@ frame_needed = 1, uses_anonymous_args = 0
 2156              		@ link register save eliminated.
 2157 0000 80B4     		push	{r7}
 2158              	.LCFI160:
 2159              		.cfi_def_cfa_offset 4
 2160              		.cfi_offset 7, -4
 2161 0002 87B0     		sub	sp, sp, #28
 2162              	.LCFI161:
 2163              		.cfi_def_cfa_offset 32
 2164 0004 00AF     		add	r7, sp, #0
 2165              	.LCFI162:
 2166              		.cfi_def_cfa_register 7
 2167 0006 7860     		str	r0, [r7, #4]
 2168 0008 0B46     		mov	r3, r1
 2169 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1373:./Library/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 2170              		.loc 1 1373 12
 2171 000c 0023     		movs	r3, #0
 2172 000e FB60     		str	r3, [r7, #12]
 2173              		.loc 1 1373 27
 2174 0010 0023     		movs	r3, #0
 2175 0012 7B61     		str	r3, [r7, #20]
 2176              		.loc 1 1373 42
 2177 0014 0023     		movs	r3, #0
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 63


 2178 0016 BB60     		str	r3, [r7, #8]
1374:./Library/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 2179              		.loc 1 1374 12
 2180 0018 0023     		movs	r3, #0
 2181 001a FB74     		strb	r3, [r7, #19]
1375:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1376:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1377:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1378:./Library/stm32f4xx_usart.c **** 
1379:./Library/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1380:./Library/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1381:./Library/stm32f4xx_usart.c ****   {
1382:./Library/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1383:./Library/stm32f4xx_usart.c ****   } 
1384:./Library/stm32f4xx_usart.c ****     
1385:./Library/stm32f4xx_usart.c ****   /* Get the USART register index */
1386:./Library/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 2182              		.loc 1 1386 16
 2183 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2184 001e DBB2     		uxtb	r3, r3
 2185              		.loc 1 1386 35
 2186 0020 5B09     		lsrs	r3, r3, #5
 2187 0022 DBB2     		uxtb	r3, r3
 2188              		.loc 1 1386 12
 2189 0024 BB60     		str	r3, [r7, #8]
1387:./Library/stm32f4xx_usart.c ****   /* Get the interrupt position */
1388:./Library/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 2190              		.loc 1 1388 21
 2191 0026 7B88     		ldrh	r3, [r7, #2]
 2192              		.loc 1 1388 10
 2193 0028 03F01F03 		and	r3, r3, #31
 2194 002c 7B61     		str	r3, [r7, #20]
1389:./Library/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 2195              		.loc 1 1389 10
 2196 002e 0122     		movs	r2, #1
 2197 0030 7B69     		ldr	r3, [r7, #20]
 2198 0032 02FA03F3 		lsl	r3, r2, r3
 2199 0036 7B61     		str	r3, [r7, #20]
1390:./Library/stm32f4xx_usart.c ****   
1391:./Library/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 2200              		.loc 1 1391 6
 2201 0038 BB68     		ldr	r3, [r7, #8]
 2202 003a 012B     		cmp	r3, #1
 2203 003c 07D1     		bne	.L89
1392:./Library/stm32f4xx_usart.c ****   {
1393:./Library/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 2204              		.loc 1 1393 21
 2205 003e 7B68     		ldr	r3, [r7, #4]
 2206 0040 9B89     		ldrh	r3, [r3, #12]	@ movhi
 2207 0042 9BB2     		uxth	r3, r3
 2208 0044 1A46     		mov	r2, r3
 2209              		.loc 1 1393 12
 2210 0046 7B69     		ldr	r3, [r7, #20]
 2211 0048 1340     		ands	r3, r3, r2
 2212 004a 7B61     		str	r3, [r7, #20]
 2213 004c 11E0     		b	.L90
 2214              	.L89:
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 64


1394:./Library/stm32f4xx_usart.c ****   }
1395:./Library/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 2215              		.loc 1 1395 11
 2216 004e BB68     		ldr	r3, [r7, #8]
 2217 0050 022B     		cmp	r3, #2
 2218 0052 07D1     		bne	.L91
1396:./Library/stm32f4xx_usart.c ****   {
1397:./Library/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 2219              		.loc 1 1397 21
 2220 0054 7B68     		ldr	r3, [r7, #4]
 2221 0056 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 2222 0058 9BB2     		uxth	r3, r3
 2223 005a 1A46     		mov	r2, r3
 2224              		.loc 1 1397 12
 2225 005c 7B69     		ldr	r3, [r7, #20]
 2226 005e 1340     		ands	r3, r3, r2
 2227 0060 7B61     		str	r3, [r7, #20]
 2228 0062 06E0     		b	.L90
 2229              	.L91:
1398:./Library/stm32f4xx_usart.c ****   }
1399:./Library/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1400:./Library/stm32f4xx_usart.c ****   {
1401:./Library/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 2230              		.loc 1 1401 21
 2231 0064 7B68     		ldr	r3, [r7, #4]
 2232 0066 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2233 0068 9BB2     		uxth	r3, r3
 2234 006a 1A46     		mov	r2, r3
 2235              		.loc 1 1401 12
 2236 006c 7B69     		ldr	r3, [r7, #20]
 2237 006e 1340     		ands	r3, r3, r2
 2238 0070 7B61     		str	r3, [r7, #20]
 2239              	.L90:
1402:./Library/stm32f4xx_usart.c ****   }
1403:./Library/stm32f4xx_usart.c ****   
1404:./Library/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 2240              		.loc 1 1404 21
 2241 0072 7B88     		ldrh	r3, [r7, #2]
 2242 0074 1B0A     		lsrs	r3, r3, #8
 2243 0076 9BB2     		uxth	r3, r3
 2244              		.loc 1 1404 10
 2245 0078 FB60     		str	r3, [r7, #12]
1405:./Library/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 2246              		.loc 1 1405 10
 2247 007a 0122     		movs	r2, #1
 2248 007c FB68     		ldr	r3, [r7, #12]
 2249 007e 02FA03F3 		lsl	r3, r2, r3
 2250 0082 FB60     		str	r3, [r7, #12]
1406:./Library/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 2251              		.loc 1 1406 19
 2252 0084 7B68     		ldr	r3, [r7, #4]
 2253 0086 1B88     		ldrh	r3, [r3]	@ movhi
 2254 0088 9BB2     		uxth	r3, r3
 2255 008a 1A46     		mov	r2, r3
 2256              		.loc 1 1406 10
 2257 008c FB68     		ldr	r3, [r7, #12]
 2258 008e 1340     		ands	r3, r3, r2
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 65


 2259 0090 FB60     		str	r3, [r7, #12]
1407:./Library/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 2260              		.loc 1 1407 6
 2261 0092 7B69     		ldr	r3, [r7, #20]
 2262 0094 002B     		cmp	r3, #0
 2263 0096 05D0     		beq	.L92
 2264              		.loc 1 1407 34 discriminator 1
 2265 0098 FB68     		ldr	r3, [r7, #12]
 2266 009a 002B     		cmp	r3, #0
 2267 009c 02D0     		beq	.L92
1408:./Library/stm32f4xx_usart.c ****   {
1409:./Library/stm32f4xx_usart.c ****     bitstatus = SET;
 2268              		.loc 1 1409 15
 2269 009e 0123     		movs	r3, #1
 2270 00a0 FB74     		strb	r3, [r7, #19]
 2271 00a2 01E0     		b	.L93
 2272              	.L92:
1410:./Library/stm32f4xx_usart.c ****   }
1411:./Library/stm32f4xx_usart.c ****   else
1412:./Library/stm32f4xx_usart.c ****   {
1413:./Library/stm32f4xx_usart.c ****     bitstatus = RESET;
 2273              		.loc 1 1413 15
 2274 00a4 0023     		movs	r3, #0
 2275 00a6 FB74     		strb	r3, [r7, #19]
 2276              	.L93:
1414:./Library/stm32f4xx_usart.c ****   }
1415:./Library/stm32f4xx_usart.c ****   
1416:./Library/stm32f4xx_usart.c ****   return bitstatus;  
 2277              		.loc 1 1416 10
 2278 00a8 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1417:./Library/stm32f4xx_usart.c **** }
 2279              		.loc 1 1417 1
 2280 00aa 1846     		mov	r0, r3
 2281 00ac 1C37     		adds	r7, r7, #28
 2282              	.LCFI163:
 2283              		.cfi_def_cfa_offset 4
 2284 00ae BD46     		mov	sp, r7
 2285              	.LCFI164:
 2286              		.cfi_def_cfa_register 13
 2287              		@ sp needed
 2288 00b0 5DF8047B 		ldr	r7, [sp], #4
 2289              	.LCFI165:
 2290              		.cfi_restore 7
 2291              		.cfi_def_cfa_offset 0
 2292 00b4 7047     		bx	lr
 2293              		.cfi_endproc
 2294              	.LFE150:
 2296              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 2297              		.align	1
 2298              		.global	USART_ClearITPendingBit
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2303              	USART_ClearITPendingBit:
 2304              	.LFB151:
1418:./Library/stm32f4xx_usart.c **** 
1419:./Library/stm32f4xx_usart.c **** /**
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 66


1420:./Library/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1421:./Library/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1422:./Library/stm32f4xx_usart.c ****   *         UART peripheral.
1423:./Library/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1424:./Library/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1425:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1426:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1427:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1428:./Library/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1429:./Library/stm32f4xx_usart.c ****   *
1430:./Library/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1431:./Library/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1432:./Library/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1433:./Library/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1434:./Library/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1435:./Library/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1436:./Library/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1437:./Library/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1438:./Library/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1439:./Library/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1440:./Library/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1441:./Library/stm32f4xx_usart.c ****   *          (USART_SendData()).
1442:./Library/stm32f4xx_usart.c ****   *  
1443:./Library/stm32f4xx_usart.c ****   * @retval None
1444:./Library/stm32f4xx_usart.c ****   */
1445:./Library/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1446:./Library/stm32f4xx_usart.c **** {
 2305              		.loc 1 1446 1
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 16
 2308              		@ frame_needed = 1, uses_anonymous_args = 0
 2309              		@ link register save eliminated.
 2310 0000 80B4     		push	{r7}
 2311              	.LCFI166:
 2312              		.cfi_def_cfa_offset 4
 2313              		.cfi_offset 7, -4
 2314 0002 85B0     		sub	sp, sp, #20
 2315              	.LCFI167:
 2316              		.cfi_def_cfa_offset 24
 2317 0004 00AF     		add	r7, sp, #0
 2318              	.LCFI168:
 2319              		.cfi_def_cfa_register 7
 2320 0006 7860     		str	r0, [r7, #4]
 2321 0008 0B46     		mov	r3, r1
 2322 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1447:./Library/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 2323              		.loc 1 1447 12
 2324 000c 0023     		movs	r3, #0
 2325 000e FB81     		strh	r3, [r7, #14]	@ movhi
 2326              		.loc 1 1447 27
 2327 0010 0023     		movs	r3, #0
 2328 0012 BB81     		strh	r3, [r7, #12]	@ movhi
1448:./Library/stm32f4xx_usart.c ****   /* Check the parameters */
1449:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1450:./Library/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1451:./Library/stm32f4xx_usart.c **** 
1452:./Library/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 67


1453:./Library/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1454:./Library/stm32f4xx_usart.c ****   {
1455:./Library/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1456:./Library/stm32f4xx_usart.c ****   } 
1457:./Library/stm32f4xx_usart.c ****     
1458:./Library/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 2329              		.loc 1 1458 10
 2330 0014 7B88     		ldrh	r3, [r7, #2]
 2331 0016 1B0A     		lsrs	r3, r3, #8
 2332 0018 FB81     		strh	r3, [r7, #14]	@ movhi
1459:./Library/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 2333              		.loc 1 1459 31
 2334 001a FB89     		ldrh	r3, [r7, #14]
 2335              		.loc 1 1459 28
 2336 001c 0122     		movs	r2, #1
 2337 001e 02FA03F3 		lsl	r3, r2, r3
 2338              		.loc 1 1459 10
 2339 0022 BB81     		strh	r3, [r7, #12]	@ movhi
1460:./Library/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 2340              		.loc 1 1460 16
 2341 0024 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2342 0026 DB43     		mvns	r3, r3
 2343 0028 9AB2     		uxth	r2, r3
 2344              		.loc 1 1460 14
 2345 002a 7B68     		ldr	r3, [r7, #4]
 2346 002c 1A80     		strh	r2, [r3]	@ movhi
1461:./Library/stm32f4xx_usart.c **** }
 2347              		.loc 1 1461 1
 2348 002e 00BF     		nop
 2349 0030 1437     		adds	r7, r7, #20
 2350              	.LCFI169:
 2351              		.cfi_def_cfa_offset 4
 2352 0032 BD46     		mov	sp, r7
 2353              	.LCFI170:
 2354              		.cfi_def_cfa_register 13
 2355              		@ sp needed
 2356 0034 5DF8047B 		ldr	r7, [sp], #4
 2357              	.LCFI171:
 2358              		.cfi_restore 7
 2359              		.cfi_def_cfa_offset 0
 2360 0038 7047     		bx	lr
 2361              		.cfi_endproc
 2362              	.LFE151:
 2364              		.text
 2365              	.Letext0:
 2366              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 2367              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 2368              		.file 4 "./CORE/stm32f4xx.h"
 2369              		.file 5 "./Library/stm32f4xx_rcc.h"
 2370              		.file 6 "./Library/stm32f4xx_usart.h"
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 68


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_usart.c
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:20     .text.USART_DeInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:26     .text.USART_DeInit:0000000000000000 USART_DeInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:184    .text.USART_DeInit:00000000000000f8 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:196    .text.USART_Init:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:202    .text.USART_Init:0000000000000000 USART_Init
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:464    .text.USART_Init:0000000000000168 $d
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:471    .text.USART_StructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:477    .text.USART_StructInit:0000000000000000 USART_StructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:537    .text.USART_ClockInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:543    .text.USART_ClockInit:0000000000000000 USART_ClockInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:625    .text.USART_ClockStructInit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:631    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:683    .text.USART_Cmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:689    .text.USART_Cmd:0000000000000000 USART_Cmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:751    .text.USART_SetPrescaler:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:757    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:813    .text.USART_OverSampling8Cmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:819    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:882    .text.USART_OneBitMethodCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:888    .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:950    .text.USART_SendData:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:956    .text.USART_SendData:0000000000000000 USART_SendData
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1001   .text.USART_ReceiveData:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1007   .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1050   .text.USART_SetAddress:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1056   .text.USART_SetAddress:0000000000000000 USART_SetAddress
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1112   .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1118   .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1180   .text.USART_WakeUpConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1186   .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1241   .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1247   .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1302   .text.USART_LINCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1308   .text.USART_LINCmd:0000000000000000 USART_LINCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1370   .text.USART_SendBreak:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1376   .text.USART_SendBreak:0000000000000000 USART_SendBreak
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1420   .text.USART_HalfDuplexCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1426   .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1488   .text.USART_SetGuardTime:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1494   .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1554   .text.USART_SmartCardCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1560   .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1622   .text.USART_SmartCardNACKCmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1628   .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1690   .text.USART_IrDAConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1696   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1751   .text.USART_IrDACmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1757   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1819   .text.USART_DMACmd:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1825   .text.USART_DMACmd:0000000000000000 USART_DMACmd
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1895   .text.USART_ITConfig:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:1901   .text.USART_ITConfig:0000000000000000 USART_ITConfig
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2024   .text.USART_GetFlagStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2030   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2093   .text.USART_ClearFlag:0000000000000000 $t
ARM GAS  /var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s 			page 69


/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2099   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2144   .text.USART_GetITStatus:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2150   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2297   .text.USART_ClearITPendingBit:0000000000000000 $t
/var/folders/yl/_q9l42k90g1g4mdhbs226msm0000gn/T//ccnYDnZc.s:2303   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
